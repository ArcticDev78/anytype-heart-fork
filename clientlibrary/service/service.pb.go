// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/protos/service/service.proto

package service

import (
	fmt "fmt"
	pb "github.com/anytypeio/go-anytype-middleware/pb"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/protos/service/service.proto", fileDescriptor_93a29dc403579097) }

var fileDescriptor_93a29dc403579097 = []byte{
	// 3263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x9c, 0x5b, 0x6f, 0x1c, 0x49,
	0xf5, 0xc0, 0x77, 0x5e, 0xfe, 0xfb, 0xa7, 0xf7, 0x02, 0x34, 0xb0, 0x2c, 0x61, 0xd7, 0xc9, 0x66,
	0x13, 0x5f, 0xe2, 0x78, 0xec, 0x24, 0xb0, 0x88, 0x8b, 0x58, 0x8d, 0xed, 0xd8, 0xb1, 0x36, 0x4e,
	0x8c, 0xc7, 0xd9, 0x48, 0x2b, 0x21, 0xd1, 0xee, 0xa9, 0xcc, 0x34, 0xee, 0xe9, 0x6a, 0xba, 0x6b,
	0xc6, 0x1e, 0x10, 0x48, 0x88, 0x15, 0x08, 0x84, 0xc4, 0x4a, 0x3c, 0xf2, 0xc4, 0x2b, 0x9f, 0x84,
	0xc7, 0x7d, 0xe4, 0x11, 0xed, 0x7e, 0x11, 0xd4, 0xdd, 0xa7, 0xaa, 0xba, 0x4e, 0xd7, 0xa9, 0xee,
	0xc9, 0x13, 0xec, 0x9c, 0xdf, 0xb9, 0x54, 0xd7, 0xa9, 0xdb, 0xa9, 0x72, 0xbc, 0xeb, 0xe9, 0xf9,
	0x76, 0x9a, 0x71, 0xc1, 0xf3, 0xed, 0x9c, 0x65, 0xf3, 0x28, 0x64, 0xf2, 0x7f, 0xfb, 0xe5, 0xcf,
	0xfe, 0xab, 0x41, 0xb2, 0x10, 0x8b, 0x94, 0x5d, 0x7b, 0x5b, 0x93, 0x21, 0x9f, 0x4e, 0x83, 0x64,
	0x94, 0x57, 0xc8, 0xb5, 0xb7, 0xb4, 0x84, 0xcd, 0x59, 0x22, 0xe0, 0xf7, 0xfb, 0x9f, 0x7e, 0xd6,
	0xf3, 0xde, 0xdc, 0x8b, 0x23, 0x96, 0x88, 0x3d, 0xd0, 0xf0, 0x3f, 0xf1, 0xde, 0x18, 0xa4, 0xe9,
	0x21, 0x13, 0x1f, 0xb3, 0x2c, 0x8f, 0x78, 0xe2, 0xbf, 0xdf, 0x07, 0x07, 0xfd, 0xd3, 0x34, 0xec,
	0x0f, 0xd2, 0xb4, 0xaf, 0x85, 0xfd, 0x53, 0xf6, 0xab, 0x19, 0xcb, 0xc5, 0xb5, 0x5b, 0x6e, 0x28,
	0x4f, 0x79, 0x92, 0x33, 0xff, 0x85, 0xf7, 0xf5, 0x41, 0x9a, 0x0e, 0x99, 0xd8, 0x67, 0x45, 0x03,
	0x86, 0x22, 0x10, 0xcc, 0x5f, 0x6b, 0xa8, 0x9a, 0x80, 0xf2, 0xb1, 0xde, 0x0e, 0x82, 0x9f, 0x33,
	0xef, 0xb5, 0xc2, 0xcf, 0x64, 0x26, 0x46, 0xfc, 0x32, 0xf1, 0xdf, 0x6b, 0x2a, 0x82, 0x48, 0xd9,
	0xbe, 0xe9, 0x42, 0xc0, 0xea, 0x73, 0xef, 0xf5, 0xe7, 0x41, 0x1c, 0x33, 0xb1, 0x97, 0xb1, 0x22,
	0x70, 0x53, 0xa7, 0x12, 0xf5, 0x2b, 0x99, 0xb2, 0xfb, 0xbe, 0x93, 0x01, 0xc3, 0x9f, 0x78, 0x6f,
	0x54, 0x92, 0x53, 0x16, 0xf2, 0x39, 0xcb, 0x7c, 0xab, 0x16, 0x08, 0x89, 0x4f, 0xde, 0x80, 0xb0,
	0xed, 0x3d, 0x9e, 0xcc, 0x59, 0x26, 0xec, 0xb6, 0x41, 0xe8, 0xb6, 0xad, 0x21, 0xb0, 0xfd, 0x0b,
	0xef, 0xab, 0xcf, 0x79, 0x76, 0x91, 0xa7, 0x41, 0xc8, 0xe0, 0x9b, 0xdc, 0x36, 0x15, 0xa5, 0x14,
	0x7f, 0x96, 0xd5, 0x36, 0xcc, 0xe2, 0x61, 0xc8, 0x62, 0x16, 0x0a, 0xd2, 0x43, 0x25, 0x6e, 0xf5,
	0xa0, 0x30, 0xf0, 0x10, 0x7b, 0xdf, 0x50, 0xc2, 0x43, 0x26, 0xf6, 0x66, 0x59, 0xc6, 0x12, 0xe1,
	0x6f, 0x10, 0xea, 0x1a, 0x51, 0x9e, 0xee, 0x74, 0x41, 0x2d, 0xed, 0x39, 0x64, 0x62, 0x10, 0xc7,
	0x64, 0x7b, 0x2a, 0x71, 0x6b, 0x7b, 0x14, 0x06, 0x1e, 0x7e, 0xe7, 0x7d, 0xa7, 0xf6, 0xc5, 0xc4,
	0x51, 0xfe, 0x28, 0x1a, 0x4f, 0xe2, 0x68, 0x3c, 0x11, 0x6c, 0xe4, 0x6f, 0x93, 0x1f, 0xc5, 0x04,
	0x95, 0xd7, 0x9d, 0xee, 0x0a, 0x96, 0x16, 0x3e, 0xbc, 0x4a, 0x79, 0x46, 0xf7, 0x58, 0x25, 0x6e,
	0x6d, 0xa1, 0xc2, 0xc0, 0xc3, 0xcf, 0xbd, 0x37, 0x07, 0x61, 0xc8, 0x67, 0x89, 0x1a, 0x2e, 0x68,
	0xf2, 0xa9, 0x84, 0x8d, 0xf1, 0x72, 0xbb, 0x85, 0xd2, 0x03, 0x06, 0x64, 0x90, 0xd2, 0xef, 0x5b,
	0xf5, 0x50, 0x42, 0xdf, 0x72, 0x43, 0x0d, 0xdb, 0xfb, 0x2c, 0x66, 0xa4, 0xed, 0x4a, 0xd8, 0x62,
	0x5b, 0x41, 0x0d, 0xdb, 0x30, 0x50, 0xec, 0xb6, 0xd1, 0x30, 0xb9, 0xe5, 0x86, 0x6a, 0xf3, 0x29,
	0xd8, 0x16, 0x3c, 0xc5, 0xf3, 0xa9, 0x54, 0x12, 0x3c, 0xa5, 0xe6, 0x53, 0x13, 0x69, 0x58, 0x3d,
	0xe6, 0x73, 0x46, 0x58, 0x2d, 0x44, 0x2d, 0x56, 0x01, 0xd1, 0x03, 0x5a, 0xf6, 0x1f, 0x4f, 0x5e,
	0x44, 0xe3, 0x67, 0xe9, 0xa8, 0xe8, 0xc5, 0x0d, 0x7b, 0x07, 0xd5, 0x10, 0x62, 0x40, 0x13, 0x28,
	0x78, 0xfb, 0x99, 0xe7, 0x3d, 0x3d, 0xff, 0x25, 0x0b, 0xc5, 0xd3, 0x94, 0x25, 0xfe, 0x0d, 0x43,
	0xb3, 0x12, 0xf4, 0x0b, 0x89, 0xb2, 0xfd, 0x9e, 0x83, 0xd0, 0x9f, 0xa5, 0xfa, 0x7d, 0x2f, 0xe6,
	0x39, 0xfe, 0x2c, 0xa0, 0x51, 0x8a, 0x88, 0xcf, 0x82, 0x10, 0x1c, 0xe8, 0x70, 0xc2, 0x2f, 0xed,
	0x81, 0x16, 0x12, 0x77, 0xa0, 0x40, 0xe8, 0xf5, 0x10, 0x02, 0xb5, 0xad, 0x87, 0x32, 0x0c, 0xd7,
	0x7a, 0x88, 0x19, 0x30, 0xcc, 0xbd, 0x6f, 0xd6, 0x0d, 0xef, 0x72, 0x7e, 0x31, 0x0d, 0xb2, 0x0b,
	0xff, 0x0e, 0xad, 0x2c, 0x19, 0xe5, 0x68, 0xb3, 0x13, 0xab, 0x27, 0xad, 0xba, 0xc3, 0x21, 0xc3,
	0x93, 0x96, 0xa1, 0x3f, 0x64, 0xd4, 0xa4, 0x65, 0xc1, 0x70, 0xa7, 0x1e, 0x66, 0x41, 0x3a, 0xb1,
	0x77, 0x6a, 0x29, 0x72, 0x77, 0xaa, 0x44, 0x70, 0x0f, 0x0c, 0x59, 0x90, 0x85, 0x13, 0x7b, 0x0f,
	0x54, 0x32, 0x77, 0x0f, 0x28, 0x06, 0x0c, 0x67, 0xde, 0xb7, 0xea, 0x86, 0x87, 0xb3, 0xf3, 0x3c,
	0xcc, 0xa2, 0x73, 0xe6, 0x6f, 0xd2, 0xda, 0x0a, 0x52, 0xae, 0xee, 0x76, 0x83, 0xc1, 0xe7, 0x9f,
	0x7a, 0xde, 0x3b, 0x15, 0x73, 0xca, 0xe2, 0x40, 0x44, 0x3c, 0xa9, 0xd0, 0xfd, 0x28, 0x17, 0x51,
	0x12, 0x0a, 0xff, 0xbe, 0xcd, 0x9c, 0x9d, 0x55, 0x21, 0x3c, 0x58, 0x4a, 0x07, 0x22, 0x89, 0x3c,
	0x1f, 0x5a, 0x2f, 0xa3, 0x3c, 0x1a, 0xe5, 0xfe, 0xba, 0xb5, 0x35, 0x35, 0x42, 0x39, 0xdd, 0xe8,
	0x40, 0x82, 0xab, 0x2b, 0xef, 0xdb, 0xf5, 0x0f, 0xfd, 0x2c, 0xc9, 0xd5, 0xa7, 0xde, 0xa2, 0xbf,
	0x5e, 0x0d, 0x53, 0x4e, 0xfb, 0x5d, 0x71, 0xf0, 0x1c, 0x7a, 0x5f, 0x93, 0x9e, 0xc5, 0x3e, 0x13,
	0x41, 0x14, 0xe7, 0xfe, 0xaa, 0xdd, 0x86, 0x94, 0x2b, 0x5f, 0x6b, 0xad, 0x1c, 0x1e, 0x58, 0xfb,
	0xb3, 0x34, 0x8e, 0xc2, 0xe6, 0x0e, 0x11, 0x74, 0x95, 0xd8, 0x3d, 0xb0, 0xea, 0x98, 0x9e, 0xee,
	0x55, 0x33, 0xaa, 0xff, 0x73, 0xb6, 0x48, 0xf1, 0x74, 0xaf, 0x23, 0xd4, 0x08, 0x31, 0xdd, 0x13,
	0x28, 0x6e, 0xcf, 0x90, 0x89, 0xc7, 0xc1, 0x82, 0xcf, 0x88, 0x89, 0x42, 0x89, 0xdd, 0xed, 0xa9,
	0x63, 0x96, 0xf6, 0x1c, 0xe5, 0x07, 0xc1, 0x9c, 0x67, 0x91, 0xa0, 0xdb, 0xa3, 0x91, 0xd6, 0xf6,
	0x18, 0xa8, 0xd5, 0xdb, 0x20, 0x0b, 0x27, 0xd1, 0x9c, 0x8d, 0x1c, 0xde, 0x24, 0xd2, 0xc1, 0x5b,
	0x0d, 0xc5, 0xde, 0x1e, 0x47, 0x79, 0x2d, 0x23, 0xac, 0xde, 0x0c, 0xc4, 0xed, 0x0d, 0xa3, 0x38,
	0xc1, 0x4b, 0x79, 0xb5, 0xdf, 0x5a, 0x25, 0xf5, 0xcd, 0x2d, 0xd7, 0x5a, 0x2b, 0x87, 0xc7, 0x6f,
	0x21, 0x34, 0x3f, 0xe2, 0x16, 0x65, 0xc3, 0xfe, 0x21, 0xfb, 0x5d, 0x71, 0xd2, 0xb3, 0x4a, 0x16,
	0xb7, 0xe7, 0x46, 0xc2, 0xf4, 0xbb, 0xe2, 0xb8, 0x1b, 0x07, 0x69, 0x1a, 0x2f, 0xce, 0xd8, 0x34,
	0x8d, 0xc9, 0x6e, 0x34, 0x10, 0x77, 0x37, 0x62, 0x14, 0xaf, 0x9c, 0x67, 0xbc, 0x58, 0x97, 0xad,
	0x2b, 0x67, 0x29, 0x72, 0xaf, 0x9c, 0x12, 0xc1, 0x0b, 0xdc, 0x60, 0x34, 0x7a, 0x1e, 0x89, 0x49,
	0xf5, 0x1f, 0x47, 0x23, 0xfb, 0x02, 0x87, 0x20, 0xf7, 0x02, 0xd7, 0x84, 0x75, 0xf5, 0x43, 0x6e,
	0xc1, 0x82, 0x8c, 0xed, 0x2e, 0x1e, 0x47, 0xc9, 0x85, 0x6f, 0x9f, 0x4a, 0x35, 0x40, 0x54, 0x3f,
	0xac, 0x20, 0x6e, 0x5b, 0xb1, 0xaf, 0xdc, 0xcd, 0x58, 0x30, 0x0a, 0xb3, 0xd9, 0xf4, 0x3c, 0xb7,
	0xb7, 0x0d, 0x41, 0xee, 0xb6, 0x35, 0x61, 0xbc, 0x65, 0x1b, 0x32, 0x51, 0x77, 0x49, 0x4d, 0x0f,
	0x36, 0x8f, 0x9b, 0x9d, 0x58, 0xbc, 0x9f, 0x7d, 0x96, 0x8c, 0xb8, 0x7d, 0x3f, 0x5b, 0x48, 0xdc,
	0xfb, 0x59, 0x20, 0xb0, 0xc9, 0x53, 0x46, 0x99, 0x2c, 0x24, 0x6e, 0x93, 0x40, 0xe0, 0xcf, 0x72,
	0x34, 0x2d, 0x0e, 0xb1, 0xc7, 0x41, 0x76, 0x51, 0x56, 0xa4, 0xac, 0x9f, 0xc5, 0x64, 0xdc, 0x9f,
	0xa5, 0xc1, 0xda, 0x26, 0x3d, 0x38, 0x7f, 0x93, 0x93, 0x1e, 0x3a, 0x80, 0xaf, 0xb5, 0x72, 0x78,
	0x02, 0x90, 0x3b, 0xe9, 0x03, 0x26, 0xc2, 0x89, 0x7d, 0x02, 0x30, 0x10, 0xf7, 0x04, 0x80, 0x51,
	0xdc, 0xa4, 0x33, 0xae, 0x4e, 0x02, 0xab, 0xf6, 0x21, 0xde, 0x38, 0x05, 0xac, 0xb5, 0x72, 0x78,
	0x6c, 0xca, 0xbd, 0xe1, 0x60, 0x34, 0xb2, 0x8e, 0x4d, 0x29, 0x2f, 0x86, 0xb9, 0x73, 0x6c, 0x22,
	0x10, 0x27, 0x84, 0x14, 0xc3, 0xf1, 0xf4, 0x8e, 0xcb, 0x02, 0x3a, 0x9f, 0x6e, 0x76, 0x62, 0x29,
	0x87, 0xb0, 0x12, 0x3a, 0x1d, 0xa2, 0xd5, 0x70, 0xb3, 0x13, 0xab, 0x0b, 0x50, 0x8d, 0x2f, 0x79,
	0xc0, 0x02, 0x31, 0xcb, 0x1a, 0x05, 0xa8, 0xe6, 0x87, 0x92, 0x20, 0x51, 0x80, 0x72, 0x2a, 0x90,
	0xc7, 0x88, 0x53, 0x36, 0xe5, 0x73, 0xa6, 0x62, 0xb8, 0xef, 0x32, 0x69, 0xb2, 0xce, 0x63, 0x04,
	0xad, 0x03, 0x91, 0x7c, 0xda, 0xf3, 0xbe, 0x6b, 0xa2, 0xc5, 0x60, 0x1a, 0xcc, 0x83, 0x28, 0x0e,
	0xce, 0x63, 0xe6, 0xdf, 0x73, 0x19, 0x35, 0x50, 0x15, 0xc7, 0xfd, 0x65, 0x54, 0xf0, 0x46, 0x41,
	0x82, 0x4f, 0x53, 0x99, 0xe0, 0x5b, 0x0e, 0x73, 0x15, 0x65, 0xa4, 0x79, 0xbf, 0x2b, 0x0e, 0x9e,
	0x7f, 0xdf, 0xf3, 0xae, 0xd9, 0x28, 0xc8, 0xf9, 0x9d, 0x76, 0x73, 0x28, 0xf3, 0xef, 0x2d, 0xa1,
	0xd1, 0x12, 0x03, 0x0c, 0x83, 0x0e, 0x31, 0xa0, 0xc1, 0x70, 0x6f, 0x09, 0x8d, 0xc6, 0x0c, 0xb6,
	0x48, 0x65, 0xa1, 0xdc, 0x36, 0x83, 0x95, 0x67, 0x0d, 0x54, 0x30, 0x59, 0x6b, 0xe5, 0x74, 0x59,
	0x54, 0x4b, 0x8b, 0x54, 0x40, 0x65, 0xd1, 0x9a, 0x6a, 0x21, 0x25, 0xca, 0xa2, 0x4d, 0x0a, 0xcc,
	0x5f, 0x7a, 0x6f, 0x69, 0x59, 0x3d, 0x9f, 0xad, 0x49, 0x04, 0xa7, 0xa6, 0x5a, 0x62, 0x3a, 0x93,
	0xc8, 0x8a, 0x83, 0x63, 0x21, 0x77, 0x33, 0x75, 0xc7, 0x45, 0xf2, 0xde, 0x6d, 0x35, 0x54, 0xcf,
	0xdd, 0xad, 0x8e, 0x34, 0x78, 0xfd, 0xad, 0xf7, 0x76, 0xd3, 0x2b, 0xe4, 0xed, 0x76, 0xab, 0x29,
	0x94, 0xb6, 0x3b, 0xdd, 0x15, 0x5c, 0xee, 0xab, 0x79, 0xa6, 0x83, 0xfb, 0x0a, 0x5c, 0xc2, 0xbd,
	0x52, 0xd0, 0x05, 0x90, 0x47, 0x51, 0x2e, 0x78, 0xb6, 0x18, 0x4e, 0xf8, 0xa5, 0xbc, 0x08, 0x34,
	0x57, 0x39, 0x00, 0xfa, 0x35, 0x82, 0x28, 0x80, 0xd8, 0xc9, 0x86, 0x2b, 0x7d, 0x61, 0x98, 0x13,
	0xae, 0x6a, 0x44, 0x8b, 0x2b, 0x93, 0xd4, 0x6b, 0xbc, 0x6c, 0x95, 0xbe, 0xdd, 0x5c, 0xb3, 0x87,
	0xda, 0xbc, 0xe1, 0x5c, 0x6f, 0x07, 0xf5, 0x89, 0xe5, 0x20, 0x8a, 0xd9, 0xd3, 0x17, 0x2f, 0x62,
	0x1e, 0x8c, 0xd0, 0x89, 0xa5, 0x90, 0xf4, 0x41, 0x44, 0x9c, 0x58, 0x10, 0xa2, 0x4b, 0x0f, 0x85,
	0xa0, 0x18, 0x1c, 0xd2, 0xf2, 0xed, 0xa6, 0x5a, 0x4d, 0x4c, 0x94, 0x1e, 0x2c, 0x98, 0xde, 0xff,
	0x16, 0xc2, 0x67, 0x69, 0x69, 0xfc, 0x46, 0x53, 0xab, 0x92, 0x10, 0xfb, 0x5f, 0x93, 0xd0, 0x05,
	0xca, 0xe2, 0xf7, 0x7d, 0x7e, 0x99, 0x94, 0x46, 0x2d, 0x0d, 0x95, 0x32, 0xa2, 0x40, 0x89, 0x19,
	0x30, 0xfc, 0x91, 0xf7, 0xff, 0xa5, 0xe1, 0x8c, 0xa7, 0xfe, 0x8a, 0x45, 0x21, 0xab, 0xdd, 0x45,
	0x5c, 0x27, 0xe5, 0xfa, 0xc0, 0xf4, 0x24, 0x98, 0x47, 0x63, 0x35, 0xa7, 0x55, 0x63, 0x04, 0x1f,
	0x98, 0x34, 0xd3, 0xaf, 0x41, 0xc4, 0x81, 0x89, 0x84, 0xc1, 0xe7, 0xdf, 0x7b, 0xde, 0x0d, 0xcd,
	0x1c, 0xca, 0x72, 0xd3, 0x51, 0xf2, 0x82, 0x17, 0xa7, 0xc7, 0xe2, 0x44, 0x97, 0xfb, 0x1f, 0x50,
	0x26, 0xed, 0xbc, 0x0a, 0xe5, 0x07, 0x4b, 0xeb, 0x41, 0x54, 0xbf, 0xf1, 0xde, 0x96, 0x27, 0xf0,
	0x6a, 0x7d, 0x39, 0xc8, 0xf8, 0xb4, 0xd2, 0xf0, 0xcd, 0x89, 0x5b, 0x1d, 0xd4, 0x31, 0xa7, 0x82,
	0xd8, 0xee, 0xcc, 0xd7, 0x76, 0x6e, 0x94, 0xf7, 0xb2, 0xa8, 0x77, 0xbf, 0x9b, 0x45, 0xa3, 0xba,
	0xf7, 0x60, 0x29, 0x1d, 0x7d, 0x97, 0xa6, 0x02, 0x89, 0x79, 0x82, 0xef, 0xe9, 0xb4, 0x95, 0x42,
	0x48, 0xdc, 0xa5, 0x35, 0x20, 0x3d, 0x0b, 0x49, 0x51, 0x75, 0xae, 0x1a, 0xc4, 0x31, 0x9a, 0x85,
	0x94, 0xaa, 0x02, 0x88, 0x59, 0xc8, 0x0a, 0x82, 0x9f, 0x53, 0xef, 0xb5, 0xa2, 0x73, 0x4f, 0x32,
	0x36, 0x8f, 0x18, 0xbe, 0xf1, 0xa9, 0x49, 0x88, 0xe1, 0x6c, 0x12, 0x7a, 0x8f, 0xf1, 0x2c, 0xc9,
	0xd3, 0x38, 0xc8, 0x27, 0x70, 0xe3, 0x60, 0xb6, 0x59, 0x0a, 0xf1, 0x9d, 0xc3, 0xed, 0x16, 0x4a,
	0xef, 0x93, 0xa4, 0x4c, 0xcd, 0x18, 0xab, 0x76, 0xd5, 0xc6, 0xac, 0xb1, 0xd6, 0xca, 0xe9, 0xd9,
	0x79, 0x37, 0xe6, 0xe1, 0x05, 0x4c, 0x73, 0x66, 0xab, 0x4b, 0x09, 0x9e, 0xe7, 0x6e, 0xba, 0x10,
	0x3d, 0xd1, 0x95, 0x82, 0x53, 0x96, 0xc6, 0x41, 0x88, 0xef, 0xc2, 0x2a, 0x1d, 0x90, 0x11, 0x13,
	0x1d, 0x66, 0x50, 0xb8, 0xb0, 0x6d, 0xb4, 0x85, 0x8b, 0x76, 0x8c, 0x37, 0x5d, 0x88, 0x9e, 0xea,
	0x4b, 0xc1, 0x30, 0x8d, 0x23, 0x81, 0x72, 0xa3, 0xd2, 0x28, 0x25, 0x44, 0x6e, 0x98, 0x04, 0x32,
	0x79, 0xcc, 0xb2, 0x31, 0xb3, 0x9a, 0x2c, 0x25, 0x4e, 0x93, 0x92, 0x00, 0x93, 0x4f, 0xbc, 0xaf,
	0x54, 0x6d, 0xe7, 0xe9, 0xc2, 0xbf, 0x6e, 0x6b, 0x16, 0x4f, 0x17, 0xca, 0xe0, 0x0d, 0x1a, 0x40,
	0x21, 0x9e, 0x04, 0xb9, 0xb0, 0x87, 0x58, 0x4a, 0x9c, 0x21, 0x4a, 0x42, 0xaf, 0x43, 0x55, 0x88,
	0x33, 0x81, 0xd6, 0x21, 0x08, 0xa0, 0x76, 0x05, 0x70, 0x9d, 0x94, 0xeb, 0xe1, 0x55, 0xf5, 0x0a,
	0x13, 0x07, 0x11, 0x8b, 0x47, 0x39, 0x1a, 0x5e, 0xf0, 0xdd, 0xa5, 0x94, 0x18, 0x5e, 0x4d, 0x0a,
	0xa5, 0x12, 0x94, 0x85, 0x6c, 0xad, 0x43, 0x15, 0xa1, 0x9b, 0x2e, 0x44, 0xef, 0x4b, 0x4a, 0x41,
	0xad, 0xca, 0x6e, 0x8b, 0xc7, 0x52, 0x64, 0x5f, 0x6d, 0xc3, 0xc0, 0xc3, 0x5f, 0x7a, 0xde, 0xbb,
	0xca, 0xc5, 0x31, 0x9f, 0xb3, 0x33, 0xfe, 0xf0, 0xaa, 0xbc, 0xb4, 0x1b, 0xc3, 0xd2, 0xf4, 0x80,
	0xb0, 0x64, 0x83, 0x95, 0xfb, 0xef, 0x2d, 0xa7, 0xa4, 0x57, 0x48, 0x14, 0xcb, 0x13, 0x76, 0x69,
	0x5d, 0x21, 0xb1, 0x45, 0xc5, 0x11, 0x2b, 0xa4, 0x8b, 0xd7, 0xb5, 0x15, 0xe5, 0x1c, 0x5e, 0x63,
	0x9d, 0x71, 0xb9, 0x59, 0xa1, 0xac, 0x61, 0x90, 0x38, 0x17, 0x38, 0x15, 0xf4, 0x66, 0x5d, 0xf9,
	0xd7, 0x49, 0xba, 0x4e, 0xd8, 0x69, 0x26, 0xea, 0x46, 0x07, 0xd2, 0xe2, 0x4a, 0x5f, 0x15, 0x51,
	0xae, 0x9a, 0x37, 0x45, 0x1b, 0x1d, 0xc8, 0x5a, 0x9d, 0xa6, 0xde, 0xac, 0xdd, 0x20, 0xbc, 0x18,
	0x67, 0x7c, 0x96, 0x8c, 0xf6, 0x78, 0xcc, 0x33, 0x54, 0xa7, 0x31, 0xa2, 0x46, 0x28, 0x51, 0xa7,
	0x69, 0x51, 0xd1, 0x1b, 0x83, 0x7a, 0x14, 0x83, 0x38, 0x1a, 0xe3, 0xe3, 0x89, 0x61, 0xa8, 0x04,
	0x88, 0x8d, 0x81, 0x15, 0xb4, 0x24, 0x51, 0x75, 0x7c, 0x11, 0x51, 0x18, 0xc4, 0x95, 0xbf, 0x6d,
	0xda, 0x8c, 0x01, 0xb6, 0x26, 0x91, 0x45, 0xc1, 0xd2, 0xce, 0xb3, 0x59, 0x96, 0x1c, 0x25, 0x82,
	0x93, 0xed, 0x94, 0x40, 0x6b, 0x3b, 0x6b, 0xa0, 0xde, 0x4d, 0x94, 0xe2, 0x33, 0x76, 0x55, 0x44,
	0x53, 0xfc, 0x8f, 0x6f, 0x99, 0x72, 0x8a, 0xdf, 0xfb, 0x20, 0x27, 0x76, 0x13, 0x36, 0x0e, 0x35,
	0x06, 0x9c, 0x54, 0x09, 0xe3, 0xd0, 0x36, 0xd3, 0x64, 0xbd, 0x1d, 0xb4, 0xfb, 0x19, 0x8a, 0x45,
	0xcc, 0x5c, 0x7e, 0x4a, 0xa0, 0x8b, 0x1f, 0x09, 0xea, 0xd2, 0xbe, 0xd1, 0x9e, 0x09, 0x0b, 0x2f,
	0x1a, 0x17, 0xc2, 0x66, 0xa0, 0x15, 0x42, 0x94, 0xf6, 0x09, 0xd4, 0xde, 0x45, 0x47, 0x21, 0x4f,
	0x5c, 0x5d, 0x54, 0xc8, 0xbb, 0x74, 0x11, 0x70, 0xfa, 0x74, 0xa7, 0xa4, 0x90, 0x99, 0x55, 0x37,
	0x6d, 0x12, 0x16, 0xea, 0x10, 0x71, 0xba, 0x23, 0x61, 0x5d, 0x75, 0xc7, 0x3e, 0x8f, 0x9b, 0x2f,
	0x98, 0x1a, 0x56, 0x8e, 0xe9, 0x17, 0x4c, 0x14, 0x4b, 0x37, 0xb2, 0xca, 0x91, 0x16, 0x2b, 0x66,
	0x9e, 0xdc, 0xed, 0x06, 0xeb, 0xc2, 0xb2, 0xe1, 0x73, 0x2f, 0x66, 0x41, 0x56, 0x79, 0xdd, 0x72,
	0x18, 0xd2, 0x18, 0x51, 0x13, 0x74, 0xe0, 0x68, 0x0a, 0x33, 0x3c, 0xef, 0xf1, 0x44, 0xb0, 0x44,
	0xd8, 0xa6, 0x30, 0xd3, 0x18, 0x80, 0xae, 0x29, 0x8c, 0x52, 0x40, 0x79, 0x7b, 0x10, 0xc5, 0x6c,
	0xc8, 0xc4, 0x93, 0x60, 0xca, 0x6c, 0x79, 0x5b, 0x96, 0x1a, 0x40, 0xee, 0xca, 0x5b, 0xc4, 0xa1,
	0x21, 0x7f, 0x34, 0x0d, 0xc6, 0xca, 0x8b, 0x45, 0xbb, 0x94, 0x37, 0xdc, 0xac, 0xb7, 0x83, 0xc8,
	0xcf, 0xc7, 0xd1, 0x88, 0x71, 0x87, 0x9f, 0x52, 0xde, 0xc5, 0x0f, 0x06, 0xd1, 0xce, 0xa9, 0x68,
	0x6d, 0x75, 0x1e, 0x19, 0x24, 0x23, 0x38, 0x85, 0xf5, 0x89, 0x8f, 0x82, 0x38, 0xd7, 0xce, 0x89,
	0xe0, 0xd1, 0xf8, 0x90, 0x25, 0x34, 0xd7, 0xf8, 0x50, 0x15, 0xb2, 0x2e, 0xe3, 0xc3, 0x06, 0x83,
	0xcf, 0x5f, 0xc3, 0xf8, 0xd8, 0x0f, 0x44, 0x50, 0x9c, 0xa3, 0x3f, 0x8e, 0xd8, 0x25, 0x1c, 0xe3,
	0x2c, 0xed, 0x95, 0x54, 0xbf, 0xc0, 0xf0, 0x99, 0x6e, 0xbb, 0x33, 0xef, 0xf0, 0x0d, 0xbb, 0xf3,
	0x56, 0xdf, 0x68, 0x9b, 0xbe, 0xdd, 0x99, 0x77, 0xf8, 0x86, 0xd2, 0x79, 0xab, 0x6f, 0x54, 0x39,
	0xdf, 0xee, 0xcc, 0x83, 0xef, 0x3f, 0xf4, 0xbc, 0x6b, 0x0d, 0xe7, 0xc5, 0x1e, 0x28, 0x14, 0xd1,
	0x9c, 0xd9, 0xb6, 0x72, 0xa6, 0x3d, 0x85, 0xba, 0xb6, 0x72, 0xb4, 0x0a, 0x44, 0xf1, 0xe7, 0x9e,
	0xf7, 0x8e, 0x2d, 0x8a, 0x13, 0x9e, 0x47, 0x22, 0xe2, 0x89, 0xed, 0xc0, 0xd2, 0x30, 0x2a, 0x61,
	0xd7, 0x81, 0xc5, 0xa5, 0x04, 0xb1, 0xcc, 0xbc, 0xb7, 0x0c, 0xb4, 0xc8, 0x53, 0x3e, 0xcb, 0x42,
	0xe6, 0xdf, 0x75, 0xd8, 0x53, 0x14, 0x71, 0x81, 0x42, 0xd3, 0xfa, 0x06, 0xc3, 0x60, 0xea, 0x37,
	0x37, 0xae, 0x5e, 0xb5, 0x5e, 0xde, 0xec, 0x74, 0x57, 0x00, 0xf7, 0x7f, 0x94, 0x7b, 0x7a, 0xec,
	0x1f, 0x12, 0xf1, 0x7e, 0x17, 0x8b, 0x28, 0x19, 0x1f, 0x2c, 0xa5, 0xd3, 0x16, 0x08, 0x8c, 0xc6,
	0x4e, 0x81, 0xa0, 0x11, 0xf9, 0x60, 0x29, 0x1d, 0x08, 0xe4, 0x1f, 0x3d, 0xef, 0xa6, 0x35, 0x10,
	0xf3, 0x52, 0xfa, 0x87, 0x5d, 0x6c, 0xdb, 0x2f, 0xa7, 0x7f, 0xf4, 0x32, 0xaa, 0x10, 0xdd, 0x5f,
	0xe5, 0x19, 0x5f, 0x6a, 0x1c, 0x66, 0x7c, 0x96, 0x3e, 0xcd, 0x46, 0x2c, 0x83, 0x1e, 0x73, 0x65,
	0xbf, 0x86, 0x71, 0x9f, 0x7d, 0x7f, 0x49, 0x2d, 0x08, 0xe7, 0x6f, 0x3d, 0x6f, 0xc5, 0x80, 0xe1,
	0x41, 0x55, 0x2d, 0x1e, 0x97, 0xe5, 0x1a, 0x8d, 0x03, 0xfa, 0x60, 0x59, 0x35, 0xb4, 0xe5, 0xd1,
	0xbd, 0x17, 0xf2, 0x6c, 0x04, 0xcb, 0x89, 0x63, 0x40, 0x55, 0x1c, 0x5e, 0x4f, 0x76, 0xba, 0x2b,
	0x38, 0xfd, 0x5b, 0x6f, 0x44, 0x6d, 0xe6, 0x9c, 0x37, 0xa2, 0x4e, 0x05, 0xa7, 0x7f, 0x18, 0x44,
	0xed, 0xfe, 0xd1, 0x08, 0xda, 0xe9, 0xae, 0x00, 0xfe, 0xff, 0xd9, 0xf3, 0x6e, 0x59, 0xb8, 0xe6,
	0x9b, 0x8a, 0x1f, 0xb7, 0x9a, 0x76, 0xbc, 0xb0, 0xf8, 0xc9, 0xcb, 0x29, 0x43, 0x8c, 0xff, 0xea,
	0x79, 0x6b, 0xad, 0x31, 0x42, 0x97, 0xfd, 0x74, 0x59, 0x4f, 0xa8, 0x07, 0x3f, 0x7c, 0x69, 0xfd,
	0x65, 0x82, 0x85, 0xfe, 0x5d, 0x3a, 0x58, 0xd4, 0xdd, 0x1f, 0xbe, 0xb4, 0x3e, 0x3e, 0xa8, 0x16,
	0xb3, 0x96, 0xf5, 0x05, 0x87, 0x16, 0xbb, 0x5f, 0x70, 0xd8, 0x38, 0x9b, 0x93, 0x87, 0x57, 0x69,
	0x90, 0x8c, 0x68, 0x27, 0x95, 0xbc, 0xdd, 0x89, 0xe2, 0xf0, 0x01, 0xbf, 0x90, 0x9e, 0x72, 0xb9,
	0x21, 0xdd, 0xa0, 0xf4, 0x15, 0xe2, 0x3c, 0xe0, 0x37, 0x50, 0xc2, 0x1b, 0xf4, 0xa7, 0xcb, 0x1b,
	0xea, 0xba, 0x3b, 0x5d, 0x50, 0xb4, 0xd5, 0x51, 0xde, 0x54, 0xdd, 0xf0, 0xae, 0xcb, 0x4a, 0xa3,
	0x76, 0xb8, 0xd5, 0x91, 0x26, 0xdc, 0x0e, 0x99, 0x78, 0xc4, 0x82, 0x11, 0xcb, 0x9c, 0x6e, 0x15,
	0xd5, 0xc9, 0x6d, 0x9d, 0xb6, 0xb9, 0xdd, 0xe3, 0xf1, 0x6c, 0x9a, 0x40, 0x67, 0x92, 0x6e, 0xeb,
	0x54, 0xbb, 0x5b, 0x44, 0xe3, 0xd2, 0x86, 0x76, 0x5b, 0xfe, 0xf9, 0xde, 0x1d, 0xb7, 0x19, 0xe3,
	0xef, 0xf8, 0x36, 0x3b, 0xb1, 0x74, 0x3b, 0x21, 0x8d, 0x5a, 0xda, 0x89, 0x32, 0x69, 0xab, 0x23,
	0x8d, 0x6b, 0x0c, 0x35, 0xb7, 0x2a, 0x9f, 0xb6, 0x5b, 0x6c, 0x35, 0x52, 0x6a, 0xa7, 0xbb, 0x02,
	0xae, 0xe8, 0x40, 0x56, 0x15, 0x1b, 0xa7, 0x83, 0x28, 0x8e, 0xfd, 0x4d, 0x47, 0x9a, 0x48, 0xc8,
	0x59, 0xd1, 0xb1, 0xc0, 0x44, 0x26, 0xcb, 0x0a, 0x48, 0xe2, 0xb7, 0xd9, 0x29, 0xa9, 0x4e, 0x99,
	0x5c, 0xa7, 0x51, 0x65, 0xa0, 0xf6, 0xa9, 0x55, 0x6b, 0xfb, 0xee, 0x0f, 0xd7, 0x68, 0xf0, 0x76,
	0x67, 0x1e, 0x5d, 0xba, 0x95, 0xd4, 0x90, 0x67, 0xc2, 0x76, 0xe9, 0x56, 0x99, 0x18, 0xd6, 0xef,
	0xc6, 0x6e, 0xb7, 0x50, 0x8d, 0x6a, 0x7b, 0x02, 0x77, 0xb8, 0xfa, 0x8f, 0x03, 0x6c, 0x69, 0x54,
	0x3e, 0xe5, 0xc7, 0xa0, 0x2b, 0x8d, 0x28, 0x85, 0xda, 0xfb, 0x47, 0xc5, 0xc9, 0x0b, 0x81, 0x34,
	0x65, 0x41, 0x16, 0x24, 0x21, 0x7e, 0xff, 0xa8, 0x0d, 0x36, 0x48, 0xe2, 0xfd, 0xa3, 0x5b, 0x03,
	0xdd, 0xe5, 0x98, 0xcf, 0xc5, 0x2d, 0x95, 0x23, 0xf5, 0x2e, 0xdb, 0x7c, 0x2d, 0xbe, 0xd1, 0x81,
	0xc4, 0x77, 0x39, 0x12, 0x50, 0x15, 0xa1, 0xca, 0xe9, 0x3d, 0x87, 0x29, 0x13, 0x75, 0x15, 0x00,
	0x68, 0x15, 0xb4, 0xee, 0xe9, 0xbf, 0x34, 0x14, 0x1f, 0xb1, 0x85, 0x6d, 0xdd, 0x53, 0x07, 0xa3,
	0x0a, 0x71, 0xad, 0x7b, 0x4d, 0x14, 0x6d, 0x1c, 0xea, 0x67, 0xec, 0x55, 0x87, 0x7e, 0x7d, 0xc7,
	0xb9, 0xd6, 0xca, 0xa1, 0x79, 0x7f, 0x3f, 0x9a, 0x1b, 0x05, 0x34, 0x4b, 0xa0, 0xfb, 0xd1, 0xdc,
	0x5e, 0x3f, 0xdb, 0xec, 0xc4, 0xe2, 0x7b, 0xa2, 0x40, 0xb0, 0x2b, 0x79, 0x81, 0x63, 0x09, 0xb7,
	0x94, 0x37, 0x6e, 0x70, 0xd6, 0xdb, 0x41, 0xfd, 0xd8, 0xe7, 0x24, 0xe3, 0x21, 0xcb, 0xf3, 0xbd,
	0x22, 0x6d, 0x63, 0xf4, 0xd8, 0x07, 0x64, 0xfd, 0x4a, 0x48, 0x3c, 0xf6, 0x69, 0x40, 0x60, 0xfb,
	0x91, 0xf7, 0xea, 0x63, 0x3e, 0x1e, 0xb2, 0x64, 0xe4, 0xbf, 0x6b, 0x3e, 0xaf, 0xe1, 0xe3, 0x7e,
	0xf1, 0xb3, 0xb2, 0xb7, 0x42, 0x89, 0xf5, 0x5b, 0x88, 0x7d, 0x76, 0x3e, 0x1b, 0x0f, 0x17, 0x49,
	0x88, 0xde, 0x42, 0x94, 0xbf, 0xf7, 0x0b, 0x01, 0xf1, 0x16, 0xc2, 0x00, 0xf4, 0x63, 0x80, 0xf2,
	0xe7, 0xb3, 0x49, 0xc6, 0x1a, 0xcf, 0x60, 0x2a, 0x85, 0x4a, 0x44, 0x3c, 0x06, 0x40, 0x08, 0x8a,
	0xf2, 0x2c, 0x63, 0xcc, 0x1a, 0x65, 0x21, 0x70, 0x46, 0x09, 0x80, 0x5e, 0x04, 0xcb, 0x9f, 0xab,
	0x47, 0x07, 0x8f, 0x79, 0x18, 0xc4, 0xb9, 0xe0, 0x19, 0x2e, 0xdb, 0x56, 0xaa, 0x18, 0x22, 0x16,
	0x41, 0x12, 0x46, 0x6d, 0x38, 0x89, 0x92, 0xb1, 0xb5, 0x0d, 0x85, 0xc0, 0xd9, 0x06, 0x00, 0xf4,
	0xc0, 0x39, 0x66, 0x22, 0x8b, 0xc2, 0x7c, 0xc8, 0xc4, 0x49, 0x90, 0x05, 0x53, 0x26, 0x58, 0x86,
	0xff, 0x34, 0x0a, 0x90, 0xbe, 0xc1, 0x10, 0x03, 0x87, 0x62, 0xc1, 0xe1, 0x8e, 0xf7, 0x7a, 0x31,
	0xa2, 0x58, 0xf2, 0xb0, 0xfc, 0xb7, 0x7e, 0xfc, 0x37, 0x95, 0xf2, 0xc3, 0x69, 0x2a, 0x16, 0xd7,
	0x6a, 0xff, 0x5d, 0x00, 0x3b, 0xbd, 0xdd, 0xf7, 0xfe, 0xfd, 0xc5, 0x4a, 0xef, 0xf3, 0x2f, 0x56,
	0x7a, 0xff, 0xfd, 0x62, 0xa5, 0xf7, 0xd9, 0x97, 0x2b, 0xaf, 0x7c, 0xfe, 0xe5, 0xca, 0x2b, 0xff,
	0xf9, 0x72, 0xe5, 0x95, 0x4f, 0x5e, 0x85, 0x7f, 0x6b, 0xe8, 0xfc, 0xff, 0xca, 0x7f, 0x31, 0xe8,
	0xc1, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xf5, 0x8e, 0xfa, 0x8f, 0x48, 0x00, 0x00,
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the gomobile package it is being compiled against.

// ClientCommandsHandler is the handler API for ClientCommands service.
var clientCommandsHandler ClientCommandsHandler

type ClientCommandsHandler interface {
	AppGetVersion(*pb.RpcAppGetVersionRequest) *pb.RpcAppGetVersionResponse
	AppSetDeviceState(*pb.RpcAppSetDeviceStateRequest) *pb.RpcAppSetDeviceStateResponse
	AppShutdown(*pb.RpcAppShutdownRequest) *pb.RpcAppShutdownResponse
	// Wallet
	// ***
	WalletCreate(*pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse
	WalletRecover(*pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse
	WalletConvert(*pb.RpcWalletConvertRequest) *pb.RpcWalletConvertResponse
	// Workspace
	// ***
	WorkspaceCreate(*pb.RpcWorkspaceCreateRequest) *pb.RpcWorkspaceCreateResponse
	WorkspaceSelect(*pb.RpcWorkspaceSelectRequest) *pb.RpcWorkspaceSelectResponse
	WorkspaceGetCurrent(*pb.RpcWorkspaceGetCurrentRequest) *pb.RpcWorkspaceGetCurrentResponse
	WorkspaceGetAll(*pb.RpcWorkspaceGetAllRequest) *pb.RpcWorkspaceGetAllResponse
	WorkspaceSetIsHighlighted(*pb.RpcWorkspaceSetIsHighlightedRequest) *pb.RpcWorkspaceSetIsHighlightedResponse
	WorkspaceExport(*pb.RpcWorkspaceExportRequest) *pb.RpcWorkspaceExportResponse
	// Account
	// ***
	AccountRecover(*pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse
	AccountCreate(*pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse
	AccountDelete(*pb.RpcAccountDeleteRequest) *pb.RpcAccountDeleteResponse
	AccountSelect(*pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse
	AccountStop(*pb.RpcAccountStopRequest) *pb.RpcAccountStopResponse
	AccountMove(*pb.RpcAccountMoveRequest) *pb.RpcAccountMoveResponse
	AccountConfigUpdate(*pb.RpcAccountConfigUpdateRequest) *pb.RpcAccountConfigUpdateResponse
	// Object
	// ***
	ObjectOpen(*pb.RpcObjectOpenRequest) *pb.RpcObjectOpenResponse
	ObjectClose(*pb.RpcObjectCloseRequest) *pb.RpcObjectCloseResponse
	ObjectShow(*pb.RpcObjectShowRequest) *pb.RpcObjectShowResponse
	// ObjectCreate just creates the new page, without adding the link to it from some other page
	ObjectCreate(*pb.RpcObjectCreateRequest) *pb.RpcObjectCreateResponse
	ObjectCreateBookmark(*pb.RpcObjectCreateBookmarkRequest) *pb.RpcObjectCreateBookmarkResponse
	// ObjectCreateSet just creates the new set, without adding the link to it from some other page
	ObjectCreateSet(*pb.RpcObjectCreateSetRequest) *pb.RpcObjectCreateSetResponse
	ObjectGraph(*pb.RpcObjectGraphRequest) *pb.RpcObjectGraphResponse
	ObjectSearch(*pb.RpcObjectSearchRequest) *pb.RpcObjectSearchResponse
	ObjectSearchSubscribe(*pb.RpcObjectSearchSubscribeRequest) *pb.RpcObjectSearchSubscribeResponse
	ObjectRelationSearchDistinct(*pb.RpcObjectRelationSearchDistinctRequest) *pb.RpcObjectRelationSearchDistinctResponse
	ObjectSubscribeIds(*pb.RpcObjectSubscribeIdsRequest) *pb.RpcObjectSubscribeIdsResponse
	ObjectSearchUnsubscribe(*pb.RpcObjectSearchUnsubscribeRequest) *pb.RpcObjectSearchUnsubscribeResponse
	ObjectSetDetails(*pb.RpcObjectSetDetailsRequest) *pb.RpcObjectSetDetailsResponse
	ObjectDuplicate(*pb.RpcObjectDuplicateRequest) *pb.RpcObjectDuplicateResponse
	// ObjectSetObjectType sets an existing object type to the object so it will appear in sets and suggests relations from this type
	ObjectSetObjectType(*pb.RpcObjectSetObjectTypeRequest) *pb.RpcObjectSetObjectTypeResponse
	ObjectSetLayout(*pb.RpcObjectSetLayoutRequest) *pb.RpcObjectSetLayoutResponse
	ObjectSetIsFavorite(*pb.RpcObjectSetIsFavoriteRequest) *pb.RpcObjectSetIsFavoriteResponse
	ObjectSetIsArchived(*pb.RpcObjectSetIsArchivedRequest) *pb.RpcObjectSetIsArchivedResponse
	ObjectListDuplicate(*pb.RpcObjectListDuplicateRequest) *pb.RpcObjectListDuplicateResponse
	ObjectListDelete(*pb.RpcObjectListDeleteRequest) *pb.RpcObjectListDeleteResponse
	ObjectListSetIsArchived(*pb.RpcObjectListSetIsArchivedRequest) *pb.RpcObjectListSetIsArchivedResponse
	ObjectListSetIsFavorite(*pb.RpcObjectListSetIsFavoriteRequest) *pb.RpcObjectListSetIsFavoriteResponse
	ObjectApplyTemplate(*pb.RpcObjectApplyTemplateRequest) *pb.RpcObjectApplyTemplateResponse
	// ObjectToSet creates new set from given object and removes object
	ObjectToSet(*pb.RpcObjectToSetRequest) *pb.RpcObjectToSetResponse
	ObjectAddWithObjectId(*pb.RpcObjectAddWithObjectIdRequest) *pb.RpcObjectAddWithObjectIdResponse
	ObjectShareByLink(*pb.RpcObjectShareByLinkRequest) *pb.RpcObjectShareByLinkResponse
	ObjectOpenBreadcrumbs(*pb.RpcObjectOpenBreadcrumbsRequest) *pb.RpcObjectOpenBreadcrumbsResponse
	ObjectSetBreadcrumbs(*pb.RpcObjectSetBreadcrumbsRequest) *pb.RpcObjectSetBreadcrumbsResponse
	ObjectUndo(*pb.RpcObjectUndoRequest) *pb.RpcObjectUndoResponse
	ObjectRedo(*pb.RpcObjectRedoRequest) *pb.RpcObjectRedoResponse
	ObjectImportMarkdown(*pb.RpcObjectImportMarkdownRequest) *pb.RpcObjectImportMarkdownResponse
	ObjectListExport(*pb.RpcObjectListExportRequest) *pb.RpcObjectListExportResponse
	ObjectBookmarkFetch(*pb.RpcObjectBookmarkFetchRequest) *pb.RpcObjectBookmarkFetchResponse
	ObjectToBookmark(*pb.RpcObjectToBookmarkRequest) *pb.RpcObjectToBookmarkResponse
	// Object Relations
	// ***
	ObjectRelationAdd(*pb.RpcObjectRelationAddRequest) *pb.RpcObjectRelationAddResponse
	ObjectRelationUpdate(*pb.RpcObjectRelationUpdateRequest) *pb.RpcObjectRelationUpdateResponse
	ObjectRelationDelete(*pb.RpcObjectRelationDeleteRequest) *pb.RpcObjectRelationDeleteResponse
	ObjectRelationAddFeatured(*pb.RpcObjectRelationAddFeaturedRequest) *pb.RpcObjectRelationAddFeaturedResponse
	ObjectRelationRemoveFeatured(*pb.RpcObjectRelationRemoveFeaturedRequest) *pb.RpcObjectRelationRemoveFeaturedResponse
	ObjectRelationListAvailable(*pb.RpcObjectRelationListAvailableRequest) *pb.RpcObjectRelationListAvailableResponse
	ObjectRelationOptionAdd(*pb.RpcObjectRelationOptionAddRequest) *pb.RpcObjectRelationOptionAddResponse
	ObjectRelationOptionUpdate(*pb.RpcObjectRelationOptionUpdateRequest) *pb.RpcObjectRelationOptionUpdateResponse
	ObjectRelationOptionDelete(*pb.RpcObjectRelationOptionDeleteRequest) *pb.RpcObjectRelationOptionDeleteResponse
	// ObjectType commands
	// ***
	ObjectTypeCreate(*pb.RpcObjectTypeCreateRequest) *pb.RpcObjectTypeCreateResponse
	// ObjectTypeList lists all object types both bundled and created by user
	ObjectTypeList(*pb.RpcObjectTypeListRequest) *pb.RpcObjectTypeListResponse
	ObjectTypeRelationList(*pb.RpcObjectTypeRelationListRequest) *pb.RpcObjectTypeRelationListResponse
	ObjectTypeRelationAdd(*pb.RpcObjectTypeRelationAddRequest) *pb.RpcObjectTypeRelationAddResponse
	ObjectTypeRelationUpdate(*pb.RpcObjectTypeRelationUpdateRequest) *pb.RpcObjectTypeRelationUpdateResponse
	ObjectTypeRelationRemove(*pb.RpcObjectTypeRelationRemoveRequest) *pb.RpcObjectTypeRelationRemoveResponse
	HistoryShowVersion(*pb.RpcHistoryShowVersionRequest) *pb.RpcHistoryShowVersionResponse
	HistoryGetVersions(*pb.RpcHistoryGetVersionsRequest) *pb.RpcHistoryGetVersionsResponse
	HistorySetVersion(*pb.RpcHistorySetVersionRequest) *pb.RpcHistorySetVersionResponse
	// Files
	// ***
	FileOffload(*pb.RpcFileOffloadRequest) *pb.RpcFileOffloadResponse
	FileListOffload(*pb.RpcFileListOffloadRequest) *pb.RpcFileListOffloadResponse
	FileUpload(*pb.RpcFileUploadRequest) *pb.RpcFileUploadResponse
	FileDownload(*pb.RpcFileDownloadRequest) *pb.RpcFileDownloadResponse
	FileDrop(*pb.RpcFileDropRequest) *pb.RpcFileDropResponse
	NavigationListObjects(*pb.RpcNavigationListObjectsRequest) *pb.RpcNavigationListObjectsResponse
	NavigationGetObjectInfoWithLinks(*pb.RpcNavigationGetObjectInfoWithLinksRequest) *pb.RpcNavigationGetObjectInfoWithLinksResponse
	TemplateCreateFromObject(*pb.RpcTemplateCreateFromObjectRequest) *pb.RpcTemplateCreateFromObjectResponse
	TemplateCreateFromObjectType(*pb.RpcTemplateCreateFromObjectTypeRequest) *pb.RpcTemplateCreateFromObjectTypeResponse
	TemplateClone(*pb.RpcTemplateCloneRequest) *pb.RpcTemplateCloneResponse
	TemplateExportAll(*pb.RpcTemplateExportAllRequest) *pb.RpcTemplateExportAllResponse
	LinkPreview(*pb.RpcLinkPreviewRequest) *pb.RpcLinkPreviewResponse
	UnsplashSearch(*pb.RpcUnsplashSearchRequest) *pb.RpcUnsplashSearchResponse
	// UnsplashDownload downloads picture from unsplash by ID, put it to the IPFS and returns the hash.
	// The artist info is available in the object details
	UnsplashDownload(*pb.RpcUnsplashDownloadRequest) *pb.RpcUnsplashDownloadResponse
	// General Block commands
	// ***
	BlockUpload(*pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse
	BlockReplace(*pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse
	BlockCreate(*pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse
	BlockSplit(*pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse
	BlockMerge(*pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse
	BlockCopy(*pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse
	BlockPaste(*pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse
	BlockCut(*pb.RpcBlockCutRequest) *pb.RpcBlockCutResponse
	BlockSetFields(*pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse
	BlockExport(*pb.RpcBlockExportRequest) *pb.RpcBlockExportResponse
	BlockListDelete(*pb.RpcBlockListDeleteRequest) *pb.RpcBlockListDeleteResponse
	BlockListMoveToExistingObject(*pb.RpcBlockListMoveToExistingObjectRequest) *pb.RpcBlockListMoveToExistingObjectResponse
	BlockListMoveToNewObject(*pb.RpcBlockListMoveToNewObjectRequest) *pb.RpcBlockListMoveToNewObjectResponse
	BlockListConvertToObjects(*pb.RpcBlockListConvertToObjectsRequest) *pb.RpcBlockListConvertToObjectsResponse
	BlockListSetFields(*pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse
	BlockListDuplicate(*pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse
	BlockListSetBackgroundColor(*pb.RpcBlockListSetBackgroundColorRequest) *pb.RpcBlockListSetBackgroundColorResponse
	BlockListSetAlign(*pb.RpcBlockListSetAlignRequest) *pb.RpcBlockListSetAlignResponse
	BlockListSetVerticalAlign(*pb.RpcBlockListSetVerticalAlignRequest) *pb.RpcBlockListSetVerticalAlignResponse
	BlockListTurnInto(*pb.RpcBlockListTurnIntoRequest) *pb.RpcBlockListTurnIntoResponse
	// Text Block commands
	// ***
	BlockTextSetText(*pb.RpcBlockTextSetTextRequest) *pb.RpcBlockTextSetTextResponse
	BlockTextSetColor(*pb.RpcBlockTextSetColorRequest) *pb.RpcBlockTextSetColorResponse
	BlockTextSetStyle(*pb.RpcBlockTextSetStyleRequest) *pb.RpcBlockTextSetStyleResponse
	BlockTextSetChecked(*pb.RpcBlockTextSetCheckedRequest) *pb.RpcBlockTextSetCheckedResponse
	BlockTextSetIcon(*pb.RpcBlockTextSetIconRequest) *pb.RpcBlockTextSetIconResponse
	BlockTextListSetColor(*pb.RpcBlockTextListSetColorRequest) *pb.RpcBlockTextListSetColorResponse
	BlockTextListSetMark(*pb.RpcBlockTextListSetMarkRequest) *pb.RpcBlockTextListSetMarkResponse
	BlockTextListSetStyle(*pb.RpcBlockTextListSetStyleRequest) *pb.RpcBlockTextListSetStyleResponse
	BlockTextListClearStyle(*pb.RpcBlockTextListClearStyleRequest) *pb.RpcBlockTextListClearStyleResponse
	BlockTextListClearContent(*pb.RpcBlockTextListClearContentRequest) *pb.RpcBlockTextListClearContentResponse
	// File block commands
	// ***
	BlockFileSetName(*pb.RpcBlockFileSetNameRequest) *pb.RpcBlockFileSetNameResponse
	BlockImageSetName(*pb.RpcBlockImageSetNameRequest) *pb.RpcBlockImageSetNameResponse
	BlockVideoSetName(*pb.RpcBlockVideoSetNameRequest) *pb.RpcBlockVideoSetNameResponse
	BlockFileCreateAndUpload(*pb.RpcBlockFileCreateAndUploadRequest) *pb.RpcBlockFileCreateAndUploadResponse
	BlockFileListSetStyle(*pb.RpcBlockFileListSetStyleRequest) *pb.RpcBlockFileListSetStyleResponse
	// Dataview block commands
	// ***
	BlockDataviewViewCreate(*pb.RpcBlockDataviewViewCreateRequest) *pb.RpcBlockDataviewViewCreateResponse
	BlockDataviewViewDelete(*pb.RpcBlockDataviewViewDeleteRequest) *pb.RpcBlockDataviewViewDeleteResponse
	BlockDataviewViewUpdate(*pb.RpcBlockDataviewViewUpdateRequest) *pb.RpcBlockDataviewViewUpdateResponse
	BlockDataviewViewSetActive(*pb.RpcBlockDataviewViewSetActiveRequest) *pb.RpcBlockDataviewViewSetActiveResponse
	BlockDataviewViewSetPosition(*pb.RpcBlockDataviewViewSetPositionRequest) *pb.RpcBlockDataviewViewSetPositionResponse
	BlockDataviewSetSource(*pb.RpcBlockDataviewSetSourceRequest) *pb.RpcBlockDataviewSetSourceResponse
	BlockDataviewRelationAdd(*pb.RpcBlockDataviewRelationAddRequest) *pb.RpcBlockDataviewRelationAddResponse
	BlockDataviewRelationUpdate(*pb.RpcBlockDataviewRelationUpdateRequest) *pb.RpcBlockDataviewRelationUpdateResponse
	BlockDataviewRelationDelete(*pb.RpcBlockDataviewRelationDeleteRequest) *pb.RpcBlockDataviewRelationDeleteResponse
	BlockDataviewRelationListAvailable(*pb.RpcBlockDataviewRelationListAvailableRequest) *pb.RpcBlockDataviewRelationListAvailableResponse
	BlockDataviewGroupOrderUpdate(*pb.RpcBlockDataviewGroupOrderUpdateRequest) *pb.RpcBlockDataviewGroupOrderUpdateResponse
	BlockDataviewObjectOrderUpdate(*pb.RpcBlockDataviewObjectOrderUpdateRequest) *pb.RpcBlockDataviewObjectOrderUpdateResponse
	BlockDataviewRecordCreate(*pb.RpcBlockDataviewRecordCreateRequest) *pb.RpcBlockDataviewRecordCreateResponse
	BlockDataviewRecordUpdate(*pb.RpcBlockDataviewRecordUpdateRequest) *pb.RpcBlockDataviewRecordUpdateResponse
	BlockDataviewRecordDelete(*pb.RpcBlockDataviewRecordDeleteRequest) *pb.RpcBlockDataviewRecordDeleteResponse
	BlockDataviewRecordRelationOptionAdd(*pb.RpcBlockDataviewRecordRelationOptionAddRequest) *pb.RpcBlockDataviewRecordRelationOptionAddResponse
	BlockDataviewRecordRelationOptionUpdate(*pb.RpcBlockDataviewRecordRelationOptionUpdateRequest) *pb.RpcBlockDataviewRecordRelationOptionUpdateResponse
	BlockDataviewRecordRelationOptionDelete(*pb.RpcBlockDataviewRecordRelationOptionDeleteRequest) *pb.RpcBlockDataviewRecordRelationOptionDeleteResponse
	// Simple table block commands
	// ***
	BlockTableCreate(*pb.RpcBlockTableCreateRequest) *pb.RpcBlockTableCreateResponse
	BlockTableExpand(*pb.RpcBlockTableExpandRequest) *pb.RpcBlockTableExpandResponse
	BlockTableRowCreate(*pb.RpcBlockTableRowCreateRequest) *pb.RpcBlockTableRowCreateResponse
	BlockTableRowDelete(*pb.RpcBlockTableRowDeleteRequest) *pb.RpcBlockTableRowDeleteResponse
	BlockTableRowDuplicate(*pb.RpcBlockTableRowDuplicateRequest) *pb.RpcBlockTableRowDuplicateResponse
	BlockTableRowSetHeader(*pb.RpcBlockTableRowSetHeaderRequest) *pb.RpcBlockTableRowSetHeaderResponse
	BlockTableColumnCreate(*pb.RpcBlockTableColumnCreateRequest) *pb.RpcBlockTableColumnCreateResponse
	BlockTableColumnMove(*pb.RpcBlockTableColumnMoveRequest) *pb.RpcBlockTableColumnMoveResponse
	BlockTableColumnDelete(*pb.RpcBlockTableColumnDeleteRequest) *pb.RpcBlockTableColumnDeleteResponse
	BlockTableColumnDuplicate(*pb.RpcBlockTableColumnDuplicateRequest) *pb.RpcBlockTableColumnDuplicateResponse
	BlockTableRowListFill(*pb.RpcBlockTableRowListFillRequest) *pb.RpcBlockTableRowListFillResponse
	BlockTableRowListClean(*pb.RpcBlockTableRowListCleanRequest) *pb.RpcBlockTableRowListCleanResponse
	BlockTableColumnListFill(*pb.RpcBlockTableColumnListFillRequest) *pb.RpcBlockTableColumnListFillResponse
	BlockTableSort(*pb.RpcBlockTableSortRequest) *pb.RpcBlockTableSortResponse
	// Other specific block commands
	// ***
	BlockLinkCreateWithObject(*pb.RpcBlockLinkCreateWithObjectRequest) *pb.RpcBlockLinkCreateWithObjectResponse
	BlockLinkListSetAppearance(*pb.RpcBlockLinkListSetAppearanceRequest) *pb.RpcBlockLinkListSetAppearanceResponse
	BlockBookmarkFetch(*pb.RpcBlockBookmarkFetchRequest) *pb.RpcBlockBookmarkFetchResponse
	BlockBookmarkCreateAndFetch(*pb.RpcBlockBookmarkCreateAndFetchRequest) *pb.RpcBlockBookmarkCreateAndFetchResponse
	BlockRelationSetKey(*pb.RpcBlockRelationSetKeyRequest) *pb.RpcBlockRelationSetKeyResponse
	BlockRelationAdd(*pb.RpcBlockRelationAddRequest) *pb.RpcBlockRelationAddResponse
	BlockDivListSetStyle(*pb.RpcBlockDivListSetStyleRequest) *pb.RpcBlockDivListSetStyleResponse
	BlockLatexSetText(*pb.RpcBlockLatexSetTextRequest) *pb.RpcBlockLatexSetTextResponse
	ProcessCancel(*pb.RpcProcessCancelRequest) *pb.RpcProcessCancelResponse
	LogSend(*pb.RpcLogSendRequest) *pb.RpcLogSendResponse
	DebugSync(*pb.RpcDebugSyncRequest) *pb.RpcDebugSyncResponse
	DebugThread(*pb.RpcDebugThreadRequest) *pb.RpcDebugThreadResponse
	DebugTree(*pb.RpcDebugTreeRequest) *pb.RpcDebugTreeResponse
	DebugExportLocalstore(*pb.RpcDebugExportLocalstoreRequest) *pb.RpcDebugExportLocalstoreResponse
	DebugPing(*pb.RpcDebugPingRequest) *pb.RpcDebugPingResponse
	MetricsSetParameters(*pb.RpcMetricsSetParametersRequest) *pb.RpcMetricsSetParametersResponse
	// used only for lib-server via grpc
	// Streams not supported ### ListenEvents(*pb.Empty)
}

func registerClientCommandsHandler(srv ClientCommandsHandler) {
	clientCommandsHandler = srv
}

func AppGetVersion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAppGetVersionResponse{Error: &pb.RpcAppGetVersionResponseError{Code: pb.RpcAppGetVersionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAppGetVersionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAppGetVersionResponse{Error: &pb.RpcAppGetVersionResponseError{Code: pb.RpcAppGetVersionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AppGetVersion(in).Marshal()
	return resp
}

func AppSetDeviceState(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAppSetDeviceStateResponse{Error: &pb.RpcAppSetDeviceStateResponseError{Code: pb.RpcAppSetDeviceStateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAppSetDeviceStateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAppSetDeviceStateResponse{Error: &pb.RpcAppSetDeviceStateResponseError{Code: pb.RpcAppSetDeviceStateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AppSetDeviceState(in).Marshal()
	return resp
}

func AppShutdown(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAppShutdownResponse{Error: &pb.RpcAppShutdownResponseError{Code: pb.RpcAppShutdownResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAppShutdownRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAppShutdownResponse{Error: &pb.RpcAppShutdownResponseError{Code: pb.RpcAppShutdownResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AppShutdown(in).Marshal()
	return resp
}

func WalletCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletCreateResponse{Error: &pb.RpcWalletCreateResponseError{Code: pb.RpcWalletCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWalletCreateResponse{Error: &pb.RpcWalletCreateResponseError{Code: pb.RpcWalletCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletCreate(in).Marshal()
	return resp
}

func WalletRecover(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletRecoverResponse{Error: &pb.RpcWalletRecoverResponseError{Code: pb.RpcWalletRecoverResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletRecoverRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWalletRecoverResponse{Error: &pb.RpcWalletRecoverResponseError{Code: pb.RpcWalletRecoverResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletRecover(in).Marshal()
	return resp
}

func WalletConvert(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletConvertResponse{Error: &pb.RpcWalletConvertResponseError{Code: pb.RpcWalletConvertResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletConvertRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWalletConvertResponse{Error: &pb.RpcWalletConvertResponseError{Code: pb.RpcWalletConvertResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletConvert(in).Marshal()
	return resp
}

func WorkspaceCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceCreateResponse{Error: &pb.RpcWorkspaceCreateResponseError{Code: pb.RpcWorkspaceCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceCreateResponse{Error: &pb.RpcWorkspaceCreateResponseError{Code: pb.RpcWorkspaceCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceCreate(in).Marshal()
	return resp
}

func WorkspaceSelect(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceSelectResponse{Error: &pb.RpcWorkspaceSelectResponseError{Code: pb.RpcWorkspaceSelectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceSelectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceSelectResponse{Error: &pb.RpcWorkspaceSelectResponseError{Code: pb.RpcWorkspaceSelectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceSelect(in).Marshal()
	return resp
}

func WorkspaceGetCurrent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceGetCurrentResponse{Error: &pb.RpcWorkspaceGetCurrentResponseError{Code: pb.RpcWorkspaceGetCurrentResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceGetCurrentRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceGetCurrentResponse{Error: &pb.RpcWorkspaceGetCurrentResponseError{Code: pb.RpcWorkspaceGetCurrentResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceGetCurrent(in).Marshal()
	return resp
}

func WorkspaceGetAll(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceGetAllResponse{Error: &pb.RpcWorkspaceGetAllResponseError{Code: pb.RpcWorkspaceGetAllResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceGetAllRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceGetAllResponse{Error: &pb.RpcWorkspaceGetAllResponseError{Code: pb.RpcWorkspaceGetAllResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceGetAll(in).Marshal()
	return resp
}

func WorkspaceSetIsHighlighted(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceSetIsHighlightedResponse{Error: &pb.RpcWorkspaceSetIsHighlightedResponseError{Code: pb.RpcWorkspaceSetIsHighlightedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceSetIsHighlightedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceSetIsHighlightedResponse{Error: &pb.RpcWorkspaceSetIsHighlightedResponseError{Code: pb.RpcWorkspaceSetIsHighlightedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceSetIsHighlighted(in).Marshal()
	return resp
}

func WorkspaceExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceExportResponse{Error: &pb.RpcWorkspaceExportResponseError{Code: pb.RpcWorkspaceExportResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceExportRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceExportResponse{Error: &pb.RpcWorkspaceExportResponseError{Code: pb.RpcWorkspaceExportResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceExport(in).Marshal()
	return resp
}

func AccountRecover(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountRecoverResponse{Error: &pb.RpcAccountRecoverResponseError{Code: pb.RpcAccountRecoverResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountRecoverRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountRecoverResponse{Error: &pb.RpcAccountRecoverResponseError{Code: pb.RpcAccountRecoverResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountRecover(in).Marshal()
	return resp
}

func AccountCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountCreateResponse{Error: &pb.RpcAccountCreateResponseError{Code: pb.RpcAccountCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountCreateResponse{Error: &pb.RpcAccountCreateResponseError{Code: pb.RpcAccountCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountCreate(in).Marshal()
	return resp
}

func AccountDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountDeleteResponse{Error: &pb.RpcAccountDeleteResponseError{Code: pb.RpcAccountDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountDeleteResponse{Error: &pb.RpcAccountDeleteResponseError{Code: pb.RpcAccountDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountDelete(in).Marshal()
	return resp
}

func AccountSelect(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountSelectResponse{Error: &pb.RpcAccountSelectResponseError{Code: pb.RpcAccountSelectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountSelectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountSelectResponse{Error: &pb.RpcAccountSelectResponseError{Code: pb.RpcAccountSelectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountSelect(in).Marshal()
	return resp
}

func AccountStop(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountStopResponse{Error: &pb.RpcAccountStopResponseError{Code: pb.RpcAccountStopResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountStopRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountStopResponse{Error: &pb.RpcAccountStopResponseError{Code: pb.RpcAccountStopResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountStop(in).Marshal()
	return resp
}

func AccountMove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountMoveResponse{Error: &pb.RpcAccountMoveResponseError{Code: pb.RpcAccountMoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountMoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountMoveResponse{Error: &pb.RpcAccountMoveResponseError{Code: pb.RpcAccountMoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountMove(in).Marshal()
	return resp
}

func AccountConfigUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountConfigUpdateResponse{Error: &pb.RpcAccountConfigUpdateResponseError{Code: pb.RpcAccountConfigUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountConfigUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountConfigUpdateResponse{Error: &pb.RpcAccountConfigUpdateResponseError{Code: pb.RpcAccountConfigUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountConfigUpdate(in).Marshal()
	return resp
}

func ObjectOpen(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectOpenResponse{Error: &pb.RpcObjectOpenResponseError{Code: pb.RpcObjectOpenResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectOpenRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectOpenResponse{Error: &pb.RpcObjectOpenResponseError{Code: pb.RpcObjectOpenResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectOpen(in).Marshal()
	return resp
}

func ObjectClose(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCloseResponse{Error: &pb.RpcObjectCloseResponseError{Code: pb.RpcObjectCloseResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCloseRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCloseResponse{Error: &pb.RpcObjectCloseResponseError{Code: pb.RpcObjectCloseResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectClose(in).Marshal()
	return resp
}

func ObjectShow(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectShowResponse{Error: &pb.RpcObjectShowResponseError{Code: pb.RpcObjectShowResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectShowRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectShowResponse{Error: &pb.RpcObjectShowResponseError{Code: pb.RpcObjectShowResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectShow(in).Marshal()
	return resp
}

func ObjectCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateResponse{Error: &pb.RpcObjectCreateResponseError{Code: pb.RpcObjectCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateResponse{Error: &pb.RpcObjectCreateResponseError{Code: pb.RpcObjectCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreate(in).Marshal()
	return resp
}

func ObjectCreateBookmark(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateBookmarkResponse{Error: &pb.RpcObjectCreateBookmarkResponseError{Code: pb.RpcObjectCreateBookmarkResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateBookmarkRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateBookmarkResponse{Error: &pb.RpcObjectCreateBookmarkResponseError{Code: pb.RpcObjectCreateBookmarkResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateBookmark(in).Marshal()
	return resp
}

func ObjectCreateSet(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateSetResponse{Error: &pb.RpcObjectCreateSetResponseError{Code: pb.RpcObjectCreateSetResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateSetRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateSetResponse{Error: &pb.RpcObjectCreateSetResponseError{Code: pb.RpcObjectCreateSetResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateSet(in).Marshal()
	return resp
}

func ObjectGraph(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectGraphResponse{Error: &pb.RpcObjectGraphResponseError{Code: pb.RpcObjectGraphResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectGraphRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectGraphResponse{Error: &pb.RpcObjectGraphResponseError{Code: pb.RpcObjectGraphResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectGraph(in).Marshal()
	return resp
}

func ObjectSearch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSearchResponse{Error: &pb.RpcObjectSearchResponseError{Code: pb.RpcObjectSearchResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSearchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSearchResponse{Error: &pb.RpcObjectSearchResponseError{Code: pb.RpcObjectSearchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSearch(in).Marshal()
	return resp
}

func ObjectSearchSubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSearchSubscribeResponse{Error: &pb.RpcObjectSearchSubscribeResponseError{Code: pb.RpcObjectSearchSubscribeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSearchSubscribeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSearchSubscribeResponse{Error: &pb.RpcObjectSearchSubscribeResponseError{Code: pb.RpcObjectSearchSubscribeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSearchSubscribe(in).Marshal()
	return resp
}

func ObjectRelationSearchDistinct(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationSearchDistinctResponse{Error: &pb.RpcObjectRelationSearchDistinctResponseError{Code: pb.RpcObjectRelationSearchDistinctResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationSearchDistinctRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationSearchDistinctResponse{Error: &pb.RpcObjectRelationSearchDistinctResponseError{Code: pb.RpcObjectRelationSearchDistinctResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationSearchDistinct(in).Marshal()
	return resp
}

func ObjectSubscribeIds(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSubscribeIdsResponse{Error: &pb.RpcObjectSubscribeIdsResponseError{Code: pb.RpcObjectSubscribeIdsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSubscribeIdsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSubscribeIdsResponse{Error: &pb.RpcObjectSubscribeIdsResponseError{Code: pb.RpcObjectSubscribeIdsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSubscribeIds(in).Marshal()
	return resp
}

func ObjectSearchUnsubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSearchUnsubscribeResponse{Error: &pb.RpcObjectSearchUnsubscribeResponseError{Code: pb.RpcObjectSearchUnsubscribeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSearchUnsubscribeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSearchUnsubscribeResponse{Error: &pb.RpcObjectSearchUnsubscribeResponseError{Code: pb.RpcObjectSearchUnsubscribeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSearchUnsubscribe(in).Marshal()
	return resp
}

func ObjectSetDetails(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetDetailsResponse{Error: &pb.RpcObjectSetDetailsResponseError{Code: pb.RpcObjectSetDetailsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetDetailsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetDetailsResponse{Error: &pb.RpcObjectSetDetailsResponseError{Code: pb.RpcObjectSetDetailsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetDetails(in).Marshal()
	return resp
}

func ObjectDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectDuplicateResponse{Error: &pb.RpcObjectDuplicateResponseError{Code: pb.RpcObjectDuplicateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectDuplicateResponse{Error: &pb.RpcObjectDuplicateResponseError{Code: pb.RpcObjectDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectDuplicate(in).Marshal()
	return resp
}

func ObjectSetObjectType(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetObjectTypeResponse{Error: &pb.RpcObjectSetObjectTypeResponseError{Code: pb.RpcObjectSetObjectTypeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetObjectTypeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetObjectTypeResponse{Error: &pb.RpcObjectSetObjectTypeResponseError{Code: pb.RpcObjectSetObjectTypeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetObjectType(in).Marshal()
	return resp
}

func ObjectSetLayout(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetLayoutResponse{Error: &pb.RpcObjectSetLayoutResponseError{Code: pb.RpcObjectSetLayoutResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetLayoutRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetLayoutResponse{Error: &pb.RpcObjectSetLayoutResponseError{Code: pb.RpcObjectSetLayoutResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetLayout(in).Marshal()
	return resp
}

func ObjectSetIsFavorite(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetIsFavoriteResponse{Error: &pb.RpcObjectSetIsFavoriteResponseError{Code: pb.RpcObjectSetIsFavoriteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetIsFavoriteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetIsFavoriteResponse{Error: &pb.RpcObjectSetIsFavoriteResponseError{Code: pb.RpcObjectSetIsFavoriteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetIsFavorite(in).Marshal()
	return resp
}

func ObjectSetIsArchived(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetIsArchivedResponse{Error: &pb.RpcObjectSetIsArchivedResponseError{Code: pb.RpcObjectSetIsArchivedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetIsArchivedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetIsArchivedResponse{Error: &pb.RpcObjectSetIsArchivedResponseError{Code: pb.RpcObjectSetIsArchivedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetIsArchived(in).Marshal()
	return resp
}

func ObjectListDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListDuplicateResponse{Error: &pb.RpcObjectListDuplicateResponseError{Code: pb.RpcObjectListDuplicateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListDuplicateResponse{Error: &pb.RpcObjectListDuplicateResponseError{Code: pb.RpcObjectListDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListDuplicate(in).Marshal()
	return resp
}

func ObjectListDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListDeleteResponse{Error: &pb.RpcObjectListDeleteResponseError{Code: pb.RpcObjectListDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListDeleteResponse{Error: &pb.RpcObjectListDeleteResponseError{Code: pb.RpcObjectListDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListDelete(in).Marshal()
	return resp
}

func ObjectListSetIsArchived(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListSetIsArchivedResponse{Error: &pb.RpcObjectListSetIsArchivedResponseError{Code: pb.RpcObjectListSetIsArchivedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListSetIsArchivedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListSetIsArchivedResponse{Error: &pb.RpcObjectListSetIsArchivedResponseError{Code: pb.RpcObjectListSetIsArchivedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListSetIsArchived(in).Marshal()
	return resp
}

func ObjectListSetIsFavorite(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListSetIsFavoriteResponse{Error: &pb.RpcObjectListSetIsFavoriteResponseError{Code: pb.RpcObjectListSetIsFavoriteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListSetIsFavoriteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListSetIsFavoriteResponse{Error: &pb.RpcObjectListSetIsFavoriteResponseError{Code: pb.RpcObjectListSetIsFavoriteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListSetIsFavorite(in).Marshal()
	return resp
}

func ObjectApplyTemplate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectApplyTemplateResponse{Error: &pb.RpcObjectApplyTemplateResponseError{Code: pb.RpcObjectApplyTemplateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectApplyTemplateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectApplyTemplateResponse{Error: &pb.RpcObjectApplyTemplateResponseError{Code: pb.RpcObjectApplyTemplateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectApplyTemplate(in).Marshal()
	return resp
}

func ObjectToSet(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectToSetResponse{Error: &pb.RpcObjectToSetResponseError{Code: pb.RpcObjectToSetResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectToSetRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectToSetResponse{Error: &pb.RpcObjectToSetResponseError{Code: pb.RpcObjectToSetResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectToSet(in).Marshal()
	return resp
}

func ObjectAddWithObjectId(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectAddWithObjectIdResponse{Error: &pb.RpcObjectAddWithObjectIdResponseError{Code: pb.RpcObjectAddWithObjectIdResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectAddWithObjectIdRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectAddWithObjectIdResponse{Error: &pb.RpcObjectAddWithObjectIdResponseError{Code: pb.RpcObjectAddWithObjectIdResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectAddWithObjectId(in).Marshal()
	return resp
}

func ObjectShareByLink(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectShareByLinkResponse{Error: &pb.RpcObjectShareByLinkResponseError{Code: pb.RpcObjectShareByLinkResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectShareByLinkRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectShareByLinkResponse{Error: &pb.RpcObjectShareByLinkResponseError{Code: pb.RpcObjectShareByLinkResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectShareByLink(in).Marshal()
	return resp
}

func ObjectOpenBreadcrumbs(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectOpenBreadcrumbsResponse{Error: &pb.RpcObjectOpenBreadcrumbsResponseError{Code: pb.RpcObjectOpenBreadcrumbsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectOpenBreadcrumbsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectOpenBreadcrumbsResponse{Error: &pb.RpcObjectOpenBreadcrumbsResponseError{Code: pb.RpcObjectOpenBreadcrumbsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectOpenBreadcrumbs(in).Marshal()
	return resp
}

func ObjectSetBreadcrumbs(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetBreadcrumbsResponse{Error: &pb.RpcObjectSetBreadcrumbsResponseError{Code: pb.RpcObjectSetBreadcrumbsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetBreadcrumbsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetBreadcrumbsResponse{Error: &pb.RpcObjectSetBreadcrumbsResponseError{Code: pb.RpcObjectSetBreadcrumbsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetBreadcrumbs(in).Marshal()
	return resp
}

func ObjectUndo(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectUndoResponse{Error: &pb.RpcObjectUndoResponseError{Code: pb.RpcObjectUndoResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectUndoRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectUndoResponse{Error: &pb.RpcObjectUndoResponseError{Code: pb.RpcObjectUndoResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectUndo(in).Marshal()
	return resp
}

func ObjectRedo(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRedoResponse{Error: &pb.RpcObjectRedoResponseError{Code: pb.RpcObjectRedoResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRedoRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRedoResponse{Error: &pb.RpcObjectRedoResponseError{Code: pb.RpcObjectRedoResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRedo(in).Marshal()
	return resp
}

func ObjectImportMarkdown(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportMarkdownResponse{Error: &pb.RpcObjectImportMarkdownResponseError{Code: pb.RpcObjectImportMarkdownResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportMarkdownRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectImportMarkdownResponse{Error: &pb.RpcObjectImportMarkdownResponseError{Code: pb.RpcObjectImportMarkdownResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImportMarkdown(in).Marshal()
	return resp
}

func ObjectListExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListExportResponse{Error: &pb.RpcObjectListExportResponseError{Code: pb.RpcObjectListExportResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListExportRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListExportResponse{Error: &pb.RpcObjectListExportResponseError{Code: pb.RpcObjectListExportResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListExport(in).Marshal()
	return resp
}

func ObjectBookmarkFetch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectBookmarkFetchResponse{Error: &pb.RpcObjectBookmarkFetchResponseError{Code: pb.RpcObjectBookmarkFetchResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectBookmarkFetchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectBookmarkFetchResponse{Error: &pb.RpcObjectBookmarkFetchResponseError{Code: pb.RpcObjectBookmarkFetchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectBookmarkFetch(in).Marshal()
	return resp
}

func ObjectToBookmark(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectToBookmarkResponse{Error: &pb.RpcObjectToBookmarkResponseError{Code: pb.RpcObjectToBookmarkResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectToBookmarkRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectToBookmarkResponse{Error: &pb.RpcObjectToBookmarkResponseError{Code: pb.RpcObjectToBookmarkResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectToBookmark(in).Marshal()
	return resp
}

func ObjectRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationAddResponse{Error: &pb.RpcObjectRelationAddResponseError{Code: pb.RpcObjectRelationAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationAddResponse{Error: &pb.RpcObjectRelationAddResponseError{Code: pb.RpcObjectRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationAdd(in).Marshal()
	return resp
}

func ObjectRelationUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationUpdateResponse{Error: &pb.RpcObjectRelationUpdateResponseError{Code: pb.RpcObjectRelationUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationUpdateResponse{Error: &pb.RpcObjectRelationUpdateResponseError{Code: pb.RpcObjectRelationUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationUpdate(in).Marshal()
	return resp
}

func ObjectRelationDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationDeleteResponse{Error: &pb.RpcObjectRelationDeleteResponseError{Code: pb.RpcObjectRelationDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationDeleteResponse{Error: &pb.RpcObjectRelationDeleteResponseError{Code: pb.RpcObjectRelationDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationDelete(in).Marshal()
	return resp
}

func ObjectRelationAddFeatured(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationAddFeaturedResponse{Error: &pb.RpcObjectRelationAddFeaturedResponseError{Code: pb.RpcObjectRelationAddFeaturedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationAddFeaturedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationAddFeaturedResponse{Error: &pb.RpcObjectRelationAddFeaturedResponseError{Code: pb.RpcObjectRelationAddFeaturedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationAddFeatured(in).Marshal()
	return resp
}

func ObjectRelationRemoveFeatured(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationRemoveFeaturedResponse{Error: &pb.RpcObjectRelationRemoveFeaturedResponseError{Code: pb.RpcObjectRelationRemoveFeaturedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationRemoveFeaturedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationRemoveFeaturedResponse{Error: &pb.RpcObjectRelationRemoveFeaturedResponseError{Code: pb.RpcObjectRelationRemoveFeaturedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationRemoveFeatured(in).Marshal()
	return resp
}

func ObjectRelationListAvailable(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationListAvailableResponse{Error: &pb.RpcObjectRelationListAvailableResponseError{Code: pb.RpcObjectRelationListAvailableResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationListAvailableRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationListAvailableResponse{Error: &pb.RpcObjectRelationListAvailableResponseError{Code: pb.RpcObjectRelationListAvailableResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationListAvailable(in).Marshal()
	return resp
}

func ObjectRelationOptionAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationOptionAddResponse{Error: &pb.RpcObjectRelationOptionAddResponseError{Code: pb.RpcObjectRelationOptionAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationOptionAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationOptionAddResponse{Error: &pb.RpcObjectRelationOptionAddResponseError{Code: pb.RpcObjectRelationOptionAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationOptionAdd(in).Marshal()
	return resp
}

func ObjectRelationOptionUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationOptionUpdateResponse{Error: &pb.RpcObjectRelationOptionUpdateResponseError{Code: pb.RpcObjectRelationOptionUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationOptionUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationOptionUpdateResponse{Error: &pb.RpcObjectRelationOptionUpdateResponseError{Code: pb.RpcObjectRelationOptionUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationOptionUpdate(in).Marshal()
	return resp
}

func ObjectRelationOptionDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationOptionDeleteResponse{Error: &pb.RpcObjectRelationOptionDeleteResponseError{Code: pb.RpcObjectRelationOptionDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationOptionDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationOptionDeleteResponse{Error: &pb.RpcObjectRelationOptionDeleteResponseError{Code: pb.RpcObjectRelationOptionDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationOptionDelete(in).Marshal()
	return resp
}

func ObjectTypeCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeCreateResponse{Error: &pb.RpcObjectTypeCreateResponseError{Code: pb.RpcObjectTypeCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeCreateResponse{Error: &pb.RpcObjectTypeCreateResponseError{Code: pb.RpcObjectTypeCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeCreate(in).Marshal()
	return resp
}

func ObjectTypeList(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeListResponse{Error: &pb.RpcObjectTypeListResponseError{Code: pb.RpcObjectTypeListResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeListRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeListResponse{Error: &pb.RpcObjectTypeListResponseError{Code: pb.RpcObjectTypeListResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeList(in).Marshal()
	return resp
}

func ObjectTypeRelationList(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeRelationListResponse{Error: &pb.RpcObjectTypeRelationListResponseError{Code: pb.RpcObjectTypeRelationListResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeRelationListRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeRelationListResponse{Error: &pb.RpcObjectTypeRelationListResponseError{Code: pb.RpcObjectTypeRelationListResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeRelationList(in).Marshal()
	return resp
}

func ObjectTypeRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeRelationAddResponse{Error: &pb.RpcObjectTypeRelationAddResponseError{Code: pb.RpcObjectTypeRelationAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeRelationAddResponse{Error: &pb.RpcObjectTypeRelationAddResponseError{Code: pb.RpcObjectTypeRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeRelationAdd(in).Marshal()
	return resp
}

func ObjectTypeRelationUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeRelationUpdateResponse{Error: &pb.RpcObjectTypeRelationUpdateResponseError{Code: pb.RpcObjectTypeRelationUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeRelationUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeRelationUpdateResponse{Error: &pb.RpcObjectTypeRelationUpdateResponseError{Code: pb.RpcObjectTypeRelationUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeRelationUpdate(in).Marshal()
	return resp
}

func ObjectTypeRelationRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeRelationRemoveResponse{Error: &pb.RpcObjectTypeRelationRemoveResponseError{Code: pb.RpcObjectTypeRelationRemoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeRelationRemoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeRelationRemoveResponse{Error: &pb.RpcObjectTypeRelationRemoveResponseError{Code: pb.RpcObjectTypeRelationRemoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeRelationRemove(in).Marshal()
	return resp
}

func HistoryShowVersion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcHistoryShowVersionResponse{Error: &pb.RpcHistoryShowVersionResponseError{Code: pb.RpcHistoryShowVersionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcHistoryShowVersionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcHistoryShowVersionResponse{Error: &pb.RpcHistoryShowVersionResponseError{Code: pb.RpcHistoryShowVersionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.HistoryShowVersion(in).Marshal()
	return resp
}

func HistoryGetVersions(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcHistoryGetVersionsResponse{Error: &pb.RpcHistoryGetVersionsResponseError{Code: pb.RpcHistoryGetVersionsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcHistoryGetVersionsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcHistoryGetVersionsResponse{Error: &pb.RpcHistoryGetVersionsResponseError{Code: pb.RpcHistoryGetVersionsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.HistoryGetVersions(in).Marshal()
	return resp
}

func HistorySetVersion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcHistorySetVersionResponse{Error: &pb.RpcHistorySetVersionResponseError{Code: pb.RpcHistorySetVersionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcHistorySetVersionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcHistorySetVersionResponse{Error: &pb.RpcHistorySetVersionResponseError{Code: pb.RpcHistorySetVersionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.HistorySetVersion(in).Marshal()
	return resp
}

func FileOffload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileOffloadResponse{Error: &pb.RpcFileOffloadResponseError{Code: pb.RpcFileOffloadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileOffloadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileOffloadResponse{Error: &pb.RpcFileOffloadResponseError{Code: pb.RpcFileOffloadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileOffload(in).Marshal()
	return resp
}

func FileListOffload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileListOffloadResponse{Error: &pb.RpcFileListOffloadResponseError{Code: pb.RpcFileListOffloadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileListOffloadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileListOffloadResponse{Error: &pb.RpcFileListOffloadResponseError{Code: pb.RpcFileListOffloadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileListOffload(in).Marshal()
	return resp
}

func FileUpload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileUploadResponse{Error: &pb.RpcFileUploadResponseError{Code: pb.RpcFileUploadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileUploadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileUploadResponse{Error: &pb.RpcFileUploadResponseError{Code: pb.RpcFileUploadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileUpload(in).Marshal()
	return resp
}

func FileDownload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileDownloadResponse{Error: &pb.RpcFileDownloadResponseError{Code: pb.RpcFileDownloadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileDownloadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileDownloadResponse{Error: &pb.RpcFileDownloadResponseError{Code: pb.RpcFileDownloadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileDownload(in).Marshal()
	return resp
}

func FileDrop(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileDropResponse{Error: &pb.RpcFileDropResponseError{Code: pb.RpcFileDropResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileDropRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileDropResponse{Error: &pb.RpcFileDropResponseError{Code: pb.RpcFileDropResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileDrop(in).Marshal()
	return resp
}

func NavigationListObjects(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNavigationListObjectsResponse{Error: &pb.RpcNavigationListObjectsResponseError{Code: pb.RpcNavigationListObjectsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNavigationListObjectsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcNavigationListObjectsResponse{Error: &pb.RpcNavigationListObjectsResponseError{Code: pb.RpcNavigationListObjectsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.NavigationListObjects(in).Marshal()
	return resp
}

func NavigationGetObjectInfoWithLinks(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNavigationGetObjectInfoWithLinksResponse{Error: &pb.RpcNavigationGetObjectInfoWithLinksResponseError{Code: pb.RpcNavigationGetObjectInfoWithLinksResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNavigationGetObjectInfoWithLinksRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcNavigationGetObjectInfoWithLinksResponse{Error: &pb.RpcNavigationGetObjectInfoWithLinksResponseError{Code: pb.RpcNavigationGetObjectInfoWithLinksResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.NavigationGetObjectInfoWithLinks(in).Marshal()
	return resp
}

func TemplateCreateFromObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcTemplateCreateFromObjectResponse{Error: &pb.RpcTemplateCreateFromObjectResponseError{Code: pb.RpcTemplateCreateFromObjectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcTemplateCreateFromObjectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcTemplateCreateFromObjectResponse{Error: &pb.RpcTemplateCreateFromObjectResponseError{Code: pb.RpcTemplateCreateFromObjectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.TemplateCreateFromObject(in).Marshal()
	return resp
}

func TemplateCreateFromObjectType(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcTemplateCreateFromObjectTypeResponse{Error: &pb.RpcTemplateCreateFromObjectTypeResponseError{Code: pb.RpcTemplateCreateFromObjectTypeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcTemplateCreateFromObjectTypeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcTemplateCreateFromObjectTypeResponse{Error: &pb.RpcTemplateCreateFromObjectTypeResponseError{Code: pb.RpcTemplateCreateFromObjectTypeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.TemplateCreateFromObjectType(in).Marshal()
	return resp
}

func TemplateClone(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcTemplateCloneResponse{Error: &pb.RpcTemplateCloneResponseError{Code: pb.RpcTemplateCloneResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcTemplateCloneRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcTemplateCloneResponse{Error: &pb.RpcTemplateCloneResponseError{Code: pb.RpcTemplateCloneResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.TemplateClone(in).Marshal()
	return resp
}

func TemplateExportAll(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcTemplateExportAllResponse{Error: &pb.RpcTemplateExportAllResponseError{Code: pb.RpcTemplateExportAllResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcTemplateExportAllRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcTemplateExportAllResponse{Error: &pb.RpcTemplateExportAllResponseError{Code: pb.RpcTemplateExportAllResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.TemplateExportAll(in).Marshal()
	return resp
}

func LinkPreview(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcLinkPreviewResponse{Error: &pb.RpcLinkPreviewResponseError{Code: pb.RpcLinkPreviewResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcLinkPreviewRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcLinkPreviewResponse{Error: &pb.RpcLinkPreviewResponseError{Code: pb.RpcLinkPreviewResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.LinkPreview(in).Marshal()
	return resp
}

func UnsplashSearch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcUnsplashSearchResponse{Error: &pb.RpcUnsplashSearchResponseError{Code: pb.RpcUnsplashSearchResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcUnsplashSearchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcUnsplashSearchResponse{Error: &pb.RpcUnsplashSearchResponseError{Code: pb.RpcUnsplashSearchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.UnsplashSearch(in).Marshal()
	return resp
}

func UnsplashDownload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcUnsplashDownloadResponse{Error: &pb.RpcUnsplashDownloadResponseError{Code: pb.RpcUnsplashDownloadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcUnsplashDownloadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcUnsplashDownloadResponse{Error: &pb.RpcUnsplashDownloadResponseError{Code: pb.RpcUnsplashDownloadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.UnsplashDownload(in).Marshal()
	return resp
}

func BlockUpload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockUploadResponse{Error: &pb.RpcBlockUploadResponseError{Code: pb.RpcBlockUploadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockUploadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockUploadResponse{Error: &pb.RpcBlockUploadResponseError{Code: pb.RpcBlockUploadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockUpload(in).Marshal()
	return resp
}

func BlockReplace(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockReplaceResponse{Error: &pb.RpcBlockReplaceResponseError{Code: pb.RpcBlockReplaceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockReplaceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockReplaceResponse{Error: &pb.RpcBlockReplaceResponseError{Code: pb.RpcBlockReplaceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockReplace(in).Marshal()
	return resp
}

func BlockCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCreateResponse{Error: &pb.RpcBlockCreateResponseError{Code: pb.RpcBlockCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockCreateResponse{Error: &pb.RpcBlockCreateResponseError{Code: pb.RpcBlockCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCreate(in).Marshal()
	return resp
}

func BlockSplit(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockSplitResponse{Error: &pb.RpcBlockSplitResponseError{Code: pb.RpcBlockSplitResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockSplitRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockSplitResponse{Error: &pb.RpcBlockSplitResponseError{Code: pb.RpcBlockSplitResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockSplit(in).Marshal()
	return resp
}

func BlockMerge(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockMergeResponse{Error: &pb.RpcBlockMergeResponseError{Code: pb.RpcBlockMergeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockMergeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockMergeResponse{Error: &pb.RpcBlockMergeResponseError{Code: pb.RpcBlockMergeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockMerge(in).Marshal()
	return resp
}

func BlockCopy(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCopyResponse{Error: &pb.RpcBlockCopyResponseError{Code: pb.RpcBlockCopyResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCopyRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockCopyResponse{Error: &pb.RpcBlockCopyResponseError{Code: pb.RpcBlockCopyResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCopy(in).Marshal()
	return resp
}

func BlockPaste(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockPasteResponse{Error: &pb.RpcBlockPasteResponseError{Code: pb.RpcBlockPasteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockPasteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockPasteResponse{Error: &pb.RpcBlockPasteResponseError{Code: pb.RpcBlockPasteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockPaste(in).Marshal()
	return resp
}

func BlockCut(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCutResponse{Error: &pb.RpcBlockCutResponseError{Code: pb.RpcBlockCutResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCutRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockCutResponse{Error: &pb.RpcBlockCutResponseError{Code: pb.RpcBlockCutResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCut(in).Marshal()
	return resp
}

func BlockSetFields(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockSetFieldsResponse{Error: &pb.RpcBlockSetFieldsResponseError{Code: pb.RpcBlockSetFieldsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockSetFieldsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockSetFieldsResponse{Error: &pb.RpcBlockSetFieldsResponseError{Code: pb.RpcBlockSetFieldsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockSetFields(in).Marshal()
	return resp
}

func BlockExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockExportResponse{Error: &pb.RpcBlockExportResponseError{Code: pb.RpcBlockExportResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockExportRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockExportResponse{Error: &pb.RpcBlockExportResponseError{Code: pb.RpcBlockExportResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockExport(in).Marshal()
	return resp
}

func BlockListDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListDeleteResponse{Error: &pb.RpcBlockListDeleteResponseError{Code: pb.RpcBlockListDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListDeleteResponse{Error: &pb.RpcBlockListDeleteResponseError{Code: pb.RpcBlockListDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListDelete(in).Marshal()
	return resp
}

func BlockListMoveToExistingObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListMoveToExistingObjectResponse{Error: &pb.RpcBlockListMoveToExistingObjectResponseError{Code: pb.RpcBlockListMoveToExistingObjectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListMoveToExistingObjectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListMoveToExistingObjectResponse{Error: &pb.RpcBlockListMoveToExistingObjectResponseError{Code: pb.RpcBlockListMoveToExistingObjectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListMoveToExistingObject(in).Marshal()
	return resp
}

func BlockListMoveToNewObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListMoveToNewObjectResponse{Error: &pb.RpcBlockListMoveToNewObjectResponseError{Code: pb.RpcBlockListMoveToNewObjectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListMoveToNewObjectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListMoveToNewObjectResponse{Error: &pb.RpcBlockListMoveToNewObjectResponseError{Code: pb.RpcBlockListMoveToNewObjectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListMoveToNewObject(in).Marshal()
	return resp
}

func BlockListConvertToObjects(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListConvertToObjectsResponse{Error: &pb.RpcBlockListConvertToObjectsResponseError{Code: pb.RpcBlockListConvertToObjectsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListConvertToObjectsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListConvertToObjectsResponse{Error: &pb.RpcBlockListConvertToObjectsResponseError{Code: pb.RpcBlockListConvertToObjectsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListConvertToObjects(in).Marshal()
	return resp
}

func BlockListSetFields(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetFieldsResponse{Error: &pb.RpcBlockListSetFieldsResponseError{Code: pb.RpcBlockListSetFieldsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetFieldsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetFieldsResponse{Error: &pb.RpcBlockListSetFieldsResponseError{Code: pb.RpcBlockListSetFieldsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetFields(in).Marshal()
	return resp
}

func BlockListDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListDuplicateResponse{Error: &pb.RpcBlockListDuplicateResponseError{Code: pb.RpcBlockListDuplicateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListDuplicateResponse{Error: &pb.RpcBlockListDuplicateResponseError{Code: pb.RpcBlockListDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListDuplicate(in).Marshal()
	return resp
}

func BlockListSetBackgroundColor(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetBackgroundColorResponse{Error: &pb.RpcBlockListSetBackgroundColorResponseError{Code: pb.RpcBlockListSetBackgroundColorResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetBackgroundColorRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetBackgroundColorResponse{Error: &pb.RpcBlockListSetBackgroundColorResponseError{Code: pb.RpcBlockListSetBackgroundColorResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetBackgroundColor(in).Marshal()
	return resp
}

func BlockListSetAlign(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetAlignResponse{Error: &pb.RpcBlockListSetAlignResponseError{Code: pb.RpcBlockListSetAlignResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetAlignRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetAlignResponse{Error: &pb.RpcBlockListSetAlignResponseError{Code: pb.RpcBlockListSetAlignResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetAlign(in).Marshal()
	return resp
}

func BlockListSetVerticalAlign(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetVerticalAlignResponse{Error: &pb.RpcBlockListSetVerticalAlignResponseError{Code: pb.RpcBlockListSetVerticalAlignResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetVerticalAlignRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetVerticalAlignResponse{Error: &pb.RpcBlockListSetVerticalAlignResponseError{Code: pb.RpcBlockListSetVerticalAlignResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetVerticalAlign(in).Marshal()
	return resp
}

func BlockListTurnInto(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListTurnIntoResponse{Error: &pb.RpcBlockListTurnIntoResponseError{Code: pb.RpcBlockListTurnIntoResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListTurnIntoRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListTurnIntoResponse{Error: &pb.RpcBlockListTurnIntoResponseError{Code: pb.RpcBlockListTurnIntoResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListTurnInto(in).Marshal()
	return resp
}

func BlockTextSetText(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetTextResponse{Error: &pb.RpcBlockTextSetTextResponseError{Code: pb.RpcBlockTextSetTextResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetTextRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetTextResponse{Error: &pb.RpcBlockTextSetTextResponseError{Code: pb.RpcBlockTextSetTextResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetText(in).Marshal()
	return resp
}

func BlockTextSetColor(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetColorResponse{Error: &pb.RpcBlockTextSetColorResponseError{Code: pb.RpcBlockTextSetColorResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetColorRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetColorResponse{Error: &pb.RpcBlockTextSetColorResponseError{Code: pb.RpcBlockTextSetColorResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetColor(in).Marshal()
	return resp
}

func BlockTextSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetStyleResponse{Error: &pb.RpcBlockTextSetStyleResponseError{Code: pb.RpcBlockTextSetStyleResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetStyleResponse{Error: &pb.RpcBlockTextSetStyleResponseError{Code: pb.RpcBlockTextSetStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetStyle(in).Marshal()
	return resp
}

func BlockTextSetChecked(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetCheckedResponse{Error: &pb.RpcBlockTextSetCheckedResponseError{Code: pb.RpcBlockTextSetCheckedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetCheckedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetCheckedResponse{Error: &pb.RpcBlockTextSetCheckedResponseError{Code: pb.RpcBlockTextSetCheckedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetChecked(in).Marshal()
	return resp
}

func BlockTextSetIcon(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetIconResponse{Error: &pb.RpcBlockTextSetIconResponseError{Code: pb.RpcBlockTextSetIconResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetIconRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetIconResponse{Error: &pb.RpcBlockTextSetIconResponseError{Code: pb.RpcBlockTextSetIconResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetIcon(in).Marshal()
	return resp
}

func BlockTextListSetColor(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListSetColorResponse{Error: &pb.RpcBlockTextListSetColorResponseError{Code: pb.RpcBlockTextListSetColorResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListSetColorRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListSetColorResponse{Error: &pb.RpcBlockTextListSetColorResponseError{Code: pb.RpcBlockTextListSetColorResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListSetColor(in).Marshal()
	return resp
}

func BlockTextListSetMark(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListSetMarkResponse{Error: &pb.RpcBlockTextListSetMarkResponseError{Code: pb.RpcBlockTextListSetMarkResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListSetMarkRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListSetMarkResponse{Error: &pb.RpcBlockTextListSetMarkResponseError{Code: pb.RpcBlockTextListSetMarkResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListSetMark(in).Marshal()
	return resp
}

func BlockTextListSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListSetStyleResponse{Error: &pb.RpcBlockTextListSetStyleResponseError{Code: pb.RpcBlockTextListSetStyleResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListSetStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListSetStyleResponse{Error: &pb.RpcBlockTextListSetStyleResponseError{Code: pb.RpcBlockTextListSetStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListSetStyle(in).Marshal()
	return resp
}

func BlockTextListClearStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListClearStyleResponse{Error: &pb.RpcBlockTextListClearStyleResponseError{Code: pb.RpcBlockTextListClearStyleResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListClearStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListClearStyleResponse{Error: &pb.RpcBlockTextListClearStyleResponseError{Code: pb.RpcBlockTextListClearStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListClearStyle(in).Marshal()
	return resp
}

func BlockTextListClearContent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListClearContentResponse{Error: &pb.RpcBlockTextListClearContentResponseError{Code: pb.RpcBlockTextListClearContentResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListClearContentRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListClearContentResponse{Error: &pb.RpcBlockTextListClearContentResponseError{Code: pb.RpcBlockTextListClearContentResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListClearContent(in).Marshal()
	return resp
}

func BlockFileSetName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockFileSetNameResponse{Error: &pb.RpcBlockFileSetNameResponseError{Code: pb.RpcBlockFileSetNameResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockFileSetNameRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockFileSetNameResponse{Error: &pb.RpcBlockFileSetNameResponseError{Code: pb.RpcBlockFileSetNameResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockFileSetName(in).Marshal()
	return resp
}

func BlockImageSetName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockImageSetNameResponse{Error: &pb.RpcBlockImageSetNameResponseError{Code: pb.RpcBlockImageSetNameResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockImageSetNameRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockImageSetNameResponse{Error: &pb.RpcBlockImageSetNameResponseError{Code: pb.RpcBlockImageSetNameResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockImageSetName(in).Marshal()
	return resp
}

func BlockVideoSetName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockVideoSetNameResponse{Error: &pb.RpcBlockVideoSetNameResponseError{Code: pb.RpcBlockVideoSetNameResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockVideoSetNameRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockVideoSetNameResponse{Error: &pb.RpcBlockVideoSetNameResponseError{Code: pb.RpcBlockVideoSetNameResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockVideoSetName(in).Marshal()
	return resp
}

func BlockFileCreateAndUpload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockFileCreateAndUploadResponse{Error: &pb.RpcBlockFileCreateAndUploadResponseError{Code: pb.RpcBlockFileCreateAndUploadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockFileCreateAndUploadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockFileCreateAndUploadResponse{Error: &pb.RpcBlockFileCreateAndUploadResponseError{Code: pb.RpcBlockFileCreateAndUploadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockFileCreateAndUpload(in).Marshal()
	return resp
}

func BlockFileListSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockFileListSetStyleResponse{Error: &pb.RpcBlockFileListSetStyleResponseError{Code: pb.RpcBlockFileListSetStyleResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockFileListSetStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockFileListSetStyleResponse{Error: &pb.RpcBlockFileListSetStyleResponseError{Code: pb.RpcBlockFileListSetStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockFileListSetStyle(in).Marshal()
	return resp
}

func BlockDataviewViewCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewCreateResponse{Error: &pb.RpcBlockDataviewViewCreateResponseError{Code: pb.RpcBlockDataviewViewCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewCreateResponse{Error: &pb.RpcBlockDataviewViewCreateResponseError{Code: pb.RpcBlockDataviewViewCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewCreate(in).Marshal()
	return resp
}

func BlockDataviewViewDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewDeleteResponse{Error: &pb.RpcBlockDataviewViewDeleteResponseError{Code: pb.RpcBlockDataviewViewDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewDeleteResponse{Error: &pb.RpcBlockDataviewViewDeleteResponseError{Code: pb.RpcBlockDataviewViewDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewDelete(in).Marshal()
	return resp
}

func BlockDataviewViewUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewUpdateResponse{Error: &pb.RpcBlockDataviewViewUpdateResponseError{Code: pb.RpcBlockDataviewViewUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewUpdateResponse{Error: &pb.RpcBlockDataviewViewUpdateResponseError{Code: pb.RpcBlockDataviewViewUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewUpdate(in).Marshal()
	return resp
}

func BlockDataviewViewSetActive(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewSetActiveResponse{Error: &pb.RpcBlockDataviewViewSetActiveResponseError{Code: pb.RpcBlockDataviewViewSetActiveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewSetActiveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewSetActiveResponse{Error: &pb.RpcBlockDataviewViewSetActiveResponseError{Code: pb.RpcBlockDataviewViewSetActiveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewSetActive(in).Marshal()
	return resp
}

func BlockDataviewViewSetPosition(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewSetPositionResponse{Error: &pb.RpcBlockDataviewViewSetPositionResponseError{Code: pb.RpcBlockDataviewViewSetPositionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewSetPositionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewSetPositionResponse{Error: &pb.RpcBlockDataviewViewSetPositionResponseError{Code: pb.RpcBlockDataviewViewSetPositionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewSetPosition(in).Marshal()
	return resp
}

func BlockDataviewSetSource(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSetSourceResponse{Error: &pb.RpcBlockDataviewSetSourceResponseError{Code: pb.RpcBlockDataviewSetSourceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSetSourceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSetSourceResponse{Error: &pb.RpcBlockDataviewSetSourceResponseError{Code: pb.RpcBlockDataviewSetSourceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSetSource(in).Marshal()
	return resp
}

func BlockDataviewRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRelationAddResponse{Error: &pb.RpcBlockDataviewRelationAddResponseError{Code: pb.RpcBlockDataviewRelationAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRelationAddResponse{Error: &pb.RpcBlockDataviewRelationAddResponseError{Code: pb.RpcBlockDataviewRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRelationAdd(in).Marshal()
	return resp
}

func BlockDataviewRelationUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRelationUpdateResponse{Error: &pb.RpcBlockDataviewRelationUpdateResponseError{Code: pb.RpcBlockDataviewRelationUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRelationUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRelationUpdateResponse{Error: &pb.RpcBlockDataviewRelationUpdateResponseError{Code: pb.RpcBlockDataviewRelationUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRelationUpdate(in).Marshal()
	return resp
}

func BlockDataviewRelationDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRelationDeleteResponse{Error: &pb.RpcBlockDataviewRelationDeleteResponseError{Code: pb.RpcBlockDataviewRelationDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRelationDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRelationDeleteResponse{Error: &pb.RpcBlockDataviewRelationDeleteResponseError{Code: pb.RpcBlockDataviewRelationDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRelationDelete(in).Marshal()
	return resp
}

func BlockDataviewRelationListAvailable(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRelationListAvailableResponse{Error: &pb.RpcBlockDataviewRelationListAvailableResponseError{Code: pb.RpcBlockDataviewRelationListAvailableResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRelationListAvailableRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRelationListAvailableResponse{Error: &pb.RpcBlockDataviewRelationListAvailableResponseError{Code: pb.RpcBlockDataviewRelationListAvailableResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRelationListAvailable(in).Marshal()
	return resp
}

func BlockDataviewGroupOrderUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewGroupOrderUpdateResponse{Error: &pb.RpcBlockDataviewGroupOrderUpdateResponseError{Code: pb.RpcBlockDataviewGroupOrderUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewGroupOrderUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewGroupOrderUpdateResponse{Error: &pb.RpcBlockDataviewGroupOrderUpdateResponseError{Code: pb.RpcBlockDataviewGroupOrderUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewGroupOrderUpdate(in).Marshal()
	return resp
}

func BlockDataviewObjectOrderUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewObjectOrderUpdateResponse{Error: &pb.RpcBlockDataviewObjectOrderUpdateResponseError{Code: pb.RpcBlockDataviewObjectOrderUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewObjectOrderUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewObjectOrderUpdateResponse{Error: &pb.RpcBlockDataviewObjectOrderUpdateResponseError{Code: pb.RpcBlockDataviewObjectOrderUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewObjectOrderUpdate(in).Marshal()
	return resp
}

func BlockDataviewRecordCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRecordCreateResponse{Error: &pb.RpcBlockDataviewRecordCreateResponseError{Code: pb.RpcBlockDataviewRecordCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRecordCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRecordCreateResponse{Error: &pb.RpcBlockDataviewRecordCreateResponseError{Code: pb.RpcBlockDataviewRecordCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRecordCreate(in).Marshal()
	return resp
}

func BlockDataviewRecordUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRecordUpdateResponse{Error: &pb.RpcBlockDataviewRecordUpdateResponseError{Code: pb.RpcBlockDataviewRecordUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRecordUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRecordUpdateResponse{Error: &pb.RpcBlockDataviewRecordUpdateResponseError{Code: pb.RpcBlockDataviewRecordUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRecordUpdate(in).Marshal()
	return resp
}

func BlockDataviewRecordDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRecordDeleteResponse{Error: &pb.RpcBlockDataviewRecordDeleteResponseError{Code: pb.RpcBlockDataviewRecordDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRecordDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRecordDeleteResponse{Error: &pb.RpcBlockDataviewRecordDeleteResponseError{Code: pb.RpcBlockDataviewRecordDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRecordDelete(in).Marshal()
	return resp
}

func BlockDataviewRecordRelationOptionAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRecordRelationOptionAddResponse{Error: &pb.RpcBlockDataviewRecordRelationOptionAddResponseError{Code: pb.RpcBlockDataviewRecordRelationOptionAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRecordRelationOptionAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRecordRelationOptionAddResponse{Error: &pb.RpcBlockDataviewRecordRelationOptionAddResponseError{Code: pb.RpcBlockDataviewRecordRelationOptionAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRecordRelationOptionAdd(in).Marshal()
	return resp
}

func BlockDataviewRecordRelationOptionUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRecordRelationOptionUpdateResponse{Error: &pb.RpcBlockDataviewRecordRelationOptionUpdateResponseError{Code: pb.RpcBlockDataviewRecordRelationOptionUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRecordRelationOptionUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRecordRelationOptionUpdateResponse{Error: &pb.RpcBlockDataviewRecordRelationOptionUpdateResponseError{Code: pb.RpcBlockDataviewRecordRelationOptionUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRecordRelationOptionUpdate(in).Marshal()
	return resp
}

func BlockDataviewRecordRelationOptionDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRecordRelationOptionDeleteResponse{Error: &pb.RpcBlockDataviewRecordRelationOptionDeleteResponseError{Code: pb.RpcBlockDataviewRecordRelationOptionDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRecordRelationOptionDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRecordRelationOptionDeleteResponse{Error: &pb.RpcBlockDataviewRecordRelationOptionDeleteResponseError{Code: pb.RpcBlockDataviewRecordRelationOptionDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRecordRelationOptionDelete(in).Marshal()
	return resp
}

func BlockTableCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableCreateResponse{Error: &pb.RpcBlockTableCreateResponseError{Code: pb.RpcBlockTableCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableCreateResponse{Error: &pb.RpcBlockTableCreateResponseError{Code: pb.RpcBlockTableCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableCreate(in).Marshal()
	return resp
}

func BlockTableExpand(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableExpandResponse{Error: &pb.RpcBlockTableExpandResponseError{Code: pb.RpcBlockTableExpandResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableExpandRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableExpandResponse{Error: &pb.RpcBlockTableExpandResponseError{Code: pb.RpcBlockTableExpandResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableExpand(in).Marshal()
	return resp
}

func BlockTableRowCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowCreateResponse{Error: &pb.RpcBlockTableRowCreateResponseError{Code: pb.RpcBlockTableRowCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowCreateResponse{Error: &pb.RpcBlockTableRowCreateResponseError{Code: pb.RpcBlockTableRowCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowCreate(in).Marshal()
	return resp
}

func BlockTableRowDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowDeleteResponse{Error: &pb.RpcBlockTableRowDeleteResponseError{Code: pb.RpcBlockTableRowDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowDeleteResponse{Error: &pb.RpcBlockTableRowDeleteResponseError{Code: pb.RpcBlockTableRowDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowDelete(in).Marshal()
	return resp
}

func BlockTableRowDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowDuplicateResponse{Error: &pb.RpcBlockTableRowDuplicateResponseError{Code: pb.RpcBlockTableRowDuplicateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowDuplicateResponse{Error: &pb.RpcBlockTableRowDuplicateResponseError{Code: pb.RpcBlockTableRowDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowDuplicate(in).Marshal()
	return resp
}

func BlockTableRowSetHeader(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowSetHeaderResponse{Error: &pb.RpcBlockTableRowSetHeaderResponseError{Code: pb.RpcBlockTableRowSetHeaderResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowSetHeaderRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowSetHeaderResponse{Error: &pb.RpcBlockTableRowSetHeaderResponseError{Code: pb.RpcBlockTableRowSetHeaderResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowSetHeader(in).Marshal()
	return resp
}

func BlockTableColumnCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnCreateResponse{Error: &pb.RpcBlockTableColumnCreateResponseError{Code: pb.RpcBlockTableColumnCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnCreateResponse{Error: &pb.RpcBlockTableColumnCreateResponseError{Code: pb.RpcBlockTableColumnCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnCreate(in).Marshal()
	return resp
}

func BlockTableColumnMove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnMoveResponse{Error: &pb.RpcBlockTableColumnMoveResponseError{Code: pb.RpcBlockTableColumnMoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnMoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnMoveResponse{Error: &pb.RpcBlockTableColumnMoveResponseError{Code: pb.RpcBlockTableColumnMoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnMove(in).Marshal()
	return resp
}

func BlockTableColumnDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnDeleteResponse{Error: &pb.RpcBlockTableColumnDeleteResponseError{Code: pb.RpcBlockTableColumnDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnDeleteResponse{Error: &pb.RpcBlockTableColumnDeleteResponseError{Code: pb.RpcBlockTableColumnDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnDelete(in).Marshal()
	return resp
}

func BlockTableColumnDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnDuplicateResponse{Error: &pb.RpcBlockTableColumnDuplicateResponseError{Code: pb.RpcBlockTableColumnDuplicateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnDuplicateResponse{Error: &pb.RpcBlockTableColumnDuplicateResponseError{Code: pb.RpcBlockTableColumnDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnDuplicate(in).Marshal()
	return resp
}

func BlockTableRowListFill(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowListFillResponse{Error: &pb.RpcBlockTableRowListFillResponseError{Code: pb.RpcBlockTableRowListFillResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowListFillRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowListFillResponse{Error: &pb.RpcBlockTableRowListFillResponseError{Code: pb.RpcBlockTableRowListFillResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowListFill(in).Marshal()
	return resp
}

func BlockTableRowListClean(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowListCleanResponse{Error: &pb.RpcBlockTableRowListCleanResponseError{Code: pb.RpcBlockTableRowListCleanResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowListCleanRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowListCleanResponse{Error: &pb.RpcBlockTableRowListCleanResponseError{Code: pb.RpcBlockTableRowListCleanResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowListClean(in).Marshal()
	return resp
}

func BlockTableColumnListFill(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnListFillResponse{Error: &pb.RpcBlockTableColumnListFillResponseError{Code: pb.RpcBlockTableColumnListFillResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnListFillRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnListFillResponse{Error: &pb.RpcBlockTableColumnListFillResponseError{Code: pb.RpcBlockTableColumnListFillResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnListFill(in).Marshal()
	return resp
}

func BlockTableSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableSortResponse{Error: &pb.RpcBlockTableSortResponseError{Code: pb.RpcBlockTableSortResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableSortRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableSortResponse{Error: &pb.RpcBlockTableSortResponseError{Code: pb.RpcBlockTableSortResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableSort(in).Marshal()
	return resp
}

func BlockLinkCreateWithObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockLinkCreateWithObjectResponse{Error: &pb.RpcBlockLinkCreateWithObjectResponseError{Code: pb.RpcBlockLinkCreateWithObjectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockLinkCreateWithObjectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockLinkCreateWithObjectResponse{Error: &pb.RpcBlockLinkCreateWithObjectResponseError{Code: pb.RpcBlockLinkCreateWithObjectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockLinkCreateWithObject(in).Marshal()
	return resp
}

func BlockLinkListSetAppearance(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockLinkListSetAppearanceResponse{Error: &pb.RpcBlockLinkListSetAppearanceResponseError{Code: pb.RpcBlockLinkListSetAppearanceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockLinkListSetAppearanceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockLinkListSetAppearanceResponse{Error: &pb.RpcBlockLinkListSetAppearanceResponseError{Code: pb.RpcBlockLinkListSetAppearanceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockLinkListSetAppearance(in).Marshal()
	return resp
}

func BlockBookmarkFetch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockBookmarkFetchResponse{Error: &pb.RpcBlockBookmarkFetchResponseError{Code: pb.RpcBlockBookmarkFetchResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockBookmarkFetchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockBookmarkFetchResponse{Error: &pb.RpcBlockBookmarkFetchResponseError{Code: pb.RpcBlockBookmarkFetchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockBookmarkFetch(in).Marshal()
	return resp
}

func BlockBookmarkCreateAndFetch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockBookmarkCreateAndFetchResponse{Error: &pb.RpcBlockBookmarkCreateAndFetchResponseError{Code: pb.RpcBlockBookmarkCreateAndFetchResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockBookmarkCreateAndFetchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockBookmarkCreateAndFetchResponse{Error: &pb.RpcBlockBookmarkCreateAndFetchResponseError{Code: pb.RpcBlockBookmarkCreateAndFetchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockBookmarkCreateAndFetch(in).Marshal()
	return resp
}

func BlockRelationSetKey(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockRelationSetKeyResponse{Error: &pb.RpcBlockRelationSetKeyResponseError{Code: pb.RpcBlockRelationSetKeyResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockRelationSetKeyRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockRelationSetKeyResponse{Error: &pb.RpcBlockRelationSetKeyResponseError{Code: pb.RpcBlockRelationSetKeyResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockRelationSetKey(in).Marshal()
	return resp
}

func BlockRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockRelationAddResponse{Error: &pb.RpcBlockRelationAddResponseError{Code: pb.RpcBlockRelationAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockRelationAddResponse{Error: &pb.RpcBlockRelationAddResponseError{Code: pb.RpcBlockRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockRelationAdd(in).Marshal()
	return resp
}

func BlockDivListSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDivListSetStyleResponse{Error: &pb.RpcBlockDivListSetStyleResponseError{Code: pb.RpcBlockDivListSetStyleResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDivListSetStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDivListSetStyleResponse{Error: &pb.RpcBlockDivListSetStyleResponseError{Code: pb.RpcBlockDivListSetStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDivListSetStyle(in).Marshal()
	return resp
}

func BlockLatexSetText(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockLatexSetTextResponse{Error: &pb.RpcBlockLatexSetTextResponseError{Code: pb.RpcBlockLatexSetTextResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockLatexSetTextRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockLatexSetTextResponse{Error: &pb.RpcBlockLatexSetTextResponseError{Code: pb.RpcBlockLatexSetTextResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockLatexSetText(in).Marshal()
	return resp
}

func ProcessCancel(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcProcessCancelResponse{Error: &pb.RpcProcessCancelResponseError{Code: pb.RpcProcessCancelResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcProcessCancelRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcProcessCancelResponse{Error: &pb.RpcProcessCancelResponseError{Code: pb.RpcProcessCancelResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ProcessCancel(in).Marshal()
	return resp
}

func LogSend(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcLogSendResponse{Error: &pb.RpcLogSendResponseError{Code: pb.RpcLogSendResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcLogSendRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcLogSendResponse{Error: &pb.RpcLogSendResponseError{Code: pb.RpcLogSendResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.LogSend(in).Marshal()
	return resp
}

func DebugSync(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugSyncResponse{Error: &pb.RpcDebugSyncResponseError{Code: pb.RpcDebugSyncResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugSyncRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugSyncResponse{Error: &pb.RpcDebugSyncResponseError{Code: pb.RpcDebugSyncResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugSync(in).Marshal()
	return resp
}

func DebugThread(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugThreadResponse{Error: &pb.RpcDebugThreadResponseError{Code: pb.RpcDebugThreadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugThreadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugThreadResponse{Error: &pb.RpcDebugThreadResponseError{Code: pb.RpcDebugThreadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugThread(in).Marshal()
	return resp
}

func DebugTree(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugTreeResponse{Error: &pb.RpcDebugTreeResponseError{Code: pb.RpcDebugTreeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugTreeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugTreeResponse{Error: &pb.RpcDebugTreeResponseError{Code: pb.RpcDebugTreeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugTree(in).Marshal()
	return resp
}

func DebugExportLocalstore(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugExportLocalstoreResponse{Error: &pb.RpcDebugExportLocalstoreResponseError{Code: pb.RpcDebugExportLocalstoreResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugExportLocalstoreRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugExportLocalstoreResponse{Error: &pb.RpcDebugExportLocalstoreResponseError{Code: pb.RpcDebugExportLocalstoreResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugExportLocalstore(in).Marshal()
	return resp
}

func DebugPing(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugPingResponse{Error: &pb.RpcDebugPingResponseError{Code: pb.RpcDebugPingResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugPingRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugPingResponse{Error: &pb.RpcDebugPingResponseError{Code: pb.RpcDebugPingResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugPing(in).Marshal()
	return resp
}

func MetricsSetParameters(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMetricsSetParametersResponse{Error: &pb.RpcMetricsSetParametersResponseError{Code: pb.RpcMetricsSetParametersResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMetricsSetParametersRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcMetricsSetParametersResponse{Error: &pb.RpcMetricsSetParametersResponseError{Code: pb.RpcMetricsSetParametersResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.MetricsSetParameters(in).Marshal()
	return resp
}

var PanicHandler func(v interface{})

func CommandAsync(cmd string, data []byte, callback func(data []byte)) {
	go func() {
		var cd []byte
		switch cmd {
		case "AppGetVersion":
			cd = AppGetVersion(data)
		case "AppSetDeviceState":
			cd = AppSetDeviceState(data)
		case "AppShutdown":
			cd = AppShutdown(data)
		case "WalletCreate":
			cd = WalletCreate(data)
		case "WalletRecover":
			cd = WalletRecover(data)
		case "WalletConvert":
			cd = WalletConvert(data)
		case "WorkspaceCreate":
			cd = WorkspaceCreate(data)
		case "WorkspaceSelect":
			cd = WorkspaceSelect(data)
		case "WorkspaceGetCurrent":
			cd = WorkspaceGetCurrent(data)
		case "WorkspaceGetAll":
			cd = WorkspaceGetAll(data)
		case "WorkspaceSetIsHighlighted":
			cd = WorkspaceSetIsHighlighted(data)
		case "WorkspaceExport":
			cd = WorkspaceExport(data)
		case "AccountRecover":
			cd = AccountRecover(data)
		case "AccountCreate":
			cd = AccountCreate(data)
		case "AccountDelete":
			cd = AccountDelete(data)
		case "AccountSelect":
			cd = AccountSelect(data)
		case "AccountStop":
			cd = AccountStop(data)
		case "AccountMove":
			cd = AccountMove(data)
		case "AccountConfigUpdate":
			cd = AccountConfigUpdate(data)
		case "ObjectOpen":
			cd = ObjectOpen(data)
		case "ObjectClose":
			cd = ObjectClose(data)
		case "ObjectShow":
			cd = ObjectShow(data)
		case "ObjectCreate":
			cd = ObjectCreate(data)
		case "ObjectCreateBookmark":
			cd = ObjectCreateBookmark(data)
		case "ObjectCreateSet":
			cd = ObjectCreateSet(data)
		case "ObjectGraph":
			cd = ObjectGraph(data)
		case "ObjectSearch":
			cd = ObjectSearch(data)
		case "ObjectSearchSubscribe":
			cd = ObjectSearchSubscribe(data)
		case "ObjectRelationSearchDistinct":
			cd = ObjectRelationSearchDistinct(data)
		case "ObjectSubscribeIds":
			cd = ObjectSubscribeIds(data)
		case "ObjectSearchUnsubscribe":
			cd = ObjectSearchUnsubscribe(data)
		case "ObjectSetDetails":
			cd = ObjectSetDetails(data)
		case "ObjectDuplicate":
			cd = ObjectDuplicate(data)
		case "ObjectSetObjectType":
			cd = ObjectSetObjectType(data)
		case "ObjectSetLayout":
			cd = ObjectSetLayout(data)
		case "ObjectSetIsFavorite":
			cd = ObjectSetIsFavorite(data)
		case "ObjectSetIsArchived":
			cd = ObjectSetIsArchived(data)
		case "ObjectListDuplicate":
			cd = ObjectListDuplicate(data)
		case "ObjectListDelete":
			cd = ObjectListDelete(data)
		case "ObjectListSetIsArchived":
			cd = ObjectListSetIsArchived(data)
		case "ObjectListSetIsFavorite":
			cd = ObjectListSetIsFavorite(data)
		case "ObjectApplyTemplate":
			cd = ObjectApplyTemplate(data)
		case "ObjectToSet":
			cd = ObjectToSet(data)
		case "ObjectAddWithObjectId":
			cd = ObjectAddWithObjectId(data)
		case "ObjectShareByLink":
			cd = ObjectShareByLink(data)
		case "ObjectOpenBreadcrumbs":
			cd = ObjectOpenBreadcrumbs(data)
		case "ObjectSetBreadcrumbs":
			cd = ObjectSetBreadcrumbs(data)
		case "ObjectUndo":
			cd = ObjectUndo(data)
		case "ObjectRedo":
			cd = ObjectRedo(data)
		case "ObjectImportMarkdown":
			cd = ObjectImportMarkdown(data)
		case "ObjectListExport":
			cd = ObjectListExport(data)
		case "ObjectBookmarkFetch":
			cd = ObjectBookmarkFetch(data)
		case "ObjectToBookmark":
			cd = ObjectToBookmark(data)
		case "ObjectRelationAdd":
			cd = ObjectRelationAdd(data)
		case "ObjectRelationUpdate":
			cd = ObjectRelationUpdate(data)
		case "ObjectRelationDelete":
			cd = ObjectRelationDelete(data)
		case "ObjectRelationAddFeatured":
			cd = ObjectRelationAddFeatured(data)
		case "ObjectRelationRemoveFeatured":
			cd = ObjectRelationRemoveFeatured(data)
		case "ObjectRelationListAvailable":
			cd = ObjectRelationListAvailable(data)
		case "ObjectRelationOptionAdd":
			cd = ObjectRelationOptionAdd(data)
		case "ObjectRelationOptionUpdate":
			cd = ObjectRelationOptionUpdate(data)
		case "ObjectRelationOptionDelete":
			cd = ObjectRelationOptionDelete(data)
		case "ObjectTypeCreate":
			cd = ObjectTypeCreate(data)
		case "ObjectTypeList":
			cd = ObjectTypeList(data)
		case "ObjectTypeRelationList":
			cd = ObjectTypeRelationList(data)
		case "ObjectTypeRelationAdd":
			cd = ObjectTypeRelationAdd(data)
		case "ObjectTypeRelationUpdate":
			cd = ObjectTypeRelationUpdate(data)
		case "ObjectTypeRelationRemove":
			cd = ObjectTypeRelationRemove(data)
		case "HistoryShowVersion":
			cd = HistoryShowVersion(data)
		case "HistoryGetVersions":
			cd = HistoryGetVersions(data)
		case "HistorySetVersion":
			cd = HistorySetVersion(data)
		case "FileOffload":
			cd = FileOffload(data)
		case "FileListOffload":
			cd = FileListOffload(data)
		case "FileUpload":
			cd = FileUpload(data)
		case "FileDownload":
			cd = FileDownload(data)
		case "FileDrop":
			cd = FileDrop(data)
		case "NavigationListObjects":
			cd = NavigationListObjects(data)
		case "NavigationGetObjectInfoWithLinks":
			cd = NavigationGetObjectInfoWithLinks(data)
		case "TemplateCreateFromObject":
			cd = TemplateCreateFromObject(data)
		case "TemplateCreateFromObjectType":
			cd = TemplateCreateFromObjectType(data)
		case "TemplateClone":
			cd = TemplateClone(data)
		case "TemplateExportAll":
			cd = TemplateExportAll(data)
		case "LinkPreview":
			cd = LinkPreview(data)
		case "UnsplashSearch":
			cd = UnsplashSearch(data)
		case "UnsplashDownload":
			cd = UnsplashDownload(data)
		case "BlockUpload":
			cd = BlockUpload(data)
		case "BlockReplace":
			cd = BlockReplace(data)
		case "BlockCreate":
			cd = BlockCreate(data)
		case "BlockSplit":
			cd = BlockSplit(data)
		case "BlockMerge":
			cd = BlockMerge(data)
		case "BlockCopy":
			cd = BlockCopy(data)
		case "BlockPaste":
			cd = BlockPaste(data)
		case "BlockCut":
			cd = BlockCut(data)
		case "BlockSetFields":
			cd = BlockSetFields(data)
		case "BlockExport":
			cd = BlockExport(data)
		case "BlockListDelete":
			cd = BlockListDelete(data)
		case "BlockListMoveToExistingObject":
			cd = BlockListMoveToExistingObject(data)
		case "BlockListMoveToNewObject":
			cd = BlockListMoveToNewObject(data)
		case "BlockListConvertToObjects":
			cd = BlockListConvertToObjects(data)
		case "BlockListSetFields":
			cd = BlockListSetFields(data)
		case "BlockListDuplicate":
			cd = BlockListDuplicate(data)
		case "BlockListSetBackgroundColor":
			cd = BlockListSetBackgroundColor(data)
		case "BlockListSetAlign":
			cd = BlockListSetAlign(data)
		case "BlockListSetVerticalAlign":
			cd = BlockListSetVerticalAlign(data)
		case "BlockListTurnInto":
			cd = BlockListTurnInto(data)
		case "BlockTextSetText":
			cd = BlockTextSetText(data)
		case "BlockTextSetColor":
			cd = BlockTextSetColor(data)
		case "BlockTextSetStyle":
			cd = BlockTextSetStyle(data)
		case "BlockTextSetChecked":
			cd = BlockTextSetChecked(data)
		case "BlockTextSetIcon":
			cd = BlockTextSetIcon(data)
		case "BlockTextListSetColor":
			cd = BlockTextListSetColor(data)
		case "BlockTextListSetMark":
			cd = BlockTextListSetMark(data)
		case "BlockTextListSetStyle":
			cd = BlockTextListSetStyle(data)
		case "BlockTextListClearStyle":
			cd = BlockTextListClearStyle(data)
		case "BlockTextListClearContent":
			cd = BlockTextListClearContent(data)
		case "BlockFileSetName":
			cd = BlockFileSetName(data)
		case "BlockImageSetName":
			cd = BlockImageSetName(data)
		case "BlockVideoSetName":
			cd = BlockVideoSetName(data)
		case "BlockFileCreateAndUpload":
			cd = BlockFileCreateAndUpload(data)
		case "BlockFileListSetStyle":
			cd = BlockFileListSetStyle(data)
		case "BlockDataviewViewCreate":
			cd = BlockDataviewViewCreate(data)
		case "BlockDataviewViewDelete":
			cd = BlockDataviewViewDelete(data)
		case "BlockDataviewViewUpdate":
			cd = BlockDataviewViewUpdate(data)
		case "BlockDataviewViewSetActive":
			cd = BlockDataviewViewSetActive(data)
		case "BlockDataviewViewSetPosition":
			cd = BlockDataviewViewSetPosition(data)
		case "BlockDataviewSetSource":
			cd = BlockDataviewSetSource(data)
		case "BlockDataviewRelationAdd":
			cd = BlockDataviewRelationAdd(data)
		case "BlockDataviewRelationUpdate":
			cd = BlockDataviewRelationUpdate(data)
		case "BlockDataviewRelationDelete":
			cd = BlockDataviewRelationDelete(data)
		case "BlockDataviewRelationListAvailable":
			cd = BlockDataviewRelationListAvailable(data)
		case "BlockDataviewGroupOrderUpdate":
			cd = BlockDataviewGroupOrderUpdate(data)
		case "BlockDataviewObjectOrderUpdate":
			cd = BlockDataviewObjectOrderUpdate(data)
		case "BlockDataviewRecordCreate":
			cd = BlockDataviewRecordCreate(data)
		case "BlockDataviewRecordUpdate":
			cd = BlockDataviewRecordUpdate(data)
		case "BlockDataviewRecordDelete":
			cd = BlockDataviewRecordDelete(data)
		case "BlockDataviewRecordRelationOptionAdd":
			cd = BlockDataviewRecordRelationOptionAdd(data)
		case "BlockDataviewRecordRelationOptionUpdate":
			cd = BlockDataviewRecordRelationOptionUpdate(data)
		case "BlockDataviewRecordRelationOptionDelete":
			cd = BlockDataviewRecordRelationOptionDelete(data)
		case "BlockTableCreate":
			cd = BlockTableCreate(data)
		case "BlockTableExpand":
			cd = BlockTableExpand(data)
		case "BlockTableRowCreate":
			cd = BlockTableRowCreate(data)
		case "BlockTableRowDelete":
			cd = BlockTableRowDelete(data)
		case "BlockTableRowDuplicate":
			cd = BlockTableRowDuplicate(data)
		case "BlockTableRowSetHeader":
			cd = BlockTableRowSetHeader(data)
		case "BlockTableColumnCreate":
			cd = BlockTableColumnCreate(data)
		case "BlockTableColumnMove":
			cd = BlockTableColumnMove(data)
		case "BlockTableColumnDelete":
			cd = BlockTableColumnDelete(data)
		case "BlockTableColumnDuplicate":
			cd = BlockTableColumnDuplicate(data)
		case "BlockTableRowListFill":
			cd = BlockTableRowListFill(data)
		case "BlockTableRowListClean":
			cd = BlockTableRowListClean(data)
		case "BlockTableColumnListFill":
			cd = BlockTableColumnListFill(data)
		case "BlockTableSort":
			cd = BlockTableSort(data)
		case "BlockLinkCreateWithObject":
			cd = BlockLinkCreateWithObject(data)
		case "BlockLinkListSetAppearance":
			cd = BlockLinkListSetAppearance(data)
		case "BlockBookmarkFetch":
			cd = BlockBookmarkFetch(data)
		case "BlockBookmarkCreateAndFetch":
			cd = BlockBookmarkCreateAndFetch(data)
		case "BlockRelationSetKey":
			cd = BlockRelationSetKey(data)
		case "BlockRelationAdd":
			cd = BlockRelationAdd(data)
		case "BlockDivListSetStyle":
			cd = BlockDivListSetStyle(data)
		case "BlockLatexSetText":
			cd = BlockLatexSetText(data)
		case "ProcessCancel":
			cd = ProcessCancel(data)
		case "LogSend":
			cd = LogSend(data)
		case "DebugSync":
			cd = DebugSync(data)
		case "DebugThread":
			cd = DebugThread(data)
		case "DebugTree":
			cd = DebugTree(data)
		case "DebugExportLocalstore":
			cd = DebugExportLocalstore(data)
		case "DebugPing":
			cd = DebugPing(data)
		case "MetricsSetParameters":
			cd = MetricsSetParameters(data)
		default:
			log.Errorf("unknown command type: %s\n", cmd)
		}
		if callback != nil {
			callback(cd)
		}
	}()
}

type MessageHandler interface {
	Handle(b []byte)
}

func CommandMobile(cmd string, data []byte, callback MessageHandler) {
	CommandAsync(cmd, data, callback.Handle)
}
