// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/protos/service/service.proto

package service

import (
	fmt "fmt"
	pb "github.com/anytypeio/go-anytype-middleware/pb"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/protos/service/service.proto", fileDescriptor_93a29dc403579097) }

var fileDescriptor_93a29dc403579097 = []byte{
	// 2267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x9a, 0xcf, 0x6f, 0xdc, 0xc6,
	0x15, 0xc7, 0xbd, 0x40, 0x11, 0xa7, 0x13, 0xd7, 0x4d, 0xd8, 0xc6, 0x4d, 0x94, 0x56, 0xfe, 0x11,
	0x3b, 0xb2, 0x65, 0x9b, 0x96, 0x25, 0x34, 0x45, 0x7f, 0x06, 0xd2, 0xca, 0x56, 0x84, 0xc8, 0xb6,
	0xaa, 0x95, 0x2d, 0x20, 0x68, 0xd1, 0x52, 0xdc, 0xe7, 0x5d, 0x66, 0xb9, 0x1c, 0x86, 0x9c, 0x5d,
	0x79, 0x0b, 0x14, 0x28, 0x5a, 0xb4, 0xe7, 0x00, 0x3d, 0xf6, 0xd4, 0x4b, 0x0f, 0xfd, 0x4b, 0x7a,
	0xf4, 0xb1, 0xc7, 0xc2, 0xfe, 0x47, 0x8a, 0x19, 0x3e, 0xce, 0x90, 0xc3, 0x99, 0x21, 0xd7, 0x07,
	0xdb, 0xf0, 0xbe, 0xcf, 0xfb, 0xbe, 0x37, 0xe4, 0x7b, 0xc3, 0x99, 0x21, 0xc9, 0xe5, 0xf4, 0xf4,
	0x5e, 0x9a, 0x51, 0x46, 0xf3, 0x7b, 0x39, 0x64, 0xf3, 0x28, 0x84, 0xf2, 0x5f, 0x5f, 0xfc, 0xec,
	0x9d, 0x0f, 0x92, 0x05, 0x5b, 0xa4, 0xb0, 0xf2, 0x81, 0x22, 0x43, 0x3a, 0x9d, 0x06, 0xc9, 0x30,
	0x2f, 0x90, 0x95, 0x4b, 0xca, 0x02, 0x73, 0x48, 0x18, 0xfe, 0xbe, 0xf9, 0xaf, 0x13, 0x72, 0xb1,
	0x1f, 0x47, 0x90, 0xb0, 0x3e, 0x3a, 0x78, 0x27, 0xe4, 0xc2, 0x49, 0x10, 0xc7, 0xc0, 0xfa, 0x19,
	0x04, 0x0c, 0xbc, 0x6b, 0x3e, 0xca, 0xfb, 0x47, 0x69, 0xe8, 0x17, 0x26, 0xbf, 0xb0, 0xf9, 0x47,
	0xf0, 0xf5, 0x0c, 0x72, 0xb6, 0xf2, 0xb1, 0x93, 0xc9, 0x53, 0x9a, 0xe4, 0xe0, 0x7d, 0x49, 0xbe,
	0x53, 0x58, 0x8e, 0x20, 0xa4, 0x73, 0xc8, 0x3c, 0xa3, 0x17, 0x1a, 0xa5, 0xf4, 0x75, 0x37, 0xa4,
	0x6b, 0xf7, 0x69, 0x32, 0x87, 0x8c, 0x99, 0xb5, 0xd1, 0xe8, 0xd6, 0x56, 0x10, 0x6a, 0xff, 0x96,
	0x5c, 0xdc, 0x0e, 0x43, 0x3a, 0x4b, 0x64, 0xe2, 0x75, 0x3f, 0x34, 0x36, 0x32, 0xbf, 0xd1, 0x42,
	0xa9, 0xd4, 0xd1, 0x86, 0x17, 0xfc, 0x63, 0xa3, 0x9f, 0x76, 0xc5, 0xaf, 0xbb, 0xa1, 0x86, 0xf6,
	0x00, 0x62, 0x08, 0x99, 0x45, 0xbb, 0x30, 0xb6, 0x68, 0x4b, 0x08, 0xb5, 0x8f, 0xc9, 0x3b, 0xa5,
	0x36, 0xa3, 0xa9, 0x77, 0xd5, 0xec, 0xc4, 0x68, 0x2a, 0x75, 0xaf, 0xb9, 0x10, 0x54, 0x0d, 0xc9,
	0x85, 0xfd, 0x69, 0x30, 0x82, 0x3d, 0x60, 0x3b, 0x31, 0x3d, 0xf5, 0x6e, 0xd6, 0x7c, 0xf6, 0xd3,
	0xe7, 0xb9, 0x2f, 0xec, 0xfe, 0x1e, 0x30, 0x9f, 0x13, 0x52, 0xfd, 0x56, 0x07, 0x12, 0x83, 0xfc,
	0x9a, 0x90, 0x67, 0x90, 0xe5, 0x11, 0x4d, 0xf6, 0x80, 0x79, 0x57, 0x6a, 0x8e, 0x68, 0x10, 0x5e,
	0xa5, 0xf4, 0x55, 0x07, 0x81, 0x92, 0x9f, 0x93, 0xf3, 0x07, 0x74, 0x34, 0x80, 0x64, 0xe8, 0xfd,
	0xa8, 0x46, 0x1f, 0xd0, 0x91, 0xcf, 0x7f, 0x96, 0x62, 0xab, 0x36, 0x33, 0x2a, 0x3d, 0x26, 0xdf,
	0xee, 0xd3, 0xe4, 0x79, 0x34, 0xe2, 0xb9, 0x5d, 0xae, 0xc1, 0xc5, 0xef, 0xb5, 0xd4, 0xae, 0xd8,
	0x01, 0xd4, 0xdb, 0x27, 0x6f, 0x0f, 0xc6, 0x33, 0x36, 0xa4, 0x67, 0x89, 0x96, 0x5a, 0xf9, 0xb3,
	0x25, 0xb5, 0x8a, 0x19, 0xa5, 0x9e, 0x93, 0xf7, 0x1e, 0xbc, 0x60, 0x90, 0x25, 0x41, 0xbc, 0x9b,
	0xd1, 0xf4, 0x61, 0x14, 0x43, 0xee, 0xad, 0xd5, 0x9c, 0xaa, 0x76, 0x5f, 0x00, 0x52, 0xfd, 0x66,
	0x3b, 0x88, 0x71, 0x62, 0xf2, 0xbd, 0xaa, 0xb9, 0x4f, 0x13, 0x06, 0x09, 0xf3, 0x6e, 0xd9, 0x05,
	0x10, 0x91, 0xb1, 0xd6, 0xbb, 0xa0, 0x18, 0xed, 0x88, 0xbc, 0x73, 0x10, 0x25, 0x93, 0xc3, 0x0c,
	0xe6, 0x11, 0x9c, 0x69, 0xe5, 0x50, 0xb1, 0x58, 0xca, 0xa1, 0x4e, 0xa0, 0xe6, 0x13, 0x42, 0x9e,
	0xa6, 0x31, 0x0d, 0x86, 0x7c, 0x64, 0xda, 0x5d, 0x54, 0x06, 0xcb, 0x5d, 0xac, 0x01, 0xaa, 0xdb,
	0x76, 0x62, 0x1a, 0x4e, 0x0a, 0x9b, 0xd6, 0x6d, 0xc2, 0x82, 0x6e, 0x96, 0x6e, 0xd3, 0x10, 0x54,
	0x3d, 0x21, 0x17, 0x84, 0xe1, 0x08, 0xd2, 0x38, 0x08, 0xf5, 0xb9, 0xbe, 0xf0, 0x41, 0x9b, 0x65,
	0xae, 0xd7, 0x19, 0x55, 0xc4, 0xc2, 0xf2, 0x24, 0x85, 0x44, 0x1b, 0x7e, 0xe1, 0xc1, 0x0d, 0x96,
	0xe1, 0xd7, 0x00, 0xd4, 0xa3, 0xe4, 0xfb, 0xe2, 0xe7, 0x3d, 0x60, 0x87, 0xb3, 0xd3, 0x38, 0x0a,
	0x4f, 0xe0, 0xf4, 0xe9, 0xd1, 0x81, 0xb7, 0x6e, 0xf0, 0xd4, 0x18, 0x19, 0xe5, 0x76, 0x27, 0x56,
	0x0b, 0xc8, 0xd3, 0xd8, 0xc9, 0x20, 0x18, 0x86, 0xd9, 0x6c, 0x7a, 0x9a, 0x1b, 0x03, 0x6a, 0x8c,
	0x33, 0x60, 0x93, 0x55, 0x35, 0x2f, 0x88, 0x01, 0xb0, 0x6a, 0xbc, 0x5b, 0x06, 0x8d, 0x3a, 0x62,
	0xa9, 0x79, 0x0b, 0xaa, 0x95, 0x13, 0x3e, 0x72, 0x4c, 0xe5, 0xa4, 0x3d, 0x70, 0xae, 0xb9, 0x10,
	0x54, 0xfd, 0x3d, 0xf9, 0x6e, 0x45, 0xf5, 0x30, 0x18, 0x81, 0x77, 0xc3, 0xea, 0xc6, 0xcd, 0x52,
	0xfd, 0x93, 0x36, 0x4c, 0x3d, 0x8b, 0x2b, 0x11, 0x06, 0xc0, 0xb4, 0x67, 0x71, 0xd5, 0x73, 0x50,
	0x99, 0x26, 0x6f, 0xb4, 0x50, 0x7a, 0x97, 0x25, 0x71, 0x94, 0x4c, 0xcc, 0x5d, 0x26, 0x4c, 0xee,
	0x2e, 0x2b, 0x11, 0xf5, 0xb8, 0x29, 0x92, 0x8e, 0x69, 0x0e, 0x9e, 0xa9, 0xd8, 0x85, 0xc5, 0x32,
	0xbf, 0xd4, 0x09, 0xf5, 0x60, 0x17, 0xbf, 0xef, 0xd2, 0xb3, 0x44, 0x4c, 0x08, 0xa6, 0xae, 0x2c,
	0x8d, 0x96, 0x07, 0x7b, 0x03, 0x42, 0xed, 0xdf, 0xa0, 0xf6, 0x1e, 0xb0, 0x47, 0x41, 0x36, 0xc9,
	0x8d, 0x97, 0x98, 0x3f, 0x62, 0x84, 0xd5, 0x79, 0x89, 0xab, 0x94, 0x36, 0x33, 0x3c, 0x4d, 0x86,
	0xd4, 0x38, 0x33, 0x70, 0x83, 0x73, 0x66, 0x40, 0x40, 0xd3, 0x3b, 0x02, 0x8b, 0x1e, 0x37, 0x38,
	0xf5, 0x10, 0x40, 0xbd, 0xdf, 0x61, 0x85, 0x0d, 0x80, 0x3d, 0x8c, 0x20, 0x1e, 0xe6, 0xc6, 0x12,
	0xe6, 0x55, 0x53, 0x98, 0x9d, 0x25, 0x5c, 0xc3, 0x30, 0xc0, 0xd7, 0x38, 0xb3, 0x0c, 0xf8, 0x42,
	0x38, 0x67, 0x59, 0x14, 0xb2, 0x88, 0x26, 0xb9, 0x77, 0xdb, 0xe2, 0x5f, 0x85, 0x64, 0xb0, 0x3b,
	0xdd, 0x60, 0x0c, 0xb9, 0x20, 0x97, 0xca, 0x90, 0xbc, 0x9d, 0xf6, 0xf3, 0xed, 0x2c, 0x1c, 0x47,
	0x73, 0x18, 0x7a, 0xbe, 0x45, 0x47, 0x74, 0x9d, 0xe2, 0x64, 0xdc, 0x7b, 0x9d, 0x79, 0xad, 0x50,
	0x0f, 0xa2, 0x9c, 0x3d, 0xa2, 0x73, 0x30, 0x15, 0x2a, 0xb7, 0xf9, 0xdc, 0xe8, 0x2a, 0xd4, 0x2a,
	0x84, 0xda, 0x33, 0x1c, 0x56, 0xa9, 0x7d, 0x4c, 0x1f, 0xc3, 0x99, 0x98, 0x75, 0xee, 0x38, 0xfc,
	0x25, 0x25, 0xa3, 0xdd, 0xed, 0x48, 0x63, 0xd8, 0x6f, 0x7a, 0xe4, 0xb2, 0x84, 0x70, 0xb7, 0xd0,
	0x1f, 0x47, 0xf1, 0x30, 0x83, 0xe4, 0x98, 0x72, 0x36, 0xf7, 0x7e, 0x6c, 0x91, 0x34, 0xe3, 0x32,
	0x93, 0x4f, 0x97, 0x75, 0xc3, 0x94, 0x26, 0xc4, 0x93, 0xb0, 0x2a, 0xdc, 0x5b, 0x16, 0x35, 0x43,
	0xf1, 0xae, 0x77, 0x41, 0x31, 0xd8, 0x9c, 0xbc, 0x5f, 0x0d, 0x76, 0x0c, 0x2f, 0xd8, 0x80, 0x2d,
	0x62, 0xf0, 0xee, 0x3a, 0x44, 0x38, 0xe5, 0x0b, 0x4c, 0xc6, 0xf4, 0xbb, 0xe2, 0x18, 0x37, 0xaa,
	0x0c, 0x72, 0x77, 0x96, 0xc6, 0x51, 0xc8, 0x1f, 0x5d, 0x37, 0x2d, 0x2a, 0x92, 0xb0, 0x6c, 0x10,
	0xcc, 0x24, 0x86, 0xfa, 0x5b, 0x8f, 0x7c, 0x54, 0x1d, 0xe3, 0x4e, 0x10, 0x4e, 0x46, 0x19, 0x9d,
	0x25, 0xc3, 0x3e, 0x8d, 0x69, 0xe6, 0x6d, 0x3a, 0x52, 0xd7, 0x58, 0x19, 0x7e, 0x6b, 0x29, 0x1f,
	0x4c, 0x64, 0x4c, 0xde, 0xab, 0xe6, 0xb1, 0x1d, 0x47, 0xa3, 0xc4, 0x3a, 0x64, 0xae, 0x24, 0x88,
	0xd6, 0x21, 0x57, 0x49, 0x8c, 0x94, 0xe3, 0xb4, 0x84, 0x91, 0x76, 0xa3, 0x79, 0x71, 0x53, 0xef,
	0x38, 0x24, 0x76, 0xa3, 0xb9, 0x76, 0x4f, 0xef, 0x76, 0xa4, 0x31, 0xe8, 0x5f, 0x7b, 0x64, 0xa5,
	0x1a, 0x55, 0x9b, 0x9d, 0x5c, 0x97, 0xd9, 0x36, 0x43, 0x6d, 0x2d, 0xe5, 0x83, 0x79, 0x24, 0xb8,
	0xf8, 0x12, 0xa5, 0x05, 0x31, 0xe0, 0xe2, 0xc5, 0xd6, 0x15, 0x05, 0xe2, 0xd7, 0x26, 0x91, 0xdb,
	0x9d, 0x58, 0xb5, 0x91, 0x92, 0xc4, 0xf1, 0x2c, 0x4b, 0xf6, 0x13, 0x46, 0xb5, 0x8d, 0x94, 0x52,
	0x28, 0x01, 0xcb, 0x46, 0xca, 0x08, 0x62, 0x9c, 0x11, 0x79, 0xb7, 0x9c, 0xf8, 0x79, 0x47, 0xf1,
	0x3f, 0xa6, 0xea, 0x51, 0x2d, 0x27, 0xfe, 0x72, 0x54, 0x4f, 0x83, 0xc4, 0x40, 0x5f, 0xe1, 0x80,
	0x30, 0x50, 0xd1, 0x25, 0x4e, 0xff, 0x7a, 0x73, 0xac, 0x77, 0x41, 0xed, 0xf3, 0x4f, 0x11, 0xaf,
	0x75, 0xfe, 0xa9, 0xc7, 0xf4, 0xbb, 0xe2, 0xe6, 0x0e, 0xe1, 0x08, 0x5f, 0xdb, 0x38, 0x3b, 0x44,
	0xe8, 0x70, 0xaa, 0x53, 0x87, 0x54, 0x69, 0xf3, 0x85, 0x2d, 0x7a, 0xd2, 0x79, 0x61, 0xeb, 0x0d,
	0xb9, 0xde, 0x05, 0xc5, 0x58, 0xa9, 0xda, 0x82, 0x88, 0x8b, 0x3a, 0x86, 0x70, 0x02, 0x43, 0xeb,
	0xc2, 0xa4, 0xb8, 0x46, 0x05, 0xd4, 0xba, 0x30, 0xd1, 0x60, 0x6d, 0x65, 0x3c, 0x48, 0xe3, 0x88,
	0x19, 0x57, 0xc6, 0xc2, 0xe2, 0x5c, 0x19, 0x97, 0x84, 0x26, 0xf9, 0x08, 0xb2, 0x91, 0x79, 0xb1,
	0x2d, 0x2c, 0x4e, 0xc9, 0x92, 0xd0, 0x96, 0x98, 0x7d, 0x9a, 0x2e, 0x8c, 0x4b, 0x4c, 0x6e, 0x70,
	0x2e, 0x31, 0x11, 0xd0, 0x52, 0x3c, 0x0c, 0x72, 0x66, 0x4e, 0x51, 0x58, 0x9c, 0x29, 0x96, 0x04,
	0x4a, 0x7e, 0x41, 0xde, 0x2e, 0x52, 0x9c, 0x31, 0x6f, 0xd5, 0x94, 0xc0, 0x4c, 0x5d, 0xc4, 0xcb,
	0x56, 0xbb, 0xb6, 0x0b, 0x7a, 0xf0, 0x22, 0xa5, 0x19, 0x33, 0xee, 0x82, 0x0a, 0x93, 0x73, 0x17,
	0x24, 0x11, 0x6d, 0x83, 0xbb, 0x3f, 0xe5, 0xbf, 0xf3, 0x2a, 0x17, 0x47, 0x52, 0xa6, 0x5a, 0xae,
	0x23, 0xce, 0x5a, 0x6e, 0xa0, 0xcd, 0x99, 0xef, 0x61, 0x14, 0xc3, 0xe3, 0x60, 0x0a, 0xd6, 0x99,
	0x4f, 0x9c, 0xb4, 0x70, 0xa2, 0x75, 0xe6, 0xab, 0x92, 0xcd, 0x06, 0x15, 0xc7, 0x8d, 0x22, 0x92,
	0xcd, 0xbf, 0x38, 0x90, 0xac, 0x85, 0x5a, 0xef, 0x82, 0x62, 0xac, 0x29, 0xae, 0x80, 0xca, 0x58,
	0x27, 0xd1, 0x90, 0x8d, 0x3d, 0xb7, 0x82, 0x60, 0x9c, 0x47, 0x12, 0x4d, 0xb6, 0x39, 0xb4, 0x67,
	0xd1, 0x10, 0xa8, 0x73, 0x68, 0x82, 0xe8, 0x36, 0xb4, 0x1a, 0xda, 0x1c, 0x9a, 0x30, 0xbb, 0x87,
	0x56, 0x28, 0x74, 0x1b, 0x5a, 0x9d, 0xc5, 0x70, 0x7f, 0xee, 0x91, 0x0f, 0xcb, 0x78, 0x07, 0x51,
	0x32, 0x39, 0x0e, 0xb2, 0x91, 0x38, 0x71, 0x0e, 0x27, 0xfb, 0x43, 0xef, 0xbe, 0x45, 0x8a, 0x93,
	0x7e, 0x0d, 0x95, 0xd1, 0x37, 0x97, 0x71, 0xd1, 0x56, 0xed, 0x3b, 0x94, 0x4e, 0xa6, 0x41, 0x36,
	0x79, 0x08, 0x2c, 0x1c, 0x1b, 0x2f, 0x70, 0x49, 0xf8, 0x02, 0x71, 0x5e, 0xe0, 0x06, 0xaa, 0x2f,
	0x69, 0x4b, 0xa0, 0x38, 0xfe, 0xd8, 0x4e, 0x86, 0x45, 0xd8, 0x4d, 0x97, 0x56, 0x9d, 0x75, 0xad,
	0xb5, 0x1c, 0x3e, 0x98, 0xc8, 0x1f, 0xc9, 0x07, 0x82, 0xe4, 0xbd, 0x24, 0x19, 0x3c, 0xd6, 0x34,
	0x6d, 0x2f, 0x45, 0xcf, 0x69, 0xa0, 0xcc, 0x60, 0xa3, 0xbb, 0x03, 0x86, 0xff, 0x03, 0xf9, 0x41,
	0x71, 0x72, 0x12, 0xb0, 0x60, 0x1e, 0xc1, 0xd9, 0xb3, 0x08, 0xce, 0xf0, 0x14, 0xcc, 0xb4, 0x19,
	0x2e, 0x31, 0x5f, 0x71, 0xce, 0xcd, 0xb0, 0x99, 0x77, 0xc4, 0x2e, 0xd6, 0x87, 0xed, 0xb1, 0x71,
	0x1d, 0xd9, 0x39, 0xb6, 0xe4, 0x1d, 0xb1, 0x9f, 0xa6, 0xc3, 0x4e, 0xe3, 0x2e, 0xb8, 0xee, 0xb1,
	0x25, 0x8f, 0xb1, 0xff, 0x52, 0x2e, 0xf3, 0xab, 0xc1, 0xf9, 0x76, 0x26, 0x64, 0xd1, 0x1c, 0x8c,
	0xed, 0x56, 0xd3, 0x93, 0xa8, 0xb3, 0xdd, 0xac, 0x2e, 0x5a, 0xe1, 0x95, 0xdc, 0x11, 0xc4, 0x01,
	0x8b, 0x68, 0xb2, 0x3d, 0x34, 0x17, 0x9e, 0xd4, 0xab, 0x80, 0xce, 0xc2, 0xb3, 0x38, 0xe8, 0x0d,
	0xa8, 0xc7, 0xc7, 0xbb, 0xb0, 0xd9, 0x45, 0x51, 0xbb, 0x13, 0x5b, 0x4b, 0xf9, 0xb4, 0x25, 0x82,
	0xa5, 0xd8, 0x29, 0x11, 0xad, 0x1c, 0xb7, 0x96, 0xf2, 0xc1, 0x44, 0xfe, 0xd9, 0x23, 0xd7, 0x8d,
	0x89, 0x14, 0xaf, 0x1a, 0x9f, 0xa4, 0xe5, 0xdd, 0xf9, 0x79, 0x17, 0x75, 0xcd, 0x49, 0xa6, 0xf6,
	0x8b, 0x37, 0x73, 0xc6, 0x1c, 0xff, 0xdd, 0x23, 0x6b, 0xad, 0x39, 0xe2, 0x1d, 0xfc, 0xd5, 0xb2,
	0x91, 0xb4, 0xbb, 0xf9, 0xd9, 0x1b, 0xfb, 0x2f, 0x93, 0x2c, 0xde, 0xe5, 0xa5, 0x93, 0xd5, 0xee,
	0xf8, 0x67, 0x6f, 0xec, 0x8f, 0xc9, 0xfe, 0xa3, 0x47, 0xae, 0x19, 0x93, 0xe5, 0xdb, 0xa1, 0xed,
	0x79, 0x10, 0xc5, 0xc1, 0x69, 0x0c, 0xde, 0x4f, 0xbb, 0xc4, 0xa9, 0xb9, 0xc8, 0x14, 0x7f, 0xf6,
	0x26, 0xae, 0x98, 0xdd, 0x9f, 0xca, 0x05, 0x82, 0xca, 0x2e, 0xa4, 0xd9, 0x10, 0x9f, 0x14, 0x2d,
	0xdd, 0xaf, 0x48, 0x99, 0xcb, 0xfd, 0x25, 0x3c, 0xdc, 0x29, 0x60, 0xb1, 0x75, 0x48, 0x41, 0x2b,
	0xaf, 0xfb, 0x4b, 0x78, 0xb8, 0x53, 0xc0, 0x12, 0xea, 0x90, 0x82, 0x56, 0x34, 0xf7, 0x97, 0xf0,
	0xd0, 0x8e, 0x66, 0x54, 0x49, 0xb1, 0x2f, 0x60, 0x61, 0x5c, 0x19, 0x96, 0x88, 0x5f, 0x30, 0xce,
	0x95, 0x61, 0x93, 0xc5, 0x78, 0x80, 0x1b, 0x87, 0xea, 0xd3, 0x61, 0xcd, 0x25, 0x50, 0x9d, 0x6b,
	0x6e, 0xb6, 0x83, 0x18, 0x26, 0x23, 0xef, 0x3f, 0x0e, 0xe6, 0xd1, 0x48, 0xd6, 0xe0, 0x93, 0xd3,
	0xaf, 0x20, 0x64, 0xfa, 0x6b, 0x00, 0xc5, 0xf8, 0x15, 0xc8, 0xb2, 0xdb, 0xb6, 0xc2, 0x18, 0xf3,
	0xef, 0x3d, 0x72, 0x45, 0x31, 0x7b, 0x80, 0xc4, 0x7e, 0xf2, 0x9c, 0x9e, 0x44, 0x6c, 0xcc, 0x97,
	0xaa, 0xb9, 0xf7, 0xa9, 0x4d, 0xd2, 0xcc, 0xcb, 0x54, 0x7e, 0xb2, 0xb4, 0x9f, 0x7a, 0x07, 0x5d,
	0xd8, 0x07, 0x10, 0x64, 0xe1, 0x58, 0x7b, 0x07, 0x5d, 0x98, 0xfc, 0xc2, 0x66, 0x79, 0x07, 0xad,
	0x33, 0x28, 0x7c, 0x8a, 0x6f, 0x23, 0x07, 0xc0, 0x76, 0x81, 0x05, 0x51, 0x9c, 0x7b, 0xb6, 0x77,
	0x34, 0x68, 0x97, 0xfa, 0x6b, 0xad, 0x9c, 0xb6, 0x84, 0x2f, 0x52, 0x38, 0x5e, 0xa4, 0xc0, 0xeb,
	0xc5, 0xb4, 0x84, 0x57, 0x44, 0xad, 0x62, 0xd6, 0xbb, 0xa0, 0x18, 0x8c, 0xe1, 0xc1, 0x97, 0xb2,
	0x1f, 0xc1, 0x94, 0xce, 0x8d, 0x67, 0xb4, 0x55, 0x91, 0x82, 0x72, 0x9d, 0x40, 0x19, 0x69, 0x75,
	0x5a, 0x71, 0x18, 0x8c, 0x70, 0xa9, 0xae, 0x9d, 0x56, 0x88, 0x53, 0x4d, 0x6d, 0xa6, 0xbb, 0xea,
	0x20, 0xd4, 0x81, 0xca, 0x40, 0x7e, 0x5f, 0x56, 0x3f, 0x8e, 0x18, 0x34, 0x3f, 0x2e, 0xbb, 0x62,
	0x07, 0xe4, 0x47, 0x43, 0xef, 0xaa, 0x01, 0xa0, 0xec, 0x27, 0x86, 0x12, 0x11, 0xe3, 0xd3, 0xd4,
	0xd7, 0x5a, 0x39, 0xf5, 0xea, 0x59, 0x59, 0x79, 0x7f, 0x69, 0xef, 0x45, 0x2b, 0xae, 0xe2, 0x40,
	0xcf, 0xfc, 0x5e, 0xb4, 0x49, 0xa1, 0xfc, 0x19, 0xb9, 0x54, 0xbd, 0xaf, 0xea, 0xe1, 0xa4, 0x1d,
	0x6b, 0xd6, 0xee, 0x54, 0xac, 0xba, 0xdd, 0x72, 0xac, 0xe9, 0xc0, 0x55, 0x55, 0x35, 0x03, 0xf3,
	0x2a, 0xbe, 0xd3, 0x2a, 0x54, 0x2d, 0xe4, 0xbb, 0x1d, 0x69, 0xb5, 0x18, 0x6f, 0x46, 0xc5, 0x47,
	0xdb, 0xbd, 0x56, 0x29, 0xed, 0xc9, 0xb6, 0xd1, 0xdd, 0xc1, 0x15, 0x1e, 0xbb, 0xa9, 0x3d, 0xbc,
	0xd6, 0x50, 0x1b, 0xdd, 0x1d, 0x30, 0xfc, 0x2f, 0xc9, 0xb7, 0x0e, 0xa3, 0x64, 0xe4, 0x7d, 0x58,
	0xef, 0x95, 0x28, 0x19, 0x49, 0xd1, 0x15, 0x93, 0x49, 0xbd, 0x54, 0x3d, 0xcc, 0x68, 0x08, 0x79,
	0xde, 0x0f, 0x92, 0x10, 0x62, 0xed, 0xa5, 0x2a, 0xda, 0xfc, 0xc2, 0x68, 0x79, 0xa9, 0xda, 0x80,
	0xd4, 0xe1, 0xdf, 0xe7, 0x51, 0xce, 0x68, 0xb6, 0x18, 0x8c, 0xe9, 0x99, 0x76, 0xf8, 0x87, 0x16,
	0x9f, 0x9b, 0x2c, 0x87, 0x7f, 0x1a, 0xa2, 0xbe, 0x0c, 0x41, 0x03, 0x7e, 0x3d, 0xa7, 0xbf, 0x56,
	0x2f, 0xdd, 0x4a, 0xb3, 0xe5, 0xb5, 0xba, 0x01, 0x53, 0xaf, 0x54, 0xca, 0xbc, 0x81, 0xa1, 0x59,
	0x7b, 0x70, 0xcb, 0xd4, 0x24, 0x60, 0x79, 0x70, 0x1b, 0x41, 0x8c, 0xd3, 0x27, 0x6f, 0xe1, 0xb9,
	0xe8, 0x47, 0xda, 0x37, 0x66, 0xb5, 0x13, 0xd1, 0x1f, 0x9a, 0x8d, 0x28, 0xb2, 0x41, 0x2e, 0xf0,
	0x26, 0x84, 0xe4, 0x81, 0xf8, 0x18, 0xd7, 0xbb, 0x28, 0xe9, 0x07, 0xd3, 0x94, 0x2d, 0x56, 0x2a,
	0xff, 0xe7, 0xc0, 0x46, 0x6f, 0xe7, 0xea, 0x7f, 0x5e, 0xad, 0xf6, 0x5e, 0xbe, 0x5a, 0xed, 0xfd,
	0xef, 0xd5, 0x6a, 0xef, 0x9b, 0xd7, 0xab, 0xe7, 0x5e, 0xbe, 0x5e, 0x3d, 0xf7, 0xdf, 0xd7, 0xab,
	0xe7, 0xbe, 0x3c, 0x8f, 0x1f, 0x03, 0x9f, 0xbe, 0x25, 0x3e, 0xe9, 0xdd, 0xfa, 0x7f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x37, 0x15, 0x2c, 0xa8, 0x30, 0x2c, 0x00, 0x00,
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the gomobile package it is being compiled against.

// ClientCommandsHandler is the handler API for ClientCommands service.
var clientCommandsHandler ClientCommandsHandler

type ClientCommandsHandler interface {
	WalletCreate(*pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse
	WalletRecover(*pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse
	WalletConvert(*pb.RpcWalletConvertRequest) *pb.RpcWalletConvertResponse
	AccountRecover(*pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse
	AccountCreate(*pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse
	AccountSelect(*pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse
	AccountStop(*pb.RpcAccountStopRequest) *pb.RpcAccountStopResponse
	ImageGetBlob(*pb.RpcIpfsImageGetBlobRequest) *pb.RpcIpfsImageGetBlobResponse
	VersionGet(*pb.RpcVersionGetRequest) *pb.RpcVersionGetResponse
	LogSend(*pb.RpcLogSendRequest) *pb.RpcLogSendResponse
	ConfigGet(*pb.RpcConfigGetRequest) *pb.RpcConfigGetResponse
	Shutdown(*pb.RpcShutdownRequest) *pb.RpcShutdownResponse
	ExternalDropFiles(*pb.RpcExternalDropFilesRequest) *pb.RpcExternalDropFilesResponse
	ExternalDropContent(*pb.RpcExternalDropContentRequest) *pb.RpcExternalDropContentResponse
	LinkPreview(*pb.RpcLinkPreviewRequest) *pb.RpcLinkPreviewResponse
	UploadFile(*pb.RpcUploadFileRequest) *pb.RpcUploadFileResponse
	BlockUpload(*pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse
	BlockReplace(*pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse
	BlockOpen(*pb.RpcBlockOpenRequest) *pb.RpcBlockOpenResponse
	BlockGetPublicWebURL(*pb.RpcBlockGetPublicWebURLRequest) *pb.RpcBlockGetPublicWebURLResponse
	BlockOpenBreadcrumbs(*pb.RpcBlockOpenBreadcrumbsRequest) *pb.RpcBlockOpenBreadcrumbsResponse
	BlockSetBreadcrumbs(*pb.RpcBlockSetBreadcrumbsRequest) *pb.RpcBlockSetBreadcrumbsResponse
	BlockCreate(*pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse
	BlockCreatePage(*pb.RpcBlockCreatePageRequest) *pb.RpcBlockCreatePageResponse
	BlockCreateSet(*pb.RpcBlockCreateSetRequest) *pb.RpcBlockCreateSetResponse
	BlockUnlink(*pb.RpcBlockUnlinkRequest) *pb.RpcBlockUnlinkResponse
	BlockClose(*pb.RpcBlockCloseRequest) *pb.RpcBlockCloseResponse
	BlockDownload(*pb.RpcBlockDownloadRequest) *pb.RpcBlockDownloadResponse
	BlockGetMarks(*pb.RpcBlockGetMarksRequest) *pb.RpcBlockGetMarksResponse
	BlockUndo(*pb.RpcBlockUndoRequest) *pb.RpcBlockUndoResponse
	BlockRedo(*pb.RpcBlockRedoRequest) *pb.RpcBlockRedoResponse
	BlockSetFields(*pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse
	BlockSetRestrictions(*pb.RpcBlockSetRestrictionsRequest) *pb.RpcBlockSetRestrictionsResponse
	BlockSetPageIsArchived(*pb.RpcBlockSetPageIsArchivedRequest) *pb.RpcBlockSetPageIsArchivedResponse
	BlockListMove(*pb.RpcBlockListMoveRequest) *pb.RpcBlockListMoveResponse
	BlockListMoveToNewPage(*pb.RpcBlockListMoveToNewPageRequest) *pb.RpcBlockListMoveToNewPageResponse
	BlockListConvertChildrenToPages(*pb.RpcBlockListConvertChildrenToPagesRequest) *pb.RpcBlockListConvertChildrenToPagesResponse
	BlockListSetFields(*pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse
	BlockListSetTextStyle(*pb.RpcBlockListSetTextStyleRequest) *pb.RpcBlockListSetTextStyleResponse
	BlockListDuplicate(*pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse
	BlockListSetBackgroundColor(*pb.RpcBlockListSetBackgroundColorRequest) *pb.RpcBlockListSetBackgroundColorResponse
	BlockListSetAlign(*pb.RpcBlockListSetAlignRequest) *pb.RpcBlockListSetAlignResponse
	BlockListSetDivStyle(*pb.RpcBlockListSetDivStyleRequest) *pb.RpcBlockListSetDivStyleResponse
	BlockListSetPageIsArchived(*pb.RpcBlockListSetPageIsArchivedRequest) *pb.RpcBlockListSetPageIsArchivedResponse
	BlockListDeletePage(*pb.RpcBlockListDeletePageRequest) *pb.RpcBlockListDeletePageResponse
	BlockListTurnInto(*pb.RpcBlockListTurnIntoRequest) *pb.RpcBlockListTurnIntoResponse
	BlockSetTextText(*pb.RpcBlockSetTextTextRequest) *pb.RpcBlockSetTextTextResponse
	BlockSetTextColor(*pb.RpcBlockSetTextColorRequest) *pb.RpcBlockSetTextColorResponse
	BlockListSetTextColor(*pb.RpcBlockListSetTextColorRequest) *pb.RpcBlockListSetTextColorResponse
	BlockListSetTextMark(*pb.RpcBlockListSetTextMarkRequest) *pb.RpcBlockListSetTextMarkResponse
	BlockSetTextStyle(*pb.RpcBlockSetTextStyleRequest) *pb.RpcBlockSetTextStyleResponse
	BlockSetTextChecked(*pb.RpcBlockSetTextCheckedRequest) *pb.RpcBlockSetTextCheckedResponse
	BlockSplit(*pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse
	BlockMerge(*pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse
	BlockCopy(*pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse
	BlockPaste(*pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse
	BlockCut(*pb.RpcBlockCutRequest) *pb.RpcBlockCutResponse
	BlockExport(*pb.RpcBlockExportRequest) *pb.RpcBlockExportResponse
	BlockImportMarkdown(*pb.RpcBlockImportMarkdownRequest) *pb.RpcBlockImportMarkdownResponse
	BlockSetFileName(*pb.RpcBlockSetFileNameRequest) *pb.RpcBlockSetFileNameResponse
	BlockSetImageName(*pb.RpcBlockSetImageNameRequest) *pb.RpcBlockSetImageNameResponse
	BlockSetImageWidth(*pb.RpcBlockSetImageWidthRequest) *pb.RpcBlockSetImageWidthResponse
	BlockSetVideoName(*pb.RpcBlockSetVideoNameRequest) *pb.RpcBlockSetVideoNameResponse
	BlockSetVideoWidth(*pb.RpcBlockSetVideoWidthRequest) *pb.RpcBlockSetVideoWidthResponse
	BlockSetLinkTargetBlockId(*pb.RpcBlockSetLinkTargetBlockIdRequest) *pb.RpcBlockSetLinkTargetBlockIdResponse
	BlockBookmarkFetch(*pb.RpcBlockBookmarkFetchRequest) *pb.RpcBlockBookmarkFetchResponse
	BlockBookmarkCreateAndFetch(*pb.RpcBlockBookmarkCreateAndFetchRequest) *pb.RpcBlockBookmarkCreateAndFetchResponse
	BlockFileCreateAndUpload(*pb.RpcBlockFileCreateAndUploadRequest) *pb.RpcBlockFileCreateAndUploadResponse
	// ## Dataview
	// # View
	BlockDataviewViewCreate(*pb.RpcBlockDataviewViewCreateRequest) *pb.RpcBlockDataviewViewCreateResponse
	BlockDataviewViewDelete(*pb.RpcBlockDataviewViewDeleteRequest) *pb.RpcBlockDataviewViewDeleteResponse
	BlockDataviewViewUpdate(*pb.RpcBlockDataviewViewUpdateRequest) *pb.RpcBlockDataviewViewUpdateResponse
	BlockDataviewViewSetActive(*pb.RpcBlockDataviewViewSetActiveRequest) *pb.RpcBlockDataviewViewSetActiveResponse
	// # Relation
	BlockDataviewRelationAdd(*pb.RpcBlockDataviewRelationAddRequest) *pb.RpcBlockDataviewRelationAddResponse
	BlockDataviewRelationUpdate(*pb.RpcBlockDataviewRelationUpdateRequest) *pb.RpcBlockDataviewRelationUpdateResponse
	BlockDataviewRelationDelete(*pb.RpcBlockDataviewRelationDeleteRequest) *pb.RpcBlockDataviewRelationDeleteResponse
	BlockDataviewRelationSelectOptionAdd(*pb.RpcBlockDataviewRelationSelectOptionAddRequest) *pb.RpcBlockDataviewRelationSelectOptionAddResponse
	BlockDataviewRelationSelectOptionUpdate(*pb.RpcBlockDataviewRelationSelectOptionUpdateRequest) *pb.RpcBlockDataviewRelationSelectOptionUpdateResponse
	BlockDataviewRelationSelectOptionDelete(*pb.RpcBlockDataviewRelationSelectOptionDeleteRequest) *pb.RpcBlockDataviewRelationSelectOptionDeleteResponse
	BlockDataviewRelationListAvailable(*pb.RpcBlockDataviewRelationListAvailableRequest) *pb.RpcBlockDataviewRelationListAvailableResponse
	// # Record
	BlockDataviewRecordCreate(*pb.RpcBlockDataviewRecordCreateRequest) *pb.RpcBlockDataviewRecordCreateResponse
	BlockDataviewRecordUpdate(*pb.RpcBlockDataviewRecordUpdateRequest) *pb.RpcBlockDataviewRecordUpdateResponse
	BlockDataviewRecordDelete(*pb.RpcBlockDataviewRecordDeleteRequest) *pb.RpcBlockDataviewRecordDeleteResponse
	// ## Object's relations
	// add existing object type to the object so it will appear in sets and offer relations from this object
	BlockRelationSetKey(*pb.RpcBlockRelationSetKeyRequest) *pb.RpcBlockRelationSetKeyResponse
	BlockRelationAdd(*pb.RpcBlockRelationAddRequest) *pb.RpcBlockRelationAddResponse
	NavigationListObjects(*pb.RpcNavigationListObjectsRequest) *pb.RpcNavigationListObjectsResponse
	NavigationGetObjectInfoWithLinks(*pb.RpcNavigationGetObjectInfoWithLinksRequest) *pb.RpcNavigationGetObjectInfoWithLinksResponse
	ObjectSearch(*pb.RpcObjectSearchRequest) *pb.RpcObjectSearchResponse
	// BlockSetDetails will be renamed to ObjectSetDetails
	BlockSetDetails(*pb.RpcBlockSetDetailsRequest) *pb.RpcBlockSetDetailsResponse
	// BlockObjectTypeAdd will be renamed to ObjectObjectTypeAdd
	BlockObjectTypeAdd(*pb.RpcBlockObjectTypeAddRequest) *pb.RpcBlockObjectTypeAddResponse
	// BlockObjectTypeRemove will be renamed to ObjectObjectTypeRemove
	BlockObjectTypeRemove(*pb.RpcBlockObjectTypeRemoveRequest) *pb.RpcBlockObjectTypeRemoveResponse
	// PageCreate just creates the new page, without adding the link to it from some other page
	PageCreate(*pb.RpcPageCreateRequest) *pb.RpcPageCreateResponse
	// SetCreate just creates the new set, without adding the link to it from some other page
	SetCreate(*pb.RpcSetCreateRequest) *pb.RpcSetCreateResponse
	// ## ObjectType
	ObjectTypeCreate(*pb.RpcObjectTypeCreateRequest) *pb.RpcObjectTypeCreateResponse
	// ObjectTypeList lists all object types both bundled and created by user
	ObjectTypeList(*pb.RpcObjectTypeListRequest) *pb.RpcObjectTypeListResponse
	ObjectTypeRelationList(*pb.RpcObjectTypeRelationListRequest) *pb.RpcObjectTypeRelationListResponse
	ObjectTypeRelationAdd(*pb.RpcObjectTypeRelationAddRequest) *pb.RpcObjectTypeRelationAddResponse
	ObjectTypeRelationUpdate(*pb.RpcObjectTypeRelationUpdateRequest) *pb.RpcObjectTypeRelationUpdateResponse
	ObjectTypeRelationRemove(*pb.RpcObjectTypeRelationRemoveRequest) *pb.RpcObjectTypeRelationRemoveResponse
	Ping(*pb.RpcPingRequest) *pb.RpcPingResponse
	ProcessCancel(*pb.RpcProcessCancelRequest) *pb.RpcProcessCancelResponse
	HistoryShow(*pb.RpcHistoryShowRequest) *pb.RpcHistoryShowResponse
	HistoryVersions(*pb.RpcHistoryVersionsRequest) *pb.RpcHistoryVersionsResponse
	HistorySetVersion(*pb.RpcHistorySetVersionRequest) *pb.RpcHistorySetVersionResponse
	Export(*pb.RpcExportRequest) *pb.RpcExportResponse
	// used only for lib-server via grpc
	// Streams not supported ### ListenEvents(*pb.Empty)
}

func registerClientCommandsHandler(srv ClientCommandsHandler) {
	clientCommandsHandler = srv
}

func WalletCreate(b []byte) []byte {
	in := new(pb.RpcWalletCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcWalletCreateResponse{Error: &pb.RpcWalletCreateResponseError{Code: pb.RpcWalletCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.WalletCreate(in).Marshal()
	return resp
}

func WalletRecover(b []byte) []byte {
	in := new(pb.RpcWalletRecoverRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcWalletRecoverResponse{Error: &pb.RpcWalletRecoverResponseError{Code: pb.RpcWalletRecoverResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.WalletRecover(in).Marshal()
	return resp
}

func WalletConvert(b []byte) []byte {
	in := new(pb.RpcWalletConvertRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcWalletConvertResponse{Error: &pb.RpcWalletConvertResponseError{Code: pb.RpcWalletConvertResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.WalletConvert(in).Marshal()
	return resp
}

func AccountRecover(b []byte) []byte {
	in := new(pb.RpcAccountRecoverRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcAccountRecoverResponse{Error: &pb.RpcAccountRecoverResponseError{Code: pb.RpcAccountRecoverResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.AccountRecover(in).Marshal()
	return resp
}

func AccountCreate(b []byte) []byte {
	in := new(pb.RpcAccountCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcAccountCreateResponse{Error: &pb.RpcAccountCreateResponseError{Code: pb.RpcAccountCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.AccountCreate(in).Marshal()
	return resp
}

func AccountSelect(b []byte) []byte {
	in := new(pb.RpcAccountSelectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcAccountSelectResponse{Error: &pb.RpcAccountSelectResponseError{Code: pb.RpcAccountSelectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.AccountSelect(in).Marshal()
	return resp
}

func AccountStop(b []byte) []byte {
	in := new(pb.RpcAccountStopRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcAccountStopResponse{Error: &pb.RpcAccountStopResponseError{Code: pb.RpcAccountStopResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.AccountStop(in).Marshal()
	return resp
}

func ImageGetBlob(b []byte) []byte {
	in := new(pb.RpcIpfsImageGetBlobRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcIpfsImageGetBlobResponse{Error: &pb.RpcIpfsImageGetBlobResponseError{Code: pb.RpcIpfsImageGetBlobResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ImageGetBlob(in).Marshal()
	return resp
}

func VersionGet(b []byte) []byte {
	in := new(pb.RpcVersionGetRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcVersionGetResponse{Error: &pb.RpcVersionGetResponseError{Code: pb.RpcVersionGetResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.VersionGet(in).Marshal()
	return resp
}

func LogSend(b []byte) []byte {
	in := new(pb.RpcLogSendRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcLogSendResponse{Error: &pb.RpcLogSendResponseError{Code: pb.RpcLogSendResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.LogSend(in).Marshal()
	return resp
}

func ConfigGet(b []byte) []byte {
	in := new(pb.RpcConfigGetRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcConfigGetResponse{Error: &pb.RpcConfigGetResponseError{Code: pb.RpcConfigGetResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ConfigGet(in).Marshal()
	return resp
}

func Shutdown(b []byte) []byte {
	in := new(pb.RpcShutdownRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcShutdownResponse{Error: &pb.RpcShutdownResponseError{Code: pb.RpcShutdownResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.Shutdown(in).Marshal()
	return resp
}

func ExternalDropFiles(b []byte) []byte {
	in := new(pb.RpcExternalDropFilesRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcExternalDropFilesResponse{Error: &pb.RpcExternalDropFilesResponseError{Code: pb.RpcExternalDropFilesResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ExternalDropFiles(in).Marshal()
	return resp
}

func ExternalDropContent(b []byte) []byte {
	in := new(pb.RpcExternalDropContentRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcExternalDropContentResponse{Error: &pb.RpcExternalDropContentResponseError{Code: pb.RpcExternalDropContentResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ExternalDropContent(in).Marshal()
	return resp
}

func LinkPreview(b []byte) []byte {
	in := new(pb.RpcLinkPreviewRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcLinkPreviewResponse{Error: &pb.RpcLinkPreviewResponseError{Code: pb.RpcLinkPreviewResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.LinkPreview(in).Marshal()
	return resp
}

func UploadFile(b []byte) []byte {
	in := new(pb.RpcUploadFileRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcUploadFileResponse{Error: &pb.RpcUploadFileResponseError{Code: pb.RpcUploadFileResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.UploadFile(in).Marshal()
	return resp
}

func BlockUpload(b []byte) []byte {
	in := new(pb.RpcBlockUploadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockUploadResponse{Error: &pb.RpcBlockUploadResponseError{Code: pb.RpcBlockUploadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockUpload(in).Marshal()
	return resp
}

func BlockReplace(b []byte) []byte {
	in := new(pb.RpcBlockReplaceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockReplaceResponse{Error: &pb.RpcBlockReplaceResponseError{Code: pb.RpcBlockReplaceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockReplace(in).Marshal()
	return resp
}

func BlockOpen(b []byte) []byte {
	in := new(pb.RpcBlockOpenRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockOpenResponse{Error: &pb.RpcBlockOpenResponseError{Code: pb.RpcBlockOpenResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockOpen(in).Marshal()
	return resp
}

func BlockGetPublicWebURL(b []byte) []byte {
	in := new(pb.RpcBlockGetPublicWebURLRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockGetPublicWebURLResponse{Error: &pb.RpcBlockGetPublicWebURLResponseError{Code: pb.RpcBlockGetPublicWebURLResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockGetPublicWebURL(in).Marshal()
	return resp
}

func BlockOpenBreadcrumbs(b []byte) []byte {
	in := new(pb.RpcBlockOpenBreadcrumbsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockOpenBreadcrumbsResponse{Error: &pb.RpcBlockOpenBreadcrumbsResponseError{Code: pb.RpcBlockOpenBreadcrumbsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockOpenBreadcrumbs(in).Marshal()
	return resp
}

func BlockSetBreadcrumbs(b []byte) []byte {
	in := new(pb.RpcBlockSetBreadcrumbsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetBreadcrumbsResponse{Error: &pb.RpcBlockSetBreadcrumbsResponseError{Code: pb.RpcBlockSetBreadcrumbsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetBreadcrumbs(in).Marshal()
	return resp
}

func BlockCreate(b []byte) []byte {
	in := new(pb.RpcBlockCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockCreateResponse{Error: &pb.RpcBlockCreateResponseError{Code: pb.RpcBlockCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockCreate(in).Marshal()
	return resp
}

func BlockCreatePage(b []byte) []byte {
	in := new(pb.RpcBlockCreatePageRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockCreatePageResponse{Error: &pb.RpcBlockCreatePageResponseError{Code: pb.RpcBlockCreatePageResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockCreatePage(in).Marshal()
	return resp
}

func BlockCreateSet(b []byte) []byte {
	in := new(pb.RpcBlockCreateSetRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockCreateSetResponse{Error: &pb.RpcBlockCreateSetResponseError{Code: pb.RpcBlockCreateSetResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockCreateSet(in).Marshal()
	return resp
}

func BlockUnlink(b []byte) []byte {
	in := new(pb.RpcBlockUnlinkRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockUnlinkResponse{Error: &pb.RpcBlockUnlinkResponseError{Code: pb.RpcBlockUnlinkResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockUnlink(in).Marshal()
	return resp
}

func BlockClose(b []byte) []byte {
	in := new(pb.RpcBlockCloseRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockCloseResponse{Error: &pb.RpcBlockCloseResponseError{Code: pb.RpcBlockCloseResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockClose(in).Marshal()
	return resp
}

func BlockDownload(b []byte) []byte {
	in := new(pb.RpcBlockDownloadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDownloadResponse{Error: &pb.RpcBlockDownloadResponseError{Code: pb.RpcBlockDownloadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDownload(in).Marshal()
	return resp
}

func BlockGetMarks(b []byte) []byte {
	in := new(pb.RpcBlockGetMarksRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockGetMarksResponse{Error: &pb.RpcBlockGetMarksResponseError{Code: pb.RpcBlockGetMarksResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockGetMarks(in).Marshal()
	return resp
}

func BlockUndo(b []byte) []byte {
	in := new(pb.RpcBlockUndoRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockUndoResponse{Error: &pb.RpcBlockUndoResponseError{Code: pb.RpcBlockUndoResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockUndo(in).Marshal()
	return resp
}

func BlockRedo(b []byte) []byte {
	in := new(pb.RpcBlockRedoRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockRedoResponse{Error: &pb.RpcBlockRedoResponseError{Code: pb.RpcBlockRedoResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockRedo(in).Marshal()
	return resp
}

func BlockSetFields(b []byte) []byte {
	in := new(pb.RpcBlockSetFieldsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetFieldsResponse{Error: &pb.RpcBlockSetFieldsResponseError{Code: pb.RpcBlockSetFieldsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetFields(in).Marshal()
	return resp
}

func BlockSetRestrictions(b []byte) []byte {
	in := new(pb.RpcBlockSetRestrictionsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetRestrictionsResponse{Error: &pb.RpcBlockSetRestrictionsResponseError{Code: pb.RpcBlockSetRestrictionsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetRestrictions(in).Marshal()
	return resp
}

func BlockSetPageIsArchived(b []byte) []byte {
	in := new(pb.RpcBlockSetPageIsArchivedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetPageIsArchivedResponse{Error: &pb.RpcBlockSetPageIsArchivedResponseError{Code: pb.RpcBlockSetPageIsArchivedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetPageIsArchived(in).Marshal()
	return resp
}

func BlockListMove(b []byte) []byte {
	in := new(pb.RpcBlockListMoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListMoveResponse{Error: &pb.RpcBlockListMoveResponseError{Code: pb.RpcBlockListMoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListMove(in).Marshal()
	return resp
}

func BlockListMoveToNewPage(b []byte) []byte {
	in := new(pb.RpcBlockListMoveToNewPageRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListMoveToNewPageResponse{Error: &pb.RpcBlockListMoveToNewPageResponseError{Code: pb.RpcBlockListMoveToNewPageResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListMoveToNewPage(in).Marshal()
	return resp
}

func BlockListConvertChildrenToPages(b []byte) []byte {
	in := new(pb.RpcBlockListConvertChildrenToPagesRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListConvertChildrenToPagesResponse{Error: &pb.RpcBlockListConvertChildrenToPagesResponseError{Code: pb.RpcBlockListConvertChildrenToPagesResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListConvertChildrenToPages(in).Marshal()
	return resp
}

func BlockListSetFields(b []byte) []byte {
	in := new(pb.RpcBlockListSetFieldsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListSetFieldsResponse{Error: &pb.RpcBlockListSetFieldsResponseError{Code: pb.RpcBlockListSetFieldsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListSetFields(in).Marshal()
	return resp
}

func BlockListSetTextStyle(b []byte) []byte {
	in := new(pb.RpcBlockListSetTextStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListSetTextStyleResponse{Error: &pb.RpcBlockListSetTextStyleResponseError{Code: pb.RpcBlockListSetTextStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListSetTextStyle(in).Marshal()
	return resp
}

func BlockListDuplicate(b []byte) []byte {
	in := new(pb.RpcBlockListDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListDuplicateResponse{Error: &pb.RpcBlockListDuplicateResponseError{Code: pb.RpcBlockListDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListDuplicate(in).Marshal()
	return resp
}

func BlockListSetBackgroundColor(b []byte) []byte {
	in := new(pb.RpcBlockListSetBackgroundColorRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListSetBackgroundColorResponse{Error: &pb.RpcBlockListSetBackgroundColorResponseError{Code: pb.RpcBlockListSetBackgroundColorResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListSetBackgroundColor(in).Marshal()
	return resp
}

func BlockListSetAlign(b []byte) []byte {
	in := new(pb.RpcBlockListSetAlignRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListSetAlignResponse{Error: &pb.RpcBlockListSetAlignResponseError{Code: pb.RpcBlockListSetAlignResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListSetAlign(in).Marshal()
	return resp
}

func BlockListSetDivStyle(b []byte) []byte {
	in := new(pb.RpcBlockListSetDivStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListSetDivStyleResponse{Error: &pb.RpcBlockListSetDivStyleResponseError{Code: pb.RpcBlockListSetDivStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListSetDivStyle(in).Marshal()
	return resp
}

func BlockListSetPageIsArchived(b []byte) []byte {
	in := new(pb.RpcBlockListSetPageIsArchivedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListSetPageIsArchivedResponse{Error: &pb.RpcBlockListSetPageIsArchivedResponseError{Code: pb.RpcBlockListSetPageIsArchivedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListSetPageIsArchived(in).Marshal()
	return resp
}

func BlockListDeletePage(b []byte) []byte {
	in := new(pb.RpcBlockListDeletePageRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListDeletePageResponse{Error: &pb.RpcBlockListDeletePageResponseError{Code: pb.RpcBlockListDeletePageResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListDeletePage(in).Marshal()
	return resp
}

func BlockListTurnInto(b []byte) []byte {
	in := new(pb.RpcBlockListTurnIntoRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListTurnIntoResponse{Error: &pb.RpcBlockListTurnIntoResponseError{Code: pb.RpcBlockListTurnIntoResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListTurnInto(in).Marshal()
	return resp
}

func BlockSetTextText(b []byte) []byte {
	in := new(pb.RpcBlockSetTextTextRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetTextTextResponse{Error: &pb.RpcBlockSetTextTextResponseError{Code: pb.RpcBlockSetTextTextResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetTextText(in).Marshal()
	return resp
}

func BlockSetTextColor(b []byte) []byte {
	in := new(pb.RpcBlockSetTextColorRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetTextColorResponse{Error: &pb.RpcBlockSetTextColorResponseError{Code: pb.RpcBlockSetTextColorResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetTextColor(in).Marshal()
	return resp
}

func BlockListSetTextColor(b []byte) []byte {
	in := new(pb.RpcBlockListSetTextColorRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListSetTextColorResponse{Error: &pb.RpcBlockListSetTextColorResponseError{Code: pb.RpcBlockListSetTextColorResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListSetTextColor(in).Marshal()
	return resp
}

func BlockListSetTextMark(b []byte) []byte {
	in := new(pb.RpcBlockListSetTextMarkRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockListSetTextMarkResponse{Error: &pb.RpcBlockListSetTextMarkResponseError{Code: pb.RpcBlockListSetTextMarkResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockListSetTextMark(in).Marshal()
	return resp
}

func BlockSetTextStyle(b []byte) []byte {
	in := new(pb.RpcBlockSetTextStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetTextStyleResponse{Error: &pb.RpcBlockSetTextStyleResponseError{Code: pb.RpcBlockSetTextStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetTextStyle(in).Marshal()
	return resp
}

func BlockSetTextChecked(b []byte) []byte {
	in := new(pb.RpcBlockSetTextCheckedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetTextCheckedResponse{Error: &pb.RpcBlockSetTextCheckedResponseError{Code: pb.RpcBlockSetTextCheckedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetTextChecked(in).Marshal()
	return resp
}

func BlockSplit(b []byte) []byte {
	in := new(pb.RpcBlockSplitRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSplitResponse{Error: &pb.RpcBlockSplitResponseError{Code: pb.RpcBlockSplitResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSplit(in).Marshal()
	return resp
}

func BlockMerge(b []byte) []byte {
	in := new(pb.RpcBlockMergeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockMergeResponse{Error: &pb.RpcBlockMergeResponseError{Code: pb.RpcBlockMergeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockMerge(in).Marshal()
	return resp
}

func BlockCopy(b []byte) []byte {
	in := new(pb.RpcBlockCopyRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockCopyResponse{Error: &pb.RpcBlockCopyResponseError{Code: pb.RpcBlockCopyResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockCopy(in).Marshal()
	return resp
}

func BlockPaste(b []byte) []byte {
	in := new(pb.RpcBlockPasteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockPasteResponse{Error: &pb.RpcBlockPasteResponseError{Code: pb.RpcBlockPasteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockPaste(in).Marshal()
	return resp
}

func BlockCut(b []byte) []byte {
	in := new(pb.RpcBlockCutRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockCutResponse{Error: &pb.RpcBlockCutResponseError{Code: pb.RpcBlockCutResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockCut(in).Marshal()
	return resp
}

func BlockExport(b []byte) []byte {
	in := new(pb.RpcBlockExportRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockExportResponse{Error: &pb.RpcBlockExportResponseError{Code: pb.RpcBlockExportResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockExport(in).Marshal()
	return resp
}

func BlockImportMarkdown(b []byte) []byte {
	in := new(pb.RpcBlockImportMarkdownRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockImportMarkdownResponse{Error: &pb.RpcBlockImportMarkdownResponseError{Code: pb.RpcBlockImportMarkdownResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockImportMarkdown(in).Marshal()
	return resp
}

func BlockSetFileName(b []byte) []byte {
	in := new(pb.RpcBlockSetFileNameRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetFileNameResponse{Error: &pb.RpcBlockSetFileNameResponseError{Code: pb.RpcBlockSetFileNameResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetFileName(in).Marshal()
	return resp
}

func BlockSetImageName(b []byte) []byte {
	in := new(pb.RpcBlockSetImageNameRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetImageNameResponse{Error: &pb.RpcBlockSetImageNameResponseError{Code: pb.RpcBlockSetImageNameResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetImageName(in).Marshal()
	return resp
}

func BlockSetImageWidth(b []byte) []byte {
	in := new(pb.RpcBlockSetImageWidthRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetImageWidthResponse{Error: &pb.RpcBlockSetImageWidthResponseError{Code: pb.RpcBlockSetImageWidthResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetImageWidth(in).Marshal()
	return resp
}

func BlockSetVideoName(b []byte) []byte {
	in := new(pb.RpcBlockSetVideoNameRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetVideoNameResponse{Error: &pb.RpcBlockSetVideoNameResponseError{Code: pb.RpcBlockSetVideoNameResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetVideoName(in).Marshal()
	return resp
}

func BlockSetVideoWidth(b []byte) []byte {
	in := new(pb.RpcBlockSetVideoWidthRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetVideoWidthResponse{Error: &pb.RpcBlockSetVideoWidthResponseError{Code: pb.RpcBlockSetVideoWidthResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetVideoWidth(in).Marshal()
	return resp
}

func BlockSetLinkTargetBlockId(b []byte) []byte {
	in := new(pb.RpcBlockSetLinkTargetBlockIdRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetLinkTargetBlockIdResponse{Error: &pb.RpcBlockSetLinkTargetBlockIdResponseError{Code: pb.RpcBlockSetLinkTargetBlockIdResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetLinkTargetBlockId(in).Marshal()
	return resp
}

func BlockBookmarkFetch(b []byte) []byte {
	in := new(pb.RpcBlockBookmarkFetchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockBookmarkFetchResponse{Error: &pb.RpcBlockBookmarkFetchResponseError{Code: pb.RpcBlockBookmarkFetchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockBookmarkFetch(in).Marshal()
	return resp
}

func BlockBookmarkCreateAndFetch(b []byte) []byte {
	in := new(pb.RpcBlockBookmarkCreateAndFetchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockBookmarkCreateAndFetchResponse{Error: &pb.RpcBlockBookmarkCreateAndFetchResponseError{Code: pb.RpcBlockBookmarkCreateAndFetchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockBookmarkCreateAndFetch(in).Marshal()
	return resp
}

func BlockFileCreateAndUpload(b []byte) []byte {
	in := new(pb.RpcBlockFileCreateAndUploadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockFileCreateAndUploadResponse{Error: &pb.RpcBlockFileCreateAndUploadResponseError{Code: pb.RpcBlockFileCreateAndUploadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockFileCreateAndUpload(in).Marshal()
	return resp
}

func BlockDataviewViewCreate(b []byte) []byte {
	in := new(pb.RpcBlockDataviewViewCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewViewCreateResponse{Error: &pb.RpcBlockDataviewViewCreateResponseError{Code: pb.RpcBlockDataviewViewCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewViewCreate(in).Marshal()
	return resp
}

func BlockDataviewViewDelete(b []byte) []byte {
	in := new(pb.RpcBlockDataviewViewDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewViewDeleteResponse{Error: &pb.RpcBlockDataviewViewDeleteResponseError{Code: pb.RpcBlockDataviewViewDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewViewDelete(in).Marshal()
	return resp
}

func BlockDataviewViewUpdate(b []byte) []byte {
	in := new(pb.RpcBlockDataviewViewUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewViewUpdateResponse{Error: &pb.RpcBlockDataviewViewUpdateResponseError{Code: pb.RpcBlockDataviewViewUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewViewUpdate(in).Marshal()
	return resp
}

func BlockDataviewViewSetActive(b []byte) []byte {
	in := new(pb.RpcBlockDataviewViewSetActiveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewViewSetActiveResponse{Error: &pb.RpcBlockDataviewViewSetActiveResponseError{Code: pb.RpcBlockDataviewViewSetActiveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewViewSetActive(in).Marshal()
	return resp
}

func BlockDataviewRelationAdd(b []byte) []byte {
	in := new(pb.RpcBlockDataviewRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewRelationAddResponse{Error: &pb.RpcBlockDataviewRelationAddResponseError{Code: pb.RpcBlockDataviewRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewRelationAdd(in).Marshal()
	return resp
}

func BlockDataviewRelationUpdate(b []byte) []byte {
	in := new(pb.RpcBlockDataviewRelationUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewRelationUpdateResponse{Error: &pb.RpcBlockDataviewRelationUpdateResponseError{Code: pb.RpcBlockDataviewRelationUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewRelationUpdate(in).Marshal()
	return resp
}

func BlockDataviewRelationDelete(b []byte) []byte {
	in := new(pb.RpcBlockDataviewRelationDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewRelationDeleteResponse{Error: &pb.RpcBlockDataviewRelationDeleteResponseError{Code: pb.RpcBlockDataviewRelationDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewRelationDelete(in).Marshal()
	return resp
}

func BlockDataviewRelationSelectOptionAdd(b []byte) []byte {
	in := new(pb.RpcBlockDataviewRelationSelectOptionAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewRelationSelectOptionAddResponse{Error: &pb.RpcBlockDataviewRelationSelectOptionAddResponseError{Code: pb.RpcBlockDataviewRelationSelectOptionAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewRelationSelectOptionAdd(in).Marshal()
	return resp
}

func BlockDataviewRelationSelectOptionUpdate(b []byte) []byte {
	in := new(pb.RpcBlockDataviewRelationSelectOptionUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewRelationSelectOptionUpdateResponse{Error: &pb.RpcBlockDataviewRelationSelectOptionUpdateResponseError{Code: pb.RpcBlockDataviewRelationSelectOptionUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewRelationSelectOptionUpdate(in).Marshal()
	return resp
}

func BlockDataviewRelationSelectOptionDelete(b []byte) []byte {
	in := new(pb.RpcBlockDataviewRelationSelectOptionDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewRelationSelectOptionDeleteResponse{Error: &pb.RpcBlockDataviewRelationSelectOptionDeleteResponseError{Code: pb.RpcBlockDataviewRelationSelectOptionDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewRelationSelectOptionDelete(in).Marshal()
	return resp
}

func BlockDataviewRelationListAvailable(b []byte) []byte {
	in := new(pb.RpcBlockDataviewRelationListAvailableRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewRelationListAvailableResponse{Error: &pb.RpcBlockDataviewRelationListAvailableResponseError{Code: pb.RpcBlockDataviewRelationListAvailableResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewRelationListAvailable(in).Marshal()
	return resp
}

func BlockDataviewRecordCreate(b []byte) []byte {
	in := new(pb.RpcBlockDataviewRecordCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewRecordCreateResponse{Error: &pb.RpcBlockDataviewRecordCreateResponseError{Code: pb.RpcBlockDataviewRecordCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewRecordCreate(in).Marshal()
	return resp
}

func BlockDataviewRecordUpdate(b []byte) []byte {
	in := new(pb.RpcBlockDataviewRecordUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewRecordUpdateResponse{Error: &pb.RpcBlockDataviewRecordUpdateResponseError{Code: pb.RpcBlockDataviewRecordUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewRecordUpdate(in).Marshal()
	return resp
}

func BlockDataviewRecordDelete(b []byte) []byte {
	in := new(pb.RpcBlockDataviewRecordDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockDataviewRecordDeleteResponse{Error: &pb.RpcBlockDataviewRecordDeleteResponseError{Code: pb.RpcBlockDataviewRecordDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockDataviewRecordDelete(in).Marshal()
	return resp
}

func BlockRelationSetKey(b []byte) []byte {
	in := new(pb.RpcBlockRelationSetKeyRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockRelationSetKeyResponse{Error: &pb.RpcBlockRelationSetKeyResponseError{Code: pb.RpcBlockRelationSetKeyResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockRelationSetKey(in).Marshal()
	return resp
}

func BlockRelationAdd(b []byte) []byte {
	in := new(pb.RpcBlockRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockRelationAddResponse{Error: &pb.RpcBlockRelationAddResponseError{Code: pb.RpcBlockRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockRelationAdd(in).Marshal()
	return resp
}

func NavigationListObjects(b []byte) []byte {
	in := new(pb.RpcNavigationListObjectsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcNavigationListObjectsResponse{Error: &pb.RpcNavigationListObjectsResponseError{Code: pb.RpcNavigationListObjectsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.NavigationListObjects(in).Marshal()
	return resp
}

func NavigationGetObjectInfoWithLinks(b []byte) []byte {
	in := new(pb.RpcNavigationGetObjectInfoWithLinksRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcNavigationGetObjectInfoWithLinksResponse{Error: &pb.RpcNavigationGetObjectInfoWithLinksResponseError{Code: pb.RpcNavigationGetObjectInfoWithLinksResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.NavigationGetObjectInfoWithLinks(in).Marshal()
	return resp
}

func ObjectSearch(b []byte) []byte {
	in := new(pb.RpcObjectSearchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcObjectSearchResponse{Error: &pb.RpcObjectSearchResponseError{Code: pb.RpcObjectSearchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ObjectSearch(in).Marshal()
	return resp
}

func BlockSetDetails(b []byte) []byte {
	in := new(pb.RpcBlockSetDetailsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockSetDetailsResponse{Error: &pb.RpcBlockSetDetailsResponseError{Code: pb.RpcBlockSetDetailsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockSetDetails(in).Marshal()
	return resp
}

func BlockObjectTypeAdd(b []byte) []byte {
	in := new(pb.RpcBlockObjectTypeAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockObjectTypeAddResponse{Error: &pb.RpcBlockObjectTypeAddResponseError{Code: pb.RpcBlockObjectTypeAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockObjectTypeAdd(in).Marshal()
	return resp
}

func BlockObjectTypeRemove(b []byte) []byte {
	in := new(pb.RpcBlockObjectTypeRemoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcBlockObjectTypeRemoveResponse{Error: &pb.RpcBlockObjectTypeRemoveResponseError{Code: pb.RpcBlockObjectTypeRemoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockObjectTypeRemove(in).Marshal()
	return resp
}

func PageCreate(b []byte) []byte {
	in := new(pb.RpcPageCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcPageCreateResponse{Error: &pb.RpcPageCreateResponseError{Code: pb.RpcPageCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.PageCreate(in).Marshal()
	return resp
}

func SetCreate(b []byte) []byte {
	in := new(pb.RpcSetCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcSetCreateResponse{Error: &pb.RpcSetCreateResponseError{Code: pb.RpcSetCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.SetCreate(in).Marshal()
	return resp
}

func ObjectTypeCreate(b []byte) []byte {
	in := new(pb.RpcObjectTypeCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcObjectTypeCreateResponse{Error: &pb.RpcObjectTypeCreateResponseError{Code: pb.RpcObjectTypeCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ObjectTypeCreate(in).Marshal()
	return resp
}

func ObjectTypeList(b []byte) []byte {
	in := new(pb.RpcObjectTypeListRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcObjectTypeListResponse{Error: &pb.RpcObjectTypeListResponseError{Code: pb.RpcObjectTypeListResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ObjectTypeList(in).Marshal()
	return resp
}

func ObjectTypeRelationList(b []byte) []byte {
	in := new(pb.RpcObjectTypeRelationListRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcObjectTypeRelationListResponse{Error: &pb.RpcObjectTypeRelationListResponseError{Code: pb.RpcObjectTypeRelationListResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ObjectTypeRelationList(in).Marshal()
	return resp
}

func ObjectTypeRelationAdd(b []byte) []byte {
	in := new(pb.RpcObjectTypeRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcObjectTypeRelationAddResponse{Error: &pb.RpcObjectTypeRelationAddResponseError{Code: pb.RpcObjectTypeRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ObjectTypeRelationAdd(in).Marshal()
	return resp
}

func ObjectTypeRelationUpdate(b []byte) []byte {
	in := new(pb.RpcObjectTypeRelationUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcObjectTypeRelationUpdateResponse{Error: &pb.RpcObjectTypeRelationUpdateResponseError{Code: pb.RpcObjectTypeRelationUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ObjectTypeRelationUpdate(in).Marshal()
	return resp
}

func ObjectTypeRelationRemove(b []byte) []byte {
	in := new(pb.RpcObjectTypeRelationRemoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcObjectTypeRelationRemoveResponse{Error: &pb.RpcObjectTypeRelationRemoveResponseError{Code: pb.RpcObjectTypeRelationRemoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ObjectTypeRelationRemove(in).Marshal()
	return resp
}

func Ping(b []byte) []byte {
	in := new(pb.RpcPingRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcPingResponse{Error: &pb.RpcPingResponseError{Code: pb.RpcPingResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.Ping(in).Marshal()
	return resp
}

func ProcessCancel(b []byte) []byte {
	in := new(pb.RpcProcessCancelRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcProcessCancelResponse{Error: &pb.RpcProcessCancelResponseError{Code: pb.RpcProcessCancelResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ProcessCancel(in).Marshal()
	return resp
}

func HistoryShow(b []byte) []byte {
	in := new(pb.RpcHistoryShowRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcHistoryShowResponse{Error: &pb.RpcHistoryShowResponseError{Code: pb.RpcHistoryShowResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.HistoryShow(in).Marshal()
	return resp
}

func HistoryVersions(b []byte) []byte {
	in := new(pb.RpcHistoryVersionsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcHistoryVersionsResponse{Error: &pb.RpcHistoryVersionsResponseError{Code: pb.RpcHistoryVersionsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.HistoryVersions(in).Marshal()
	return resp
}

func HistorySetVersion(b []byte) []byte {
	in := new(pb.RpcHistorySetVersionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcHistorySetVersionResponse{Error: &pb.RpcHistorySetVersionResponseError{Code: pb.RpcHistorySetVersionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.HistorySetVersion(in).Marshal()
	return resp
}

func Export(b []byte) []byte {
	in := new(pb.RpcExportRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.RpcExportResponse{Error: &pb.RpcExportResponseError{Code: pb.RpcExportResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.Export(in).Marshal()
	return resp
}

func CommandAsync(cmd string, data []byte, callback func(data []byte)) {
	go func() {
		var cd []byte
		switch cmd {
		case "WalletCreate":
			cd = WalletCreate(data)
		case "WalletRecover":
			cd = WalletRecover(data)
		case "WalletConvert":
			cd = WalletConvert(data)
		case "AccountRecover":
			cd = AccountRecover(data)
		case "AccountCreate":
			cd = AccountCreate(data)
		case "AccountSelect":
			cd = AccountSelect(data)
		case "AccountStop":
			cd = AccountStop(data)
		case "ImageGetBlob":
			cd = ImageGetBlob(data)
		case "VersionGet":
			cd = VersionGet(data)
		case "LogSend":
			cd = LogSend(data)
		case "ConfigGet":
			cd = ConfigGet(data)
		case "Shutdown":
			cd = Shutdown(data)
		case "ExternalDropFiles":
			cd = ExternalDropFiles(data)
		case "ExternalDropContent":
			cd = ExternalDropContent(data)
		case "LinkPreview":
			cd = LinkPreview(data)
		case "UploadFile":
			cd = UploadFile(data)
		case "BlockUpload":
			cd = BlockUpload(data)
		case "BlockReplace":
			cd = BlockReplace(data)
		case "BlockOpen":
			cd = BlockOpen(data)
		case "BlockGetPublicWebURL":
			cd = BlockGetPublicWebURL(data)
		case "BlockOpenBreadcrumbs":
			cd = BlockOpenBreadcrumbs(data)
		case "BlockSetBreadcrumbs":
			cd = BlockSetBreadcrumbs(data)
		case "BlockCreate":
			cd = BlockCreate(data)
		case "BlockCreatePage":
			cd = BlockCreatePage(data)
		case "BlockCreateSet":
			cd = BlockCreateSet(data)
		case "BlockUnlink":
			cd = BlockUnlink(data)
		case "BlockClose":
			cd = BlockClose(data)
		case "BlockDownload":
			cd = BlockDownload(data)
		case "BlockGetMarks":
			cd = BlockGetMarks(data)
		case "BlockUndo":
			cd = BlockUndo(data)
		case "BlockRedo":
			cd = BlockRedo(data)
		case "BlockSetFields":
			cd = BlockSetFields(data)
		case "BlockSetRestrictions":
			cd = BlockSetRestrictions(data)
		case "BlockSetPageIsArchived":
			cd = BlockSetPageIsArchived(data)
		case "BlockListMove":
			cd = BlockListMove(data)
		case "BlockListMoveToNewPage":
			cd = BlockListMoveToNewPage(data)
		case "BlockListConvertChildrenToPages":
			cd = BlockListConvertChildrenToPages(data)
		case "BlockListSetFields":
			cd = BlockListSetFields(data)
		case "BlockListSetTextStyle":
			cd = BlockListSetTextStyle(data)
		case "BlockListDuplicate":
			cd = BlockListDuplicate(data)
		case "BlockListSetBackgroundColor":
			cd = BlockListSetBackgroundColor(data)
		case "BlockListSetAlign":
			cd = BlockListSetAlign(data)
		case "BlockListSetDivStyle":
			cd = BlockListSetDivStyle(data)
		case "BlockListSetPageIsArchived":
			cd = BlockListSetPageIsArchived(data)
		case "BlockListDeletePage":
			cd = BlockListDeletePage(data)
		case "BlockListTurnInto":
			cd = BlockListTurnInto(data)
		case "BlockSetTextText":
			cd = BlockSetTextText(data)
		case "BlockSetTextColor":
			cd = BlockSetTextColor(data)
		case "BlockListSetTextColor":
			cd = BlockListSetTextColor(data)
		case "BlockListSetTextMark":
			cd = BlockListSetTextMark(data)
		case "BlockSetTextStyle":
			cd = BlockSetTextStyle(data)
		case "BlockSetTextChecked":
			cd = BlockSetTextChecked(data)
		case "BlockSplit":
			cd = BlockSplit(data)
		case "BlockMerge":
			cd = BlockMerge(data)
		case "BlockCopy":
			cd = BlockCopy(data)
		case "BlockPaste":
			cd = BlockPaste(data)
		case "BlockCut":
			cd = BlockCut(data)
		case "BlockExport":
			cd = BlockExport(data)
		case "BlockImportMarkdown":
			cd = BlockImportMarkdown(data)
		case "BlockSetFileName":
			cd = BlockSetFileName(data)
		case "BlockSetImageName":
			cd = BlockSetImageName(data)
		case "BlockSetImageWidth":
			cd = BlockSetImageWidth(data)
		case "BlockSetVideoName":
			cd = BlockSetVideoName(data)
		case "BlockSetVideoWidth":
			cd = BlockSetVideoWidth(data)
		case "BlockSetLinkTargetBlockId":
			cd = BlockSetLinkTargetBlockId(data)
		case "BlockBookmarkFetch":
			cd = BlockBookmarkFetch(data)
		case "BlockBookmarkCreateAndFetch":
			cd = BlockBookmarkCreateAndFetch(data)
		case "BlockFileCreateAndUpload":
			cd = BlockFileCreateAndUpload(data)
		case "BlockDataviewViewCreate":
			cd = BlockDataviewViewCreate(data)
		case "BlockDataviewViewDelete":
			cd = BlockDataviewViewDelete(data)
		case "BlockDataviewViewUpdate":
			cd = BlockDataviewViewUpdate(data)
		case "BlockDataviewViewSetActive":
			cd = BlockDataviewViewSetActive(data)
		case "BlockDataviewRelationAdd":
			cd = BlockDataviewRelationAdd(data)
		case "BlockDataviewRelationUpdate":
			cd = BlockDataviewRelationUpdate(data)
		case "BlockDataviewRelationDelete":
			cd = BlockDataviewRelationDelete(data)
		case "BlockDataviewRelationSelectOptionAdd":
			cd = BlockDataviewRelationSelectOptionAdd(data)
		case "BlockDataviewRelationSelectOptionUpdate":
			cd = BlockDataviewRelationSelectOptionUpdate(data)
		case "BlockDataviewRelationSelectOptionDelete":
			cd = BlockDataviewRelationSelectOptionDelete(data)
		case "BlockDataviewRelationListAvailable":
			cd = BlockDataviewRelationListAvailable(data)
		case "BlockDataviewRecordCreate":
			cd = BlockDataviewRecordCreate(data)
		case "BlockDataviewRecordUpdate":
			cd = BlockDataviewRecordUpdate(data)
		case "BlockDataviewRecordDelete":
			cd = BlockDataviewRecordDelete(data)
		case "BlockRelationSetKey":
			cd = BlockRelationSetKey(data)
		case "BlockRelationAdd":
			cd = BlockRelationAdd(data)
		case "NavigationListObjects":
			cd = NavigationListObjects(data)
		case "NavigationGetObjectInfoWithLinks":
			cd = NavigationGetObjectInfoWithLinks(data)
		case "ObjectSearch":
			cd = ObjectSearch(data)
		case "BlockSetDetails":
			cd = BlockSetDetails(data)
		case "BlockObjectTypeAdd":
			cd = BlockObjectTypeAdd(data)
		case "BlockObjectTypeRemove":
			cd = BlockObjectTypeRemove(data)
		case "PageCreate":
			cd = PageCreate(data)
		case "SetCreate":
			cd = SetCreate(data)
		case "ObjectTypeCreate":
			cd = ObjectTypeCreate(data)
		case "ObjectTypeList":
			cd = ObjectTypeList(data)
		case "ObjectTypeRelationList":
			cd = ObjectTypeRelationList(data)
		case "ObjectTypeRelationAdd":
			cd = ObjectTypeRelationAdd(data)
		case "ObjectTypeRelationUpdate":
			cd = ObjectTypeRelationUpdate(data)
		case "ObjectTypeRelationRemove":
			cd = ObjectTypeRelationRemove(data)
		case "Ping":
			cd = Ping(data)
		case "ProcessCancel":
			cd = ProcessCancel(data)
		case "HistoryShow":
			cd = HistoryShow(data)
		case "HistoryVersions":
			cd = HistoryVersions(data)
		case "HistorySetVersion":
			cd = HistorySetVersion(data)
		case "Export":
			cd = Export(data)
		default:
			log.Errorf("unknown command type: %s\n", cmd)
		}
		if callback != nil {
			callback(cd)
		}
	}()
}

type MessageHandler interface {
	Handle(b []byte)
}

func CommandMobile(cmd string, data []byte, callback MessageHandler) {
	CommandAsync(cmd, data, callback.Handle)
}
