// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/protos/service/service.proto

package lib

import (
	context "context"
	fmt "fmt"
	pb "github.com/anytypeio/go-anytype-middleware/pb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/protos/service/service.proto", fileDescriptor_93a29dc403579097) }

var fileDescriptor_93a29dc403579097 = []byte{
	// 1136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0x4f, 0x6f, 0xdc, 0x44,
	0x18, 0xc6, 0xb3, 0x02, 0x51, 0x31, 0x84, 0x40, 0xa7, 0x80, 0x68, 0x50, 0x37, 0x25, 0x4d, 0x20,
	0x49, 0xc1, 0x2d, 0x2d, 0x12, 0x5c, 0x38, 0x34, 0x9b, 0x34, 0x8d, 0x94, 0x94, 0x90, 0x0d, 0x8d,
	0x54, 0x81, 0xc0, 0xf1, 0xbe, 0xd9, 0x0c, 0xeb, 0x9d, 0x71, 0xed, 0xc9, 0xd2, 0xbd, 0x72, 0x40,
	0x1c, 0x39, 0xf0, 0xa1, 0x38, 0xf6, 0xc8, 0x11, 0x25, 0x5f, 0xa4, 0x9a, 0xf1, 0xeb, 0x3f, 0x63,
	0x7b, 0x66, 0x9d, 0x43, 0x12, 0xc5, 0xcf, 0xef, 0x7d, 0x9e, 0x19, 0xbf, 0x33, 0x63, 0xef, 0x92,
	0xa5, 0xe8, 0xe4, 0x5e, 0x14, 0x0b, 0x29, 0x92, 0x7b, 0x09, 0xc4, 0x13, 0x16, 0x40, 0xf6, 0xd7,
	0xd3, 0x97, 0xe9, 0x35, 0x9f, 0x4f, 0xe5, 0x34, 0x82, 0xc5, 0x8f, 0x0b, 0x32, 0x10, 0xe3, 0xb1,
	0xcf, 0x07, 0x49, 0x8a, 0x2c, 0x7e, 0x54, 0x28, 0x30, 0x01, 0x2e, 0xf1, 0xfa, 0x83, 0x3f, 0x57,
	0xc9, 0x42, 0x2f, 0x64, 0xc0, 0x65, 0x0f, 0x0b, 0xe8, 0x31, 0x99, 0x3f, 0xf6, 0xc3, 0x10, 0x64,
	0x2f, 0x06, 0x5f, 0x02, 0x5d, 0xf6, 0xd0, 0xde, 0x3b, 0x8c, 0x02, 0x2f, 0x95, 0xbc, 0x54, 0xf3,
	0x0e, 0xe1, 0xc5, 0x39, 0x24, 0x72, 0xf1, 0x8e, 0x93, 0x49, 0x22, 0xc1, 0x13, 0xa0, 0xcf, 0xc9,
	0xbb, 0xa9, 0x72, 0x08, 0x81, 0x98, 0x40, 0x4c, 0x1b, 0xab, 0x50, 0xcc, 0xad, 0x57, 0xdc, 0x10,
	0x7a, 0xff, 0x4c, 0x16, 0x1e, 0x05, 0x81, 0x38, 0xe7, 0xb9, 0xb9, 0x59, 0x87, 0x62, 0xcd, 0x7d,
	0x75, 0x06, 0x55, 0x0c, 0x1d, 0x35, 0xbc, 0x29, 0x77, 0x1a, 0xeb, 0x2a, 0x77, 0x65, 0xc5, 0x0d,
	0xd5, 0xbc, 0xfb, 0x10, 0x42, 0x20, 0x2d, 0xde, 0xa9, 0x38, 0xc3, 0x3b, 0x87, 0xd0, 0x3b, 0x20,
	0xf3, 0xbb, 0x63, 0x7f, 0x08, 0x3b, 0x20, 0x37, 0x43, 0x71, 0x42, 0xd7, 0x8c, 0xaa, 0xdd, 0xe8,
	0x34, 0xf1, 0xb4, 0xee, 0xed, 0x80, 0xf4, 0x14, 0x91, 0xfb, 0xaf, 0xb7, 0x20, 0x31, 0xe4, 0x07,
	0x42, 0x9e, 0x41, 0x9c, 0x30, 0xc1, 0x77, 0x40, 0xd2, 0xdb, 0x46, 0x21, 0x0a, 0xba, 0x2a, 0xb3,
	0xfe, 0xd4, 0x41, 0xa0, 0xe5, 0x13, 0x72, 0x6d, 0x4f, 0x0c, 0xfb, 0xc0, 0x07, 0xf4, 0x96, 0x41,
	0xef, 0x89, 0xa1, 0xa7, 0x2e, 0xe7, 0x66, 0x5d, 0x9b, 0x8c, 0x4e, 0x4f, 0xc9, 0xdb, 0x3d, 0xc1,
	0x4f, 0xd9, 0x50, 0x8d, 0x6d, 0xc9, 0x80, 0xd3, 0xeb, 0xc6, 0xd0, 0x6e, 0xdb, 0x01, 0xf4, 0x3b,
	0x25, 0xd7, 0xb7, 0x5f, 0x4a, 0x88, 0xb9, 0x1f, 0x6e, 0xc5, 0x22, 0x7a, 0xcc, 0x42, 0x48, 0xe8,
	0xe7, 0x46, 0x59, 0x59, 0xf7, 0x34, 0x90, 0xfb, 0xaf, 0xcd, 0x06, 0x31, 0x27, 0x24, 0x37, 0xca,
	0x72, 0x4f, 0x70, 0x09, 0x5c, 0xd2, 0x75, 0xbb, 0x01, 0x22, 0x79, 0xd6, 0x46, 0x1b, 0x14, 0xd3,
	0x8e, 0xc8, 0x3b, 0x9b, 0xa1, 0x08, 0x46, 0x3f, 0x46, 0xa1, 0xf0, 0x07, 0xd4, 0xec, 0x90, 0x56,
	0xbc, 0x54, 0xca, 0xdd, 0x97, 0x5d, 0x08, 0xba, 0x1e, 0x93, 0x79, 0x2d, 0x1c, 0x42, 0x14, 0xfa,
	0x41, 0xf5, 0x24, 0x49, 0x6b, 0x50, 0xb3, 0x9c, 0x24, 0x55, 0xa6, 0x68, 0xaa, 0x56, 0xbe, 0x8f,
	0x80, 0x57, 0x9a, 0x9a, 0x56, 0x28, 0xc1, 0xd2, 0x54, 0x03, 0xa8, 0x4c, 0x1f, 0x37, 0x77, 0xd3,
	0xf4, 0x2b, 0x5b, 0x7b, 0xd9, 0x85, 0xa0, 0xeb, 0xaf, 0xe4, 0xbd, 0x92, 0xeb, 0x81, 0x3f, 0x04,
	0xba, 0x6a, 0x2d, 0x53, 0x72, 0xee, 0xfe, 0xd9, 0x2c, 0xac, 0xda, 0x36, 0x1e, 0x32, 0x3e, 0x6a,
	0x6e, 0x9b, 0x96, 0xdc, 0x6d, 0xcb, 0x90, 0x62, 0x3f, 0xa7, 0xe3, 0x0e, 0x45, 0x02, 0xb4, 0xe9,
	0xee, 0x69, 0xc5, 0xb2, 0x9f, 0x4d, 0xa2, 0x38, 0xe3, 0xf4, 0xf5, 0x2d, 0xf1, 0x3b, 0xd7, 0x2b,
	0xac, 0xa9, 0xcd, 0x99, 0x68, 0x39, 0xe3, 0x6a, 0x10, 0x7a, 0xff, 0x84, 0xde, 0x3b, 0x20, 0xf7,
	0xfd, 0x78, 0x94, 0xd0, 0xa6, 0x32, 0xb5, 0x87, 0xb5, 0x6a, 0x39, 0xf9, 0xeb, 0x14, 0xba, 0x03,
	0x79, 0x5f, 0x6b, 0x4f, 0x58, 0x22, 0x45, 0x3c, 0xdd, 0x17, 0x13, 0xa8, 0x6c, 0xf7, 0xb4, 0x14,
	0x75, 0x4f, 0x01, 0x96, 0xed, 0xde, 0x08, 0x62, 0xcc, 0x2f, 0x64, 0x41, 0xcb, 0x7d, 0x90, 0x8f,
	0x19, 0x84, 0x83, 0xa4, 0x71, 0xa9, 0xf4, 0x41, 0x7a, 0xa9, 0xec, 0x5c, 0x2a, 0x06, 0x86, 0x01,
	0x2f, 0xc8, 0x07, 0x59, 0xc0, 0x21, 0x24, 0x32, 0x66, 0x81, 0x64, 0x82, 0x27, 0xf4, 0xae, 0xa5,
	0xbe, 0x0c, 0xe5, 0x61, 0x5f, 0xb4, 0x83, 0x31, 0x72, 0x44, 0x68, 0x16, 0xb9, 0x9b, 0x3c, 0x8a,
	0x83, 0x33, 0x36, 0x81, 0x41, 0xe5, 0x04, 0x2b, 0x3c, 0x0a, 0xc4, 0x72, 0x82, 0x59, 0xd0, 0xca,
	0x0a, 0xdb, 0x63, 0x89, 0xd4, 0x4d, 0x6a, 0x58, 0x61, 0x4a, 0x33, 0x1b, 0xb4, 0xe2, 0x86, 0x2a,
	0x13, 0x51, 0x52, 0xd1, 0xa0, 0x75, 0x4b, 0x6d, 0x43, 0x93, 0x36, 0xda, 0xa0, 0x18, 0x36, 0x21,
	0x1f, 0x96, 0xc3, 0x8e, 0xe0, 0xa5, 0xec, 0xcb, 0x69, 0x08, 0xf4, 0x4b, 0x87, 0x89, 0xa2, 0x3c,
	0x8d, 0xe5, 0x99, 0x5e, 0x5b, 0x1c, 0x73, 0x59, 0x69, 0x92, 0x5b, 0xe7, 0x51, 0xc8, 0x02, 0x75,
	0x14, 0xae, 0x59, 0x5c, 0x72, 0xc2, 0xf2, 0xc2, 0xd0, 0x4c, 0x62, 0xd4, 0x10, 0xf7, 0x14, 0x4e,
	0x4f, 0xfd, 0x34, 0x05, 0x15, 0x43, 0xd5, 0xbf, 0x1c, 0x41, 0x35, 0x12, 0x83, 0x7e, 0x23, 0xd7,
	0xcb, 0x41, 0x3d, 0x11, 0x8a, 0x98, 0x3a, 0xeb, 0x35, 0x32, 0x73, 0x01, 0x1a, 0xa8, 0xbd, 0x6f,
	0x69, 0xde, 0xcc, 0xbe, 0x99, 0x99, 0x5e, 0x5b, 0x1c, 0x73, 0xff, 0xea, 0x90, 0x4f, 0xca, 0x93,
	0xdc, 0xf4, 0x83, 0xd1, 0x30, 0x16, 0xe7, 0x7c, 0x90, 0xc6, 0x3f, 0x74, 0xcd, 0xa1, 0x02, 0xe7,
	0x83, 0xf8, 0xfa, 0x6a, 0x45, 0x38, 0x94, 0x7f, 0x3a, 0x64, 0xa9, 0x7a, 0x0f, 0xaa, 0xc3, 0xf9,
	0x66, 0xd6, 0xf4, 0x6c, 0x43, 0xfa, 0xf6, 0xea, 0x85, 0xcd, 0xab, 0x20, 0xdd, 0x4d, 0xce, 0x55,
	0x60, 0xee, 0xa4, 0x8d, 0x36, 0x28, 0x66, 0x45, 0xe4, 0x86, 0xb1, 0xe2, 0xce, 0x20, 0x18, 0xc1,
	0xc0, 0x7a, 0xca, 0xa6, 0x0d, 0x4d, 0xa1, 0x99, 0xa7, 0x6c, 0x05, 0xae, 0x3c, 0xad, 0xfb, 0x51,
	0xc8, 0x64, 0xe3, 0xd3, 0x5a, 0x2b, 0xce, 0xa7, 0x75, 0x46, 0x54, 0x2c, 0xf7, 0x21, 0x1e, 0x36,
	0xbf, 0x00, 0x68, 0xc5, 0x69, 0x99, 0x11, 0x95, 0x37, 0xb6, 0x9e, 0x88, 0xa6, 0x8d, 0x6f, 0x6c,
	0x4a, 0x70, 0xbe, 0xb1, 0x21, 0x50, 0x19, 0xe2, 0x81, 0x9f, 0xc8, 0xe6, 0x21, 0x6a, 0xc5, 0x39,
	0xc4, 0x8c, 0xa8, 0x9f, 0x4a, 0xea, 0x5d, 0xfc, 0xa9, 0x3f, 0x06, 0xeb, 0xa9, 0xa4, 0x00, 0x4f,
	0x11, 0x33, 0x4f, 0xa5, 0x32, 0x59, 0x5f, 0x8f, 0xfa, 0x23, 0x95, 0x4e, 0xb2, 0x3e, 0x16, 0xf5,
	0x87, 0x2e, 0x23, 0x6a, 0xa3, 0x0d, 0x8a, 0x59, 0xe3, 0xd2, 0x33, 0x58, 0xc9, 0xc7, 0x6c, 0x20,
	0xcf, 0xa8, 0xdb, 0x41, 0x33, 0x79, 0xda, 0xdd, 0x56, 0x6c, 0x7d, 0x6a, 0xcf, 0xd8, 0x00, 0x84,
	0x73, 0x6a, 0x9a, 0x68, 0x37, 0x35, 0x03, 0xad, 0x4f, 0x4d, 0xcb, 0xee, 0xa9, 0xa5, 0x0e, 0xed,
	0xa6, 0x66, 0xb2, 0xf5, 0xe5, 0xb1, 0x1b, 0x08, 0xee, 0x5c, 0x1e, 0x0a, 0x68, 0xb7, 0x3c, 0xca,
	0x24, 0x06, 0xfd, 0xd1, 0x21, 0x37, 0xb3, 0xa4, 0x3d, 0xc6, 0x47, 0x47, 0x7e, 0x3c, 0xd4, 0x1f,
	0xdf, 0x83, 0xd1, 0xee, 0x80, 0x7e, 0x65, 0x31, 0x52, 0xa4, 0x67, 0xa0, 0x79, 0xf6, 0x83, 0xab,
	0x94, 0xe0, 0x20, 0xbe, 0x23, 0x6f, 0x1e, 0x30, 0x3e, 0xa4, 0x37, 0x8d, 0x5a, 0x75, 0x29, 0xb7,
	0x5d, 0x6c, 0x92, 0xb0, 0xfc, 0x3e, 0x99, 0x57, 0x87, 0x33, 0xf0, 0x6d, 0xfd, 0x65, 0x13, 0x5d,
	0xc8, 0xd9, 0xed, 0x71, 0x24, 0xa7, 0x8b, 0xa5, 0xff, 0x15, 0x70, 0xbf, 0xb3, 0x79, 0xeb, 0xdf,
	0x8b, 0x6e, 0xe7, 0xd5, 0x45, 0xb7, 0xf3, 0xff, 0x45, 0xb7, 0xf3, 0xf7, 0x65, 0x77, 0xee, 0xd5,
	0x65, 0x77, 0xee, 0xbf, 0xcb, 0xee, 0xdc, 0xf3, 0x37, 0x42, 0x76, 0x72, 0xf2, 0x96, 0xfe, 0xba,
	0xea, 0xe1, 0xeb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x8d, 0xf1, 0xb9, 0x0c, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientCommandsClient is the client API for ClientCommands service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientCommandsClient interface {
	WalletCreate(ctx context.Context, in *pb.RpcWalletCreateRequest, opts ...grpc.CallOption) (*pb.RpcWalletCreateResponse, error)
	WalletRecover(ctx context.Context, in *pb.RpcWalletRecoverRequest, opts ...grpc.CallOption) (*pb.RpcWalletRecoverResponse, error)
	AccountRecover(ctx context.Context, in *pb.RpcAccountRecoverRequest, opts ...grpc.CallOption) (*pb.RpcAccountRecoverResponse, error)
	AccountCreate(ctx context.Context, in *pb.RpcAccountCreateRequest, opts ...grpc.CallOption) (*pb.RpcAccountCreateResponse, error)
	AccountSelect(ctx context.Context, in *pb.RpcAccountSelectRequest, opts ...grpc.CallOption) (*pb.RpcAccountSelectResponse, error)
	ImageGetBlob(ctx context.Context, in *pb.RpcIpfsImageGetBlobRequest, opts ...grpc.CallOption) (*pb.RpcIpfsImageGetBlobResponse, error)
	VersionGet(ctx context.Context, in *pb.RpcVersionGetRequest, opts ...grpc.CallOption) (*pb.RpcVersionGetResponse, error)
	LogSend(ctx context.Context, in *pb.RpcLogSendRequest, opts ...grpc.CallOption) (*pb.RpcLogSendResponse, error)
	ConfigGet(ctx context.Context, in *pb.RpcConfigGetRequest, opts ...grpc.CallOption) (*pb.RpcConfigGetResponse, error)
	ExternalDropFiles(ctx context.Context, in *pb.RpcExternalDropFilesRequest, opts ...grpc.CallOption) (*pb.RpcExternalDropFilesResponse, error)
	ExternalDropContent(ctx context.Context, in *pb.RpcExternalDropContentRequest, opts ...grpc.CallOption) (*pb.RpcExternalDropContentResponse, error)
	BlockUpload(ctx context.Context, in *pb.RpcBlockUploadRequest, opts ...grpc.CallOption) (*pb.RpcBlockUploadResponse, error)
	BlockReplace(ctx context.Context, in *pb.RpcBlockReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockReplaceResponse, error)
	BlockOpen(ctx context.Context, in *pb.RpcBlockOpenRequest, opts ...grpc.CallOption) (*pb.RpcBlockOpenResponse, error)
	BlockCreate(ctx context.Context, in *pb.RpcBlockCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreateResponse, error)
	BlockCreatePage(ctx context.Context, in *pb.RpcBlockCreatePageRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreatePageResponse, error)
	BlockUnlink(ctx context.Context, in *pb.RpcBlockUnlinkRequest, opts ...grpc.CallOption) (*pb.RpcBlockUnlinkResponse, error)
	BlockClose(ctx context.Context, in *pb.RpcBlockCloseRequest, opts ...grpc.CallOption) (*pb.RpcBlockCloseResponse, error)
	BlockDownload(ctx context.Context, in *pb.RpcBlockDownloadRequest, opts ...grpc.CallOption) (*pb.RpcBlockDownloadResponse, error)
	BlockGetMarks(ctx context.Context, in *pb.RpcBlockGetMarksRequest, opts ...grpc.CallOption) (*pb.RpcBlockGetMarksResponse, error)
	BlockHistoryMove(ctx context.Context, in *pb.RpcBlockHistoryMoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockHistoryMoveResponse, error)
	BlockSetFields(ctx context.Context, in *pb.RpcBlockSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetFieldsResponse, error)
	BlockSetRestrictions(ctx context.Context, in *pb.RpcBlockSetRestrictionsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetRestrictionsResponse, error)
	BlockSetIsArchived(ctx context.Context, in *pb.RpcBlockSetIsArchivedRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetIsArchivedResponse, error)
	BlockListMove(ctx context.Context, in *pb.RpcBlockListMoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockListMoveResponse, error)
	BlockListSetFields(ctx context.Context, in *pb.RpcBlockListSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetFieldsResponse, error)
	BlockListSetTextStyle(ctx context.Context, in *pb.RpcBlockListSetTextStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextStyleResponse, error)
	BlockListDuplicate(ctx context.Context, in *pb.RpcBlockListDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcBlockListDuplicateResponse, error)
	BlockSetTextText(ctx context.Context, in *pb.RpcBlockSetTextTextRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextTextResponse, error)
	BlockSetTextColor(ctx context.Context, in *pb.RpcBlockSetTextColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextColorResponse, error)
	BlockListSetTextColor(ctx context.Context, in *pb.RpcBlockListSetTextColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextColorResponse, error)
	BlockSetTextBackgroundColor(ctx context.Context, in *pb.RpcBlockSetTextBackgroundColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextBackgroundColorResponse, error)
	BlockListSetTextBackgroundColor(ctx context.Context, in *pb.RpcBlockListSetTextBackgroundColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextBackgroundColorResponse, error)
	BlockSetTextStyle(ctx context.Context, in *pb.RpcBlockSetTextStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextStyleResponse, error)
	BlockSetTextChecked(ctx context.Context, in *pb.RpcBlockSetTextCheckedRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextCheckedResponse, error)
	BlockSplit(ctx context.Context, in *pb.RpcBlockSplitRequest, opts ...grpc.CallOption) (*pb.RpcBlockSplitResponse, error)
	BlockMerge(ctx context.Context, in *pb.RpcBlockMergeRequest, opts ...grpc.CallOption) (*pb.RpcBlockMergeResponse, error)
	BlockCopy(ctx context.Context, in *pb.RpcBlockCopyRequest, opts ...grpc.CallOption) (*pb.RpcBlockCopyResponse, error)
	BlockPaste(ctx context.Context, in *pb.RpcBlockPasteRequest, opts ...grpc.CallOption) (*pb.RpcBlockPasteResponse, error)
	BlockSetFileName(ctx context.Context, in *pb.RpcBlockSetFileNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetFileNameResponse, error)
	BlockSetImageName(ctx context.Context, in *pb.RpcBlockSetImageNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetImageNameResponse, error)
	BlockSetImageWidth(ctx context.Context, in *pb.RpcBlockSetImageWidthRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetImageWidthResponse, error)
	BlockSetVideoName(ctx context.Context, in *pb.RpcBlockSetVideoNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetVideoNameResponse, error)
	BlockSetVideoWidth(ctx context.Context, in *pb.RpcBlockSetVideoWidthRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetVideoWidthResponse, error)
	BlockSetIconName(ctx context.Context, in *pb.RpcBlockSetIconNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetIconNameResponse, error)
	BlockSetLinkTargetBlockId(ctx context.Context, in *pb.RpcBlockSetLinkTargetBlockIdRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetLinkTargetBlockIdResponse, error)
	Ping(ctx context.Context, in *pb.RpcPingRequest, opts ...grpc.CallOption) (*pb.RpcPingResponse, error)
	// used only for lib-debug via grpc
	ListenEvents(ctx context.Context, in *pb.Empty, opts ...grpc.CallOption) (ClientCommands_ListenEventsClient, error)
}

type clientCommandsClient struct {
	cc *grpc.ClientConn
}

func NewClientCommandsClient(cc *grpc.ClientConn) ClientCommandsClient {
	return &clientCommandsClient{cc}
}

func (c *clientCommandsClient) WalletCreate(ctx context.Context, in *pb.RpcWalletCreateRequest, opts ...grpc.CallOption) (*pb.RpcWalletCreateResponse, error) {
	out := new(pb.RpcWalletCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WalletCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WalletRecover(ctx context.Context, in *pb.RpcWalletRecoverRequest, opts ...grpc.CallOption) (*pb.RpcWalletRecoverResponse, error) {
	out := new(pb.RpcWalletRecoverResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WalletRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountRecover(ctx context.Context, in *pb.RpcAccountRecoverRequest, opts ...grpc.CallOption) (*pb.RpcAccountRecoverResponse, error) {
	out := new(pb.RpcAccountRecoverResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountCreate(ctx context.Context, in *pb.RpcAccountCreateRequest, opts ...grpc.CallOption) (*pb.RpcAccountCreateResponse, error) {
	out := new(pb.RpcAccountCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountSelect(ctx context.Context, in *pb.RpcAccountSelectRequest, opts ...grpc.CallOption) (*pb.RpcAccountSelectResponse, error) {
	out := new(pb.RpcAccountSelectResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ImageGetBlob(ctx context.Context, in *pb.RpcIpfsImageGetBlobRequest, opts ...grpc.CallOption) (*pb.RpcIpfsImageGetBlobResponse, error) {
	out := new(pb.RpcIpfsImageGetBlobResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ImageGetBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) VersionGet(ctx context.Context, in *pb.RpcVersionGetRequest, opts ...grpc.CallOption) (*pb.RpcVersionGetResponse, error) {
	out := new(pb.RpcVersionGetResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/VersionGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) LogSend(ctx context.Context, in *pb.RpcLogSendRequest, opts ...grpc.CallOption) (*pb.RpcLogSendResponse, error) {
	out := new(pb.RpcLogSendResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/LogSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ConfigGet(ctx context.Context, in *pb.RpcConfigGetRequest, opts ...grpc.CallOption) (*pb.RpcConfigGetResponse, error) {
	out := new(pb.RpcConfigGetResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ConfigGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ExternalDropFiles(ctx context.Context, in *pb.RpcExternalDropFilesRequest, opts ...grpc.CallOption) (*pb.RpcExternalDropFilesResponse, error) {
	out := new(pb.RpcExternalDropFilesResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ExternalDropFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ExternalDropContent(ctx context.Context, in *pb.RpcExternalDropContentRequest, opts ...grpc.CallOption) (*pb.RpcExternalDropContentResponse, error) {
	out := new(pb.RpcExternalDropContentResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ExternalDropContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockUpload(ctx context.Context, in *pb.RpcBlockUploadRequest, opts ...grpc.CallOption) (*pb.RpcBlockUploadResponse, error) {
	out := new(pb.RpcBlockUploadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockReplace(ctx context.Context, in *pb.RpcBlockReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockReplaceResponse, error) {
	out := new(pb.RpcBlockReplaceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockOpen(ctx context.Context, in *pb.RpcBlockOpenRequest, opts ...grpc.CallOption) (*pb.RpcBlockOpenResponse, error) {
	out := new(pb.RpcBlockOpenResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCreate(ctx context.Context, in *pb.RpcBlockCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreateResponse, error) {
	out := new(pb.RpcBlockCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCreatePage(ctx context.Context, in *pb.RpcBlockCreatePageRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreatePageResponse, error) {
	out := new(pb.RpcBlockCreatePageResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCreatePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockUnlink(ctx context.Context, in *pb.RpcBlockUnlinkRequest, opts ...grpc.CallOption) (*pb.RpcBlockUnlinkResponse, error) {
	out := new(pb.RpcBlockUnlinkResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockUnlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockClose(ctx context.Context, in *pb.RpcBlockCloseRequest, opts ...grpc.CallOption) (*pb.RpcBlockCloseResponse, error) {
	out := new(pb.RpcBlockCloseResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDownload(ctx context.Context, in *pb.RpcBlockDownloadRequest, opts ...grpc.CallOption) (*pb.RpcBlockDownloadResponse, error) {
	out := new(pb.RpcBlockDownloadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockGetMarks(ctx context.Context, in *pb.RpcBlockGetMarksRequest, opts ...grpc.CallOption) (*pb.RpcBlockGetMarksResponse, error) {
	out := new(pb.RpcBlockGetMarksResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockGetMarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockHistoryMove(ctx context.Context, in *pb.RpcBlockHistoryMoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockHistoryMoveResponse, error) {
	out := new(pb.RpcBlockHistoryMoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockHistoryMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetFields(ctx context.Context, in *pb.RpcBlockSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetFieldsResponse, error) {
	out := new(pb.RpcBlockSetFieldsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetRestrictions(ctx context.Context, in *pb.RpcBlockSetRestrictionsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetRestrictionsResponse, error) {
	out := new(pb.RpcBlockSetRestrictionsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetRestrictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetIsArchived(ctx context.Context, in *pb.RpcBlockSetIsArchivedRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetIsArchivedResponse, error) {
	out := new(pb.RpcBlockSetIsArchivedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetIsArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListMove(ctx context.Context, in *pb.RpcBlockListMoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockListMoveResponse, error) {
	out := new(pb.RpcBlockListMoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetFields(ctx context.Context, in *pb.RpcBlockListSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetFieldsResponse, error) {
	out := new(pb.RpcBlockListSetFieldsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetTextStyle(ctx context.Context, in *pb.RpcBlockListSetTextStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextStyleResponse, error) {
	out := new(pb.RpcBlockListSetTextStyleResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetTextStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListDuplicate(ctx context.Context, in *pb.RpcBlockListDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcBlockListDuplicateResponse, error) {
	out := new(pb.RpcBlockListDuplicateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListDuplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetTextText(ctx context.Context, in *pb.RpcBlockSetTextTextRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextTextResponse, error) {
	out := new(pb.RpcBlockSetTextTextResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetTextText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetTextColor(ctx context.Context, in *pb.RpcBlockSetTextColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextColorResponse, error) {
	out := new(pb.RpcBlockSetTextColorResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetTextColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetTextColor(ctx context.Context, in *pb.RpcBlockListSetTextColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextColorResponse, error) {
	out := new(pb.RpcBlockListSetTextColorResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetTextColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetTextBackgroundColor(ctx context.Context, in *pb.RpcBlockSetTextBackgroundColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextBackgroundColorResponse, error) {
	out := new(pb.RpcBlockSetTextBackgroundColorResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetTextBackgroundColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetTextBackgroundColor(ctx context.Context, in *pb.RpcBlockListSetTextBackgroundColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextBackgroundColorResponse, error) {
	out := new(pb.RpcBlockListSetTextBackgroundColorResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetTextBackgroundColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetTextStyle(ctx context.Context, in *pb.RpcBlockSetTextStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextStyleResponse, error) {
	out := new(pb.RpcBlockSetTextStyleResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetTextStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetTextChecked(ctx context.Context, in *pb.RpcBlockSetTextCheckedRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextCheckedResponse, error) {
	out := new(pb.RpcBlockSetTextCheckedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetTextChecked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSplit(ctx context.Context, in *pb.RpcBlockSplitRequest, opts ...grpc.CallOption) (*pb.RpcBlockSplitResponse, error) {
	out := new(pb.RpcBlockSplitResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSplit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockMerge(ctx context.Context, in *pb.RpcBlockMergeRequest, opts ...grpc.CallOption) (*pb.RpcBlockMergeResponse, error) {
	out := new(pb.RpcBlockMergeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockMerge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCopy(ctx context.Context, in *pb.RpcBlockCopyRequest, opts ...grpc.CallOption) (*pb.RpcBlockCopyResponse, error) {
	out := new(pb.RpcBlockCopyResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockPaste(ctx context.Context, in *pb.RpcBlockPasteRequest, opts ...grpc.CallOption) (*pb.RpcBlockPasteResponse, error) {
	out := new(pb.RpcBlockPasteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockPaste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetFileName(ctx context.Context, in *pb.RpcBlockSetFileNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetFileNameResponse, error) {
	out := new(pb.RpcBlockSetFileNameResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetFileName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetImageName(ctx context.Context, in *pb.RpcBlockSetImageNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetImageNameResponse, error) {
	out := new(pb.RpcBlockSetImageNameResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetImageName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetImageWidth(ctx context.Context, in *pb.RpcBlockSetImageWidthRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetImageWidthResponse, error) {
	out := new(pb.RpcBlockSetImageWidthResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetImageWidth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetVideoName(ctx context.Context, in *pb.RpcBlockSetVideoNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetVideoNameResponse, error) {
	out := new(pb.RpcBlockSetVideoNameResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetVideoName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetVideoWidth(ctx context.Context, in *pb.RpcBlockSetVideoWidthRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetVideoWidthResponse, error) {
	out := new(pb.RpcBlockSetVideoWidthResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetVideoWidth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetIconName(ctx context.Context, in *pb.RpcBlockSetIconNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetIconNameResponse, error) {
	out := new(pb.RpcBlockSetIconNameResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetIconName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetLinkTargetBlockId(ctx context.Context, in *pb.RpcBlockSetLinkTargetBlockIdRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetLinkTargetBlockIdResponse, error) {
	out := new(pb.RpcBlockSetLinkTargetBlockIdResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetLinkTargetBlockId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) Ping(ctx context.Context, in *pb.RpcPingRequest, opts ...grpc.CallOption) (*pb.RpcPingResponse, error) {
	out := new(pb.RpcPingResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ListenEvents(ctx context.Context, in *pb.Empty, opts ...grpc.CallOption) (ClientCommands_ListenEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientCommands_serviceDesc.Streams[0], "/anytype.ClientCommands/ListenEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientCommandsListenEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientCommands_ListenEventsClient interface {
	Recv() (*pb.Event, error)
	grpc.ClientStream
}

type clientCommandsListenEventsClient struct {
	grpc.ClientStream
}

func (x *clientCommandsListenEventsClient) Recv() (*pb.Event, error) {
	m := new(pb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientCommandsServer is the server API for ClientCommands service.
type ClientCommandsServer interface {
	WalletCreate(*pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse
	WalletRecover(*pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse
	AccountRecover(*pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse
	AccountCreate(*pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse
	AccountSelect(*pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse
	ImageGetBlob(*pb.RpcIpfsImageGetBlobRequest) *pb.RpcIpfsImageGetBlobResponse
	VersionGet(*pb.RpcVersionGetRequest) *pb.RpcVersionGetResponse
	LogSend(*pb.RpcLogSendRequest) *pb.RpcLogSendResponse
	ConfigGet(*pb.RpcConfigGetRequest) *pb.RpcConfigGetResponse
	ExternalDropFiles(*pb.RpcExternalDropFilesRequest) *pb.RpcExternalDropFilesResponse
	ExternalDropContent(*pb.RpcExternalDropContentRequest) *pb.RpcExternalDropContentResponse
	BlockUpload(*pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse
	BlockReplace(*pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse
	BlockOpen(*pb.RpcBlockOpenRequest) *pb.RpcBlockOpenResponse
	BlockCreate(*pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse
	BlockCreatePage(*pb.RpcBlockCreatePageRequest) *pb.RpcBlockCreatePageResponse
	BlockUnlink(*pb.RpcBlockUnlinkRequest) *pb.RpcBlockUnlinkResponse
	BlockClose(*pb.RpcBlockCloseRequest) *pb.RpcBlockCloseResponse
	BlockDownload(*pb.RpcBlockDownloadRequest) *pb.RpcBlockDownloadResponse
	BlockGetMarks(*pb.RpcBlockGetMarksRequest) *pb.RpcBlockGetMarksResponse
	BlockHistoryMove(*pb.RpcBlockHistoryMoveRequest) *pb.RpcBlockHistoryMoveResponse
	BlockSetFields(*pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse
	BlockSetRestrictions(*pb.RpcBlockSetRestrictionsRequest) *pb.RpcBlockSetRestrictionsResponse
	BlockSetIsArchived(*pb.RpcBlockSetIsArchivedRequest) *pb.RpcBlockSetIsArchivedResponse
	BlockListMove(*pb.RpcBlockListMoveRequest) *pb.RpcBlockListMoveResponse
	BlockListSetFields(*pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse
	BlockListSetTextStyle(*pb.RpcBlockListSetTextStyleRequest) *pb.RpcBlockListSetTextStyleResponse
	BlockListDuplicate(*pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse
	BlockSetTextText(*pb.RpcBlockSetTextTextRequest) *pb.RpcBlockSetTextTextResponse
	BlockSetTextColor(*pb.RpcBlockSetTextColorRequest) *pb.RpcBlockSetTextColorResponse
	BlockListSetTextColor(*pb.RpcBlockListSetTextColorRequest) *pb.RpcBlockListSetTextColorResponse
	BlockSetTextBackgroundColor(*pb.RpcBlockSetTextBackgroundColorRequest) *pb.RpcBlockSetTextBackgroundColorResponse
	BlockListSetTextBackgroundColor(*pb.RpcBlockListSetTextBackgroundColorRequest) *pb.RpcBlockListSetTextBackgroundColorResponse
	BlockSetTextStyle(*pb.RpcBlockSetTextStyleRequest) *pb.RpcBlockSetTextStyleResponse
	BlockSetTextChecked(*pb.RpcBlockSetTextCheckedRequest) *pb.RpcBlockSetTextCheckedResponse
	BlockSplit(*pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse
	BlockMerge(*pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse
	BlockCopy(*pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse
	BlockPaste(*pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse
	BlockSetFileName(*pb.RpcBlockSetFileNameRequest) *pb.RpcBlockSetFileNameResponse
	BlockSetImageName(*pb.RpcBlockSetImageNameRequest) *pb.RpcBlockSetImageNameResponse
	BlockSetImageWidth(*pb.RpcBlockSetImageWidthRequest) *pb.RpcBlockSetImageWidthResponse
	BlockSetVideoName(*pb.RpcBlockSetVideoNameRequest) *pb.RpcBlockSetVideoNameResponse
	BlockSetVideoWidth(*pb.RpcBlockSetVideoWidthRequest) *pb.RpcBlockSetVideoWidthResponse
	BlockSetIconName(*pb.RpcBlockSetIconNameRequest) *pb.RpcBlockSetIconNameResponse
	BlockSetLinkTargetBlockId(*pb.RpcBlockSetLinkTargetBlockIdRequest) *pb.RpcBlockSetLinkTargetBlockIdResponse
	Ping(*pb.RpcPingRequest) *pb.RpcPingResponse
	// used only for lib-debug via grpc
	ListenEvents(*pb.Empty, ClientCommands_ListenEventsServer)
}

// UnimplementedClientCommandsServer can be embedded to have forward compatible implementations.
type UnimplementedClientCommandsServer struct {
}

func (*UnimplementedClientCommandsServer) WalletCreate(req *pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WalletRecover(req *pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountRecover(req *pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountCreate(req *pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountSelect(req *pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ImageGetBlob(req *pb.RpcIpfsImageGetBlobRequest) *pb.RpcIpfsImageGetBlobResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) VersionGet(req *pb.RpcVersionGetRequest) *pb.RpcVersionGetResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) LogSend(req *pb.RpcLogSendRequest) *pb.RpcLogSendResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ConfigGet(req *pb.RpcConfigGetRequest) *pb.RpcConfigGetResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ExternalDropFiles(req *pb.RpcExternalDropFilesRequest) *pb.RpcExternalDropFilesResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ExternalDropContent(req *pb.RpcExternalDropContentRequest) *pb.RpcExternalDropContentResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockUpload(req *pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockReplace(req *pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockOpen(req *pb.RpcBlockOpenRequest) *pb.RpcBlockOpenResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCreate(req *pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCreatePage(req *pb.RpcBlockCreatePageRequest) *pb.RpcBlockCreatePageResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockUnlink(req *pb.RpcBlockUnlinkRequest) *pb.RpcBlockUnlinkResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockClose(req *pb.RpcBlockCloseRequest) *pb.RpcBlockCloseResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDownload(req *pb.RpcBlockDownloadRequest) *pb.RpcBlockDownloadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockGetMarks(req *pb.RpcBlockGetMarksRequest) *pb.RpcBlockGetMarksResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockHistoryMove(req *pb.RpcBlockHistoryMoveRequest) *pb.RpcBlockHistoryMoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetFields(req *pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetRestrictions(req *pb.RpcBlockSetRestrictionsRequest) *pb.RpcBlockSetRestrictionsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetIsArchived(req *pb.RpcBlockSetIsArchivedRequest) *pb.RpcBlockSetIsArchivedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListMove(req *pb.RpcBlockListMoveRequest) *pb.RpcBlockListMoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetFields(req *pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetTextStyle(req *pb.RpcBlockListSetTextStyleRequest) *pb.RpcBlockListSetTextStyleResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListDuplicate(req *pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetTextText(req *pb.RpcBlockSetTextTextRequest) *pb.RpcBlockSetTextTextResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetTextColor(req *pb.RpcBlockSetTextColorRequest) *pb.RpcBlockSetTextColorResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetTextColor(req *pb.RpcBlockListSetTextColorRequest) *pb.RpcBlockListSetTextColorResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetTextBackgroundColor(req *pb.RpcBlockSetTextBackgroundColorRequest) *pb.RpcBlockSetTextBackgroundColorResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetTextBackgroundColor(req *pb.RpcBlockListSetTextBackgroundColorRequest) *pb.RpcBlockListSetTextBackgroundColorResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetTextStyle(req *pb.RpcBlockSetTextStyleRequest) *pb.RpcBlockSetTextStyleResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetTextChecked(req *pb.RpcBlockSetTextCheckedRequest) *pb.RpcBlockSetTextCheckedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSplit(req *pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockMerge(req *pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCopy(req *pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockPaste(req *pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetFileName(req *pb.RpcBlockSetFileNameRequest) *pb.RpcBlockSetFileNameResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetImageName(req *pb.RpcBlockSetImageNameRequest) *pb.RpcBlockSetImageNameResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetImageWidth(req *pb.RpcBlockSetImageWidthRequest) *pb.RpcBlockSetImageWidthResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetVideoName(req *pb.RpcBlockSetVideoNameRequest) *pb.RpcBlockSetVideoNameResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetVideoWidth(req *pb.RpcBlockSetVideoWidthRequest) *pb.RpcBlockSetVideoWidthResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetIconName(req *pb.RpcBlockSetIconNameRequest) *pb.RpcBlockSetIconNameResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetLinkTargetBlockId(req *pb.RpcBlockSetLinkTargetBlockIdRequest) *pb.RpcBlockSetLinkTargetBlockIdResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) Ping(req *pb.RpcPingRequest) *pb.RpcPingResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ListenEvents(req *pb.Empty, srv ClientCommands_ListenEventsServer) {
	return
}

func RegisterClientCommandsServer(s *grpc.Server, srv ClientCommandsServer) {
	s.RegisterService(&_ClientCommands_serviceDesc, srv)
}

func _ClientCommands_WalletCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWalletCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WalletCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WalletCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WalletCreate(req.(*pb.RpcWalletCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WalletRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWalletRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WalletRecover(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WalletRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WalletRecover(req.(*pb.RpcWalletRecoverRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountRecover(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountRecover(req.(*pb.RpcAccountRecoverRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountCreate(req.(*pb.RpcAccountCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountSelect(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountSelect(req.(*pb.RpcAccountSelectRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ImageGetBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcIpfsImageGetBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ImageGetBlob(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ImageGetBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ImageGetBlob(req.(*pb.RpcIpfsImageGetBlobRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_VersionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcVersionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).VersionGet(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/VersionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).VersionGet(req.(*pb.RpcVersionGetRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_LogSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcLogSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).LogSend(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/LogSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).LogSend(req.(*pb.RpcLogSendRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcConfigGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ConfigGet(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ConfigGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ConfigGet(req.(*pb.RpcConfigGetRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ExternalDropFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcExternalDropFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ExternalDropFiles(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ExternalDropFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ExternalDropFiles(req.(*pb.RpcExternalDropFilesRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ExternalDropContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcExternalDropContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ExternalDropContent(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ExternalDropContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ExternalDropContent(req.(*pb.RpcExternalDropContentRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockUpload(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockUpload(req.(*pb.RpcBlockUploadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockReplace(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockReplace(req.(*pb.RpcBlockReplaceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockOpen(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockOpen(req.(*pb.RpcBlockOpenRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCreate(req.(*pb.RpcBlockCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCreatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCreatePage(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCreatePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCreatePage(req.(*pb.RpcBlockCreatePageRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockUnlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockUnlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockUnlink(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockUnlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockUnlink(req.(*pb.RpcBlockUnlinkRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockClose(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockClose(req.(*pb.RpcBlockCloseRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDownload(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDownload(req.(*pb.RpcBlockDownloadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockGetMarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockGetMarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockGetMarks(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockGetMarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockGetMarks(req.(*pb.RpcBlockGetMarksRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockHistoryMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockHistoryMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockHistoryMove(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockHistoryMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockHistoryMove(req.(*pb.RpcBlockHistoryMoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetFields(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetFields(req.(*pb.RpcBlockSetFieldsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetRestrictions(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetRestrictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetRestrictions(req.(*pb.RpcBlockSetRestrictionsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetIsArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetIsArchivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetIsArchived(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetIsArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetIsArchived(req.(*pb.RpcBlockSetIsArchivedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListMove(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListMove(req.(*pb.RpcBlockListMoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetFields(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetFields(req.(*pb.RpcBlockListSetFieldsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetTextStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetTextStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetTextStyle(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetTextStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetTextStyle(req.(*pb.RpcBlockListSetTextStyleRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListDuplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListDuplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListDuplicate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListDuplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListDuplicate(req.(*pb.RpcBlockListDuplicateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetTextText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetTextTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetTextText(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetTextText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetTextText(req.(*pb.RpcBlockSetTextTextRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetTextColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetTextColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetTextColor(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetTextColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetTextColor(req.(*pb.RpcBlockSetTextColorRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetTextColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetTextColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetTextColor(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetTextColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetTextColor(req.(*pb.RpcBlockListSetTextColorRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetTextBackgroundColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetTextBackgroundColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetTextBackgroundColor(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetTextBackgroundColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetTextBackgroundColor(req.(*pb.RpcBlockSetTextBackgroundColorRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetTextBackgroundColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetTextBackgroundColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetTextBackgroundColor(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetTextBackgroundColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetTextBackgroundColor(req.(*pb.RpcBlockListSetTextBackgroundColorRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetTextStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetTextStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetTextStyle(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetTextStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetTextStyle(req.(*pb.RpcBlockSetTextStyleRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetTextChecked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetTextCheckedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetTextChecked(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetTextChecked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetTextChecked(req.(*pb.RpcBlockSetTextCheckedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSplit(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSplit(req.(*pb.RpcBlockSplitRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockMergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockMerge(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockMerge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockMerge(req.(*pb.RpcBlockMergeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCopy(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCopy(req.(*pb.RpcBlockCopyRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockPaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockPasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockPaste(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockPaste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockPaste(req.(*pb.RpcBlockPasteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetFileName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetFileNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetFileName(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetFileName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetFileName(req.(*pb.RpcBlockSetFileNameRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetImageName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetImageNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetImageName(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetImageName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetImageName(req.(*pb.RpcBlockSetImageNameRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetImageWidth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetImageWidthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetImageWidth(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetImageWidth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetImageWidth(req.(*pb.RpcBlockSetImageWidthRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetVideoName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetVideoNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetVideoName(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetVideoName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetVideoName(req.(*pb.RpcBlockSetVideoNameRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetVideoWidth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetVideoWidthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetVideoWidth(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetVideoWidth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetVideoWidth(req.(*pb.RpcBlockSetVideoWidthRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetIconName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetIconNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetIconName(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetIconName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetIconName(req.(*pb.RpcBlockSetIconNameRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetLinkTargetBlockId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetLinkTargetBlockIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetLinkTargetBlockId(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetLinkTargetBlockId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetLinkTargetBlockId(req.(*pb.RpcBlockSetLinkTargetBlockIdRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).Ping(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).Ping(req.(*pb.RpcPingRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ListenEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	srv.(ClientCommandsServer).ListenEvents(m, &clientCommandsListenEventsServer{stream})
	return nil
}

type ClientCommands_ListenEventsServer interface {
	Send(*pb.Event) error
	grpc.ServerStream
}

type clientCommandsListenEventsServer struct {
	grpc.ServerStream
}

func (x *clientCommandsListenEventsServer) Send(m *pb.Event) error {
	return x.ServerStream.SendMsg(m)
}

var _ClientCommands_serviceDesc = grpc.ServiceDesc{
	ServiceName: "anytype.ClientCommands",
	HandlerType: (*ClientCommandsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WalletCreate",
			Handler:    _ClientCommands_WalletCreate_Handler,
		},
		{
			MethodName: "WalletRecover",
			Handler:    _ClientCommands_WalletRecover_Handler,
		},
		{
			MethodName: "AccountRecover",
			Handler:    _ClientCommands_AccountRecover_Handler,
		},
		{
			MethodName: "AccountCreate",
			Handler:    _ClientCommands_AccountCreate_Handler,
		},
		{
			MethodName: "AccountSelect",
			Handler:    _ClientCommands_AccountSelect_Handler,
		},
		{
			MethodName: "ImageGetBlob",
			Handler:    _ClientCommands_ImageGetBlob_Handler,
		},
		{
			MethodName: "VersionGet",
			Handler:    _ClientCommands_VersionGet_Handler,
		},
		{
			MethodName: "LogSend",
			Handler:    _ClientCommands_LogSend_Handler,
		},
		{
			MethodName: "ConfigGet",
			Handler:    _ClientCommands_ConfigGet_Handler,
		},
		{
			MethodName: "ExternalDropFiles",
			Handler:    _ClientCommands_ExternalDropFiles_Handler,
		},
		{
			MethodName: "ExternalDropContent",
			Handler:    _ClientCommands_ExternalDropContent_Handler,
		},
		{
			MethodName: "BlockUpload",
			Handler:    _ClientCommands_BlockUpload_Handler,
		},
		{
			MethodName: "BlockReplace",
			Handler:    _ClientCommands_BlockReplace_Handler,
		},
		{
			MethodName: "BlockOpen",
			Handler:    _ClientCommands_BlockOpen_Handler,
		},
		{
			MethodName: "BlockCreate",
			Handler:    _ClientCommands_BlockCreate_Handler,
		},
		{
			MethodName: "BlockCreatePage",
			Handler:    _ClientCommands_BlockCreatePage_Handler,
		},
		{
			MethodName: "BlockUnlink",
			Handler:    _ClientCommands_BlockUnlink_Handler,
		},
		{
			MethodName: "BlockClose",
			Handler:    _ClientCommands_BlockClose_Handler,
		},
		{
			MethodName: "BlockDownload",
			Handler:    _ClientCommands_BlockDownload_Handler,
		},
		{
			MethodName: "BlockGetMarks",
			Handler:    _ClientCommands_BlockGetMarks_Handler,
		},
		{
			MethodName: "BlockHistoryMove",
			Handler:    _ClientCommands_BlockHistoryMove_Handler,
		},
		{
			MethodName: "BlockSetFields",
			Handler:    _ClientCommands_BlockSetFields_Handler,
		},
		{
			MethodName: "BlockSetRestrictions",
			Handler:    _ClientCommands_BlockSetRestrictions_Handler,
		},
		{
			MethodName: "BlockSetIsArchived",
			Handler:    _ClientCommands_BlockSetIsArchived_Handler,
		},
		{
			MethodName: "BlockListMove",
			Handler:    _ClientCommands_BlockListMove_Handler,
		},
		{
			MethodName: "BlockListSetFields",
			Handler:    _ClientCommands_BlockListSetFields_Handler,
		},
		{
			MethodName: "BlockListSetTextStyle",
			Handler:    _ClientCommands_BlockListSetTextStyle_Handler,
		},
		{
			MethodName: "BlockListDuplicate",
			Handler:    _ClientCommands_BlockListDuplicate_Handler,
		},
		{
			MethodName: "BlockSetTextText",
			Handler:    _ClientCommands_BlockSetTextText_Handler,
		},
		{
			MethodName: "BlockSetTextColor",
			Handler:    _ClientCommands_BlockSetTextColor_Handler,
		},
		{
			MethodName: "BlockListSetTextColor",
			Handler:    _ClientCommands_BlockListSetTextColor_Handler,
		},
		{
			MethodName: "BlockSetTextBackgroundColor",
			Handler:    _ClientCommands_BlockSetTextBackgroundColor_Handler,
		},
		{
			MethodName: "BlockListSetTextBackgroundColor",
			Handler:    _ClientCommands_BlockListSetTextBackgroundColor_Handler,
		},
		{
			MethodName: "BlockSetTextStyle",
			Handler:    _ClientCommands_BlockSetTextStyle_Handler,
		},
		{
			MethodName: "BlockSetTextChecked",
			Handler:    _ClientCommands_BlockSetTextChecked_Handler,
		},
		{
			MethodName: "BlockSplit",
			Handler:    _ClientCommands_BlockSplit_Handler,
		},
		{
			MethodName: "BlockMerge",
			Handler:    _ClientCommands_BlockMerge_Handler,
		},
		{
			MethodName: "BlockCopy",
			Handler:    _ClientCommands_BlockCopy_Handler,
		},
		{
			MethodName: "BlockPaste",
			Handler:    _ClientCommands_BlockPaste_Handler,
		},
		{
			MethodName: "BlockSetFileName",
			Handler:    _ClientCommands_BlockSetFileName_Handler,
		},
		{
			MethodName: "BlockSetImageName",
			Handler:    _ClientCommands_BlockSetImageName_Handler,
		},
		{
			MethodName: "BlockSetImageWidth",
			Handler:    _ClientCommands_BlockSetImageWidth_Handler,
		},
		{
			MethodName: "BlockSetVideoName",
			Handler:    _ClientCommands_BlockSetVideoName_Handler,
		},
		{
			MethodName: "BlockSetVideoWidth",
			Handler:    _ClientCommands_BlockSetVideoWidth_Handler,
		},
		{
			MethodName: "BlockSetIconName",
			Handler:    _ClientCommands_BlockSetIconName_Handler,
		},
		{
			MethodName: "BlockSetLinkTargetBlockId",
			Handler:    _ClientCommands_BlockSetLinkTargetBlockId_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ClientCommands_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenEvents",
			Handler:       _ClientCommands_ListenEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/protos/service/service.proto",
}
