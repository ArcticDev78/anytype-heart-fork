// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/anytype-heart/space/spacecore (interfaces: SpaceCoreService)
//
// Generated by this command:
//
//	mockgen -package mock_space -destination ./mock_space/service_mock.go github.com/anyproto/anytype-heart/space/spacecore SpaceCoreService
//
// Package mock_space is a generated GoMock package.
package mock_space

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	streampool "github.com/anyproto/any-sync/net/streampool"
	gomock "go.uber.org/mock/gomock"

	spacecore "github.com/anyproto/anytype-heart/space/spacecore"
)

// MockSpaceCoreService is a mock of SpaceCoreService interface.
type MockSpaceCoreService struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceCoreServiceMockRecorder
}

// MockSpaceCoreServiceMockRecorder is the mock recorder for MockSpaceCoreService.
type MockSpaceCoreServiceMockRecorder struct {
	mock *MockSpaceCoreService
}

// NewMockSpaceCoreService creates a new mock instance.
func NewMockSpaceCoreService(ctrl *gomock.Controller) *MockSpaceCoreService {
	mock := &MockSpaceCoreService{ctrl: ctrl}
	mock.recorder = &MockSpaceCoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceCoreService) EXPECT() *MockSpaceCoreServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSpaceCoreService) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSpaceCoreServiceMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSpaceCoreService)(nil).Close), arg0)
}

// Create mocks base method.
func (m *MockSpaceCoreService) Create(arg0 context.Context, arg1 uint64) (*spacecore.AnySpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*spacecore.AnySpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSpaceCoreServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSpaceCoreService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSpaceCoreService) Delete(arg0 context.Context, arg1 string) (spacecore.NetworkStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(spacecore.NetworkStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSpaceCoreServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpaceCoreService)(nil).Delete), arg0, arg1)
}

// Derive mocks base method.
func (m *MockSpaceCoreService) Derive(arg0 context.Context, arg1 string) (*spacecore.AnySpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Derive", arg0, arg1)
	ret0, _ := ret[0].(*spacecore.AnySpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Derive indicates an expected call of Derive.
func (mr *MockSpaceCoreServiceMockRecorder) Derive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Derive", reflect.TypeOf((*MockSpaceCoreService)(nil).Derive), arg0, arg1)
}

// DeriveID mocks base method.
func (m *MockSpaceCoreService) DeriveID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveID indicates an expected call of DeriveID.
func (mr *MockSpaceCoreServiceMockRecorder) DeriveID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveID", reflect.TypeOf((*MockSpaceCoreService)(nil).DeriveID), arg0, arg1)
}

// Get mocks base method.
func (m *MockSpaceCoreService) Get(arg0 context.Context, arg1 string) (*spacecore.AnySpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*spacecore.AnySpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSpaceCoreServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSpaceCoreService)(nil).Get), arg0, arg1)
}

// Init mocks base method.
func (m *MockSpaceCoreService) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockSpaceCoreServiceMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSpaceCoreService)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockSpaceCoreService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSpaceCoreServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSpaceCoreService)(nil).Name))
}

// RevertDeletion mocks base method.
func (m *MockSpaceCoreService) RevertDeletion(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevertDeletion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevertDeletion indicates an expected call of RevertDeletion.
func (mr *MockSpaceCoreServiceMockRecorder) RevertDeletion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertDeletion", reflect.TypeOf((*MockSpaceCoreService)(nil).RevertDeletion), arg0, arg1)
}

// Run mocks base method.
func (m *MockSpaceCoreService) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockSpaceCoreServiceMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSpaceCoreService)(nil).Run), arg0)
}

// StreamPool mocks base method.
func (m *MockSpaceCoreService) StreamPool() streampool.StreamPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamPool")
	ret0, _ := ret[0].(streampool.StreamPool)
	return ret0
}

// StreamPool indicates an expected call of StreamPool.
func (mr *MockSpaceCoreServiceMockRecorder) StreamPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamPool", reflect.TypeOf((*MockSpaceCoreService)(nil).StreamPool))
}
