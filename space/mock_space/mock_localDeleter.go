// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock_space

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	spaceinfo "github.com/anyproto/anytype-heart/space/spaceinfo"
)

// MocklocalDeleter is an autogenerated mock type for the localDeleter type
type MocklocalDeleter struct {
	mock.Mock
}

type MocklocalDeleter_Expecter struct {
	mock *mock.Mock
}

func (_m *MocklocalDeleter) EXPECT() *MocklocalDeleter_Expecter {
	return &MocklocalDeleter_Expecter{mock: &_m.Mock}
}

// allIDs provides a mock function with given fields:
func (_m *MocklocalDeleter) allIDs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for allIDs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MocklocalDeleter_allIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'allIDs'
type MocklocalDeleter_allIDs_Call struct {
	*mock.Call
}

// allIDs is a helper method to define mock.On call
func (_e *MocklocalDeleter_Expecter) allIDs() *MocklocalDeleter_allIDs_Call {
	return &MocklocalDeleter_allIDs_Call{Call: _e.mock.On("allIDs")}
}

func (_c *MocklocalDeleter_allIDs_Call) Run(run func()) *MocklocalDeleter_allIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocklocalDeleter_allIDs_Call) Return(ids []string) *MocklocalDeleter_allIDs_Call {
	_c.Call.Return(ids)
	return _c
}

func (_c *MocklocalDeleter_allIDs_Call) RunAndReturn(run func() []string) *MocklocalDeleter_allIDs_Call {
	_c.Call.Return(run)
	return _c
}

// startDelete provides a mock function with given fields: ctx, id
func (_m *MocklocalDeleter) startDelete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for startDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MocklocalDeleter_startDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'startDelete'
type MocklocalDeleter_startDelete_Call struct {
	*mock.Call
}

// startDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MocklocalDeleter_Expecter) startDelete(ctx interface{}, id interface{}) *MocklocalDeleter_startDelete_Call {
	return &MocklocalDeleter_startDelete_Call{Call: _e.mock.On("startDelete", ctx, id)}
}

func (_c *MocklocalDeleter_startDelete_Call) Run(run func(ctx context.Context, id string)) *MocklocalDeleter_startDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MocklocalDeleter_startDelete_Call) Return(_a0 error) *MocklocalDeleter_startDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocklocalDeleter_startDelete_Call) RunAndReturn(run func(context.Context, string) error) *MocklocalDeleter_startDelete_Call {
	_c.Call.Return(run)
	return _c
}

// updateRemoteStatusLocked provides a mock function with given fields: ctx, spaceID, remoteStatus
func (_m *MocklocalDeleter) updateRemoteStatusLocked(ctx context.Context, spaceID string, remoteStatus spaceinfo.RemoteStatus) error {
	ret := _m.Called(ctx, spaceID, remoteStatus)

	if len(ret) == 0 {
		panic("no return value specified for updateRemoteStatusLocked")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, spaceinfo.RemoteStatus) error); ok {
		r0 = rf(ctx, spaceID, remoteStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MocklocalDeleter_updateRemoteStatusLocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateRemoteStatusLocked'
type MocklocalDeleter_updateRemoteStatusLocked_Call struct {
	*mock.Call
}

// updateRemoteStatusLocked is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - remoteStatus spaceinfo.RemoteStatus
func (_e *MocklocalDeleter_Expecter) updateRemoteStatusLocked(ctx interface{}, spaceID interface{}, remoteStatus interface{}) *MocklocalDeleter_updateRemoteStatusLocked_Call {
	return &MocklocalDeleter_updateRemoteStatusLocked_Call{Call: _e.mock.On("updateRemoteStatusLocked", ctx, spaceID, remoteStatus)}
}

func (_c *MocklocalDeleter_updateRemoteStatusLocked_Call) Run(run func(ctx context.Context, spaceID string, remoteStatus spaceinfo.RemoteStatus)) *MocklocalDeleter_updateRemoteStatusLocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(spaceinfo.RemoteStatus))
	})
	return _c
}

func (_c *MocklocalDeleter_updateRemoteStatusLocked_Call) Return(err error) *MocklocalDeleter_updateRemoteStatusLocked_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MocklocalDeleter_updateRemoteStatusLocked_Call) RunAndReturn(run func(context.Context, string, spaceinfo.RemoteStatus) error) *MocklocalDeleter_updateRemoteStatusLocked_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocklocalDeleter creates a new instance of MocklocalDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocklocalDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocklocalDeleter {
	mock := &MocklocalDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
