// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock_space

import (
	context "context"

	space "github.com/anyproto/anytype-heart/space"
	mock "github.com/stretchr/testify/mock"
)

// MockspaceServiceProvider is an autogenerated mock type for the spaceServiceProvider type
type MockspaceServiceProvider struct {
	mock.Mock
}

type MockspaceServiceProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockspaceServiceProvider) EXPECT() *MockspaceServiceProvider_Expecter {
	return &MockspaceServiceProvider_Expecter{mock: &_m.Mock}
}

// onLoad provides a mock function with given fields: spaceId, sp, loadErr
func (_m *MockspaceServiceProvider) onLoad(spaceId string, sp space.Space, loadErr error) error {
	ret := _m.Called(spaceId, sp, loadErr)

	if len(ret) == 0 {
		panic("no return value specified for onLoad")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, space.Space, error) error); ok {
		r0 = rf(spaceId, sp, loadErr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockspaceServiceProvider_onLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'onLoad'
type MockspaceServiceProvider_onLoad_Call struct {
	*mock.Call
}

// onLoad is a helper method to define mock.On call
//   - spaceId string
//   - sp space.Space
//   - loadErr error
func (_e *MockspaceServiceProvider_Expecter) onLoad(spaceId interface{}, sp interface{}, loadErr interface{}) *MockspaceServiceProvider_onLoad_Call {
	return &MockspaceServiceProvider_onLoad_Call{Call: _e.mock.On("onLoad", spaceId, sp, loadErr)}
}

func (_c *MockspaceServiceProvider_onLoad_Call) Run(run func(spaceId string, sp space.Space, loadErr error)) *MockspaceServiceProvider_onLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(space.Space), args[2].(error))
	})
	return _c
}

func (_c *MockspaceServiceProvider_onLoad_Call) Return(err error) *MockspaceServiceProvider_onLoad_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockspaceServiceProvider_onLoad_Call) RunAndReturn(run func(string, space.Space, error) error) *MockspaceServiceProvider_onLoad_Call {
	_c.Call.Return(run)
	return _c
}

// open provides a mock function with given fields: ctx, spaceId, justCreated
func (_m *MockspaceServiceProvider) open(ctx context.Context, spaceId string, justCreated bool) (space.Space, error) {
	ret := _m.Called(ctx, spaceId, justCreated)

	if len(ret) == 0 {
		panic("no return value specified for open")
	}

	var r0 space.Space
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (space.Space, error)); ok {
		return rf(ctx, spaceId, justCreated)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) space.Space); ok {
		r0 = rf(ctx, spaceId, justCreated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(space.Space)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, spaceId, justCreated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockspaceServiceProvider_open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'open'
type MockspaceServiceProvider_open_Call struct {
	*mock.Call
}

// open is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceId string
//   - justCreated bool
func (_e *MockspaceServiceProvider_Expecter) open(ctx interface{}, spaceId interface{}, justCreated interface{}) *MockspaceServiceProvider_open_Call {
	return &MockspaceServiceProvider_open_Call{Call: _e.mock.On("open", ctx, spaceId, justCreated)}
}

func (_c *MockspaceServiceProvider_open_Call) Run(run func(ctx context.Context, spaceId string, justCreated bool)) *MockspaceServiceProvider_open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockspaceServiceProvider_open_Call) Return(_a0 space.Space, _a1 error) *MockspaceServiceProvider_open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockspaceServiceProvider_open_Call) RunAndReturn(run func(context.Context, string, bool) (space.Space, error)) *MockspaceServiceProvider_open_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockspaceServiceProvider creates a new instance of MockspaceServiceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockspaceServiceProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockspaceServiceProvider {
	mock := &MockspaceServiceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
