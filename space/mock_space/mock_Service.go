// Code generated by mockery v2.26.1. DO NOT EDIT.

package mock_space

import (
	context "context"

	app "github.com/anyproto/any-sync/app"
	commonspace "github.com/anyproto/any-sync/commonspace"
	streampool "github.com/anyproto/any-sync/net/streampool"
	mock "github.com/stretchr/testify/mock"

	space "github.com/anyproto/anytype-heart/space"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AccountId provides a mock function with given fields:
func (_m *MockService) AccountId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_AccountId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountId'
type MockService_AccountId_Call struct {
	*mock.Call
}

// AccountId is a helper method to define mock.On call
func (_e *MockService_Expecter) AccountId() *MockService_AccountId_Call {
	return &MockService_AccountId_Call{Call: _e.mock.On("AccountId")}
}

func (_c *MockService_AccountId_Call) Run(run func()) *MockService_AccountId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_AccountId_Call) Return(_a0 string) *MockService_AccountId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AccountId_Call) RunAndReturn(run func() string) *MockService_AccountId_Call {
	_c.Call.Return(run)
	return _c
}

// AccountSpace provides a mock function with given fields: ctx
func (_m *MockService) AccountSpace(ctx context.Context) (commonspace.Space, error) {
	ret := _m.Called(ctx)

	var r0 commonspace.Space
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (commonspace.Space, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) commonspace.Space); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commonspace.Space)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_AccountSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountSpace'
type MockService_AccountSpace_Call struct {
	*mock.Call
}

// AccountSpace is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) AccountSpace(ctx interface{}) *MockService_AccountSpace_Call {
	return &MockService_AccountSpace_Call{Call: _e.mock.On("AccountSpace", ctx)}
}

func (_c *MockService_AccountSpace_Call) Run(run func(ctx context.Context)) *MockService_AccountSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_AccountSpace_Call) Return(_a0 commonspace.Space, _a1 error) *MockService_AccountSpace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_AccountSpace_Call) RunAndReturn(run func(context.Context) (commonspace.Space, error)) *MockService_AccountSpace_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *MockService) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Close(ctx interface{}) *MockService_Close_Call {
	return &MockService_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockService_Close_Call) Run(run func(ctx context.Context)) *MockService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Close_Call) Return(err error) *MockService_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Close_Call) RunAndReturn(run func(context.Context) error) *MockService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSpace provides a mock function with given fields: ctx
func (_m *MockService) CreateSpace(ctx context.Context) (commonspace.Space, error) {
	ret := _m.Called(ctx)

	var r0 commonspace.Space
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (commonspace.Space, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) commonspace.Space); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commonspace.Space)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_CreateSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSpace'
type MockService_CreateSpace_Call struct {
	*mock.Call
}

// CreateSpace is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) CreateSpace(ctx interface{}) *MockService_CreateSpace_Call {
	return &MockService_CreateSpace_Call{Call: _e.mock.On("CreateSpace", ctx)}
}

func (_c *MockService_CreateSpace_Call) Run(run func(ctx context.Context)) *MockService_CreateSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_CreateSpace_Call) Return(container commonspace.Space, err error) *MockService_CreateSpace_Call {
	_c.Call.Return(container, err)
	return _c
}

func (_c *MockService_CreateSpace_Call) RunAndReturn(run func(context.Context) (commonspace.Space, error)) *MockService_CreateSpace_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccount provides a mock function with given fields: ctx, revert
func (_m *MockService) DeleteAccount(ctx context.Context, revert bool) (space.StatusPayload, error) {
	ret := _m.Called(ctx, revert)

	var r0 space.StatusPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (space.StatusPayload, error)); ok {
		return rf(ctx, revert)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) space.StatusPayload); ok {
		r0 = rf(ctx, revert)
	} else {
		r0 = ret.Get(0).(space.StatusPayload)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, revert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type MockService_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - revert bool
func (_e *MockService_Expecter) DeleteAccount(ctx interface{}, revert interface{}) *MockService_DeleteAccount_Call {
	return &MockService_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount", ctx, revert)}
}

func (_c *MockService_DeleteAccount_Call) Run(run func(ctx context.Context, revert bool)) *MockService_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockService_DeleteAccount_Call) Return(payload space.StatusPayload, err error) *MockService_DeleteAccount_Call {
	_c.Call.Return(payload, err)
	return _c
}

func (_c *MockService_DeleteAccount_Call) RunAndReturn(run func(context.Context, bool) (space.StatusPayload, error)) *MockService_DeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSpace provides a mock function with given fields: ctx, spaceID, revert
func (_m *MockService) DeleteSpace(ctx context.Context, spaceID string, revert bool) (space.StatusPayload, error) {
	ret := _m.Called(ctx, spaceID, revert)

	var r0 space.StatusPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (space.StatusPayload, error)); ok {
		return rf(ctx, spaceID, revert)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) space.StatusPayload); ok {
		r0 = rf(ctx, spaceID, revert)
	} else {
		r0 = ret.Get(0).(space.StatusPayload)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, spaceID, revert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_DeleteSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSpace'
type MockService_DeleteSpace_Call struct {
	*mock.Call
}

// DeleteSpace is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - revert bool
func (_e *MockService_Expecter) DeleteSpace(ctx interface{}, spaceID interface{}, revert interface{}) *MockService_DeleteSpace_Call {
	return &MockService_DeleteSpace_Call{Call: _e.mock.On("DeleteSpace", ctx, spaceID, revert)}
}

func (_c *MockService_DeleteSpace_Call) Run(run func(ctx context.Context, spaceID string, revert bool)) *MockService_DeleteSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockService_DeleteSpace_Call) Return(payload space.StatusPayload, err error) *MockService_DeleteSpace_Call {
	_c.Call.Return(payload, err)
	return _c
}

func (_c *MockService_DeleteSpace_Call) RunAndReturn(run func(context.Context, string, bool) (space.StatusPayload, error)) *MockService_DeleteSpace_Call {
	_c.Call.Return(run)
	return _c
}

// DeriveSpace provides a mock function with given fields: ctx, payload
func (_m *MockService) DeriveSpace(ctx context.Context, payload commonspace.SpaceDerivePayload) (commonspace.Space, error) {
	ret := _m.Called(ctx, payload)

	var r0 commonspace.Space
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, commonspace.SpaceDerivePayload) (commonspace.Space, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, commonspace.SpaceDerivePayload) commonspace.Space); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commonspace.Space)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, commonspace.SpaceDerivePayload) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_DeriveSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeriveSpace'
type MockService_DeriveSpace_Call struct {
	*mock.Call
}

// DeriveSpace is a helper method to define mock.On call
//   - ctx context.Context
//   - payload commonspace.SpaceDerivePayload
func (_e *MockService_Expecter) DeriveSpace(ctx interface{}, payload interface{}) *MockService_DeriveSpace_Call {
	return &MockService_DeriveSpace_Call{Call: _e.mock.On("DeriveSpace", ctx, payload)}
}

func (_c *MockService_DeriveSpace_Call) Run(run func(ctx context.Context, payload commonspace.SpaceDerivePayload)) *MockService_DeriveSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(commonspace.SpaceDerivePayload))
	})
	return _c
}

func (_c *MockService_DeriveSpace_Call) Return(_a0 commonspace.Space, _a1 error) *MockService_DeriveSpace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_DeriveSpace_Call) RunAndReturn(run func(context.Context, commonspace.SpaceDerivePayload) (commonspace.Space, error)) *MockService_DeriveSpace_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpace provides a mock function with given fields: ctx, id
func (_m *MockService) GetSpace(ctx context.Context, id string) (commonspace.Space, error) {
	ret := _m.Called(ctx, id)

	var r0 commonspace.Space
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (commonspace.Space, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) commonspace.Space); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commonspace.Space)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpace'
type MockService_GetSpace_Call struct {
	*mock.Call
}

// GetSpace is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) GetSpace(ctx interface{}, id interface{}) *MockService_GetSpace_Call {
	return &MockService_GetSpace_Call{Call: _e.mock.On("GetSpace", ctx, id)}
}

func (_c *MockService_GetSpace_Call) Run(run func(ctx context.Context, id string)) *MockService_GetSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetSpace_Call) Return(_a0 commonspace.Space, _a1 error) *MockService_GetSpace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetSpace_Call) RunAndReturn(run func(context.Context, string) (commonspace.Space, error)) *MockService_GetSpace_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockService) Init(a *app.App) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockService_Expecter) Init(a interface{}) *MockService_Init_Call {
	return &MockService_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockService_Init_Call) Run(run func(a *app.App)) *MockService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockService_Init_Call) Return(err error) *MockService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Init_Call) RunAndReturn(run func(*app.App) error) *MockService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockService) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(name string) *MockService_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveSpaceID provides a mock function with given fields: objectID
func (_m *MockService) ResolveSpaceID(objectID string) (string, error) {
	ret := _m.Called(objectID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(objectID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(objectID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(objectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ResolveSpaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveSpaceID'
type MockService_ResolveSpaceID_Call struct {
	*mock.Call
}

// ResolveSpaceID is a helper method to define mock.On call
//   - objectID string
func (_e *MockService_Expecter) ResolveSpaceID(objectID interface{}) *MockService_ResolveSpaceID_Call {
	return &MockService_ResolveSpaceID_Call{Call: _e.mock.On("ResolveSpaceID", objectID)}
}

func (_c *MockService_ResolveSpaceID_Call) Run(run func(objectID string)) *MockService_ResolveSpaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_ResolveSpaceID_Call) Return(_a0 string, _a1 error) *MockService_ResolveSpaceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ResolveSpaceID_Call) RunAndReturn(run func(string) (string, error)) *MockService_ResolveSpaceID_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockService) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockService_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Run(ctx interface{}) *MockService_Run_Call {
	return &MockService_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockService_Run_Call) Run(run func(ctx context.Context)) *MockService_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Run_Call) Return(err error) *MockService_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Run_Call) RunAndReturn(run func(context.Context) error) *MockService_Run_Call {
	_c.Call.Return(run)
	return _c
}

// StoreSpaceID provides a mock function with given fields: objectID, spaceID
func (_m *MockService) StoreSpaceID(objectID string, spaceID string) error {
	ret := _m.Called(objectID, spaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(objectID, spaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_StoreSpaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreSpaceID'
type MockService_StoreSpaceID_Call struct {
	*mock.Call
}

// StoreSpaceID is a helper method to define mock.On call
//   - objectID string
//   - spaceID string
func (_e *MockService_Expecter) StoreSpaceID(objectID interface{}, spaceID interface{}) *MockService_StoreSpaceID_Call {
	return &MockService_StoreSpaceID_Call{Call: _e.mock.On("StoreSpaceID", objectID, spaceID)}
}

func (_c *MockService_StoreSpaceID_Call) Run(run func(objectID string, spaceID string)) *MockService_StoreSpaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockService_StoreSpaceID_Call) Return(_a0 error) *MockService_StoreSpaceID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_StoreSpaceID_Call) RunAndReturn(run func(string, string) error) *MockService_StoreSpaceID_Call {
	_c.Call.Return(run)
	return _c
}

// StreamPool provides a mock function with given fields:
func (_m *MockService) StreamPool() streampool.StreamPool {
	ret := _m.Called()

	var r0 streampool.StreamPool
	if rf, ok := ret.Get(0).(func() streampool.StreamPool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(streampool.StreamPool)
		}
	}

	return r0
}

// MockService_StreamPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamPool'
type MockService_StreamPool_Call struct {
	*mock.Call
}

// StreamPool is a helper method to define mock.On call
func (_e *MockService_Expecter) StreamPool() *MockService_StreamPool_Call {
	return &MockService_StreamPool_Call{Call: _e.mock.On("StreamPool")}
}

func (_c *MockService_StreamPool_Call) Run(run func()) *MockService_StreamPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_StreamPool_Call) Return(_a0 streampool.StreamPool) *MockService_StreamPool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_StreamPool_Call) RunAndReturn(run func() streampool.StreamPool) *MockService_StreamPool_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
