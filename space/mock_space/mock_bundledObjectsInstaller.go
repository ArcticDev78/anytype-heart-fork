// Code generated by mockery v2.26.1. DO NOT EDIT.

package mock_space

import (
	context "context"

	space "github.com/anyproto/anytype-heart/space"
	mock "github.com/stretchr/testify/mock"

	types "github.com/gogo/protobuf/types"
)

// MockbundledObjectsInstaller is an autogenerated mock type for the bundledObjectsInstaller type
type MockbundledObjectsInstaller struct {
	mock.Mock
}

type MockbundledObjectsInstaller_Expecter struct {
	mock *mock.Mock
}

func (_m *MockbundledObjectsInstaller) EXPECT() *MockbundledObjectsInstaller_Expecter {
	return &MockbundledObjectsInstaller_Expecter{mock: &_m.Mock}
}

// InstallBundledObjects provides a mock function with given fields: ctx, spc, ids
func (_m *MockbundledObjectsInstaller) InstallBundledObjects(ctx context.Context, spc space.Space, ids []string) ([]string, []*types.Struct, error) {
	ret := _m.Called(ctx, spc, ids)

	var r0 []string
	var r1 []*types.Struct
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, space.Space, []string) ([]string, []*types.Struct, error)); ok {
		return rf(ctx, spc, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, space.Space, []string) []string); ok {
		r0 = rf(ctx, spc, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, space.Space, []string) []*types.Struct); ok {
		r1 = rf(ctx, spc, ids)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*types.Struct)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, space.Space, []string) error); ok {
		r2 = rf(ctx, spc, ids)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockbundledObjectsInstaller_InstallBundledObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallBundledObjects'
type MockbundledObjectsInstaller_InstallBundledObjects_Call struct {
	*mock.Call
}

// InstallBundledObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - spc space.Space
//   - ids []string
func (_e *MockbundledObjectsInstaller_Expecter) InstallBundledObjects(ctx interface{}, spc interface{}, ids interface{}) *MockbundledObjectsInstaller_InstallBundledObjects_Call {
	return &MockbundledObjectsInstaller_InstallBundledObjects_Call{Call: _e.mock.On("InstallBundledObjects", ctx, spc, ids)}
}

func (_c *MockbundledObjectsInstaller_InstallBundledObjects_Call) Run(run func(ctx context.Context, spc space.Space, ids []string)) *MockbundledObjectsInstaller_InstallBundledObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(space.Space), args[2].([]string))
	})
	return _c
}

func (_c *MockbundledObjectsInstaller_InstallBundledObjects_Call) Return(_a0 []string, _a1 []*types.Struct, _a2 error) *MockbundledObjectsInstaller_InstallBundledObjects_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockbundledObjectsInstaller_InstallBundledObjects_Call) RunAndReturn(run func(context.Context, space.Space, []string) ([]string, []*types.Struct, error)) *MockbundledObjectsInstaller_InstallBundledObjects_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockbundledObjectsInstaller interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockbundledObjectsInstaller creates a new instance of MockbundledObjectsInstaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockbundledObjectsInstaller(t mockConstructorTestingTNewMockbundledObjectsInstaller) *MockbundledObjectsInstaller {
	mock := &MockbundledObjectsInstaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
