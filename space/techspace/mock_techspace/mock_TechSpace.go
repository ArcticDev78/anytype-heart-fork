// Code generated by mockery v2.26.1. DO NOT EDIT.

package mock_techspace

import (
	context "context"

	app "github.com/anyproto/any-sync/app"
	mock "github.com/stretchr/testify/mock"

	editor "github.com/anyproto/anytype-heart/core/block/editor"
	spaceinfo "github.com/anyproto/anytype-heart/space/spaceinfo"
)

// MockTechSpace is an autogenerated mock type for the TechSpace type
type MockTechSpace struct {
	mock.Mock
}

type MockTechSpace_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTechSpace) EXPECT() *MockTechSpace_Expecter {
	return &MockTechSpace_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockTechSpace) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTechSpace_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockTechSpace_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTechSpace_Expecter) Close(ctx interface{}) *MockTechSpace_Close_Call {
	return &MockTechSpace_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockTechSpace_Close_Call) Run(run func(ctx context.Context)) *MockTechSpace_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTechSpace_Close_Call) Return(err error) *MockTechSpace_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTechSpace_Close_Call) RunAndReturn(run func(context.Context) error) *MockTechSpace_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSpaceView provides a mock function with given fields: ctx, spaceID
func (_m *MockTechSpace) CreateSpaceView(ctx context.Context, spaceID string) (*editor.SpaceView, error) {
	ret := _m.Called(ctx, spaceID)

	var r0 *editor.SpaceView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*editor.SpaceView, error)); ok {
		return rf(ctx, spaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *editor.SpaceView); ok {
		r0 = rf(ctx, spaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*editor.SpaceView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, spaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTechSpace_CreateSpaceView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSpaceView'
type MockTechSpace_CreateSpaceView_Call struct {
	*mock.Call
}

// CreateSpaceView is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
func (_e *MockTechSpace_Expecter) CreateSpaceView(ctx interface{}, spaceID interface{}) *MockTechSpace_CreateSpaceView_Call {
	return &MockTechSpace_CreateSpaceView_Call{Call: _e.mock.On("CreateSpaceView", ctx, spaceID)}
}

func (_c *MockTechSpace_CreateSpaceView_Call) Run(run func(ctx context.Context, spaceID string)) *MockTechSpace_CreateSpaceView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTechSpace_CreateSpaceView_Call) Return(spaceView *editor.SpaceView, err error) *MockTechSpace_CreateSpaceView_Call {
	_c.Call.Return(spaceView, err)
	return _c
}

func (_c *MockTechSpace_CreateSpaceView_Call) RunAndReturn(run func(context.Context, string) (*editor.SpaceView, error)) *MockTechSpace_CreateSpaceView_Call {
	_c.Call.Return(run)
	return _c
}

// DeriveSpaceViewID provides a mock function with given fields: ctx, spaceID
func (_m *MockTechSpace) DeriveSpaceViewID(ctx context.Context, spaceID string) (string, error) {
	ret := _m.Called(ctx, spaceID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, spaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, spaceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, spaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTechSpace_DeriveSpaceViewID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeriveSpaceViewID'
type MockTechSpace_DeriveSpaceViewID_Call struct {
	*mock.Call
}

// DeriveSpaceViewID is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
func (_e *MockTechSpace_Expecter) DeriveSpaceViewID(ctx interface{}, spaceID interface{}) *MockTechSpace_DeriveSpaceViewID_Call {
	return &MockTechSpace_DeriveSpaceViewID_Call{Call: _e.mock.On("DeriveSpaceViewID", ctx, spaceID)}
}

func (_c *MockTechSpace_DeriveSpaceViewID_Call) Run(run func(ctx context.Context, spaceID string)) *MockTechSpace_DeriveSpaceViewID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTechSpace_DeriveSpaceViewID_Call) Return(_a0 string, _a1 error) *MockTechSpace_DeriveSpaceViewID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTechSpace_DeriveSpaceViewID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockTechSpace_DeriveSpaceViewID_Call {
	_c.Call.Return(run)
	return _c
}

// GetInfo provides a mock function with given fields: spaceID
func (_m *MockTechSpace) GetInfo(spaceID string) spaceinfo.SpaceInfo {
	ret := _m.Called(spaceID)

	var r0 spaceinfo.SpaceInfo
	if rf, ok := ret.Get(0).(func(string) spaceinfo.SpaceInfo); ok {
		r0 = rf(spaceID)
	} else {
		r0 = ret.Get(0).(spaceinfo.SpaceInfo)
	}

	return r0
}

// MockTechSpace_GetInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInfo'
type MockTechSpace_GetInfo_Call struct {
	*mock.Call
}

// GetInfo is a helper method to define mock.On call
//   - spaceID string
func (_e *MockTechSpace_Expecter) GetInfo(spaceID interface{}) *MockTechSpace_GetInfo_Call {
	return &MockTechSpace_GetInfo_Call{Call: _e.mock.On("GetInfo", spaceID)}
}

func (_c *MockTechSpace_GetInfo_Call) Run(run func(spaceID string)) *MockTechSpace_GetInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTechSpace_GetInfo_Call) Return(_a0 spaceinfo.SpaceInfo) *MockTechSpace_GetInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTechSpace_GetInfo_Call) RunAndReturn(run func(string) spaceinfo.SpaceInfo) *MockTechSpace_GetInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockTechSpace) Init(a *app.App) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTechSpace_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockTechSpace_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockTechSpace_Expecter) Init(a interface{}) *MockTechSpace_Init_Call {
	return &MockTechSpace_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockTechSpace_Init_Call) Run(run func(a *app.App)) *MockTechSpace_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockTechSpace_Init_Call) Return(err error) *MockTechSpace_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTechSpace_Init_Call) RunAndReturn(run func(*app.App) error) *MockTechSpace_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockTechSpace) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTechSpace_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockTechSpace_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockTechSpace_Expecter) Name() *MockTechSpace_Name_Call {
	return &MockTechSpace_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockTechSpace_Name_Call) Run(run func()) *MockTechSpace_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTechSpace_Name_Call) Return(name string) *MockTechSpace_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockTechSpace_Name_Call) RunAndReturn(run func() string) *MockTechSpace_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockTechSpace) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTechSpace_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockTechSpace_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTechSpace_Expecter) Run(ctx interface{}) *MockTechSpace_Run_Call {
	return &MockTechSpace_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockTechSpace_Run_Call) Run(run func(ctx context.Context)) *MockTechSpace_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTechSpace_Run_Call) Return(err error) *MockTechSpace_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTechSpace_Run_Call) RunAndReturn(run func(context.Context) error) *MockTechSpace_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SetInfo provides a mock function with given fields: ctx, info
func (_m *MockTechSpace) SetInfo(ctx context.Context, info spaceinfo.SpaceInfo) error {
	ret := _m.Called(ctx, info)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, spaceinfo.SpaceInfo) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTechSpace_SetInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInfo'
type MockTechSpace_SetInfo_Call struct {
	*mock.Call
}

// SetInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - info spaceinfo.SpaceInfo
func (_e *MockTechSpace_Expecter) SetInfo(ctx interface{}, info interface{}) *MockTechSpace_SetInfo_Call {
	return &MockTechSpace_SetInfo_Call{Call: _e.mock.On("SetInfo", ctx, info)}
}

func (_c *MockTechSpace_SetInfo_Call) Run(run func(ctx context.Context, info spaceinfo.SpaceInfo)) *MockTechSpace_SetInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(spaceinfo.SpaceInfo))
	})
	return _c
}

func (_c *MockTechSpace_SetInfo_Call) Return(err error) *MockTechSpace_SetInfo_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTechSpace_SetInfo_Call) RunAndReturn(run func(context.Context, spaceinfo.SpaceInfo) error) *MockTechSpace_SetInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetStatuses provides a mock function with given fields: ctx, spaceID, local, remote
func (_m *MockTechSpace) SetStatuses(ctx context.Context, spaceID string, local spaceinfo.LocalStatus, remote spaceinfo.RemoteStatus) error {
	ret := _m.Called(ctx, spaceID, local, remote)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, spaceinfo.LocalStatus, spaceinfo.RemoteStatus) error); ok {
		r0 = rf(ctx, spaceID, local, remote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTechSpace_SetStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatuses'
type MockTechSpace_SetStatuses_Call struct {
	*mock.Call
}

// SetStatuses is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - local spaceinfo.LocalStatus
//   - remote spaceinfo.RemoteStatus
func (_e *MockTechSpace_Expecter) SetStatuses(ctx interface{}, spaceID interface{}, local interface{}, remote interface{}) *MockTechSpace_SetStatuses_Call {
	return &MockTechSpace_SetStatuses_Call{Call: _e.mock.On("SetStatuses", ctx, spaceID, local, remote)}
}

func (_c *MockTechSpace_SetStatuses_Call) Run(run func(ctx context.Context, spaceID string, local spaceinfo.LocalStatus, remote spaceinfo.RemoteStatus)) *MockTechSpace_SetStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(spaceinfo.LocalStatus), args[3].(spaceinfo.RemoteStatus))
	})
	return _c
}

func (_c *MockTechSpace_SetStatuses_Call) Return(err error) *MockTechSpace_SetStatuses_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTechSpace_SetStatuses_Call) RunAndReturn(run func(context.Context, string, spaceinfo.LocalStatus, spaceinfo.RemoteStatus) error) *MockTechSpace_SetStatuses_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTechSpace interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTechSpace creates a new instance of MockTechSpace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTechSpace(t mockConstructorTestingTNewMockTechSpace) *MockTechSpace {
	mock := &MockTechSpace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
