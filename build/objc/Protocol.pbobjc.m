// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Protocol.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ProtocolRoot

@implementation ProtocolRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ProtocolRoot_FileDescriptor

static GPBFileDescriptor *ProtocolRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Event

@implementation Event

@dynamic entity;
@dynamic op;
@dynamic data_p;
@dynamic id_p;

typedef struct Event__storage_ {
  uint32_t _has_storage_[1];
  NSString *entity;
  NSString *op;
  NSString *data_p;
  NSString *id_p;
} Event__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entity",
        .dataTypeSpecific.className = NULL,
        .number = Event_FieldNumber_Entity,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Event__storage_, entity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "op",
        .dataTypeSpecific.className = NULL,
        .number = Event_FieldNumber_Op,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Event__storage_, op),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = Event_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Event__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Event_FieldNumber_Id_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Event__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Request

@implementation Request

@dynamic id_p;
@dynamic entity;
@dynamic target;

typedef struct Request__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *entity;
  NSString *target;
} Request__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Request__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entity",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_Entity,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Request__storage_, entity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_Target,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Request__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Request class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Request__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DocHeaders

@implementation DocHeaders

@dynamic id_p;
@dynamic docHeadersArray, docHeadersArray_Count;

typedef struct DocHeaders__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSMutableArray *docHeadersArray;
} DocHeaders__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = DocHeaders_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DocHeaders__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "docHeadersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DocHeader),
        .number = DocHeaders_FieldNumber_DocHeadersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DocHeaders__storage_, docHeadersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DocHeaders class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DocHeaders__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000docHeaders\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DocHeader

@implementation DocHeader

@dynamic id_p;
@dynamic name;
@dynamic root;
@dynamic version;
@dynamic iconName;

typedef struct DocHeader__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *root;
  NSString *version;
  NSString *iconName;
} DocHeader__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = DocHeader_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DocHeader__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DocHeader_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DocHeader__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "root",
        .dataTypeSpecific.className = NULL,
        .number = DocHeader_FieldNumber_Root,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DocHeader__storage_, root),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = DocHeader_FieldNumber_Version,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DocHeader__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconName",
        .dataTypeSpecific.className = NULL,
        .number = DocHeader_FieldNumber_IconName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DocHeader__storage_, iconName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DocHeader class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DocHeader__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
