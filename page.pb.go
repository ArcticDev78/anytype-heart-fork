// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: page.proto

package core

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BlockType int32

const (
	BlockType_DASHBOARD BlockType = 0
	BlockType_PAGE      BlockType = 1
	BlockType_DATAVIEW  BlockType = 2
	BlockType_TEXT      BlockType = 3
	BlockType_FILE      BlockType = 4
	BlockType_PICTURE   BlockType = 5
	BlockType_VIDEO     BlockType = 6
)

var BlockType_name = map[int32]string{
	0: "DASHBOARD",
	1: "PAGE",
	2: "DATAVIEW",
	3: "TEXT",
	4: "FILE",
	5: "PICTURE",
	6: "VIDEO",
}

var BlockType_value = map[string]int32{
	"DASHBOARD": 0,
	"PAGE":      1,
	"DATAVIEW":  2,
	"TEXT":      3,
	"FILE":      4,
	"PICTURE":   5,
	"VIDEO":     6,
}

func (x BlockType) String() string {
	return proto.EnumName(BlockType_name, int32(x))
}

func (BlockType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{0}
}

type BlockPage_Style int32

const (
	BlockPage_EMPTY    BlockPage_Style = 0
	BlockPage_TASK     BlockPage_Style = 1
	BlockPage_BOOKMARK BlockPage_Style = 2
	BlockPage_SET      BlockPage_Style = 3
)

var BlockPage_Style_name = map[int32]string{
	0: "EMPTY",
	1: "TASK",
	2: "BOOKMARK",
	3: "SET",
}

var BlockPage_Style_value = map[string]int32{
	"EMPTY":    0,
	"TASK":     1,
	"BOOKMARK": 2,
	"SET":      3,
}

func (x BlockPage_Style) String() string {
	return proto.EnumName(BlockPage_Style_name, int32(x))
}

func (BlockPage_Style) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{6, 0}
}

type BlockDashboard_Style int32

const (
	BlockDashboard_MAIN_SCREEN BlockDashboard_Style = 0
)

var BlockDashboard_Style_name = map[int32]string{
	0: "MAIN_SCREEN",
}

var BlockDashboard_Style_value = map[string]int32{
	"MAIN_SCREEN": 0,
}

func (x BlockDashboard_Style) String() string {
	return proto.EnumName(BlockDashboard_Style_name, int32(x))
}

func (BlockDashboard_Style) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{7, 0}
}

type BlockText_Style int32

const (
	BlockText_p     BlockText_Style = 0
	BlockText_h1    BlockText_Style = 1
	BlockText_h2    BlockText_Style = 2
	BlockText_h3    BlockText_Style = 3
	BlockText_h4    BlockText_Style = 4
	BlockText_quote BlockText_Style = 5
)

var BlockText_Style_name = map[int32]string{
	0: "p",
	1: "h1",
	2: "h2",
	3: "h3",
	4: "h4",
	5: "quote",
}

var BlockText_Style_value = map[string]int32{
	"p":     0,
	"h1":    1,
	"h2":    2,
	"h3":    3,
	"h4":    4,
	"quote": 5,
}

func (x BlockText_Style) String() string {
	return proto.EnumName(BlockText_Style_name, int32(x))
}

func (BlockText_Style) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{9, 0}
}

type BlockText_MarkerType int32

const (
	BlockText_none   BlockText_MarkerType = 0
	BlockText_number BlockText_MarkerType = 1
	BlockText_bullet BlockText_MarkerType = 2
)

var BlockText_MarkerType_name = map[int32]string{
	0: "none",
	1: "number",
	2: "bullet",
}

var BlockText_MarkerType_value = map[string]int32{
	"none":   0,
	"number": 1,
	"bullet": 2,
}

func (x BlockText_MarkerType) String() string {
	return proto.EnumName(BlockText_MarkerType_name, int32(x))
}

func (BlockText_MarkerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{9, 1}
}

type BlockText_Mark_Type int32

const (
	BlockText_Mark_S   BlockText_Mark_Type = 0
	BlockText_Mark_KBD BlockText_Mark_Type = 1
	BlockText_Mark_I   BlockText_Mark_Type = 2
	BlockText_Mark_B   BlockText_Mark_Type = 3
	BlockText_Mark_A   BlockText_Mark_Type = 4
)

var BlockText_Mark_Type_name = map[int32]string{
	0: "S",
	1: "KBD",
	2: "I",
	3: "B",
	4: "A",
}

var BlockText_Mark_Type_value = map[string]int32{
	"S":   0,
	"KBD": 1,
	"I":   2,
	"B":   3,
	"A":   4,
}

func (x BlockText_Mark_Type) String() string {
	return proto.EnumName(BlockText_Mark_Type_name, int32(x))
}

func (BlockText_Mark_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{9, 1, 0}
}

// Type controls read (R), annotate (A), and write (W) access
type Page_Type int32

const (
	Page_PRIVATE   Page_Type = 0
	Page_READ_ONLY Page_Type = 1
	Page_PUBLIC    Page_Type = 2
	Page_OPEN      Page_Type = 3
)

var Page_Type_name = map[int32]string{
	0: "PRIVATE",
	1: "READ_ONLY",
	2: "PUBLIC",
	3: "OPEN",
}

var Page_Type_value = map[string]int32{
	"PRIVATE":   0,
	"READ_ONLY": 1,
	"PUBLIC":    2,
	"OPEN":      3,
}

func (x Page_Type) String() string {
	return proto.EnumName(Page_Type_name, int32(x))
}

func (Page_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{16, 0}
}

type Block struct {
	Header *BlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*Block_Dashboard
	//	*Block_Page
	//	*Block_Dataview
	//	*Block_Text
	//	*Block_Media
	Content isBlock_Content `protobuf_oneof:"content"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{0}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

type isBlock_Content interface {
	isBlock_Content()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Block_Dashboard struct {
	Dashboard *BlockDashboard `protobuf:"bytes,11,opt,name=dashboard,proto3,oneof" json:"dashboard,omitempty"`
}
type Block_Page struct {
	Page *BlockPage `protobuf:"bytes,12,opt,name=page,proto3,oneof" json:"page,omitempty"`
}
type Block_Dataview struct {
	Dataview *BlockDataview `protobuf:"bytes,13,opt,name=dataview,proto3,oneof" json:"dataview,omitempty"`
}
type Block_Text struct {
	Text *BlockText `protobuf:"bytes,14,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type Block_Media struct {
	Media *BlockMedia `protobuf:"bytes,15,opt,name=media,proto3,oneof" json:"media,omitempty"`
}

func (*Block_Dashboard) isBlock_Content() {}
func (*Block_Page) isBlock_Content()      {}
func (*Block_Dataview) isBlock_Content()  {}
func (*Block_Text) isBlock_Content()      {}
func (*Block_Media) isBlock_Content()     {}

func (m *Block) GetContent() isBlock_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetDashboard() *BlockDashboard {
	if x, ok := m.GetContent().(*Block_Dashboard); ok {
		return x.Dashboard
	}
	return nil
}

func (m *Block) GetPage() *BlockPage {
	if x, ok := m.GetContent().(*Block_Page); ok {
		return x.Page
	}
	return nil
}

func (m *Block) GetDataview() *BlockDataview {
	if x, ok := m.GetContent().(*Block_Dataview); ok {
		return x.Dataview
	}
	return nil
}

func (m *Block) GetText() *BlockText {
	if x, ok := m.GetContent().(*Block_Text); ok {
		return x.Text
	}
	return nil
}

func (m *Block) GetMedia() *BlockMedia {
	if x, ok := m.GetContent().(*Block_Media); ok {
		return x.Media
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Block) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Block_Dashboard)(nil),
		(*Block_Page)(nil),
		(*Block_Dataview)(nil),
		(*Block_Text)(nil),
		(*Block_Media)(nil),
	}
}

type BlockHeader struct {
	Id   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type BlockType `protobuf:"varint,2,opt,name=type,proto3,enum=anytype.BlockType" json:"type,omitempty"`
	Name string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon string    `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{1}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(m, src)
}
func (m *BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BlockHeader) GetType() BlockType {
	if m != nil {
		return m.Type
	}
	return BlockType_DASHBOARD
}

func (m *BlockHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlockHeader) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type BlockConnections struct {
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Next         string `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	ColumnBottom string `protobuf:"bytes,3,opt,name=columnBottom,proto3" json:"columnBottom,omitempty"`
	RowRight     string `protobuf:"bytes,4,opt,name=rowRight,proto3" json:"rowRight,omitempty"`
	Inner        string `protobuf:"bytes,5,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *BlockConnections) Reset()         { *m = BlockConnections{} }
func (m *BlockConnections) String() string { return proto.CompactTextString(m) }
func (*BlockConnections) ProtoMessage()    {}
func (*BlockConnections) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{2}
}
func (m *BlockConnections) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockConnections) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockConnections.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockConnections) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockConnections.Merge(m, src)
}
func (m *BlockConnections) XXX_Size() int {
	return m.Size()
}
func (m *BlockConnections) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockConnections.DiscardUnknown(m)
}

var xxx_messageInfo_BlockConnections proto.InternalMessageInfo

func (m *BlockConnections) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BlockConnections) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *BlockConnections) GetColumnBottom() string {
	if m != nil {
		return m.ColumnBottom
	}
	return ""
}

func (m *BlockConnections) GetRowRight() string {
	if m != nil {
		return m.RowRight
	}
	return ""
}

func (m *BlockConnections) GetInner() string {
	if m != nil {
		return m.Inner
	}
	return ""
}

type BlockConnectionsList struct {
	Structure []*BlockConnections `protobuf:"bytes,1,rep,name=structure,proto3" json:"structure,omitempty"`
}

func (m *BlockConnectionsList) Reset()         { *m = BlockConnectionsList{} }
func (m *BlockConnectionsList) String() string { return proto.CompactTextString(m) }
func (*BlockConnectionsList) ProtoMessage()    {}
func (*BlockConnectionsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{3}
}
func (m *BlockConnectionsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockConnectionsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockConnectionsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockConnectionsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockConnectionsList.Merge(m, src)
}
func (m *BlockConnectionsList) XXX_Size() int {
	return m.Size()
}
func (m *BlockConnectionsList) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockConnectionsList.DiscardUnknown(m)
}

var xxx_messageInfo_BlockConnectionsList proto.InternalMessageInfo

func (m *BlockConnectionsList) GetStructure() []*BlockConnections {
	if m != nil {
		return m.Structure
	}
	return nil
}

type BlockHeadersList struct {
	Headers []*BlockHeader `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (m *BlockHeadersList) Reset()         { *m = BlockHeadersList{} }
func (m *BlockHeadersList) String() string { return proto.CompactTextString(m) }
func (*BlockHeadersList) ProtoMessage()    {}
func (*BlockHeadersList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{4}
}
func (m *BlockHeadersList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeadersList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeadersList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeadersList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeadersList.Merge(m, src)
}
func (m *BlockHeadersList) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeadersList) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeadersList.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeadersList proto.InternalMessageInfo

func (m *BlockHeadersList) GetHeaders() []*BlockHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

type BlocksList struct {
	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *BlocksList) Reset()         { *m = BlocksList{} }
func (m *BlocksList) String() string { return proto.CompactTextString(m) }
func (*BlocksList) ProtoMessage()    {}
func (*BlocksList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{5}
}
func (m *BlocksList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlocksList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlocksList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlocksList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlocksList.Merge(m, src)
}
func (m *BlocksList) XXX_Size() int {
	return m.Size()
}
func (m *BlocksList) XXX_DiscardUnknown() {
	xxx_messageInfo_BlocksList.DiscardUnknown(m)
}

var xxx_messageInfo_BlocksList proto.InternalMessageInfo

func (m *BlocksList) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type BlockPage struct {
	Style     BlockPage_Style       `protobuf:"varint,1,opt,name=style,proto3,enum=anytype.BlockPage_Style" json:"style,omitempty"`
	Structure *BlockConnectionsList `protobuf:"bytes,2,opt,name=structure,proto3" json:"structure,omitempty"`
	Blocks    *BlocksList           `protobuf:"bytes,3,opt,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *BlockPage) Reset()         { *m = BlockPage{} }
func (m *BlockPage) String() string { return proto.CompactTextString(m) }
func (*BlockPage) ProtoMessage()    {}
func (*BlockPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{6}
}
func (m *BlockPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockPage.Merge(m, src)
}
func (m *BlockPage) XXX_Size() int {
	return m.Size()
}
func (m *BlockPage) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockPage.DiscardUnknown(m)
}

var xxx_messageInfo_BlockPage proto.InternalMessageInfo

func (m *BlockPage) GetStyle() BlockPage_Style {
	if m != nil {
		return m.Style
	}
	return BlockPage_EMPTY
}

func (m *BlockPage) GetStructure() *BlockConnectionsList {
	if m != nil {
		return m.Structure
	}
	return nil
}

func (m *BlockPage) GetBlocks() *BlocksList {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type BlockDashboard struct {
	Style     BlockDashboard_Style  `protobuf:"varint,1,opt,name=style,proto3,enum=anytype.BlockDashboard_Style" json:"style,omitempty"`
	Structure *BlockConnectionsList `protobuf:"bytes,2,opt,name=structure,proto3" json:"structure,omitempty"`
	Headers   *BlockHeadersList     `protobuf:"bytes,3,opt,name=headers,proto3" json:"headers,omitempty"`
}

func (m *BlockDashboard) Reset()         { *m = BlockDashboard{} }
func (m *BlockDashboard) String() string { return proto.CompactTextString(m) }
func (*BlockDashboard) ProtoMessage()    {}
func (*BlockDashboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{7}
}
func (m *BlockDashboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockDashboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockDashboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockDashboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockDashboard.Merge(m, src)
}
func (m *BlockDashboard) XXX_Size() int {
	return m.Size()
}
func (m *BlockDashboard) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockDashboard.DiscardUnknown(m)
}

var xxx_messageInfo_BlockDashboard proto.InternalMessageInfo

func (m *BlockDashboard) GetStyle() BlockDashboard_Style {
	if m != nil {
		return m.Style
	}
	return BlockDashboard_MAIN_SCREEN
}

func (m *BlockDashboard) GetStructure() *BlockConnectionsList {
	if m != nil {
		return m.Structure
	}
	return nil
}

func (m *BlockDashboard) GetHeaders() *BlockHeadersList {
	if m != nil {
		return m.Headers
	}
	return nil
}

type BlockDataview struct {
}

func (m *BlockDataview) Reset()         { *m = BlockDataview{} }
func (m *BlockDataview) String() string { return proto.CompactTextString(m) }
func (*BlockDataview) ProtoMessage()    {}
func (*BlockDataview) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{8}
}
func (m *BlockDataview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockDataview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockDataview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockDataview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockDataview.Merge(m, src)
}
func (m *BlockDataview) XXX_Size() int {
	return m.Size()
}
func (m *BlockDataview) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockDataview.DiscardUnknown(m)
}

var xxx_messageInfo_BlockDataview proto.InternalMessageInfo

type BlockText struct {
	Text       string               `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Style      BlockText_Style      `protobuf:"varint,2,opt,name=style,proto3,enum=anytype.BlockText_Style" json:"style,omitempty"`
	MarksList  *BlockText_Marks     `protobuf:"bytes,3,opt,name=marksList,proto3" json:"marksList,omitempty"`
	Toggleable bool                 `protobuf:"varint,4,opt,name=toggleable,proto3" json:"toggleable,omitempty"`
	MarkerType BlockText_MarkerType `protobuf:"varint,5,opt,name=markerType,proto3,enum=anytype.BlockText_MarkerType" json:"markerType,omitempty"`
	Checkable  bool                 `protobuf:"varint,6,opt,name=checkable,proto3" json:"checkable,omitempty"`
	Checked    bool                 `protobuf:"varint,7,opt,name=checked,proto3" json:"checked,omitempty"`
}

func (m *BlockText) Reset()         { *m = BlockText{} }
func (m *BlockText) String() string { return proto.CompactTextString(m) }
func (*BlockText) ProtoMessage()    {}
func (*BlockText) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{9}
}
func (m *BlockText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockText.Merge(m, src)
}
func (m *BlockText) XXX_Size() int {
	return m.Size()
}
func (m *BlockText) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockText.DiscardUnknown(m)
}

var xxx_messageInfo_BlockText proto.InternalMessageInfo

func (m *BlockText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *BlockText) GetStyle() BlockText_Style {
	if m != nil {
		return m.Style
	}
	return BlockText_p
}

func (m *BlockText) GetMarksList() *BlockText_Marks {
	if m != nil {
		return m.MarksList
	}
	return nil
}

func (m *BlockText) GetToggleable() bool {
	if m != nil {
		return m.Toggleable
	}
	return false
}

func (m *BlockText) GetMarkerType() BlockText_MarkerType {
	if m != nil {
		return m.MarkerType
	}
	return BlockText_none
}

func (m *BlockText) GetCheckable() bool {
	if m != nil {
		return m.Checkable
	}
	return false
}

func (m *BlockText) GetChecked() bool {
	if m != nil {
		return m.Checked
	}
	return false
}

type BlockText_Marks struct {
	Marks []*BlockText_Mark `protobuf:"bytes,1,rep,name=marks,proto3" json:"marks,omitempty"`
}

func (m *BlockText_Marks) Reset()         { *m = BlockText_Marks{} }
func (m *BlockText_Marks) String() string { return proto.CompactTextString(m) }
func (*BlockText_Marks) ProtoMessage()    {}
func (*BlockText_Marks) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{9, 0}
}
func (m *BlockText_Marks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockText_Marks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockText_Marks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockText_Marks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockText_Marks.Merge(m, src)
}
func (m *BlockText_Marks) XXX_Size() int {
	return m.Size()
}
func (m *BlockText_Marks) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockText_Marks.DiscardUnknown(m)
}

var xxx_messageInfo_BlockText_Marks proto.InternalMessageInfo

func (m *BlockText_Marks) GetMarks() []*BlockText_Mark {
	if m != nil {
		return m.Marks
	}
	return nil
}

type BlockText_Mark struct {
	Range *BlockText_Mark_Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Type  BlockText_Mark_Type   `protobuf:"varint,2,opt,name=type,proto3,enum=anytype.BlockText_Mark_Type" json:"type,omitempty"`
}

func (m *BlockText_Mark) Reset()         { *m = BlockText_Mark{} }
func (m *BlockText_Mark) String() string { return proto.CompactTextString(m) }
func (*BlockText_Mark) ProtoMessage()    {}
func (*BlockText_Mark) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{9, 1}
}
func (m *BlockText_Mark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockText_Mark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockText_Mark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockText_Mark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockText_Mark.Merge(m, src)
}
func (m *BlockText_Mark) XXX_Size() int {
	return m.Size()
}
func (m *BlockText_Mark) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockText_Mark.DiscardUnknown(m)
}

var xxx_messageInfo_BlockText_Mark proto.InternalMessageInfo

func (m *BlockText_Mark) GetRange() *BlockText_Mark_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *BlockText_Mark) GetType() BlockText_Mark_Type {
	if m != nil {
		return m.Type
	}
	return BlockText_Mark_S
}

type BlockText_Mark_Range struct {
	From int32 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   int32 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *BlockText_Mark_Range) Reset()         { *m = BlockText_Mark_Range{} }
func (m *BlockText_Mark_Range) String() string { return proto.CompactTextString(m) }
func (*BlockText_Mark_Range) ProtoMessage()    {}
func (*BlockText_Mark_Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{9, 1, 0}
}
func (m *BlockText_Mark_Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockText_Mark_Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockText_Mark_Range.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockText_Mark_Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockText_Mark_Range.Merge(m, src)
}
func (m *BlockText_Mark_Range) XXX_Size() int {
	return m.Size()
}
func (m *BlockText_Mark_Range) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockText_Mark_Range.DiscardUnknown(m)
}

var xxx_messageInfo_BlockText_Mark_Range proto.InternalMessageInfo

func (m *BlockText_Mark_Range) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *BlockText_Mark_Range) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

type BlockMedia struct {
	Link string          `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Meta *BlockMediaMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *BlockMedia) Reset()         { *m = BlockMedia{} }
func (m *BlockMedia) String() string { return proto.CompactTextString(m) }
func (*BlockMedia) ProtoMessage()    {}
func (*BlockMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{10}
}
func (m *BlockMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockMedia.Merge(m, src)
}
func (m *BlockMedia) XXX_Size() int {
	return m.Size()
}
func (m *BlockMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockMedia.DiscardUnknown(m)
}

var xxx_messageInfo_BlockMedia proto.InternalMessageInfo

func (m *BlockMedia) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *BlockMedia) GetMeta() *BlockMediaMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type BlockMediaMeta struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DateAdded   string `protobuf:"bytes,2,opt,name=dateAdded,proto3" json:"dateAdded,omitempty"`
	Size_       int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *BlockMediaMeta) Reset()         { *m = BlockMediaMeta{} }
func (m *BlockMediaMeta) String() string { return proto.CompactTextString(m) }
func (*BlockMediaMeta) ProtoMessage()    {}
func (*BlockMediaMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{11}
}
func (m *BlockMediaMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockMediaMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockMediaMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockMediaMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockMediaMeta.Merge(m, src)
}
func (m *BlockMediaMeta) XXX_Size() int {
	return m.Size()
}
func (m *BlockMediaMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockMediaMeta.DiscardUnknown(m)
}

var xxx_messageInfo_BlockMediaMeta proto.InternalMessageInfo

func (m *BlockMediaMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlockMediaMeta) GetDateAdded() string {
	if m != nil {
		return m.DateAdded
	}
	return ""
}

func (m *BlockMediaMeta) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *BlockMediaMeta) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type PageVersion struct {
	Id      string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Parents []string             `protobuf:"bytes,2,rep,name=parents,proto3" json:"parents,omitempty"`
	Name    string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon    string               `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Blocks  []*Block             `protobuf:"bytes,5,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Date    *timestamp.Timestamp `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	User    string               `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *PageVersion) Reset()         { *m = PageVersion{} }
func (m *PageVersion) String() string { return proto.CompactTextString(m) }
func (*PageVersion) ProtoMessage()    {}
func (*PageVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{12}
}
func (m *PageVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageVersion.Merge(m, src)
}
func (m *PageVersion) XXX_Size() int {
	return m.Size()
}
func (m *PageVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_PageVersion.DiscardUnknown(m)
}

var xxx_messageInfo_PageVersion proto.InternalMessageInfo

func (m *PageVersion) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PageVersion) GetParents() []string {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *PageVersion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PageVersion) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *PageVersion) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *PageVersion) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *PageVersion) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type PageBlockList struct {
	Items []*Block `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *PageBlockList) Reset()         { *m = PageBlockList{} }
func (m *PageBlockList) String() string { return proto.CompactTextString(m) }
func (*PageBlockList) ProtoMessage()    {}
func (*PageBlockList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{13}
}
func (m *PageBlockList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageBlockList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageBlockList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageBlockList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageBlockList.Merge(m, src)
}
func (m *PageBlockList) XXX_Size() int {
	return m.Size()
}
func (m *PageBlockList) XXX_DiscardUnknown() {
	xxx_messageInfo_PageBlockList.DiscardUnknown(m)
}

var xxx_messageInfo_PageBlockList proto.InternalMessageInfo

func (m *PageBlockList) GetItems() []*Block {
	if m != nil {
		return m.Items
	}
	return nil
}

type PageVersionList struct {
	Items []*PageVersion `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *PageVersionList) Reset()         { *m = PageVersionList{} }
func (m *PageVersionList) String() string { return proto.CompactTextString(m) }
func (*PageVersionList) ProtoMessage()    {}
func (*PageVersionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{14}
}
func (m *PageVersionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageVersionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageVersionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageVersionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageVersionList.Merge(m, src)
}
func (m *PageVersionList) XXX_Size() int {
	return m.Size()
}
func (m *PageVersionList) XXX_DiscardUnknown() {
	xxx_messageInfo_PageVersionList.DiscardUnknown(m)
}

var xxx_messageInfo_PageVersionList proto.InternalMessageInfo

func (m *PageVersionList) GetItems() []*PageVersion {
	if m != nil {
		return m.Items
	}
	return nil
}

type PageList struct {
	Items []*Page `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *PageList) Reset()         { *m = PageList{} }
func (m *PageList) String() string { return proto.CompactTextString(m) }
func (*PageList) ProtoMessage()    {}
func (*PageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{15}
}
func (m *PageList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageList.Merge(m, src)
}
func (m *PageList) XXX_Size() int {
	return m.Size()
}
func (m *PageList) XXX_DiscardUnknown() {
	xxx_messageInfo_PageList.DiscardUnknown(m)
}

var xxx_messageInfo_PageList proto.InternalMessageInfo

func (m *PageList) GetItems() []*Page {
	if m != nil {
		return m.Items
	}
	return nil
}

type Page struct {
	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Initiator string    `protobuf:"bytes,3,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Type      Page_Type `protobuf:"varint,4,opt,name=type,proto3,enum=anytype.Page_Type" json:"type,omitempty"`
	Icon      string    `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Archived  bool      `protobuf:"varint,6,opt,name=archived,proto3" json:"archived,omitempty"`
	Children  []*Page   `protobuf:"bytes,7,rep,name=children,proto3" json:"children,omitempty"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{16}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Page) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Page) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

func (m *Page) GetType() Page_Type {
	if m != nil {
		return m.Type
	}
	return Page_PRIVATE
}

func (m *Page) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Page) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Page) GetChildren() []*Page {
	if m != nil {
		return m.Children
	}
	return nil
}

func init() {
	proto.RegisterEnum("anytype.BlockType", BlockType_name, BlockType_value)
	proto.RegisterEnum("anytype.BlockPage_Style", BlockPage_Style_name, BlockPage_Style_value)
	proto.RegisterEnum("anytype.BlockDashboard_Style", BlockDashboard_Style_name, BlockDashboard_Style_value)
	proto.RegisterEnum("anytype.BlockText_Style", BlockText_Style_name, BlockText_Style_value)
	proto.RegisterEnum("anytype.BlockText_MarkerType", BlockText_MarkerType_name, BlockText_MarkerType_value)
	proto.RegisterEnum("anytype.BlockText_Mark_Type", BlockText_Mark_Type_name, BlockText_Mark_Type_value)
	proto.RegisterEnum("anytype.Page_Type", Page_Type_name, Page_Type_value)
	proto.RegisterType((*Block)(nil), "anytype.Block")
	proto.RegisterType((*BlockHeader)(nil), "anytype.BlockHeader")
	proto.RegisterType((*BlockConnections)(nil), "anytype.BlockConnections")
	proto.RegisterType((*BlockConnectionsList)(nil), "anytype.BlockConnectionsList")
	proto.RegisterType((*BlockHeadersList)(nil), "anytype.BlockHeadersList")
	proto.RegisterType((*BlocksList)(nil), "anytype.BlocksList")
	proto.RegisterType((*BlockPage)(nil), "anytype.BlockPage")
	proto.RegisterType((*BlockDashboard)(nil), "anytype.BlockDashboard")
	proto.RegisterType((*BlockDataview)(nil), "anytype.BlockDataview")
	proto.RegisterType((*BlockText)(nil), "anytype.BlockText")
	proto.RegisterType((*BlockText_Marks)(nil), "anytype.BlockText.Marks")
	proto.RegisterType((*BlockText_Mark)(nil), "anytype.BlockText.Mark")
	proto.RegisterType((*BlockText_Mark_Range)(nil), "anytype.BlockText.Mark.Range")
	proto.RegisterType((*BlockMedia)(nil), "anytype.BlockMedia")
	proto.RegisterType((*BlockMediaMeta)(nil), "anytype.BlockMediaMeta")
	proto.RegisterType((*PageVersion)(nil), "anytype.PageVersion")
	proto.RegisterType((*PageBlockList)(nil), "anytype.PageBlockList")
	proto.RegisterType((*PageVersionList)(nil), "anytype.PageVersionList")
	proto.RegisterType((*PageList)(nil), "anytype.PageList")
	proto.RegisterType((*Page)(nil), "anytype.Page")
}

func init() { proto.RegisterFile("page.proto", fileDescriptor_f14a105a5ef2e917) }

var fileDescriptor_f14a105a5ef2e917 = []byte{
	// 1281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x73, 0xdb, 0xc4,
	0x17, 0x97, 0x64, 0xc9, 0x3f, 0x9e, 0x9b, 0x64, 0x67, 0xbf, 0x9d, 0x6f, 0x55, 0x4f, 0x6b, 0x32,
	0x82, 0xe9, 0x84, 0x06, 0x5c, 0x48, 0x4a, 0x81, 0x61, 0x7a, 0xb0, 0x63, 0x41, 0x3c, 0x89, 0xe3,
	0xcc, 0xc6, 0x0d, 0x94, 0x03, 0x1d, 0xd9, 0xda, 0xda, 0x9a, 0xda, 0x92, 0x91, 0xd7, 0x6d, 0xc3,
	0x9d, 0x13, 0x1c, 0xf8, 0x53, 0xf8, 0x2f, 0x60, 0x86, 0x4b, 0xb9, 0x31, 0x9c, 0x98, 0xf6, 0x1f,
	0x61, 0xf6, 0xad, 0x64, 0x5b, 0x89, 0xcd, 0x70, 0xe0, 0xa4, 0xdd, 0xf7, 0x3e, 0x9f, 0xb7, 0xfb,
	0xf6, 0xfd, 0x12, 0xc0, 0xc4, 0x1b, 0xf0, 0xda, 0x24, 0x8e, 0x44, 0x44, 0x0b, 0x5e, 0x78, 0x21,
	0x2e, 0x26, 0xbc, 0xf2, 0xd6, 0x20, 0x8a, 0x06, 0x23, 0x7e, 0x0f, 0xc5, 0xbd, 0xd9, 0xd3, 0x7b,
	0x22, 0x18, 0xf3, 0xa9, 0xf0, 0xc6, 0x13, 0x85, 0x74, 0x7e, 0x36, 0xc0, 0x6a, 0x8c, 0xa2, 0xfe,
	0x33, 0xfa, 0x1e, 0xe4, 0x87, 0xdc, 0xf3, 0x79, 0x6c, 0xeb, 0xdb, 0xfa, 0x4e, 0x79, 0xef, 0x7a,
	0x2d, 0x31, 0x52, 0x43, 0xfd, 0x21, 0xea, 0x58, 0x82, 0xa1, 0x1f, 0x43, 0xc9, 0xf7, 0xa6, 0xc3,
	0x5e, 0xe4, 0xc5, 0xbe, 0x5d, 0x46, 0xc2, 0x8d, 0x2c, 0xa1, 0x99, 0xaa, 0x0f, 0x35, 0xb6, 0xc0,
	0xd2, 0x1d, 0x30, 0xe5, 0x45, 0xed, 0x6b, 0xc8, 0xa1, 0x59, 0xce, 0xa9, 0x37, 0xe0, 0x87, 0x1a,
	0x43, 0x04, 0xbd, 0x0f, 0x45, 0xdf, 0x13, 0xde, 0xf3, 0x80, 0xbf, 0xb0, 0x37, 0x10, 0xfd, 0xff,
	0xcb, 0x27, 0x28, 0xed, 0xa1, 0xc6, 0xe6, 0x48, 0x69, 0x5f, 0xf0, 0x97, 0xc2, 0xde, 0x5c, 0x65,
	0xbf, 0xcb, 0x5f, 0x0a, 0x69, 0x5f, 0x22, 0xe8, 0x2e, 0x58, 0x63, 0xee, 0x07, 0x9e, 0xbd, 0x85,
	0xd0, 0xff, 0x65, 0xa1, 0x6d, 0xa9, 0x3a, 0xd4, 0x98, 0xc2, 0x34, 0x4a, 0x50, 0xe8, 0x47, 0xa1,
	0xe0, 0xa1, 0x70, 0xc6, 0x50, 0x5e, 0x7a, 0x11, 0xba, 0x09, 0x46, 0xe0, 0xe3, 0x9b, 0x95, 0x98,
	0x11, 0xf8, 0xf4, 0x0e, 0x98, 0xd2, 0x8a, 0x6d, 0x6c, 0xeb, 0x3b, 0x9b, 0x57, 0x2e, 0x70, 0x31,
	0xe1, 0x0c, 0xf5, 0x94, 0x82, 0x19, 0x7a, 0x63, 0x6e, 0xe7, 0x90, 0x89, 0x6b, 0x29, 0x0b, 0xfa,
	0x51, 0x68, 0x9b, 0x4a, 0x26, 0xd7, 0xce, 0x8f, 0x3a, 0x10, 0xe4, 0x1e, 0x44, 0x61, 0xc8, 0xfb,
	0x22, 0x88, 0xc2, 0xe9, 0x95, 0x43, 0xa5, 0x31, 0xe9, 0xb5, 0x91, 0x18, 0x93, 0xfe, 0x39, 0x70,
	0xad, 0x1f, 0x8d, 0x66, 0xe3, 0xb0, 0x11, 0x09, 0x11, 0x8d, 0x93, 0x83, 0x32, 0x32, 0x5a, 0x81,
	0x62, 0x1c, 0xbd, 0x60, 0xc1, 0x60, 0x28, 0x92, 0x43, 0xe7, 0x7b, 0x7a, 0x1d, 0xac, 0x20, 0x0c,
	0x79, 0x6c, 0x5b, 0xa8, 0x50, 0x1b, 0xa7, 0x03, 0xd7, 0x2f, 0xdf, 0xe6, 0x38, 0x98, 0x0a, 0x99,
	0x10, 0x53, 0x11, 0xcf, 0xfa, 0x62, 0x16, 0x73, 0x5b, 0xdf, 0xce, 0xed, 0x94, 0xf7, 0x6e, 0x66,
	0x7d, 0x5f, 0x62, 0xb0, 0x05, 0xd6, 0x69, 0x24, 0xee, 0xa9, 0xe7, 0x54, 0xc6, 0x6a, 0x50, 0x50,
	0x79, 0x36, 0x4d, 0x4c, 0xad, 0x4e, 0xc6, 0x14, 0xe4, 0xdc, 0x07, 0x40, 0xb9, 0x62, 0xdf, 0x81,
	0x7c, 0x0f, 0x77, 0x09, 0x79, 0x33, 0x4b, 0x66, 0x89, 0xd6, 0xf9, 0x53, 0x87, 0xd2, 0x3c, 0xed,
	0x68, 0x0d, 0xac, 0xa9, 0xb8, 0x18, 0x71, 0x7c, 0xd5, 0xcd, 0x3d, 0xfb, 0x6a, 0x66, 0xd6, 0xce,
	0xa4, 0x9e, 0x29, 0x18, 0xfd, 0x6c, 0xd9, 0x61, 0x03, 0x53, 0xe8, 0xf6, 0x5a, 0x87, 0xe5, 0xbd,
	0x96, 0x9c, 0xa6, 0xbb, 0xf3, 0x2b, 0xe6, 0x56, 0x25, 0x9f, 0xc2, 0xa7, 0xf7, 0xdc, 0x07, 0x0b,
	0x4f, 0xa6, 0x25, 0xb0, 0xdc, 0xf6, 0x69, 0xf7, 0x31, 0xd1, 0x68, 0x11, 0xcc, 0x6e, 0xfd, 0xec,
	0x88, 0xe8, 0xf4, 0x1a, 0x14, 0x1b, 0x9d, 0xce, 0x51, 0xbb, 0xce, 0x8e, 0x88, 0x41, 0x0b, 0x90,
	0x3b, 0x73, 0xbb, 0x24, 0xe7, 0xfc, 0xae, 0xc3, 0x66, 0xb6, 0x0e, 0xe9, 0x7e, 0xd6, 0xc3, 0xdb,
	0x6b, 0xea, 0xf5, 0x3f, 0x74, 0x73, 0x7f, 0x11, 0x47, 0xe5, 0xe7, 0xcd, 0x55, 0x71, 0x54, 0xb4,
	0x79, 0x30, 0xed, 0xd4, 0xdd, 0x2d, 0x28, 0xb7, 0xeb, 0xad, 0x93, 0x27, 0x67, 0x07, 0xcc, 0x75,
	0x4f, 0x88, 0xe6, 0x6c, 0xc1, 0x46, 0xa6, 0xf0, 0x9d, 0x1f, 0xac, 0x24, 0x82, 0xb2, 0xb0, 0x65,
	0x11, 0x60, 0xe9, 0xab, 0xb2, 0x50, 0x45, 0x3e, 0x8f, 0xaa, 0xb1, 0x2a, 0xaa, 0x92, 0x96, 0x75,
	0xf7, 0x01, 0x94, 0xc6, 0x5e, 0xac, 0x02, 0x90, 0xdc, 0x79, 0x15, 0xa7, 0x2d, 0x31, 0x6c, 0x01,
	0xa5, 0x55, 0x00, 0x11, 0x0d, 0x06, 0x23, 0xee, 0xf5, 0x46, 0x1c, 0x4b, 0xa9, 0xc8, 0x96, 0x24,
	0xf4, 0x21, 0x80, 0x04, 0xf3, 0x58, 0x76, 0x00, 0xac, 0xa8, 0x2b, 0x01, 0x98, 0x1b, 0x56, 0x20,
	0xb6, 0x44, 0xa0, 0xb7, 0xa0, 0xd4, 0x1f, 0xf2, 0xfe, 0x33, 0xb4, 0x9e, 0x47, 0xeb, 0x0b, 0x01,
	0xb5, 0xa1, 0x80, 0x1b, 0xee, 0xdb, 0x05, 0xd4, 0xa5, 0xdb, 0xca, 0x03, 0xb0, 0xf0, 0xaa, 0xf4,
	0x7d, 0xb0, 0xf0, 0xb2, 0x49, 0x49, 0xdc, 0x58, 0x73, 0x34, 0x53, 0xa8, 0xca, 0x2f, 0x3a, 0x98,
	0x72, 0x2f, 0x73, 0x26, 0xf6, 0xc2, 0x01, 0x4f, 0x86, 0xc2, 0xba, 0x2b, 0xd7, 0x98, 0x04, 0x31,
	0x85, 0xa5, 0x1f, 0x64, 0x5a, 0xe0, 0xad, 0x75, 0x9c, 0x45, 0x33, 0xac, 0xec, 0x82, 0x85, 0x16,
	0x64, 0x0c, 0x9f, 0xc6, 0xd1, 0x18, 0x8f, 0xb3, 0x18, 0xae, 0x65, 0xb3, 0x13, 0x11, 0x1a, 0xb3,
	0x98, 0x21, 0x22, 0x67, 0x17, 0x4c, 0x7c, 0x14, 0x0b, 0xf4, 0x33, 0xa2, 0xc9, 0x94, 0x3f, 0x6a,
	0x34, 0x89, 0x2e, 0xf7, 0x2d, 0x62, 0xc8, 0x4f, 0x83, 0xe4, 0xe4, 0xa7, 0x4e, 0x4c, 0xe7, 0xd3,
	0x34, 0x9b, 0x2c, 0xd0, 0x27, 0x44, 0xa3, 0x79, 0x30, 0x86, 0x1f, 0x12, 0x1d, 0xbf, 0x7b, 0xc4,
	0xc0, 0xef, 0x3e, 0xc9, 0xe1, 0xf7, 0x3e, 0x31, 0x65, 0x8d, 0x7d, 0x3b, 0x8b, 0x04, 0x27, 0x96,
	0x53, 0x03, 0x58, 0x84, 0x43, 0x56, 0x5c, 0x18, 0x85, 0x9c, 0x68, 0x14, 0x20, 0x1f, 0xce, 0xc6,
	0x3d, 0x1e, 0x13, 0x5d, 0xae, 0x7b, 0xb3, 0xd1, 0x88, 0x0b, 0x62, 0x38, 0xed, 0xa4, 0x0b, 0xe1,
	0xe8, 0x90, 0x9e, 0x8c, 0x82, 0xf0, 0x59, 0x9a, 0x8d, 0x72, 0x4d, 0x77, 0xc1, 0x1c, 0x73, 0xe1,
	0x25, 0x75, 0x74, 0x63, 0xc5, 0xc4, 0x69, 0x73, 0xe1, 0x31, 0x04, 0x39, 0x2f, 0x93, 0x02, 0x9e,
	0xcb, 0xe7, 0x23, 0x43, 0x5f, 0x1a, 0x19, 0xb7, 0xe4, 0x20, 0x16, 0xbc, 0xee, 0xfb, 0xdc, 0x4f,
	0xda, 0xff, 0x42, 0x20, 0x19, 0xd3, 0xe0, 0x3b, 0x35, 0x64, 0x2c, 0x86, 0x6b, 0xba, 0x0d, 0x65,
	0x9f, 0x4f, 0xfb, 0x71, 0x30, 0x91, 0x35, 0x9b, 0xb4, 0xfd, 0x65, 0x91, 0xf3, 0x9b, 0x0e, 0x65,
	0xd9, 0xf0, 0xce, 0x79, 0x3c, 0x0d, 0xa2, 0xf0, 0xca, 0xb4, 0xb1, 0xa1, 0x30, 0xf1, 0x62, 0x1e,
	0x8a, 0xa9, 0x6d, 0x6c, 0xe7, 0x76, 0x4a, 0x2c, 0xdd, 0xfe, 0xdb, 0xa1, 0xb6, 0xd4, 0xa2, 0xad,
	0x7f, 0x6a, 0xd1, 0xb4, 0x06, 0xa6, 0x74, 0x06, 0x53, 0xbe, 0xbc, 0x57, 0xa9, 0xa9, 0xdf, 0x99,
	0x5a, 0xfa, 0x3b, 0x53, 0xeb, 0xa6, 0xbf, 0x33, 0x0c, 0x71, 0xf2, 0xac, 0xd9, 0x94, 0xc7, 0x58,
	0x06, 0x25, 0x86, 0x6b, 0xe7, 0x23, 0xd8, 0x90, 0xce, 0xa0, 0x61, 0xac, 0xd5, 0x77, 0xc0, 0x0a,
	0x04, 0x1f, 0xaf, 0x1b, 0x0f, 0x4a, 0xe9, 0x3c, 0x84, 0xad, 0xa5, 0x37, 0x40, 0xe2, 0xdd, 0x2c,
	0x71, 0x31, 0x94, 0x96, 0x80, 0x29, 0xfd, 0x1e, 0x14, 0xa5, 0x14, 0x79, 0x6f, 0x67, 0x79, 0x1b,
	0x19, 0x5e, 0x4a, 0xf8, 0xde, 0x00, 0x13, 0x07, 0xd1, 0xaa, 0xd9, 0x2e, 0xdf, 0xd4, 0xc8, 0x46,
	0x3d, 0x08, 0x03, 0x11, 0x78, 0x22, 0x8a, 0x93, 0xc7, 0x5e, 0x08, 0xe6, 0xbf, 0x20, 0xe6, 0xa5,
	0x5f, 0x10, 0x1c, 0x62, 0xd9, 0x5f, 0x10, 0x8c, 0x8c, 0xb5, 0x14, 0x99, 0x0a, 0x14, 0xbd, 0xb8,
	0x3f, 0x0c, 0x9e, 0x73, 0x3f, 0x69, 0x34, 0xf3, 0x3d, 0x7d, 0x17, 0x8a, 0xfd, 0x61, 0x30, 0xf2,
	0x63, 0x1e, 0xda, 0x85, 0x55, 0xae, 0xcc, 0xd5, 0xce, 0x27, 0x49, 0x8d, 0x96, 0xa1, 0x70, 0xca,
	0x5a, 0xe7, 0xf5, 0xae, 0x4b, 0x34, 0xba, 0x01, 0x25, 0xe6, 0xd6, 0x9b, 0x4f, 0x3a, 0x27, 0xc7,
	0x8f, 0x55, 0xed, 0x9c, 0x3e, 0x6a, 0x1c, 0xb7, 0x0e, 0x88, 0x21, 0xab, 0xab, 0x73, 0xea, 0x9e,
	0x90, 0xdc, 0xdd, 0x6f, 0xd2, 0x96, 0x2e, 0xe9, 0x1b, 0x50, 0x6a, 0xd6, 0xcf, 0x0e, 0x1b, 0x9d,
	0x3a, 0x6b, 0xaa, 0xa9, 0x77, 0x5a, 0xff, 0xc2, 0x55, 0x53, 0xaf, 0x59, 0xef, 0xd6, 0xcf, 0x5b,
	0xee, 0x97, 0x8a, 0xdd, 0x75, 0xbf, 0xea, 0x92, 0x9c, 0x5c, 0x7d, 0xde, 0x3a, 0x76, 0x89, 0x89,
	0x27, 0xb7, 0x0e, 0xba, 0x8f, 0x98, 0x4b, 0x2c, 0x59, 0xd5, 0xe7, 0xad, 0xa6, 0xdb, 0x21, 0xf9,
	0x46, 0xf5, 0xd7, 0xd7, 0x55, 0xfd, 0xd5, 0xeb, 0xaa, 0xfe, 0xd7, 0xeb, 0xaa, 0xfe, 0xd3, 0x9b,
	0xaa, 0xf6, 0xea, 0x4d, 0x55, 0xfb, 0xe3, 0x4d, 0x55, 0xfb, 0xda, 0xec, 0x47, 0x31, 0xef, 0xe5,
	0x31, 0xb9, 0xf6, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x37, 0x80, 0xf4, 0x7c, 0x50, 0x0b, 0x00,
	0x00,
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		{
			size := m.Content.Size()
			i -= size
			if _, err := m.Content.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Block_Dashboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block_Dashboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Dashboard != nil {
		{
			size, err := m.Dashboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Block_Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block_Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Block_Dataview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block_Dataview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Dataview != nil {
		{
			size, err := m.Dataview.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Block_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *Block_Media) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block_Media) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Media != nil {
		{
			size, err := m.Media.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintPage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockConnections) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockConnections) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockConnections) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RowRight) > 0 {
		i -= len(m.RowRight)
		copy(dAtA[i:], m.RowRight)
		i = encodeVarintPage(dAtA, i, uint64(len(m.RowRight)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ColumnBottom) > 0 {
		i -= len(m.ColumnBottom)
		copy(dAtA[i:], m.ColumnBottom)
		i = encodeVarintPage(dAtA, i, uint64(len(m.ColumnBottom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Next) > 0 {
		i -= len(m.Next)
		copy(dAtA[i:], m.Next)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Next)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockConnectionsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockConnectionsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockConnectionsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Structure) > 0 {
		for iNdEx := len(m.Structure) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Structure[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeadersList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeadersList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeadersList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlocksList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlocksList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Blocks != nil {
		{
			size, err := m.Blocks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Structure != nil {
		{
			size, err := m.Structure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Style != 0 {
		i = encodeVarintPage(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockDashboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockDashboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockDashboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Headers != nil {
		{
			size, err := m.Headers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Structure != nil {
		{
			size, err := m.Structure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Style != 0 {
		i = encodeVarintPage(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockDataview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockDataview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockDataview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BlockText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Checked {
		i--
		if m.Checked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Checkable {
		i--
		if m.Checkable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.MarkerType != 0 {
		i = encodeVarintPage(dAtA, i, uint64(m.MarkerType))
		i--
		dAtA[i] = 0x28
	}
	if m.Toggleable {
		i--
		if m.Toggleable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MarksList != nil {
		{
			size, err := m.MarksList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Style != 0 {
		i = encodeVarintPage(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockText_Marks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockText_Marks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockText_Marks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Marks) > 0 {
		for iNdEx := len(m.Marks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Marks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockText_Mark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockText_Mark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockText_Mark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintPage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockText_Mark_Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockText_Mark_Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockText_Mark_Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != 0 {
		i = encodeVarintPage(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintPage(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockMediaMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockMediaMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockMediaMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.Size_ != 0 {
		i = encodeVarintPage(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DateAdded) > 0 {
		i -= len(m.DateAdded)
		copy(dAtA[i:], m.DateAdded)
		i = encodeVarintPage(dAtA, i, uint64(len(m.DateAdded)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintPage(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Date != nil {
		{
			size, err := m.Date.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Parents) > 0 {
		for iNdEx := len(m.Parents) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parents[iNdEx])
			copy(dAtA[i:], m.Parents[iNdEx])
			i = encodeVarintPage(dAtA, i, uint64(len(m.Parents[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageBlockList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageBlockList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageBlockList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PageVersionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageVersionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageVersionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PageList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintPage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Initiator) > 0 {
		i -= len(m.Initiator)
		copy(dAtA[i:], m.Initiator)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Initiator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPage(dAtA []byte, offset int, v uint64) int {
	offset -= sovPage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *Block_Dashboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dashboard != nil {
		l = m.Dashboard.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}
func (m *Block_Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}
func (m *Block_Dataview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dataview != nil {
		l = m.Dataview.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}
func (m *Block_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}
func (m *Block_Media) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}
func (m *BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPage(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}

func (m *BlockConnections) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	l = len(m.Next)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	l = len(m.ColumnBottom)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	l = len(m.RowRight)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}

func (m *BlockConnectionsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Structure) > 0 {
		for _, e := range m.Structure {
			l = e.Size()
			n += 1 + l + sovPage(uint64(l))
		}
	}
	return n
}

func (m *BlockHeadersList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovPage(uint64(l))
		}
	}
	return n
}

func (m *BlocksList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovPage(uint64(l))
		}
	}
	return n
}

func (m *BlockPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Style != 0 {
		n += 1 + sovPage(uint64(m.Style))
	}
	if m.Structure != nil {
		l = m.Structure.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Blocks != nil {
		l = m.Blocks.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}

func (m *BlockDashboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Style != 0 {
		n += 1 + sovPage(uint64(m.Style))
	}
	if m.Structure != nil {
		l = m.Structure.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Headers != nil {
		l = m.Headers.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}

func (m *BlockDataview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BlockText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Style != 0 {
		n += 1 + sovPage(uint64(m.Style))
	}
	if m.MarksList != nil {
		l = m.MarksList.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Toggleable {
		n += 2
	}
	if m.MarkerType != 0 {
		n += 1 + sovPage(uint64(m.MarkerType))
	}
	if m.Checkable {
		n += 2
	}
	if m.Checked {
		n += 2
	}
	return n
}

func (m *BlockText_Marks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Marks) > 0 {
		for _, e := range m.Marks {
			l = e.Size()
			n += 1 + l + sovPage(uint64(l))
		}
	}
	return n
}

func (m *BlockText_Mark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPage(uint64(m.Type))
	}
	return n
}

func (m *BlockText_Mark_Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovPage(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovPage(uint64(m.To))
	}
	return n
}

func (m *BlockMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}

func (m *BlockMediaMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	l = len(m.DateAdded)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovPage(uint64(m.Size_))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}

func (m *PageVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	if len(m.Parents) > 0 {
		for _, s := range m.Parents {
			l = len(s)
			n += 1 + l + sovPage(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovPage(uint64(l))
		}
	}
	if m.Date != nil {
		l = m.Date.Size()
		n += 1 + l + sovPage(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	return n
}

func (m *PageBlockList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPage(uint64(l))
		}
	}
	return n
}

func (m *PageVersionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPage(uint64(l))
		}
	}
	return n
}

func (m *PageList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPage(uint64(l))
		}
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	l = len(m.Initiator)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPage(uint64(m.Type))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovPage(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovPage(uint64(l))
		}
	}
	return n
}

func sovPage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPage(x uint64) (n int) {
	return sovPage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dashboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockDashboard{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &Block_Dashboard{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockPage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &Block_Page{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockDataview{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &Block_Dataview{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockText{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &Block_Text{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockMedia{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &Block_Media{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BlockType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockConnections) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockConnections: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockConnections: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Next = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnBottom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnBottom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowRight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowRight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockConnectionsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockConnectionsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockConnectionsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Structure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Structure = append(m.Structure, &BlockConnections{})
			if err := m.Structure[len(m.Structure)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeadersList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeadersList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeadersList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &BlockHeader{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlocksList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlocksList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlocksList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= BlockPage_Style(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Structure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Structure == nil {
				m.Structure = &BlockConnectionsList{}
			}
			if err := m.Structure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blocks == nil {
				m.Blocks = &BlocksList{}
			}
			if err := m.Blocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockDashboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockDashboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockDashboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= BlockDashboard_Style(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Structure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Structure == nil {
				m.Structure = &BlockConnectionsList{}
			}
			if err := m.Structure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = &BlockHeadersList{}
			}
			if err := m.Headers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockDataview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockDataview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockDataview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= BlockText_Style(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarksList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarksList == nil {
				m.MarksList = &BlockText_Marks{}
			}
			if err := m.MarksList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toggleable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Toggleable = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerType", wireType)
			}
			m.MarkerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarkerType |= BlockText_MarkerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Checkable = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Checked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockText_Marks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Marks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Marks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Marks = append(m.Marks, &BlockText_Mark{})
			if err := m.Marks[len(m.Marks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockText_Mark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &BlockText_Mark_Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BlockText_Mark_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockText_Mark_Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &BlockMediaMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockMediaMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockMediaMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockMediaMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateAdded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateAdded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parents = append(m.Parents, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Date == nil {
				m.Date = &timestamp.Timestamp{}
			}
			if err := m.Date.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageBlockList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageBlockList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageBlockList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Block{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageVersionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageVersionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageVersionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &PageVersion{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Page{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initiator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Page_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Page{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPage = fmt.Errorf("proto: unexpected end of group")
)
