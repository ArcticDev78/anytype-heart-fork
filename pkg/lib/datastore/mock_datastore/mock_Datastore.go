// Code generated by mockery v2.26.1. DO NOT EDIT.

package mock_datastore

import (
	context "context"

	app "github.com/anyproto/any-sync/app"
	badger "github.com/dgraph-io/badger/v3"
	mock "github.com/stretchr/testify/mock"
)

// MockDatastore is an autogenerated mock type for the Datastore type
type MockDatastore struct {
	mock.Mock
}

type MockDatastore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatastore) EXPECT() *MockDatastore_Expecter {
	return &MockDatastore_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockDatastore) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDatastore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatastore_Expecter) Close(ctx interface{}) *MockDatastore_Close_Call {
	return &MockDatastore_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockDatastore_Close_Call) Run(run func(ctx context.Context)) *MockDatastore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatastore_Close_Call) Return(err error) *MockDatastore_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatastore_Close_Call) RunAndReturn(run func(context.Context) error) *MockDatastore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockDatastore) Init(a *app.App) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockDatastore_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockDatastore_Expecter) Init(a interface{}) *MockDatastore_Init_Call {
	return &MockDatastore_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockDatastore_Init_Call) Run(run func(a *app.App)) *MockDatastore_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockDatastore_Init_Call) Return(err error) *MockDatastore_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatastore_Init_Call) RunAndReturn(run func(*app.App) error) *MockDatastore_Init_Call {
	_c.Call.Return(run)
	return _c
}

// LocalStorage provides a mock function with given fields:
func (_m *MockDatastore) LocalStorage() (*badger.DB, error) {
	ret := _m.Called()

	var r0 *badger.DB
	var r1 error
	if rf, ok := ret.Get(0).(func() (*badger.DB, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *badger.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*badger.DB)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatastore_LocalStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalStorage'
type MockDatastore_LocalStorage_Call struct {
	*mock.Call
}

// LocalStorage is a helper method to define mock.On call
func (_e *MockDatastore_Expecter) LocalStorage() *MockDatastore_LocalStorage_Call {
	return &MockDatastore_LocalStorage_Call{Call: _e.mock.On("LocalStorage")}
}

func (_c *MockDatastore_LocalStorage_Call) Run(run func()) *MockDatastore_LocalStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatastore_LocalStorage_Call) Return(_a0 *badger.DB, _a1 error) *MockDatastore_LocalStorage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatastore_LocalStorage_Call) RunAndReturn(run func() (*badger.DB, error)) *MockDatastore_LocalStorage_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockDatastore) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDatastore_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockDatastore_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockDatastore_Expecter) Name() *MockDatastore_Name_Call {
	return &MockDatastore_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockDatastore_Name_Call) Run(run func()) *MockDatastore_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatastore_Name_Call) Return(name string) *MockDatastore_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockDatastore_Name_Call) RunAndReturn(run func() string) *MockDatastore_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockDatastore) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockDatastore_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatastore_Expecter) Run(ctx interface{}) *MockDatastore_Run_Call {
	return &MockDatastore_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockDatastore_Run_Call) Run(run func(ctx context.Context)) *MockDatastore_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatastore_Run_Call) Return(err error) *MockDatastore_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatastore_Run_Call) RunAndReturn(run func(context.Context) error) *MockDatastore_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SpaceStorage provides a mock function with given fields:
func (_m *MockDatastore) SpaceStorage() (*badger.DB, error) {
	ret := _m.Called()

	var r0 *badger.DB
	var r1 error
	if rf, ok := ret.Get(0).(func() (*badger.DB, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *badger.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*badger.DB)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatastore_SpaceStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpaceStorage'
type MockDatastore_SpaceStorage_Call struct {
	*mock.Call
}

// SpaceStorage is a helper method to define mock.On call
func (_e *MockDatastore_Expecter) SpaceStorage() *MockDatastore_SpaceStorage_Call {
	return &MockDatastore_SpaceStorage_Call{Call: _e.mock.On("SpaceStorage")}
}

func (_c *MockDatastore_SpaceStorage_Call) Run(run func()) *MockDatastore_SpaceStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatastore_SpaceStorage_Call) Return(_a0 *badger.DB, _a1 error) *MockDatastore_SpaceStorage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatastore_SpaceStorage_Call) RunAndReturn(run func() (*badger.DB, error)) *MockDatastore_SpaceStorage_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDatastore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDatastore creates a new instance of MockDatastore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDatastore(t mockConstructorTestingTNewMockDatastore) *MockDatastore {
	mock := &MockDatastore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
