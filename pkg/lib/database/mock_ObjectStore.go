// Code generated by mockery v2.26.1. DO NOT EDIT.

package database

import (
	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
	mock "github.com/stretchr/testify/mock"
)

// MockObjectStore is an autogenerated mock type for the ObjectStore type
type MockObjectStore struct {
	mock.Mock
}

type MockObjectStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectStore) EXPECT() *MockObjectStore_Expecter {
	return &MockObjectStore_Expecter{mock: &_m.Mock}
}

// GetAggregatedOptions provides a mock function with given fields: relationKey
func (_m *MockObjectStore) GetAggregatedOptions(relationKey string) ([]*model.RelationOption, error) {
	ret := _m.Called(relationKey)

	var r0 []*model.RelationOption
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.RelationOption, error)); ok {
		return rf(relationKey)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.RelationOption); ok {
		r0 = rf(relationKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RelationOption)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(relationKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetAggregatedOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAggregatedOptions'
type MockObjectStore_GetAggregatedOptions_Call struct {
	*mock.Call
}

// GetAggregatedOptions is a helper method to define mock.On call
//   - relationKey string
func (_e *MockObjectStore_Expecter) GetAggregatedOptions(relationKey interface{}) *MockObjectStore_GetAggregatedOptions_Call {
	return &MockObjectStore_GetAggregatedOptions_Call{Call: _e.mock.On("GetAggregatedOptions", relationKey)}
}

func (_c *MockObjectStore_GetAggregatedOptions_Call) Run(run func(relationKey string)) *MockObjectStore_GetAggregatedOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetAggregatedOptions_Call) Return(options []*model.RelationOption, err error) *MockObjectStore_GetAggregatedOptions_Call {
	_c.Call.Return(options, err)
	return _c
}

func (_c *MockObjectStore_GetAggregatedOptions_Call) RunAndReturn(run func(string) ([]*model.RelationOption, error)) *MockObjectStore_GetAggregatedOptions_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRaw provides a mock function with given fields: filters, limit, offset
func (_m *MockObjectStore) QueryRaw(filters *Filters, limit int, offset int) ([]Record, error) {
	ret := _m.Called(filters, limit, offset)

	var r0 []Record
	var r1 error
	if rf, ok := ret.Get(0).(func(*Filters, int, int) ([]Record, error)); ok {
		return rf(filters, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(*Filters, int, int) []Record); ok {
		r0 = rf(filters, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Record)
		}
	}

	if rf, ok := ret.Get(1).(func(*Filters, int, int) error); ok {
		r1 = rf(filters, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_QueryRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRaw'
type MockObjectStore_QueryRaw_Call struct {
	*mock.Call
}

// QueryRaw is a helper method to define mock.On call
//   - filters *Filters
//   - limit int
//   - offset int
func (_e *MockObjectStore_Expecter) QueryRaw(filters interface{}, limit interface{}, offset interface{}) *MockObjectStore_QueryRaw_Call {
	return &MockObjectStore_QueryRaw_Call{Call: _e.mock.On("QueryRaw", filters, limit, offset)}
}

func (_c *MockObjectStore_QueryRaw_Call) Run(run func(filters *Filters, limit int, offset int)) *MockObjectStore_QueryRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Filters), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockObjectStore_QueryRaw_Call) Return(_a0 []Record, _a1 error) *MockObjectStore_QueryRaw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_QueryRaw_Call) RunAndReturn(run func(*Filters, int, int) ([]Record, error)) *MockObjectStore_QueryRaw_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockObjectStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockObjectStore creates a new instance of MockObjectStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockObjectStore(t mockConstructorTestingTNewMockObjectStore) *MockObjectStore {
	mock := &MockObjectStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
