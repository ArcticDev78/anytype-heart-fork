// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/lib/pb/model/protos/localstore.proto

package model

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PageInfoType int32

const (
	PageInfo_Page        PageInfoType = 0
	PageInfo_Home        PageInfoType = 1
	PageInfo_ProfilePage PageInfoType = 2
	PageInfo_Archive     PageInfoType = 3
	PageInfo_Set         PageInfoType = 5
)

var PageInfoType_name = map[int32]string{
	0: "Page",
	1: "Home",
	2: "ProfilePage",
	3: "Archive",
	5: "Set",
}

var PageInfoType_value = map[string]int32{
	"Page":        0,
	"Home":        1,
	"ProfilePage": 2,
	"Archive":     3,
	"Set":         5,
}

func (x PageInfoType) String() string {
	return proto.EnumName(PageInfoType_name, int32(x))
}

func (PageInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c35df71910469a5, []int{0, 0}
}

type PageInfo struct {
	Id              string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details         *types.Struct `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Snippet         string        `protobuf:"bytes,3,opt,name=snippet,proto3" json:"snippet,omitempty"`
	HasInboundLinks bool          `protobuf:"varint,6,opt,name=hasInboundLinks,proto3" json:"hasInboundLinks,omitempty"`
	PageType        PageInfoType  `protobuf:"varint,7,opt,name=pageType,proto3,enum=anytype.model.PageInfoType" json:"pageType,omitempty"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c35df71910469a5, []int{0}
}
func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PageInfo) GetDetails() *types.Struct {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *PageInfo) GetSnippet() string {
	if m != nil {
		return m.Snippet
	}
	return ""
}

func (m *PageInfo) GetHasInboundLinks() bool {
	if m != nil {
		return m.HasInboundLinks
	}
	return false
}

func (m *PageInfo) GetPageType() PageInfoType {
	if m != nil {
		return m.PageType
	}
	return PageInfo_Page
}

type PageDetails struct {
	Details *types.Struct `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *PageDetails) Reset()         { *m = PageDetails{} }
func (m *PageDetails) String() string { return proto.CompactTextString(m) }
func (*PageDetails) ProtoMessage()    {}
func (*PageDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c35df71910469a5, []int{1}
}
func (m *PageDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageDetails.Merge(m, src)
}
func (m *PageDetails) XXX_Size() int {
	return m.Size()
}
func (m *PageDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_PageDetails.DiscardUnknown(m)
}

var xxx_messageInfo_PageDetails proto.InternalMessageInfo

func (m *PageDetails) GetDetails() *types.Struct {
	if m != nil {
		return m.Details
	}
	return nil
}

type PageLinks struct {
	InboundIDs  []string `protobuf:"bytes,1,rep,name=inboundIDs,proto3" json:"inboundIDs,omitempty"`
	OutboundIDs []string `protobuf:"bytes,2,rep,name=outboundIDs,proto3" json:"outboundIDs,omitempty"`
}

func (m *PageLinks) Reset()         { *m = PageLinks{} }
func (m *PageLinks) String() string { return proto.CompactTextString(m) }
func (*PageLinks) ProtoMessage()    {}
func (*PageLinks) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c35df71910469a5, []int{2}
}
func (m *PageLinks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageLinks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageLinks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageLinks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageLinks.Merge(m, src)
}
func (m *PageLinks) XXX_Size() int {
	return m.Size()
}
func (m *PageLinks) XXX_DiscardUnknown() {
	xxx_messageInfo_PageLinks.DiscardUnknown(m)
}

var xxx_messageInfo_PageLinks proto.InternalMessageInfo

func (m *PageLinks) GetInboundIDs() []string {
	if m != nil {
		return m.InboundIDs
	}
	return nil
}

func (m *PageLinks) GetOutboundIDs() []string {
	if m != nil {
		return m.OutboundIDs
	}
	return nil
}

type PageLinksInfo struct {
	Inbound  []*PageInfo `protobuf:"bytes,1,rep,name=inbound,proto3" json:"inbound,omitempty"`
	Outbound []*PageInfo `protobuf:"bytes,2,rep,name=outbound,proto3" json:"outbound,omitempty"`
}

func (m *PageLinksInfo) Reset()         { *m = PageLinksInfo{} }
func (m *PageLinksInfo) String() string { return proto.CompactTextString(m) }
func (*PageLinksInfo) ProtoMessage()    {}
func (*PageLinksInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c35df71910469a5, []int{3}
}
func (m *PageLinksInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageLinksInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageLinksInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageLinksInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageLinksInfo.Merge(m, src)
}
func (m *PageLinksInfo) XXX_Size() int {
	return m.Size()
}
func (m *PageLinksInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageLinksInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageLinksInfo proto.InternalMessageInfo

func (m *PageLinksInfo) GetInbound() []*PageInfo {
	if m != nil {
		return m.Inbound
	}
	return nil
}

func (m *PageLinksInfo) GetOutbound() []*PageInfo {
	if m != nil {
		return m.Outbound
	}
	return nil
}

type PageInfoWithLinks struct {
	Id    string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info  *PageInfo      `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Links *PageLinksInfo `protobuf:"bytes,3,opt,name=links,proto3" json:"links,omitempty"`
}

func (m *PageInfoWithLinks) Reset()         { *m = PageInfoWithLinks{} }
func (m *PageInfoWithLinks) String() string { return proto.CompactTextString(m) }
func (*PageInfoWithLinks) ProtoMessage()    {}
func (*PageInfoWithLinks) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c35df71910469a5, []int{4}
}
func (m *PageInfoWithLinks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfoWithLinks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfoWithLinks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfoWithLinks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfoWithLinks.Merge(m, src)
}
func (m *PageInfoWithLinks) XXX_Size() int {
	return m.Size()
}
func (m *PageInfoWithLinks) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfoWithLinks.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfoWithLinks proto.InternalMessageInfo

func (m *PageInfoWithLinks) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PageInfoWithLinks) GetInfo() *PageInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *PageInfoWithLinks) GetLinks() *PageLinksInfo {
	if m != nil {
		return m.Links
	}
	return nil
}

type PageInfoWithOutboundLinks struct {
	Id            string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info          *PageInfo   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	OutboundLinks []*PageInfo `protobuf:"bytes,3,rep,name=outboundLinks,proto3" json:"outboundLinks,omitempty"`
}

func (m *PageInfoWithOutboundLinks) Reset()         { *m = PageInfoWithOutboundLinks{} }
func (m *PageInfoWithOutboundLinks) String() string { return proto.CompactTextString(m) }
func (*PageInfoWithOutboundLinks) ProtoMessage()    {}
func (*PageInfoWithOutboundLinks) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c35df71910469a5, []int{5}
}
func (m *PageInfoWithOutboundLinks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfoWithOutboundLinks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfoWithOutboundLinks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfoWithOutboundLinks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfoWithOutboundLinks.Merge(m, src)
}
func (m *PageInfoWithOutboundLinks) XXX_Size() int {
	return m.Size()
}
func (m *PageInfoWithOutboundLinks) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfoWithOutboundLinks.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfoWithOutboundLinks proto.InternalMessageInfo

func (m *PageInfoWithOutboundLinks) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PageInfoWithOutboundLinks) GetInfo() *PageInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *PageInfoWithOutboundLinks) GetOutboundLinks() []*PageInfo {
	if m != nil {
		return m.OutboundLinks
	}
	return nil
}

type PageInfoWithOutboundLinksIDs struct {
	Id            string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info          *PageInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	OutboundLinks []string  `protobuf:"bytes,3,rep,name=outboundLinks,proto3" json:"outboundLinks,omitempty"`
}

func (m *PageInfoWithOutboundLinksIDs) Reset()         { *m = PageInfoWithOutboundLinksIDs{} }
func (m *PageInfoWithOutboundLinksIDs) String() string { return proto.CompactTextString(m) }
func (*PageInfoWithOutboundLinksIDs) ProtoMessage()    {}
func (*PageInfoWithOutboundLinksIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c35df71910469a5, []int{6}
}
func (m *PageInfoWithOutboundLinksIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfoWithOutboundLinksIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfoWithOutboundLinksIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfoWithOutboundLinksIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfoWithOutboundLinksIDs.Merge(m, src)
}
func (m *PageInfoWithOutboundLinksIDs) XXX_Size() int {
	return m.Size()
}
func (m *PageInfoWithOutboundLinksIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfoWithOutboundLinksIDs.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfoWithOutboundLinksIDs proto.InternalMessageInfo

func (m *PageInfoWithOutboundLinksIDs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PageInfoWithOutboundLinksIDs) GetInfo() *PageInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *PageInfoWithOutboundLinksIDs) GetOutboundLinks() []string {
	if m != nil {
		return m.OutboundLinks
	}
	return nil
}

func init() {
	proto.RegisterEnum("anytype.model.PageInfoType", PageInfoType_name, PageInfoType_value)
	proto.RegisterType((*PageInfo)(nil), "anytype.model.PageInfo")
	proto.RegisterType((*PageDetails)(nil), "anytype.model.PageDetails")
	proto.RegisterType((*PageLinks)(nil), "anytype.model.PageLinks")
	proto.RegisterType((*PageLinksInfo)(nil), "anytype.model.PageLinksInfo")
	proto.RegisterType((*PageInfoWithLinks)(nil), "anytype.model.PageInfoWithLinks")
	proto.RegisterType((*PageInfoWithOutboundLinks)(nil), "anytype.model.PageInfoWithOutboundLinks")
	proto.RegisterType((*PageInfoWithOutboundLinksIDs)(nil), "anytype.model.PageInfoWithOutboundLinksIDs")
}

func init() {
	proto.RegisterFile("pkg/lib/pb/model/protos/localstore.proto", fileDescriptor_9c35df71910469a5)
}

var fileDescriptor_9c35df71910469a5 = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x6b, 0x9c, 0x40,
	0x14, 0xc6, 0x77, 0x74, 0x13, 0xdd, 0x27, 0x9b, 0xd8, 0xb9, 0xd4, 0x96, 0x45, 0x44, 0x7a, 0x90,
	0x16, 0x94, 0x6c, 0x2e, 0xbd, 0x14, 0x9a, 0x92, 0x43, 0x17, 0x5a, 0x1a, 0x4c, 0xa1, 0xd0, 0x9b,
	0xae, 0xb3, 0xee, 0x10, 0xe3, 0x88, 0xce, 0xb6, 0xec, 0xb1, 0xd0, 0x73, 0xe9, 0xad, 0xff, 0x52,
	0x8f, 0x39, 0xf6, 0x58, 0x76, 0xff, 0x91, 0x32, 0xe3, 0x2a, 0x46, 0x36, 0xa1, 0xd0, 0x9e, 0xd4,
	0x37, 0x3f, 0x3f, 0xbf, 0xef, 0xbd, 0x87, 0xe0, 0x15, 0x57, 0x69, 0x90, 0xd1, 0x38, 0x28, 0xe2,
	0xe0, 0x9a, 0x25, 0x24, 0x0b, 0x8a, 0x92, 0x71, 0x56, 0x05, 0x19, 0x9b, 0x47, 0x59, 0xc5, 0x59,
	0x49, 0x7c, 0x59, 0xc1, 0xe3, 0x28, 0x5f, 0xf3, 0x75, 0x41, 0x7c, 0x89, 0x3d, 0x9e, 0xa4, 0x8c,
	0xa5, 0x19, 0xa9, 0xf1, 0x78, 0xb5, 0x08, 0x2a, 0x5e, 0xae, 0xe6, 0xbc, 0x86, 0xdd, 0x6f, 0x0a,
	0xe8, 0x17, 0x51, 0x4a, 0x66, 0xf9, 0x82, 0xe1, 0x23, 0x50, 0x68, 0x62, 0x21, 0x07, 0x79, 0xa3,
	0x50, 0xa1, 0x09, 0x3e, 0x01, 0x2d, 0x21, 0x3c, 0xa2, 0x59, 0x65, 0x29, 0x0e, 0xf2, 0x8c, 0xe9,
	0x43, 0xbf, 0x16, 0xf3, 0x1b, 0x31, 0xff, 0x52, 0x8a, 0x85, 0x0d, 0x87, 0x2d, 0xd0, 0xaa, 0x9c,
	0x16, 0x05, 0xe1, 0x96, 0x2a, 0x75, 0x9a, 0x47, 0xec, 0xc1, 0xf1, 0x32, 0xaa, 0x66, 0x79, 0xcc,
	0x56, 0x79, 0xf2, 0x86, 0xe6, 0x57, 0x95, 0x75, 0xe8, 0x20, 0x4f, 0x0f, 0xfb, 0x65, 0xfc, 0x1c,
	0xf4, 0x22, 0x4a, 0xc9, 0xfb, 0x75, 0x41, 0x2c, 0xcd, 0x41, 0xde, 0xd1, 0x74, 0xe2, 0xdf, 0xca,
	0xe4, 0x37, 0x8e, 0x7d, 0xc1, 0x84, 0x2d, 0xed, 0x9e, 0xc1, 0x50, 0x5c, 0xb1, 0x0e, 0x43, 0x81,
	0x98, 0x03, 0x71, 0xf7, 0x9a, 0x5d, 0x13, 0x13, 0xe1, 0x63, 0x30, 0x2e, 0x4a, 0xb6, 0xa0, 0x19,
	0x91, 0x47, 0x0a, 0x36, 0x40, 0x3b, 0x2b, 0xe7, 0x4b, 0xfa, 0x89, 0x98, 0x2a, 0xd6, 0x40, 0xbd,
	0x24, 0xdc, 0x3c, 0x70, 0x5f, 0x82, 0x21, 0xce, 0xcf, 0x77, 0x79, 0x3a, 0x2d, 0x40, 0x7f, 0xd7,
	0x02, 0xf7, 0x2d, 0x8c, 0x84, 0x42, 0x9d, 0xc5, 0x06, 0xa0, 0x75, 0xb6, 0xd9, 0xb9, 0x90, 0x50,
	0xbd, 0x51, 0xd8, 0xa9, 0x60, 0x07, 0x0c, 0xb6, 0xe2, 0x2d, 0xa0, 0x48, 0xa0, 0x5b, 0x72, 0x3f,
	0xc3, 0xb8, 0x95, 0x93, 0x53, 0x3a, 0x01, 0x6d, 0x27, 0x20, 0xf5, 0x84, 0xa5, 0xfd, 0xdd, 0x09,
	0x1b, 0x0e, 0x9f, 0x82, 0xde, 0x48, 0xca, 0x4f, 0xdc, 0xf3, 0x4e, 0x0b, 0xba, 0x5f, 0x11, 0x3c,
	0x68, 0xca, 0x1f, 0x28, 0x5f, 0xd6, 0x81, 0xfa, 0x3b, 0xf2, 0x0c, 0x86, 0x34, 0x5f, 0xb0, 0x76,
	0x41, 0xee, 0x90, 0x95, 0x10, 0x9e, 0xc2, 0x41, 0x26, 0x27, 0xaf, 0x4a, 0x7a, 0xdf, 0x58, 0xdb,
	0x9c, 0x61, 0x8d, 0xba, 0x3f, 0x10, 0x3c, 0xea, 0xda, 0x78, 0xb7, 0xf3, 0xf7, 0x1f, 0xec, 0xbc,
	0x80, 0x31, 0xeb, 0xaa, 0x59, 0xea, 0xfd, 0xbd, 0xb9, 0x4d, 0xbb, 0x5f, 0x10, 0x4c, 0xee, 0x74,
	0x26, 0x86, 0xfb, 0x4f, 0xe6, 0x9e, 0xec, 0x33, 0x37, 0xea, 0x79, 0x78, 0xf5, 0xf4, 0xe7, 0xc6,
	0x46, 0x37, 0x1b, 0x1b, 0xfd, 0xde, 0xd8, 0xe8, 0xfb, 0xd6, 0x1e, 0xdc, 0x6c, 0xed, 0xc1, 0xaf,
	0xad, 0x3d, 0xf8, 0x68, 0xf6, 0x7f, 0x18, 0xf1, 0xa1, 0x5c, 0xd9, 0xd3, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x21, 0x65, 0xd0, 0xee, 0x4b, 0x04, 0x00, 0x00,
}

func (m *PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageType != 0 {
		i = encodeVarintLocalstore(dAtA, i, uint64(m.PageType))
		i--
		dAtA[i] = 0x38
	}
	if m.HasInboundLinks {
		i--
		if m.HasInboundLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Snippet) > 0 {
		i -= len(m.Snippet)
		copy(dAtA[i:], m.Snippet)
		i = encodeVarintLocalstore(dAtA, i, uint64(len(m.Snippet)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalstore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLocalstore(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalstore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageLinks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageLinks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageLinks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutboundIDs) > 0 {
		for iNdEx := len(m.OutboundIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OutboundIDs[iNdEx])
			copy(dAtA[i:], m.OutboundIDs[iNdEx])
			i = encodeVarintLocalstore(dAtA, i, uint64(len(m.OutboundIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.InboundIDs) > 0 {
		for iNdEx := len(m.InboundIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InboundIDs[iNdEx])
			copy(dAtA[i:], m.InboundIDs[iNdEx])
			i = encodeVarintLocalstore(dAtA, i, uint64(len(m.InboundIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PageLinksInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageLinksInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageLinksInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Outbound) > 0 {
		for iNdEx := len(m.Outbound) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outbound[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocalstore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Inbound) > 0 {
		for iNdEx := len(m.Inbound) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inbound[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocalstore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PageInfoWithLinks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfoWithLinks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfoWithLinks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Links != nil {
		{
			size, err := m.Links.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalstore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalstore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLocalstore(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageInfoWithOutboundLinks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfoWithOutboundLinks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfoWithOutboundLinks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutboundLinks) > 0 {
		for iNdEx := len(m.OutboundLinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundLinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocalstore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalstore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLocalstore(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageInfoWithOutboundLinksIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfoWithOutboundLinksIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfoWithOutboundLinksIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutboundLinks) > 0 {
		for iNdEx := len(m.OutboundLinks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OutboundLinks[iNdEx])
			copy(dAtA[i:], m.OutboundLinks[iNdEx])
			i = encodeVarintLocalstore(dAtA, i, uint64(len(m.OutboundLinks[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalstore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLocalstore(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocalstore(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocalstore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLocalstore(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovLocalstore(uint64(l))
	}
	l = len(m.Snippet)
	if l > 0 {
		n += 1 + l + sovLocalstore(uint64(l))
	}
	if m.HasInboundLinks {
		n += 2
	}
	if m.PageType != 0 {
		n += 1 + sovLocalstore(uint64(m.PageType))
	}
	return n
}

func (m *PageDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovLocalstore(uint64(l))
	}
	return n
}

func (m *PageLinks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InboundIDs) > 0 {
		for _, s := range m.InboundIDs {
			l = len(s)
			n += 1 + l + sovLocalstore(uint64(l))
		}
	}
	if len(m.OutboundIDs) > 0 {
		for _, s := range m.OutboundIDs {
			l = len(s)
			n += 1 + l + sovLocalstore(uint64(l))
		}
	}
	return n
}

func (m *PageLinksInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inbound) > 0 {
		for _, e := range m.Inbound {
			l = e.Size()
			n += 1 + l + sovLocalstore(uint64(l))
		}
	}
	if len(m.Outbound) > 0 {
		for _, e := range m.Outbound {
			l = e.Size()
			n += 1 + l + sovLocalstore(uint64(l))
		}
	}
	return n
}

func (m *PageInfoWithLinks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLocalstore(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovLocalstore(uint64(l))
	}
	if m.Links != nil {
		l = m.Links.Size()
		n += 1 + l + sovLocalstore(uint64(l))
	}
	return n
}

func (m *PageInfoWithOutboundLinks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLocalstore(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovLocalstore(uint64(l))
	}
	if len(m.OutboundLinks) > 0 {
		for _, e := range m.OutboundLinks {
			l = e.Size()
			n += 1 + l + sovLocalstore(uint64(l))
		}
	}
	return n
}

func (m *PageInfoWithOutboundLinksIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLocalstore(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovLocalstore(uint64(l))
	}
	if len(m.OutboundLinks) > 0 {
		for _, s := range m.OutboundLinks {
			l = len(s)
			n += 1 + l + sovLocalstore(uint64(l))
		}
	}
	return n
}

func sovLocalstore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocalstore(x uint64) (n int) {
	return sovLocalstore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &types.Struct{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snippet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasInboundLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasInboundLinks = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageType", wireType)
			}
			m.PageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageType |= PageInfoType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocalstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &types.Struct{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageLinks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageLinks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageLinks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundIDs = append(m.InboundIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundIDs = append(m.OutboundIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageLinksInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageLinksInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageLinksInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inbound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inbound = append(m.Inbound, &PageInfo{})
			if err := m.Inbound[len(m.Inbound)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outbound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outbound = append(m.Outbound, &PageInfo{})
			if err := m.Outbound[len(m.Outbound)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageInfoWithLinks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfoWithLinks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfoWithLinks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &PageInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Links == nil {
				m.Links = &PageLinksInfo{}
			}
			if err := m.Links.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageInfoWithOutboundLinks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfoWithOutboundLinks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfoWithOutboundLinks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &PageInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundLinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundLinks = append(m.OutboundLinks, &PageInfo{})
			if err := m.OutboundLinks[len(m.OutboundLinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageInfoWithOutboundLinksIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfoWithOutboundLinksIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfoWithOutboundLinksIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &PageInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundLinks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundLinks = append(m.OutboundLinks, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLocalstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocalstore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocalstore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocalstore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocalstore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocalstore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocalstore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocalstore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocalstore = fmt.Errorf("proto: unexpected end of group")
)
