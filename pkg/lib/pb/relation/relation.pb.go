// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/lib/pb/relation/protos/relation.proto

package relation

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RelationFormat describes how the underlying data is stored in the google.protobuf.Value and how it should be validated/sanitized
type RelationFormat int32

const (
	RelationFormat_description RelationFormat = 0
	RelationFormat_title       RelationFormat = 1
	RelationFormat_number      RelationFormat = 2
	RelationFormat_status      RelationFormat = 3
	RelationFormat_tag         RelationFormat = 11
	RelationFormat_date        RelationFormat = 4
	RelationFormat_file        RelationFormat = 5
	RelationFormat_checkbox    RelationFormat = 6
	RelationFormat_url         RelationFormat = 7
	RelationFormat_email       RelationFormat = 8
	RelationFormat_phone       RelationFormat = 9
	RelationFormat_emoji       RelationFormat = 10
	RelationFormat_object      RelationFormat = 100
)

var RelationFormat_name = map[int32]string{
	0:   "description",
	1:   "title",
	2:   "number",
	3:   "status",
	11:  "tag",
	4:   "date",
	5:   "file",
	6:   "checkbox",
	7:   "url",
	8:   "email",
	9:   "phone",
	10:  "emoji",
	100: "object",
}

var RelationFormat_value = map[string]int32{
	"description": 0,
	"title":       1,
	"number":      2,
	"status":      3,
	"tag":         11,
	"date":        4,
	"file":        5,
	"checkbox":    6,
	"url":         7,
	"email":       8,
	"phone":       9,
	"emoji":       10,
	"object":      100,
}

func (x RelationFormat) String() string {
	return proto.EnumName(RelationFormat_name, int32(x))
}

func (RelationFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d7f8dc729d740ffd, []int{0}
}

type ObjectTypeLayout int32

const (
	ObjectType_basic      ObjectTypeLayout = 0
	ObjectType_profile    ObjectTypeLayout = 1
	ObjectType_action     ObjectTypeLayout = 2
	ObjectType_set        ObjectTypeLayout = 3
	ObjectType_objectType ObjectTypeLayout = 4
	ObjectType_relation   ObjectTypeLayout = 5
	ObjectType_file       ObjectTypeLayout = 6
	ObjectType_dashboard  ObjectTypeLayout = 7
	ObjectType_database   ObjectTypeLayout = 8
)

var ObjectTypeLayout_name = map[int32]string{
	0: "basic",
	1: "profile",
	2: "action",
	3: "set",
	4: "objectType",
	5: "relation",
	6: "file",
	7: "dashboard",
	8: "database",
}

var ObjectTypeLayout_value = map[string]int32{
	"basic":      0,
	"profile":    1,
	"action":     2,
	"set":        3,
	"objectType": 4,
	"relation":   5,
	"file":       6,
	"dashboard":  7,
	"database":   8,
}

func (x ObjectTypeLayout) String() string {
	return proto.EnumName(ObjectTypeLayout_name, int32(x))
}

func (ObjectTypeLayout) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d7f8dc729d740ffd, []int{0, 0}
}

type RelationRelationDataSource int32

const (
	Relation_details RelationRelationDataSource = 0
	Relation_derived RelationRelationDataSource = 1
	Relation_account RelationRelationDataSource = 2
)

var RelationRelationDataSource_name = map[int32]string{
	0: "details",
	1: "derived",
	2: "account",
}

var RelationRelationDataSource_value = map[string]int32{
	"details": 0,
	"derived": 1,
	"account": 2,
}

func (x RelationRelationDataSource) String() string {
	return proto.EnumName(RelationRelationDataSource_name, int32(x))
}

func (RelationRelationDataSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d7f8dc729d740ffd, []int{3, 0}
}

type RelationOptionScope int32

const (
	RelationOption_local    RelationOptionScope = 0
	RelationOption_relation RelationOptionScope = 1
	RelationOption_format   RelationOptionScope = 2
)

var RelationOptionScope_name = map[int32]string{
	0: "local",
	1: "relation",
	2: "format",
}

var RelationOptionScope_value = map[string]int32{
	"local":    0,
	"relation": 1,
	"format":   2,
}

func (x RelationOptionScope) String() string {
	return proto.EnumName(RelationOptionScope_name, int32(x))
}

func (RelationOptionScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d7f8dc729d740ffd, []int{3, 0, 0}
}

type ObjectType struct {
	Url         string           `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Relations   []*Relation      `protobuf:"bytes,3,rep,name=relations,proto3" json:"relations,omitempty"`
	Layout      ObjectTypeLayout `protobuf:"varint,4,opt,name=layout,proto3,enum=anytype.relation.ObjectTypeLayout" json:"layout,omitempty"`
	IconEmoji   string           `protobuf:"bytes,5,opt,name=iconEmoji,proto3" json:"iconEmoji,omitempty"`
	Description string           `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ObjectType) Reset()         { *m = ObjectType{} }
func (m *ObjectType) String() string { return proto.CompactTextString(m) }
func (*ObjectType) ProtoMessage()    {}
func (*ObjectType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7f8dc729d740ffd, []int{0}
}
func (m *ObjectType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectType.Merge(m, src)
}
func (m *ObjectType) XXX_Size() int {
	return m.Size()
}
func (m *ObjectType) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectType.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectType proto.InternalMessageInfo

func (m *ObjectType) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ObjectType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectType) GetRelations() []*Relation {
	if m != nil {
		return m.Relations
	}
	return nil
}

func (m *ObjectType) GetLayout() ObjectTypeLayout {
	if m != nil {
		return m.Layout
	}
	return ObjectType_basic
}

func (m *ObjectType) GetIconEmoji() string {
	if m != nil {
		return m.IconEmoji
	}
	return ""
}

func (m *ObjectType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Layout struct {
	Id                ObjectTypeLayout `protobuf:"varint,1,opt,name=id,proto3,enum=anytype.relation.ObjectTypeLayout" json:"id,omitempty"`
	Name              string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RequiredRelations []*Relation      `protobuf:"bytes,3,rep,name=requiredRelations,proto3" json:"requiredRelations,omitempty"`
}

func (m *Layout) Reset()         { *m = Layout{} }
func (m *Layout) String() string { return proto.CompactTextString(m) }
func (*Layout) ProtoMessage()    {}
func (*Layout) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7f8dc729d740ffd, []int{1}
}
func (m *Layout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Layout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Layout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Layout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Layout.Merge(m, src)
}
func (m *Layout) XXX_Size() int {
	return m.Size()
}
func (m *Layout) XXX_DiscardUnknown() {
	xxx_messageInfo_Layout.DiscardUnknown(m)
}

var xxx_messageInfo_Layout proto.InternalMessageInfo

func (m *Layout) GetId() ObjectTypeLayout {
	if m != nil {
		return m.Id
	}
	return ObjectType_basic
}

func (m *Layout) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Layout) GetRequiredRelations() []*Relation {
	if m != nil {
		return m.RequiredRelations
	}
	return nil
}

type RelationWithValue struct {
	Relation *Relation    `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Value    *types.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RelationWithValue) Reset()         { *m = RelationWithValue{} }
func (m *RelationWithValue) String() string { return proto.CompactTextString(m) }
func (*RelationWithValue) ProtoMessage()    {}
func (*RelationWithValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7f8dc729d740ffd, []int{2}
}
func (m *RelationWithValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationWithValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationWithValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationWithValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationWithValue.Merge(m, src)
}
func (m *RelationWithValue) XXX_Size() int {
	return m.Size()
}
func (m *RelationWithValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationWithValue.DiscardUnknown(m)
}

var xxx_messageInfo_RelationWithValue proto.InternalMessageInfo

func (m *RelationWithValue) GetRelation() *Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

func (m *RelationWithValue) GetValue() *types.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// Relation describe the human-interpreted relation type. It may be something like "Date of creation, format=date" or "Assignee, format=objectId, objectType=person"
type Relation struct {
	// Key under which the value is stored in the map. Must be unique for the object type.
	// It usually auto-generated bsonid, but also may be something human-readable in case of prebuilt types.
	Key          string                     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Format       RelationFormat             `protobuf:"varint,2,opt,name=format,proto3,enum=anytype.relation.RelationFormat" json:"format,omitempty"`
	Name         string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	DefaultValue *types.Value               `protobuf:"bytes,4,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	DataSource   RelationRelationDataSource `protobuf:"varint,5,opt,name=dataSource,proto3,enum=anytype.relation.RelationRelationDataSource" json:"dataSource,omitempty"`
	Hidden       bool                       `protobuf:"varint,6,opt,name=hidden,proto3" json:"hidden,omitempty"`
	ReadOnly     bool                       `protobuf:"varint,7,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
	Multi        bool                       `protobuf:"varint,8,opt,name=multi,proto3" json:"multi,omitempty"`
	ObjectTypes  []string                   `protobuf:"bytes,9,rep,name=objectTypes,proto3" json:"objectTypes,omitempty"`
	// index 10, 11 was used in internal-only builds. Can be reused, but may break some test accounts
	SelectDict  []*RelationOption `protobuf:"bytes,12,rep,name=selectDict,proto3" json:"selectDict,omitempty"`
	MaxCount    int32             `protobuf:"varint,13,opt,name=maxCount,proto3" json:"maxCount,omitempty"`
	Description string            `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Relation) Reset()         { *m = Relation{} }
func (m *Relation) String() string { return proto.CompactTextString(m) }
func (*Relation) ProtoMessage()    {}
func (*Relation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7f8dc729d740ffd, []int{3}
}
func (m *Relation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation.Merge(m, src)
}
func (m *Relation) XXX_Size() int {
	return m.Size()
}
func (m *Relation) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation.DiscardUnknown(m)
}

var xxx_messageInfo_Relation proto.InternalMessageInfo

func (m *Relation) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Relation) GetFormat() RelationFormat {
	if m != nil {
		return m.Format
	}
	return RelationFormat_description
}

func (m *Relation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Relation) GetDefaultValue() *types.Value {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (m *Relation) GetDataSource() RelationRelationDataSource {
	if m != nil {
		return m.DataSource
	}
	return Relation_details
}

func (m *Relation) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

func (m *Relation) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *Relation) GetMulti() bool {
	if m != nil {
		return m.Multi
	}
	return false
}

func (m *Relation) GetObjectTypes() []string {
	if m != nil {
		return m.ObjectTypes
	}
	return nil
}

func (m *Relation) GetSelectDict() []*RelationOption {
	if m != nil {
		return m.SelectDict
	}
	return nil
}

func (m *Relation) GetMaxCount() int32 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func (m *Relation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RelationOption struct {
	Id    string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text  string              `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Color string              `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Scope RelationOptionScope `protobuf:"varint,4,opt,name=scope,proto3,enum=anytype.relation.RelationOptionScope" json:"scope,omitempty"`
}

func (m *RelationOption) Reset()         { *m = RelationOption{} }
func (m *RelationOption) String() string { return proto.CompactTextString(m) }
func (*RelationOption) ProtoMessage()    {}
func (*RelationOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7f8dc729d740ffd, []int{3, 0}
}
func (m *RelationOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationOption.Merge(m, src)
}
func (m *RelationOption) XXX_Size() int {
	return m.Size()
}
func (m *RelationOption) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationOption.DiscardUnknown(m)
}

var xxx_messageInfo_RelationOption proto.InternalMessageInfo

func (m *RelationOption) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RelationOption) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *RelationOption) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *RelationOption) GetScope() RelationOptionScope {
	if m != nil {
		return m.Scope
	}
	return RelationOption_local
}

type Relations struct {
	Relations []*Relation `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (m *Relations) Reset()         { *m = Relations{} }
func (m *Relations) String() string { return proto.CompactTextString(m) }
func (*Relations) ProtoMessage()    {}
func (*Relations) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7f8dc729d740ffd, []int{4}
}
func (m *Relations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relations.Merge(m, src)
}
func (m *Relations) XXX_Size() int {
	return m.Size()
}
func (m *Relations) XXX_DiscardUnknown() {
	xxx_messageInfo_Relations.DiscardUnknown(m)
}

var xxx_messageInfo_Relations proto.InternalMessageInfo

func (m *Relations) GetRelations() []*Relation {
	if m != nil {
		return m.Relations
	}
	return nil
}

func init() {
	proto.RegisterEnum("anytype.relation.RelationFormat", RelationFormat_name, RelationFormat_value)
	proto.RegisterEnum("anytype.relation.ObjectTypeLayout", ObjectTypeLayout_name, ObjectTypeLayout_value)
	proto.RegisterEnum("anytype.relation.RelationRelationDataSource", RelationRelationDataSource_name, RelationRelationDataSource_value)
	proto.RegisterEnum("anytype.relation.RelationOptionScope", RelationOptionScope_name, RelationOptionScope_value)
	proto.RegisterType((*ObjectType)(nil), "anytype.relation.ObjectType")
	proto.RegisterType((*Layout)(nil), "anytype.relation.Layout")
	proto.RegisterType((*RelationWithValue)(nil), "anytype.relation.RelationWithValue")
	proto.RegisterType((*Relation)(nil), "anytype.relation.Relation")
	proto.RegisterType((*RelationOption)(nil), "anytype.relation.Relation.Option")
	proto.RegisterType((*Relations)(nil), "anytype.relation.Relations")
}

func init() {
	proto.RegisterFile("pkg/lib/pb/relation/protos/relation.proto", fileDescriptor_d7f8dc729d740ffd)
}

var fileDescriptor_d7f8dc729d740ffd = []byte{
	// 813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0x8e, 0xed, 0xb5, 0x13, 0xbf, 0x6c, 0xc3, 0x74, 0x40, 0x95, 0xb5, 0xaa, 0xa2, 0x60, 0x0e,
	0x2c, 0xa8, 0x75, 0xa4, 0x54, 0x42, 0x15, 0x15, 0x07, 0xa0, 0x45, 0x1c, 0x40, 0x2b, 0xb9, 0x08,
	0x24, 0x6e, 0xe3, 0x99, 0xd9, 0xcd, 0x6c, 0x26, 0x1e, 0x63, 0x8f, 0xab, 0x35, 0xbf, 0x82, 0x3b,
	0x67, 0xce, 0xfc, 0x0d, 0x8e, 0xe5, 0xc6, 0x11, 0xed, 0x8a, 0xff, 0x81, 0x66, 0x1c, 0x3b, 0x49,
	0xd3, 0x2d, 0xf4, 0xf6, 0xde, 0xf3, 0xf7, 0xde, 0x7c, 0xf3, 0xe6, 0x7b, 0xcf, 0xf0, 0x51, 0xb1,
	0xba, 0x98, 0x4b, 0x91, 0xcd, 0x8b, 0x6c, 0x5e, 0x72, 0x49, 0xb4, 0x50, 0xf9, 0xbc, 0x28, 0x95,
	0x56, 0x55, 0xef, 0x27, 0xd6, 0xc7, 0x88, 0xe4, 0x8d, 0x6e, 0x0a, 0x9e, 0x74, 0xf1, 0x93, 0xfb,
	0x17, 0x4a, 0x5d, 0x48, 0xde, 0xe2, 0xb3, 0xfa, 0x7c, 0x5e, 0xe9, 0xb2, 0xa6, 0xba, 0xc5, 0xc7,
	0xff, 0xb8, 0x00, 0x67, 0xd9, 0x25, 0xa7, 0xfa, 0xbb, 0xa6, 0xe0, 0x18, 0x81, 0x57, 0x97, 0x32,
	0x72, 0x66, 0xce, 0x69, 0x98, 0x1a, 0x13, 0x63, 0x38, 0xca, 0xc9, 0x9a, 0x47, 0xae, 0x0d, 0x59,
	0x1b, 0x3f, 0x86, 0xb0, 0x2b, 0x5f, 0x45, 0xde, 0xcc, 0x3b, 0x1d, 0x2f, 0x4e, 0x92, 0x57, 0x0f,
	0x4e, 0xd2, 0x8d, 0x91, 0x6e, 0xc1, 0xf8, 0x09, 0x04, 0x92, 0x34, 0xaa, 0xd6, 0xd1, 0xd1, 0xcc,
	0x39, 0x9d, 0x2c, 0x3e, 0x38, 0x4c, 0xdb, 0xb2, 0x49, 0xbe, 0xb1, 0xd0, 0x74, 0x93, 0x82, 0xef,
	0x43, 0x28, 0xa8, 0xca, 0x9f, 0xad, 0xd5, 0xa5, 0x88, 0x7c, 0xcb, 0x67, 0x1b, 0xc0, 0x33, 0x18,
	0x33, 0x5e, 0xd1, 0x52, 0x14, 0xa6, 0x4c, 0x14, 0xd8, 0xef, 0xbb, 0xa1, 0xf8, 0x67, 0x08, 0xda,
	0x8a, 0x38, 0x04, 0x3f, 0x23, 0x95, 0xa0, 0x68, 0x80, 0xc7, 0x30, 0x2c, 0x4a, 0x75, 0x2e, 0x24,
	0x47, 0x0e, 0x06, 0x08, 0x08, 0x35, 0x58, 0xe4, 0xe2, 0x21, 0x78, 0x15, 0xd7, 0xc8, 0xc3, 0x13,
	0x00, 0xd5, 0x73, 0x42, 0x47, 0xf8, 0x18, 0x46, 0x1d, 0x59, 0xe4, 0xe3, 0x11, 0x1c, 0xd9, 0xe4,
	0x00, 0xdf, 0x81, 0x90, 0x91, 0x6a, 0x99, 0x29, 0x52, 0x32, 0x34, 0x34, 0x30, 0x46, 0x34, 0xc9,
	0x48, 0xc5, 0xd1, 0x28, 0xfe, 0xd5, 0xe9, 0x0f, 0x7f, 0x04, 0xae, 0x60, 0xb6, 0xc5, 0xff, 0xf3,
	0xfe, 0xae, 0x60, 0xaf, 0x7d, 0x86, 0xaf, 0xe1, 0x6e, 0xc9, 0x7f, 0xaa, 0x45, 0xc9, 0x59, 0xfa,
	0x16, 0xcf, 0x71, 0x98, 0x14, 0x37, 0x70, 0xb7, 0x73, 0x7e, 0x10, 0x7a, 0xf9, 0x3d, 0x91, 0x35,
	0xc7, 0x9f, 0x6c, 0xef, 0x69, 0xd9, 0xbe, 0xb9, 0x6a, 0x8f, 0xc5, 0x0f, 0xc0, 0x7f, 0x61, 0x0a,
	0x58, 0xae, 0xe3, 0xc5, 0xbd, 0xa4, 0x15, 0x60, 0xd2, 0x09, 0x30, 0xb1, 0xe5, 0xd3, 0x16, 0x14,
	0xff, 0xe9, 0xc3, 0xa8, 0x2b, 0x62, 0xe4, 0xb7, 0xe2, 0x4d, 0x27, 0xbf, 0x15, 0x6f, 0xf0, 0x63,
	0x08, 0xce, 0x55, 0xb9, 0x26, 0xda, 0x56, 0x9b, 0x2c, 0x66, 0xb7, 0x53, 0xf8, 0xca, 0xe2, 0xd2,
	0x0d, 0xbe, 0xef, 0x98, 0xb7, 0xd3, 0xb1, 0x4f, 0xe1, 0x98, 0xf1, 0x73, 0x52, 0x4b, 0x6d, 0x39,
	0x58, 0x11, 0xde, 0xce, 0x70, 0x0f, 0x8b, 0xbf, 0x05, 0x30, 0xef, 0xf9, 0x5c, 0xd5, 0x25, 0xe5,
	0x56, 0x7e, 0x93, 0xc5, 0xc3, 0xdb, 0xd9, 0xf4, 0xc6, 0xd3, 0x3e, 0x29, 0xdd, 0x29, 0x80, 0xef,
	0x41, 0xb0, 0x14, 0x8c, 0xf1, 0x56, 0xa9, 0xa3, 0x74, 0xe3, 0xe1, 0x13, 0xd3, 0x75, 0xc2, 0xce,
	0x72, 0xd9, 0x44, 0x43, 0xfb, 0xa5, 0xf7, 0xf1, 0x7b, 0xe0, 0xaf, 0x6b, 0xa9, 0x45, 0x34, 0xb2,
	0x1f, 0x5a, 0xc7, 0x08, 0x7f, 0xab, 0xcf, 0x2a, 0x0a, 0x67, 0x9e, 0x11, 0xfe, 0x4e, 0x08, 0x7f,
	0x0e, 0x50, 0x71, 0xc9, 0xa9, 0x7e, 0x2a, 0xa8, 0x8e, 0x8e, 0xad, 0x42, 0xde, 0x7f, 0x03, 0xf5,
	0x33, 0x3b, 0x2f, 0xe9, 0x4e, 0x92, 0xa1, 0xb5, 0x26, 0x57, 0x5f, 0xaa, 0x3a, 0xd7, 0xd1, 0x9d,
	0x99, 0x73, 0xea, 0xa7, 0xbd, 0xff, 0xea, 0xe4, 0x4d, 0x0e, 0x26, 0xef, 0xe4, 0x77, 0x07, 0x82,
	0xb6, 0x28, 0x9e, 0xf4, 0xea, 0x0f, 0x3b, 0x61, 0x6b, 0x7e, 0xa5, 0x3b, 0x61, 0x1b, 0xdb, 0xdc,
	0x93, 0x2a, 0xa9, 0xca, 0xcd, 0xdb, 0xb5, 0x0e, 0xfe, 0x0c, 0xfc, 0x8a, 0xaa, 0x82, 0x6f, 0x56,
	0xc7, 0x87, 0xff, 0x79, 0x81, 0xe4, 0xb9, 0x81, 0xa7, 0x6d, 0x56, 0xfc, 0x00, 0x7c, 0xeb, 0x9b,
	0xe1, 0x97, 0x8a, 0x12, 0x89, 0x06, 0x7b, 0xa3, 0x6c, 0xa7, 0xbf, 0xd5, 0x0e, 0x72, 0xe3, 0x27,
	0x80, 0x0f, 0x1f, 0xd0, 0x2c, 0x0b, 0xc6, 0x35, 0x11, 0xb2, 0x6a, 0x37, 0x07, 0xe3, 0xa5, 0x78,
	0xc1, 0x19, 0x72, 0x8c, 0x43, 0x28, 0x35, 0xed, 0x40, 0x6e, 0xfc, 0x0c, 0xc2, 0x7e, 0xb6, 0xf6,
	0x97, 0xa5, 0xf3, 0x16, 0xcb, 0xf2, 0xe3, 0xdf, 0x1c, 0x98, 0xec, 0x8b, 0x1b, 0xbf, 0xb3, 0xd7,
	0x6a, 0x34, 0x30, 0x97, 0xd1, 0x42, 0x77, 0xcb, 0x2b, 0xaf, 0xd7, 0x19, 0x2f, 0x91, 0x6b, 0xec,
	0x4a, 0x13, 0x5d, 0x57, 0xc8, 0x33, 0x8b, 0x4c, 0x93, 0x0b, 0x34, 0x36, 0xab, 0x8a, 0x11, 0x6d,
	0x56, 0x58, 0xb7, 0xb4, 0x7c, 0xd3, 0x01, 0xba, 0xe4, 0x74, 0x95, 0xa9, 0x2b, 0x14, 0x18, 0x68,
	0x5d, 0x4a, 0x34, 0x34, 0x65, 0xf9, 0x9a, 0x08, 0x89, 0x46, 0xc6, 0x2c, 0x96, 0x2a, 0xe7, 0x28,
	0x6c, 0xa3, 0xea, 0x52, 0x20, 0x30, 0x07, 0xb4, 0x0a, 0x43, 0xec, 0x8b, 0x87, 0x7f, 0x5c, 0x4f,
	0x9d, 0x97, 0xd7, 0x53, 0xe7, 0xef, 0xeb, 0xa9, 0xf3, 0xcb, 0xcd, 0x74, 0xf0, 0xf2, 0x66, 0x3a,
	0xf8, 0xeb, 0x66, 0x3a, 0xf8, 0xf1, 0xdd, 0xd7, 0xfc, 0xb8, 0xb2, 0xc0, 0x8e, 0xd9, 0xa3, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xa6, 0xff, 0x2b, 0xd6, 0x06, 0x00, 0x00,
}

func (m *ObjectType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IconEmoji) > 0 {
		i -= len(m.IconEmoji)
		copy(dAtA[i:], m.IconEmoji)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.IconEmoji)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Layout != 0 {
		i = encodeVarintRelation(dAtA, i, uint64(m.Layout))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Relations) > 0 {
		for iNdEx := len(m.Relations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Layout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Layout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Layout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequiredRelations) > 0 {
		for iNdEx := len(m.RequiredRelations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequiredRelations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRelation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelationWithValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationWithValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationWithValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Relation != nil {
		{
			size, err := m.Relation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Relation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x72
	}
	if m.MaxCount != 0 {
		i = encodeVarintRelation(dAtA, i, uint64(m.MaxCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.SelectDict) > 0 {
		for iNdEx := len(m.SelectDict) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SelectDict[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.ObjectTypes) > 0 {
		for iNdEx := len(m.ObjectTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ObjectTypes[iNdEx])
			copy(dAtA[i:], m.ObjectTypes[iNdEx])
			i = encodeVarintRelation(dAtA, i, uint64(len(m.ObjectTypes[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Multi {
		i--
		if m.Multi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ReadOnly {
		i--
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Hidden {
		i--
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DataSource != 0 {
		i = encodeVarintRelation(dAtA, i, uint64(m.DataSource))
		i--
		dAtA[i] = 0x28
	}
	if m.DefaultValue != nil {
		{
			size, err := m.DefaultValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Format != 0 {
		i = encodeVarintRelation(dAtA, i, uint64(m.Format))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelationOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scope != 0 {
		i = encodeVarintRelation(dAtA, i, uint64(m.Scope))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Relations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for iNdEx := len(m.Relations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelation(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObjectType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovRelation(uint64(l))
		}
	}
	if m.Layout != 0 {
		n += 1 + sovRelation(uint64(m.Layout))
	}
	l = len(m.IconEmoji)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *Layout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRelation(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	if len(m.RequiredRelations) > 0 {
		for _, e := range m.RequiredRelations {
			l = e.Size()
			n += 1 + l + sovRelation(uint64(l))
		}
	}
	return n
}

func (m *RelationWithValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *Relation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.Format != 0 {
		n += 1 + sovRelation(uint64(m.Format))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.DefaultValue != nil {
		l = m.DefaultValue.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.DataSource != 0 {
		n += 1 + sovRelation(uint64(m.DataSource))
	}
	if m.Hidden {
		n += 2
	}
	if m.ReadOnly {
		n += 2
	}
	if m.Multi {
		n += 2
	}
	if len(m.ObjectTypes) > 0 {
		for _, s := range m.ObjectTypes {
			l = len(s)
			n += 1 + l + sovRelation(uint64(l))
		}
	}
	if len(m.SelectDict) > 0 {
		for _, e := range m.SelectDict {
			l = e.Size()
			n += 1 + l + sovRelation(uint64(l))
		}
	}
	if m.MaxCount != 0 {
		n += 1 + sovRelation(uint64(m.MaxCount))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *RelationOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.Scope != 0 {
		n += 1 + sovRelation(uint64(m.Scope))
	}
	return n
}

func (m *Relations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovRelation(uint64(l))
		}
	}
	return n
}

func sovRelation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelation(x uint64) (n int) {
	return sovRelation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObjectType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &Relation{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layout", wireType)
			}
			m.Layout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layout |= ObjectTypeLayout(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconEmoji", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconEmoji = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Layout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Layout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Layout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= ObjectTypeLayout(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredRelations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredRelations = append(m.RequiredRelations, &Relation{})
			if err := m.RequiredRelations[len(m.RequiredRelations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationWithValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationWithValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationWithValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &types.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			m.Format = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Format |= RelationFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultValue == nil {
				m.DefaultValue = &types.Value{}
			}
			if err := m.DefaultValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSource", wireType)
			}
			m.DataSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSource |= RelationRelationDataSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Multi = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectTypes = append(m.ObjectTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectDict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectDict = append(m.SelectDict, &RelationOption{})
			if err := m.SelectDict[len(m.SelectDict)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCount", wireType)
			}
			m.MaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Option: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Option: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			m.Scope = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scope |= RelationOptionScope(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &Relation{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelation = fmt.Errorf("proto: unexpected end of group")
)
