syntax = "proto3";
package anytype.relation;
option go_package = "pkg/lib/pb/relation";

import "google/protobuf/struct.proto";

message ObjectType {
    string name = 1; // name of objectType (can be localized for bundled types)
    repeated Relation relations = 2; // cannot contain more than one Relation with the same RelationType
}

message RelationWithValue {
    Relation relation = 1;
    google.protobuf.Value value = 2;
}

// Relation describe the human-interpreted relation type. It may be something like "Date of creation, format=date" or "Assignee, format=objectId, objectType=person"
message Relation {
    RelationFormat format = 1; // format of the underlying data
    string defaultName = 2; // defaultName to show (can be localized for bundled types)
    google.protobuf.Value defaultValue = 3;
    string dataKey = 4; // key under which the value is stored in the map. It usually auto-generated bsonid, but also may be something human-readable in case of prebuilt types
    RelationDataSource dataSource = 5; // where the data is stored

    bool hidden = 6; // internal, not displayed to user (e.g. coverX, coverY)
    bool readOnly = 7; // not editable by user

    string objectType = 10; // URL of object type, empty to allow link to any object
    repeated string selectDict = 11; // default dictionary to choose for select/multiSelect format. Any known existing(or previously used) value for this RelationType will be appended to this list

    enum RelationDataSource {
        details = 0; // default, stored inside the smartblock's details
        local = 1; // stored locally, e.g. in badger or generated on the fly
    }
}

// RelationFormat describes how the underlying data is stored in the google.protobuf.Value and how it should be validated/sanitized
enum RelationFormat {
    shortText = 0; // string up to 250 symbols
    longText = 1; // string
    number = 2; // double
    select = 3; // string
    multiSelect = 4; // List of string
    date = 5; // int64(pb.Value doesn't have int64) or string
    file = 6; // list of string, CID of media or file
    checkbox = 7; // boolean
    url = 8; // string with sanity check
    email = 9; // string with sanity check
    phone = 10; // string with sanity check
    emoji = 11; // one emoji, can contains multiple utf-8 symbols

    objectId = 100; // relation must has objectType
}
