/*
Code generated by pkg/lib/bundle/generator. DO NOT EDIT.
source: pkg/lib/bundle/types.json
*/
package bundle

import "github.com/anytypeio/go-anytype-middleware/pkg/lib/pb/relation"

type TypeKey string

func (tk TypeKey) String() string {
	return string(tk)
}
func (tk TypeKey) URL() string {
	return string(TypePrefix + tk)
}

const (
	TypePrefix = "https://anytype.io/schemas/object/bundled/"
)
const (
	TypeKeyNote       TypeKey = "note"
	TypeKeyDashboard  TypeKey = "dashboard"
	TypeKeyContact    TypeKey = "contact"
	TypeKeyIdea       TypeKey = "idea"
	TypeKeyTask       TypeKey = "task"
	TypeKeyRelation   TypeKey = "relation"
	TypeKeyVideo      TypeKey = "video"
	TypeKeyObjectType TypeKey = "objectType"
	TypeKeySet        TypeKey = "set"
	TypeKeyPage       TypeKey = "page"
	TypeKeyImage      TypeKey = "image"
	TypeKeyProfile    TypeKey = "profile"
	TypeKeyAudio      TypeKey = "audio"
	TypeKeyDocument   TypeKey = "document"
	TypeKeyFile       TypeKey = "file"
	TypeKeyProject    TypeKey = "project"
	TypeKeyCollection TypeKey = "collection"
)

var (
	Types = map[TypeKey]*relation.ObjectType{
		TypeKeyAudio: {

			Layout:    relation.ObjectType_basic,
			Name:      "Audio",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate], Relations[RelationKeyArtist], Relations[RelationKeyAudioAlbum], Relations[RelationKeyAudioAlbumTrackNumber], Relations[RelationKeyAudioGenre], Relations[RelationKeyReleasedYear], Relations[RelationKeyThumbnailImage], Relations[RelationKeyComposer], Relations[RelationKeyDurationInSeconds], Relations[RelationKeySizeInBytes], Relations[RelationKeyFileMimeType]},
			Url:       TypePrefix + "audio",
		},
		TypeKeyCollection: {

			Layout:    relation.ObjectType_database,
			Name:      "Collection",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate], Relations[RelationKeyCollectionOf]},
			Url:       TypePrefix + "collection",
		},
		TypeKeyContact: {

			Layout:    relation.ObjectType_profile,
			Name:      "Contact",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate]},
			Url:       TypePrefix + "contact",
		},
		TypeKeyDashboard: {

			Layout:    relation.ObjectType_dashboard,
			Name:      "Dashboard",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate]},
			Url:       TypePrefix + "dashboard",
		},
		TypeKeyDocument: {

			Layout:    relation.ObjectType_basic,
			Name:      "Document",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate]},
			Url:       TypePrefix + "document",
		},
		TypeKeyFile: {

			Layout:    relation.ObjectType_basic,
			Name:      "File",
			Relations: []*relation.Relation{Relations[RelationKeyFileMimeType], Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate], Relations[RelationKeyFileMimeType], Relations[RelationKeySizeInBytes]},
			Url:       TypePrefix + "file",
		},
		TypeKeyIdea: {

			Layout:    relation.ObjectType_basic,
			Name:      "Idea",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate], Relations[RelationKeyTag]},
			Url:       TypePrefix + "idea",
		},
		TypeKeyImage: {

			Layout:    relation.ObjectType_basic,
			Name:      "Image",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate], Relations[RelationKeyFileMimeType], Relations[RelationKeyWidthInPixels], Relations[RelationKeyCamera], Relations[RelationKeyHeightInPixels], Relations[RelationKeySizeInBytes], Relations[RelationKeyCameraIso], Relations[RelationKeyAperture], Relations[RelationKeyExposure]},
			Url:       TypePrefix + "image",
		},
		TypeKeyNote: {

			Layout:    relation.ObjectType_basic,
			Name:      "Note",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate]},
			Url:       TypePrefix + "note",
		},
		TypeKeyObjectType: {

			Layout:    relation.ObjectType_objectType,
			Name:      "Type",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyRecommendedRelations]},
			Url:       TypePrefix + "objectType",
		},
		TypeKeyPage: {

			Layout:    relation.ObjectType_basic,
			Name:      "Undefined",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate], Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate]},
			Url:       TypePrefix + "page",
		},
		TypeKeyProfile: {

			Layout:    relation.ObjectType_profile,
			Name:      "Human",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate]},
			Url:       TypePrefix + "profile",
		},
		TypeKeyProject: {

			Layout:    relation.ObjectType_basic,
			Name:      "Project",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate]},
			Url:       TypePrefix + "project",
		},
		TypeKeyRelation: {

			Layout:    relation.ObjectType_relation,
			Name:      "Relation",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyId], Relations[RelationKeyCoverX]},
			Url:       TypePrefix + "relation",
		},
		TypeKeySet: {

			Layout:    relation.ObjectType_set,
			Name:      "Set of objects",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate], Relations[RelationKeySetOf]},
			Url:       TypePrefix + "set",
		},
		TypeKeyTask: {

			Layout:    relation.ObjectType_action,
			Name:      "Task",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate], Relations[RelationKeyAssignee], Relations[RelationKeyDueDate], Relations[RelationKeyDescription], Relations[RelationKeyAttachments], Relations[RelationKeyStatus], Relations[RelationKeyDone], Relations[RelationKeyPriority], Relations[RelationKeyLinkedTasks], Relations[RelationKeyLinkedProjects], Relations[RelationKeyTag], Relations[RelationKeyDoneStatus]},
			Url:       TypePrefix + "task",
		},
		TypeKeyVideo: {

			Layout:    relation.ObjectType_basic,
			Name:      "Video",
			Relations: []*relation.Relation{Relations[RelationKeyName], Relations[RelationKeyIconImage], Relations[RelationKeyIconEmoji], Relations[RelationKeyLastModifiedBy], Relations[RelationKeyCoverImage], Relations[RelationKeyCreatedDate], Relations[RelationKeyLastModifiedDate], Relations[RelationKeyId], Relations[RelationKeyType], Relations[RelationKeyLastOpenedDate], Relations[RelationKeyCoverX], Relations[RelationKeyCoverY], Relations[RelationKeyCoverScale], Relations[RelationKeyThumbnailImage], Relations[RelationKeyCreator], Relations[RelationKeyToBeDeletedDate], Relations[RelationKeyDurationInSeconds], Relations[RelationKeySizeInBytes], Relations[RelationKeyFileMimeType], Relations[RelationKeyCamera], Relations[RelationKeyThumbnailImage], Relations[RelationKeyHeightInPixels], Relations[RelationKeyWidthInPixels], Relations[RelationKeyCameraIso], Relations[RelationKeyAperture], Relations[RelationKeyExposure]},
			Url:       TypePrefix + "video",
		},
	}
)
