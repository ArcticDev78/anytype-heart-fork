// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package lib

import (
	fmt "fmt"
	pb "github.com/anytypeio/go-anytype-middleware/pb"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xdf, 0x4e, 0xc2, 0x30,
	0x14, 0xc6, 0x43, 0x4c, 0x24, 0x56, 0x20, 0xda, 0x98, 0xa8, 0x03, 0xa6, 0x3e, 0x80, 0x5c, 0xe8,
	0xad, 0x37, 0x8e, 0x18, 0x30, 0xf8, 0x27, 0x42, 0x94, 0xc4, 0xbb, 0xad, 0x1c, 0xc9, 0x62, 0xd7,
	0xce, 0xb5, 0x90, 0xf0, 0x3c, 0xbe, 0x8c, 0x97, 0x3e, 0x82, 0xe1, 0x49, 0x8c, 0xec, 0x74, 0x6c,
	0x6c, 0xf3, 0xae, 0xf9, 0x7e, 0xdf, 0xf9, 0x6d, 0xcd, 0xd9, 0x48, 0x5d, 0x41, 0x34, 0xf7, 0x19,
	0x74, 0xc2, 0x48, 0x6a, 0x49, 0xab, 0xae, 0x58, 0xe8, 0x45, 0x08, 0x56, 0xdd, 0x65, 0x4c, 0xce,
	0x84, 0x8e, 0x73, 0x8b, 0xbc, 0xf9, 0x1c, 0xcc, 0x39, 0xf0, 0x15, 0xc3, 0xf3, 0x81, 0xc7, 0x25,
	0x7b, 0x3f, 0x67, 0x32, 0x08, 0x5c, 0x31, 0x51, 0x71, 0x7a, 0xf1, 0x59, 0x25, 0x8d, 0x2e, 0xf7,
	0x41, 0xe8, 0x2e, 0x02, 0x3a, 0x20, 0xb5, 0xb1, 0xcb, 0x39, 0xe8, 0x6e, 0x04, 0xae, 0x06, 0xda,
	0xea, 0xe0, 0x93, 0x3a, 0xe9, 0x78, 0x08, 0x1f, 0x33, 0x50, 0xda, 0x6a, 0x97, 0x50, 0x15, 0x4a,
	0xa1, 0x80, 0x3e, 0x90, 0x7a, 0x9c, 0x0f, 0x81, 0xc9, 0x39, 0x44, 0x74, 0xb3, 0x8f, 0xb9, 0xd1,
	0xd9, 0x65, 0x18, 0x7d, 0x4f, 0xa4, 0x71, 0x1d, 0x5f, 0xd7, 0x08, 0xd7, 0x13, 0x59, 0x60, 0x8c,
	0x27, 0xa5, 0x7c, 0xfd, 0x8a, 0x48, 0xf0, 0xc2, 0xed, 0xcd, 0x89, 0xec, 0x8d, 0xed, 0x32, 0x9c,
	0xf3, 0x8d, 0x80, 0x03, 0xd3, 0x79, 0x5f, 0x9c, 0x97, 0xfa, 0x0c, 0x46, 0xdf, 0x80, 0xd4, 0x6e,
	0x03, 0x77, 0x0a, 0x3d, 0xd0, 0x0e, 0x97, 0x5e, 0x6a, 0x1f, 0xe9, 0x38, 0xbf, 0x8f, 0x2c, 0x45,
	0xd9, 0x0d, 0x21, 0x2f, 0x10, 0x29, 0x5f, 0x8a, 0x1e, 0x68, 0x6a, 0x25, 0xe5, 0x75, 0x68, 0x44,
	0xcd, 0x42, 0x86, 0x9a, 0x2b, 0x52, 0xbd, 0x93, 0xd3, 0x11, 0x88, 0x09, 0x3d, 0x4c, 0x7a, 0x98,
	0x18, 0xc1, 0x51, 0x1e, 0xe0, 0xb4, 0x43, 0x76, 0x9c, 0xbf, 0x8f, 0xf1, 0x31, 0x04, 0x41, 0x8f,
	0x93, 0x5a, 0x92, 0x19, 0x83, 0x55, 0x84, 0xd0, 0xd1, 0x27, 0xbb, 0xab, 0x10, 0x77, 0xd6, 0xcc,
	0x56, 0xb3, 0x1b, 0x6b, 0x15, 0xc3, 0x0d, 0xd3, 0x73, 0x38, 0x29, 0x30, 0xc5, 0x69, 0x89, 0xc9,
	0x40, 0x34, 0x8d, 0xc9, 0xde, 0x2a, 0xee, 0xfb, 0x4a, 0xcb, 0x68, 0x71, 0x2f, 0xe7, 0x40, 0x4f,
	0xb3, 0x13, 0x29, 0x64, 0x9c, 0x67, 0xff, 0x34, 0x62, 0xb1, 0xb3, 0xff, 0xb5, 0xb4, 0x2b, 0xdf,
	0x4b, 0xbb, 0xf2, 0xb3, 0xb4, 0x2b, 0xaf, 0x5b, 0xdc, 0xf7, 0xbc, 0xed, 0xd5, 0xff, 0x7b, 0xf9,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xc9, 0xee, 0x7b, 0x16, 0x04, 0x00, 0x00,
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the gomobile package it is being compiled against.

// ClientCommandsHandler is the handler API for ClientCommands service.
var clientCommandsHandler ClientCommandsHandler

type ClientCommandsHandler interface {
	WalletCreate(*pb.WalletCreateRequest) *pb.WalletCreateResponse
	WalletRecover(*pb.WalletRecoverRequest) *pb.WalletRecoverResponse
	AccountRecover(*pb.AccountRecoverRequest) *pb.AccountRecoverResponse
	AccountCreate(*pb.AccountCreateRequest) *pb.AccountCreateResponse
	AccountSelect(*pb.AccountSelectRequest) *pb.AccountSelectResponse
	ImageGetBlob(*pb.ImageGetBlobRequest) *pb.ImageGetBlobResponse
	VersionGet(*pb.VersionGetRequest) *pb.VersionGetResponse
	LogSend(*pb.LogSendRequest) *pb.LogSendResponse
	BlockOpen(*pb.BlockOpenRequest) *pb.BlockOpenResponse
	BlockCreate(*pb.BlockCreateRequest) *pb.BlockCreateResponse
	BlockUpdate(*pb.BlockUpdateRequest) *pb.BlockUpdateResponse
	BlockHistoryMove(*pb.BlockHistoryMoveRequest) *pb.BlockHistoryMoveResponse
}

func registerClientCommandsHandler(srv ClientCommandsHandler) {
	clientCommandsHandler = srv
}

func WalletCreate(b []byte) []byte {
	in := new(pb.WalletCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.WalletCreateResponse{Error: &pb.WalletCreateResponse_Error{Code: pb.WalletCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.WalletCreate(in).Marshal()
	return resp
}

func WalletRecover(b []byte) []byte {
	in := new(pb.WalletRecoverRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.WalletRecoverResponse{Error: &pb.WalletRecoverResponse_Error{Code: pb.WalletRecoverResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.WalletRecover(in).Marshal()
	return resp
}

func AccountRecover(b []byte) []byte {
	in := new(pb.AccountRecoverRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.AccountRecoverResponse{Error: &pb.AccountRecoverResponse_Error{Code: pb.AccountRecoverResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.AccountRecover(in).Marshal()
	return resp
}

func AccountCreate(b []byte) []byte {
	in := new(pb.AccountCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.AccountCreateResponse{Error: &pb.AccountCreateResponse_Error{Code: pb.AccountCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.AccountCreate(in).Marshal()
	return resp
}

func AccountSelect(b []byte) []byte {
	in := new(pb.AccountSelectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.AccountSelectResponse{Error: &pb.AccountSelectResponse_Error{Code: pb.AccountSelectResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.AccountSelect(in).Marshal()
	return resp
}

func ImageGetBlob(b []byte) []byte {
	in := new(pb.ImageGetBlobRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.ImageGetBlobResponse{Error: &pb.ImageGetBlobResponse_Error{Code: pb.ImageGetBlobResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.ImageGetBlob(in).Marshal()
	return resp
}

func VersionGet(b []byte) []byte {
	in := new(pb.VersionGetRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.VersionGetResponse{Error: &pb.VersionGetResponse_Error{Code: pb.VersionGetResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.VersionGet(in).Marshal()
	return resp
}

func LogSend(b []byte) []byte {
	in := new(pb.LogSendRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.LogSendResponse{Error: &pb.LogSendResponse_Error{Code: pb.LogSendResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.LogSend(in).Marshal()
	return resp
}

func BlockOpen(b []byte) []byte {
	in := new(pb.BlockOpenRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.BlockOpenResponse{Error: &pb.BlockOpenResponse_Error{Code: pb.BlockOpenResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockOpen(in).Marshal()
	return resp
}

func BlockCreate(b []byte) []byte {
	in := new(pb.BlockCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.BlockCreateResponse{Error: &pb.BlockCreateResponse_Error{Code: pb.BlockCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockCreate(in).Marshal()
	return resp
}

func BlockUpdate(b []byte) []byte {
	in := new(pb.BlockUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.BlockUpdateResponse{Error: &pb.BlockUpdateResponse_Error{Code: pb.BlockUpdateResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockUpdate(in).Marshal()
	return resp
}

func BlockHistoryMove(b []byte) []byte {
	in := new(pb.BlockHistoryMoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ := (&pb.BlockHistoryMoveResponse{Error: &pb.BlockHistoryMoveResponse_Error{Code: pb.BlockHistoryMoveResponse_Error_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}
	resp, _ := clientCommandsHandler.BlockHistoryMove(in).Marshal()
	return resp
}

func CommandAsync(cmd string, data []byte, callback func(data []byte)) {
	go func() {
		var cd []byte
		switch cmd {
		case "WalletCreate":
			cd = WalletCreate(data)
		case "WalletRecover":
			cd = WalletRecover(data)
		case "AccountRecover":
			cd = AccountRecover(data)
		case "AccountCreate":
			cd = AccountCreate(data)
		case "AccountSelect":
			cd = AccountSelect(data)
		case "ImageGetBlob":
			cd = ImageGetBlob(data)
		case "VersionGet":
			cd = VersionGet(data)
		case "LogSend":
			cd = LogSend(data)
		case "BlockOpen":
			cd = BlockOpen(data)
		case "BlockCreate":
			cd = BlockCreate(data)
		case "BlockUpdate":
			cd = BlockUpdate(data)
		case "BlockHistoryMove":
			cd = BlockHistoryMove(data)
		default:
			log.Errorf("unknown command type: %s\n", cmd)
		}
		if callback != nil {
			callback(cd)
		}
	}()
}

type MessageHandler interface {
	Handle(b []byte)
}

func CommandMobile(cmd string, data []byte, callback MessageHandler) {
	CommandAsync(cmd, data, callback.Handle)
}
