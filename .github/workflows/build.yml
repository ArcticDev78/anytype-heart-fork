on: [push]
name: Build
jobs:
  build-mac-win-android-ios:
    runs-on: macos-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.16.4
      - name: Setup GO
        run: |
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo GOBIN=$(go env GOPATH)/bin >> $GITHUB_ENV
          echo $(go env GOPATH)/bin >> $GITHUB_PATH
      - name: Install patched gox
        run: |
          mkdir -p $GOPATH/src/github.com/mitchellh
          cd $GOPATH/src/github.com/mitchellh
          git clone https://github.com/aslakhellesoy/gox
          cd gox
          git fetch
          git checkout db6184738b77fbd5089e5fa1112177f391c91b24
          go install github.com/mitchellh/gox
      - name: Install brew and node deps
        run: |
          brew install mingw-w64 jq swift-protobuf protobuf FiloSottile/musl-cross/musl-cross
          npm i -g node-gyp
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set env vars
        run: |
          echo COMMIT=${GITHUB_SHA::7} >> $GITHUB_ENV
          echo GIT_SUMMARY=$(git describe --tags --dirty --always) >> $GITHUB_ENV
          echo DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") >> $GITHUB_ENV
          echo SDKROOT=$(xcrun --sdk macosx --show-sdk-path) >> $GITHUB_ENV
          echo "FLAGS=\"-X github.com/anytypeio/go-anytype-middleware/core.GitSummary=${GIT_SUMMARY} -X github.com/anytypeio/go-anytype-middleware/core.BuildDate=${DATE} -X github.com/anytypeio/go-anytype-middleware/core.GitCommit=${COMMIT} -X github.com/anytypeio/go-anytype-middleware/core.GitBranch=${CIRCLE_BRANCH} -X github.com/anytypeio/go-anytype-middleware/core.GitState=clean\"" >> $GITHUB_ENV
          echo VERSION=${GITHUB_REF##*/} >> $GITHUB_ENV
      - name: install protoc
        run: |
          make setup-protoc
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Go mod download
        run: |
          go mod download
      - name: Cross-compile library mac/win
        run: |
          mkdir -p .release
          gox -buildmode=c-archive -tags nogrpcserver -cgo=true -ldflags="$FLAGS" -osarch="darwin/amd64" -output="{{.OS}}-{{.Arch}}.a" github.com/anytypeio/go-anytype-middleware/clientlibrary/clib
          make protos-server
          CC="x86_64-w64-mingw32-gcc" CXX="x86_64-w64-mingw32-g++" gox -ldflags="$FLAGS" -osarch="windows/amd64" -output="{{.OS}}-{{.Arch}}" github.com/anytypeio/go-anytype-middleware/cmd/grpcserver
          ls -lha .
      - name: Make JS protos
        run: |
          make protos-js
          mv dist/js/pb protobuf
          mkdir -p protobuf/protos
          cp pb/protos/*.proto ./protobuf/protos
          cp pkg/lib/pb/model/protos/*.proto ./protobuf/protos
      - name: Compile addon mac amd64
        run: |
          cp ./darwin-amd64.a ./dist/lib.a
          cp ./darwin-amd64.h ./dist/lib.h

          GOOS=darwin GOARCH=amd64 npm_config_arch=amd64 npm_target_arch=amd64 make build-js-addon
          mv clientlibrary/jsaddon/build addon
          tar -czvf js_${VERSION}_darwin-amd64.tar.gz protobuf addon
          mv js_${VERSION}_darwin-amd64.tar.gz .release/
          rm ./darwin-amd64*
      - name: Upload protobuf artifact for linux build
        uses: actions/upload-artifact@v2
        with:
          name: libs
          path: |
            protobuf
          if-no-files-found: error
          retention-days: 1
      #      - name: Compile addon mac arm64
      #        run: |
      #          VERSION=${GITHUB_REF##*/}
      #          cp ./darwin-arm64.a ./dist/lib.a
      #          cp ./darwin-arm64.h ./dist/lib.h
      #
      #          GOOS=darwin GOARCH=arm64 npm_config_arch=arm64 npm_target_arch=arm64 make build-js-addon
      #          mv clientlibrary/jsaddon/build addon
      #          tar -czvf js_${VERSION}_darwin-arm64.tar.gz protobuf addon
      #          mv js_${VERSION}_darwin-arm64.tar.gz .release/
      #          rm ./darwin-arm64**/
      - name: Pack server win
        run: |
          declare -a arr=("windows-amd64")
          for i in "${arr[@]}"
          do
          OSARCH=${i%.*}
          cp ./${i}* ./grpc-server.exe
          zip -r js_${VERSION}_${OSARCH}.zip grpc-server.exe protobuf
          mv js_${VERSION}_${OSARCH}.zip .release/
          done
      - name: Make swift protos
        run: |
          mkdir -p .release
          make protos-swift
          rm -rf protobuf
          mv dist/ios/pb protobuf
          mkdir -p protobuf/protos
          cp pb/protos/*.proto ./protobuf/protos
          cp pkg/lib/pb/model/protos/*.proto ./protobuf/protos
      - name: Compile ios lib
        run: |
          go get golang.org/x/mobile/cmd/...
          gomobile bind -tags nogrpcserver -ldflags "$(FLAGS)" -v -target=ios -o Lib.framework github.com/anytypeio/go-anytype-middleware/clientlibrary/service github.com/anytypeio/go-anytype-middleware/core
          tar -czvf ios_framework_${VERSION}.tar.gz Lib.framework protobuf
          mv ios_framework_${VERSION}.tar.gz .release/
      - name: Make java protos
        run: |
          make protos-java
          rm -rf protobuf
          mv dist/android/pb protobuf
          mkdir -p protobuf/protos
          cp pb/protos/*.proto ./protobuf/protos
          cp pkg/lib/pb/model/protos/*.proto ./protobuf/protos
      - name: Compile android lib
        run: |
          go get golang.org/x/mobile/cmd/...
          gomobile bind -tags nogrpcserver -ldflags "$(FLAGS)" -v -target=android -o lib.aar github.com/anytypeio/go-anytype-middleware/clientlibrary/service github.com/anytypeio/go-anytype-middleware/core
          tar -czvf android_lib_${VERSION}.tar.gz lib.aar protobuf
          mv android_lib_${VERSION}.tar.gz .release/
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ contains(github.ref, '-rc') }}
          fail_on_unmatched_files: true
          files: '.release/*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-linux:
    needs: build-mac-win-android-ios
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set env vars
        run: |
          echo COMMIT=${GITHUB_SHA::7} >> $GITHUB_ENV
          echo GIT_SUMMARY=$(git describe --tags --dirty --always) >> $GITHUB_ENV
          echo DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") >> $GITHUB_ENV
          echo "FLAGS=\"-X github.com/anytypeio/go-anytype-middleware/core.GitSummary=${GIT_SUMMARY} -X github.com/anytypeio/go-anytype-middleware/core.BuildDate=${DATE} -X github.com/anytypeio/go-anytype-middleware/core.GitCommit=${COMMIT} -X github.com/anytypeio/go-anytype-middleware/core.GitBranch=${CIRCLE_BRANCH} -X github.com/anytypeio/go-anytype-middleware/core.GitState=clean\"" >> $GITHUB_ENV
          echo VERSION=${GITHUB_REF##*/} >> $GITHUB_ENV
          mkdir protobuf
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download lib artifact
        uses: actions/download-artifact@v2
        with:
          name: libs
          path: ./protobuf
      - name: Compile lib
        run: |
          mkdir -p .release
          make build-lib
          ls -lha .
      - name: Compile addon
        run: |
          mkdir -p .release
          VERSION=${GITHUB_REF##*/}
          ls -lha .
          ls -lha dist
          GOOS=linux GOARCH=amd64 npm_config_arch=amd64 npm_target_arch=amd64 make build-js-addon
          mv clientlibrary/jsaddon/build addon
          tar -czvf js_${VERSION}_linux-amd64.tar.gz protobuf addon
          mv js_${VERSION}_linux-amd64.tar.gz .release/
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          prerelease: ${{ contains(github.ref, '-rc') }}
          files: '.release/*'
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}