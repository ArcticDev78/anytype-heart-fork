// Code generated by mockery v2.26.1. DO NOT EDIT.

package mock_relation

import (
	context "context"

	app "github.com/anyproto/any-sync/app"
	bundle "github.com/anyproto/anytype-heart/pkg/lib/bundle"

	mock "github.com/stretchr/testify/mock"

	pbtypes "github.com/anyproto/anytype-heart/util/pbtypes"

	relation "github.com/anyproto/anytype-heart/core/relation"

	relationutils "github.com/anyproto/anytype-heart/core/relation/relationutils"

	types "github.com/gogo/protobuf/types"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// FetchRelationByKey provides a mock function with given fields: spaceId, key, opts
func (_m *MockService) FetchRelationByKey(spaceId string, key string, opts ...relation.FetchOption) (*relationutils.Relation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, spaceId, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *relationutils.Relation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, ...relation.FetchOption) (*relationutils.Relation, error)); ok {
		return rf(spaceId, key, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, string, ...relation.FetchOption) *relationutils.Relation); ok {
		r0 = rf(spaceId, key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*relationutils.Relation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, ...relation.FetchOption) error); ok {
		r1 = rf(spaceId, key, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_FetchRelationByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRelationByKey'
type MockService_FetchRelationByKey_Call struct {
	*mock.Call
}

// FetchRelationByKey is a helper method to define mock.On call
//   - spaceId string
//   - key string
//   - opts ...relation.FetchOption
func (_e *MockService_Expecter) FetchRelationByKey(spaceId interface{}, key interface{}, opts ...interface{}) *MockService_FetchRelationByKey_Call {
	return &MockService_FetchRelationByKey_Call{Call: _e.mock.On("FetchRelationByKey",
		append([]interface{}{spaceId, key}, opts...)...)}
}

func (_c *MockService_FetchRelationByKey_Call) Run(run func(spaceId string, key string, opts ...relation.FetchOption)) *MockService_FetchRelationByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]relation.FetchOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(relation.FetchOption)
			}
		}
		run(args[0].(string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockService_FetchRelationByKey_Call) Return(_a0 *relationutils.Relation, err error) *MockService_FetchRelationByKey_Call {
	_c.Call.Return(_a0, err)
	return _c
}

func (_c *MockService_FetchRelationByKey_Call) RunAndReturn(run func(string, string, ...relation.FetchOption) (*relationutils.Relation, error)) *MockService_FetchRelationByKey_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRelationByKeys provides a mock function with given fields: spaceId, keys
func (_m *MockService) FetchRelationByKeys(spaceId string, keys ...string) (relationutils.Relations, error) {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, spaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 relationutils.Relations
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (relationutils.Relations, error)); ok {
		return rf(spaceId, keys...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) relationutils.Relations); ok {
		r0 = rf(spaceId, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(relationutils.Relations)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(spaceId, keys...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_FetchRelationByKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRelationByKeys'
type MockService_FetchRelationByKeys_Call struct {
	*mock.Call
}

// FetchRelationByKeys is a helper method to define mock.On call
//   - spaceId string
//   - keys ...string
func (_e *MockService_Expecter) FetchRelationByKeys(spaceId interface{}, keys ...interface{}) *MockService_FetchRelationByKeys_Call {
	return &MockService_FetchRelationByKeys_Call{Call: _e.mock.On("FetchRelationByKeys",
		append([]interface{}{spaceId}, keys...)...)}
}

func (_c *MockService_FetchRelationByKeys_Call) Run(run func(spaceId string, keys ...string)) *MockService_FetchRelationByKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockService_FetchRelationByKeys_Call) Return(relations relationutils.Relations, err error) *MockService_FetchRelationByKeys_Call {
	_c.Call.Return(relations, err)
	return _c
}

func (_c *MockService_FetchRelationByKeys_Call) RunAndReturn(run func(string, ...string) (relationutils.Relations, error)) *MockService_FetchRelationByKeys_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRelationByLinks provides a mock function with given fields: spaceId, links
func (_m *MockService) FetchRelationByLinks(spaceId string, links pbtypes.RelationLinks) (relationutils.Relations, error) {
	ret := _m.Called(spaceId, links)

	var r0 relationutils.Relations
	var r1 error
	if rf, ok := ret.Get(0).(func(string, pbtypes.RelationLinks) (relationutils.Relations, error)); ok {
		return rf(spaceId, links)
	}
	if rf, ok := ret.Get(0).(func(string, pbtypes.RelationLinks) relationutils.Relations); ok {
		r0 = rf(spaceId, links)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(relationutils.Relations)
		}
	}

	if rf, ok := ret.Get(1).(func(string, pbtypes.RelationLinks) error); ok {
		r1 = rf(spaceId, links)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_FetchRelationByLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRelationByLinks'
type MockService_FetchRelationByLinks_Call struct {
	*mock.Call
}

// FetchRelationByLinks is a helper method to define mock.On call
//   - spaceId string
//   - links pbtypes.RelationLinks
func (_e *MockService_Expecter) FetchRelationByLinks(spaceId interface{}, links interface{}) *MockService_FetchRelationByLinks_Call {
	return &MockService_FetchRelationByLinks_Call{Call: _e.mock.On("FetchRelationByLinks", spaceId, links)}
}

func (_c *MockService_FetchRelationByLinks_Call) Run(run func(spaceId string, links pbtypes.RelationLinks)) *MockService_FetchRelationByLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(pbtypes.RelationLinks))
	})
	return _c
}

func (_c *MockService_FetchRelationByLinks_Call) Return(relations relationutils.Relations, err error) *MockService_FetchRelationByLinks_Call {
	_c.Call.Return(relations, err)
	return _c
}

func (_c *MockService_FetchRelationByLinks_Call) RunAndReturn(run func(string, pbtypes.RelationLinks) (relationutils.Relations, error)) *MockService_FetchRelationByLinks_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelationIdByKey provides a mock function with given fields: ctx, spaceId, key
func (_m *MockService) GetRelationIdByKey(ctx context.Context, spaceId string, key bundle.RelationKey) (string, error) {
	ret := _m.Called(ctx, spaceId, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bundle.RelationKey) (string, error)); ok {
		return rf(ctx, spaceId, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bundle.RelationKey) string); ok {
		r0 = rf(ctx, spaceId, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bundle.RelationKey) error); ok {
		r1 = rf(ctx, spaceId, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetRelationIdByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelationIdByKey'
type MockService_GetRelationIdByKey_Call struct {
	*mock.Call
}

// GetRelationIdByKey is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceId string
//   - key bundle.RelationKey
func (_e *MockService_Expecter) GetRelationIdByKey(ctx interface{}, spaceId interface{}, key interface{}) *MockService_GetRelationIdByKey_Call {
	return &MockService_GetRelationIdByKey_Call{Call: _e.mock.On("GetRelationIdByKey", ctx, spaceId, key)}
}

func (_c *MockService_GetRelationIdByKey_Call) Run(run func(ctx context.Context, spaceId string, key bundle.RelationKey)) *MockService_GetRelationIdByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bundle.RelationKey))
	})
	return _c
}

func (_c *MockService_GetRelationIdByKey_Call) Return(id string, err error) *MockService_GetRelationIdByKey_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockService_GetRelationIdByKey_Call) RunAndReturn(run func(context.Context, string, bundle.RelationKey) (string, error)) *MockService_GetRelationIdByKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemTypeId provides a mock function with given fields: spaceId, key
func (_m *MockService) GetSystemTypeId(spaceId string, key bundle.TypeKey) (string, error) {
	ret := _m.Called(spaceId, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bundle.TypeKey) (string, error)); ok {
		return rf(spaceId, key)
	}
	if rf, ok := ret.Get(0).(func(string, bundle.TypeKey) string); ok {
		r0 = rf(spaceId, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, bundle.TypeKey) error); ok {
		r1 = rf(spaceId, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetSystemTypeId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemTypeId'
type MockService_GetSystemTypeId_Call struct {
	*mock.Call
}

// GetSystemTypeId is a helper method to define mock.On call
//   - spaceId string
//   - key bundle.TypeKey
func (_e *MockService_Expecter) GetSystemTypeId(spaceId interface{}, key interface{}) *MockService_GetSystemTypeId_Call {
	return &MockService_GetSystemTypeId_Call{Call: _e.mock.On("GetSystemTypeId", spaceId, key)}
}

func (_c *MockService_GetSystemTypeId_Call) Run(run func(spaceId string, key bundle.TypeKey)) *MockService_GetSystemTypeId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bundle.TypeKey))
	})
	return _c
}

func (_c *MockService_GetSystemTypeId_Call) Return(id string, err error) *MockService_GetSystemTypeId_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockService_GetSystemTypeId_Call) RunAndReturn(run func(string, bundle.TypeKey) (string, error)) *MockService_GetSystemTypeId_Call {
	_c.Call.Return(run)
	return _c
}

// GetTypeIdByKey provides a mock function with given fields: ctx, spaceId, key
func (_m *MockService) GetTypeIdByKey(ctx context.Context, spaceId string, key bundle.TypeKey) (string, error) {
	ret := _m.Called(ctx, spaceId, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bundle.TypeKey) (string, error)); ok {
		return rf(ctx, spaceId, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bundle.TypeKey) string); ok {
		r0 = rf(ctx, spaceId, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bundle.TypeKey) error); ok {
		r1 = rf(ctx, spaceId, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetTypeIdByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTypeIdByKey'
type MockService_GetTypeIdByKey_Call struct {
	*mock.Call
}

// GetTypeIdByKey is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceId string
//   - key bundle.TypeKey
func (_e *MockService_Expecter) GetTypeIdByKey(ctx interface{}, spaceId interface{}, key interface{}) *MockService_GetTypeIdByKey_Call {
	return &MockService_GetTypeIdByKey_Call{Call: _e.mock.On("GetTypeIdByKey", ctx, spaceId, key)}
}

func (_c *MockService_GetTypeIdByKey_Call) Run(run func(ctx context.Context, spaceId string, key bundle.TypeKey)) *MockService_GetTypeIdByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bundle.TypeKey))
	})
	return _c
}

func (_c *MockService_GetTypeIdByKey_Call) Return(id string, err error) *MockService_GetTypeIdByKey_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockService_GetTypeIdByKey_Call) RunAndReturn(run func(context.Context, string, bundle.TypeKey) (string, error)) *MockService_GetTypeIdByKey_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockService) Init(a *app.App) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockService_Expecter) Init(a interface{}) *MockService_Init_Call {
	return &MockService_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockService_Init_Call) Run(run func(a *app.App)) *MockService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockService_Init_Call) Return(err error) *MockService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Init_Call) RunAndReturn(run func(*app.App) error) *MockService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllRelations provides a mock function with given fields: spaceId, opts
func (_m *MockService) ListAllRelations(spaceId string, opts ...relation.FetchOption) (relationutils.Relations, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, spaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 relationutils.Relations
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...relation.FetchOption) (relationutils.Relations, error)); ok {
		return rf(spaceId, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...relation.FetchOption) relationutils.Relations); ok {
		r0 = rf(spaceId, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(relationutils.Relations)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...relation.FetchOption) error); ok {
		r1 = rf(spaceId, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ListAllRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllRelations'
type MockService_ListAllRelations_Call struct {
	*mock.Call
}

// ListAllRelations is a helper method to define mock.On call
//   - spaceId string
//   - opts ...relation.FetchOption
func (_e *MockService_Expecter) ListAllRelations(spaceId interface{}, opts ...interface{}) *MockService_ListAllRelations_Call {
	return &MockService_ListAllRelations_Call{Call: _e.mock.On("ListAllRelations",
		append([]interface{}{spaceId}, opts...)...)}
}

func (_c *MockService_ListAllRelations_Call) Run(run func(spaceId string, opts ...relation.FetchOption)) *MockService_ListAllRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]relation.FetchOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(relation.FetchOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockService_ListAllRelations_Call) Return(relations relationutils.Relations, err error) *MockService_ListAllRelations_Call {
	_c.Call.Return(relations, err)
	return _c
}

func (_c *MockService_ListAllRelations_Call) RunAndReturn(run func(string, ...relation.FetchOption) (relationutils.Relations, error)) *MockService_ListAllRelations_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockService) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(name string) *MockService_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateFormat provides a mock function with given fields: spaceId, key, v
func (_m *MockService) ValidateFormat(spaceId string, key string, v *types.Value) error {
	ret := _m.Called(spaceId, key, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *types.Value) error); ok {
		r0 = rf(spaceId, key, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ValidateFormat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateFormat'
type MockService_ValidateFormat_Call struct {
	*mock.Call
}

// ValidateFormat is a helper method to define mock.On call
//   - spaceId string
//   - key string
//   - v *types.Value
func (_e *MockService_Expecter) ValidateFormat(spaceId interface{}, key interface{}, v interface{}) *MockService_ValidateFormat_Call {
	return &MockService_ValidateFormat_Call{Call: _e.mock.On("ValidateFormat", spaceId, key, v)}
}

func (_c *MockService_ValidateFormat_Call) Run(run func(spaceId string, key string, v *types.Value)) *MockService_ValidateFormat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*types.Value))
	})
	return _c
}

func (_c *MockService_ValidateFormat_Call) Return(_a0 error) *MockService_ValidateFormat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ValidateFormat_Call) RunAndReturn(run func(string, string, *types.Value) error) *MockService_ValidateFormat_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
