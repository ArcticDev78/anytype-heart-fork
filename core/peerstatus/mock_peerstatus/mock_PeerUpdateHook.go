// Code generated by mockery. DO NOT EDIT.

package mock_peerstatus

import mock "github.com/stretchr/testify/mock"

// MockPeerUpdateHook is an autogenerated mock type for the PeerUpdateHook type
type MockPeerUpdateHook struct {
	mock.Mock
}

type MockPeerUpdateHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPeerUpdateHook) EXPECT() *MockPeerUpdateHook_Expecter {
	return &MockPeerUpdateHook_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: hook
func (_m *MockPeerUpdateHook) Register(hook func()) {
	_m.Called(hook)
}

// MockPeerUpdateHook_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockPeerUpdateHook_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - hook func()
func (_e *MockPeerUpdateHook_Expecter) Register(hook interface{}) *MockPeerUpdateHook_Register_Call {
	return &MockPeerUpdateHook_Register_Call{Call: _e.mock.On("Register", hook)}
}

func (_c *MockPeerUpdateHook_Register_Call) Run(run func(hook func())) *MockPeerUpdateHook_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *MockPeerUpdateHook_Register_Call) Return() *MockPeerUpdateHook_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeerUpdateHook_Register_Call) RunAndReturn(run func(func())) *MockPeerUpdateHook_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPeerUpdateHook creates a new instance of MockPeerUpdateHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPeerUpdateHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPeerUpdateHook {
	mock := &MockPeerUpdateHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
