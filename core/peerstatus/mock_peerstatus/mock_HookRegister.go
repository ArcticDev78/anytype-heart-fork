// Code generated by mockery. DO NOT EDIT.

package mock_peerstatus

import mock "github.com/stretchr/testify/mock"

// MockHookRegister is an autogenerated mock type for the HookRegister type
type MockHookRegister struct {
	mock.Mock
}

type MockHookRegister_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHookRegister) EXPECT() *MockHookRegister_Expecter {
	return &MockHookRegister_Expecter{mock: &_m.Mock}
}

// RegisterP2PNotPossible provides a mock function with given fields: hook
func (_m *MockHookRegister) RegisterP2PNotPossible(hook func()) {
	_m.Called(hook)
}

// MockHookRegister_RegisterP2PNotPossible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterP2PNotPossible'
type MockHookRegister_RegisterP2PNotPossible_Call struct {
	*mock.Call
}

// RegisterP2PNotPossible is a helper method to define mock.On call
//   - hook func()
func (_e *MockHookRegister_Expecter) RegisterP2PNotPossible(hook interface{}) *MockHookRegister_RegisterP2PNotPossible_Call {
	return &MockHookRegister_RegisterP2PNotPossible_Call{Call: _e.mock.On("RegisterP2PNotPossible", hook)}
}

func (_c *MockHookRegister_RegisterP2PNotPossible_Call) Run(run func(hook func())) *MockHookRegister_RegisterP2PNotPossible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *MockHookRegister_RegisterP2PNotPossible_Call) Return() *MockHookRegister_RegisterP2PNotPossible_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHookRegister_RegisterP2PNotPossible_Call) RunAndReturn(run func(func())) *MockHookRegister_RegisterP2PNotPossible_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHookRegister creates a new instance of MockHookRegister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHookRegister(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHookRegister {
	mock := &MockHookRegister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
