// Code generated by MockGen. DO NOT EDIT.
// Source: core/block/import/types.go

// Package mock_importer is a generated GoMock package.
package importer

import (
	"github.com/anytypeio/go-anytype-middleware/core/block/import/converter"
	reflect "reflect"

	app "github.com/anytypeio/any-sync/app"
	session "github.com/anytypeio/go-anytype-middleware/core/session"
	pb "github.com/anytypeio/go-anytype-middleware/pb"
	smartblock "github.com/anytypeio/go-anytype-middleware/pkg/lib/core/smartblock"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
)

// MockImporter is a mock of Importer interface.
type MockImporter struct {
	ctrl     *gomock.Controller
	recorder *MockImporterMockRecorder
}

// MockImporterMockRecorder is the mock recorder for MockImporter.
type MockImporterMockRecorder struct {
	mock *MockImporter
}

// NewMockImporter creates a new mock instance.
func NewMockImporter(ctrl *gomock.Controller) *MockImporter {
	mock := &MockImporter{ctrl: ctrl}
	mock.recorder = &MockImporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImporter) EXPECT() *MockImporterMockRecorder {
	return m.recorder
}

// Import mocks base method.
func (m *MockImporter) Import(ctx *session.Context, req *pb.RpcObjectImportRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockImporterMockRecorder) Import(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockImporter)(nil).Import), ctx, req)
}

// ImportWeb mocks base method.
func (m *MockImporter) ImportWeb(ctx *session.Context, req *pb.RpcObjectImportRequest) (string, *types.Struct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportWeb", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*types.Struct)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImportWeb indicates an expected call of ImportWeb.
func (mr *MockImporterMockRecorder) ImportWeb(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportWeb", reflect.TypeOf((*MockImporter)(nil).ImportWeb), ctx, req)
}

// Init mocks base method.
func (m *MockImporter) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockImporterMockRecorder) Init(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockImporter)(nil).Init), a)
}

// ListImports mocks base method.
func (m *MockImporter) ListImports(ctx *session.Context, req *pb.RpcObjectImportListRequest) ([]*pb.RpcObjectImportListImportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImports", ctx, req)
	ret0, _ := ret[0].([]*pb.RpcObjectImportListImportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImports indicates an expected call of ListImports.
func (mr *MockImporterMockRecorder) ListImports(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImports", reflect.TypeOf((*MockImporter)(nil).ListImports), ctx, req)
}

// Name mocks base method.
func (m *MockImporter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockImporterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockImporter)(nil).Name))
}

// MockCreator is a mock of Creator interface.
type MockCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorMockRecorder
}

// MockCreatorMockRecorder is the mock recorder for MockCreator.
type MockCreatorMockRecorder struct {
	mock *MockCreator
}

// NewMockCreator creates a new mock instance.
func NewMockCreator(ctrl *gomock.Controller) *MockCreator {
	mock := &MockCreator{ctrl: ctrl}
	mock.recorder = &MockCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreator) EXPECT() *MockCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreator) Create(ctx *session.Context, sn *converter.Snapshot, relations []*converter.Relation, oldIDtoNew map[string]string, existing bool) (*types.Struct, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sn, relations, oldIDtoNew, existing)
	ret0, _ := ret[0].(*types.Struct)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockCreatorMockRecorder) Create(ctx, cs, relations, oldIDtoNew, existing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreator)(nil).Create), ctx, cs, relations, oldIDtoNew, existing)
}

// MockIDGetter is a mock of IDGetter interface.
type MockIDGetter struct {
	ctrl     *gomock.Controller
	recorder *MockIDGetterMockRecorder
}

// MockIDGetterMockRecorder is the mock recorder for MockIDGetter.
type MockIDGetterMockRecorder struct {
	mock *MockIDGetter
}

// NewMockIDGetter creates a new mock instance.
func NewMockIDGetter(ctrl *gomock.Controller) *MockIDGetter {
	mock := &MockIDGetter{ctrl: ctrl}
	mock.recorder = &MockIDGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDGetter) EXPECT() *MockIDGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIDGetter) Get(ctx *session.Context, cs *converter.Snapshot, sbType smartblock.SmartBlockType, updateExisting bool) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, cs, sbType, updateExisting)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, false, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIDGetterMockRecorder) Get(ctx, cs, sbType, updateExisting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIDGetter)(nil).Get), ctx, cs, sbType, updateExisting)
}
