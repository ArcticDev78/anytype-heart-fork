// Code generated by mockery. DO NOT EDIT.

package mock_files

import (
	context "context"

	files "github.com/anyproto/anytype-heart/core/block/import/notion/api/files"
	mock "github.com/stretchr/testify/mock"
)

// MockDownloader is an autogenerated mock type for the Downloader type
type MockDownloader struct {
	mock.Mock
}

type MockDownloader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDownloader) EXPECT() *MockDownloader_Expecter {
	return &MockDownloader_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: ctx, token
func (_m *MockDownloader) Init(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDownloader_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockDownloader_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockDownloader_Expecter) Init(ctx interface{}, token interface{}) *MockDownloader_Init_Call {
	return &MockDownloader_Init_Call{Call: _e.mock.On("Init", ctx, token)}
}

func (_c *MockDownloader_Init_Call) Run(run func(ctx context.Context, token string)) *MockDownloader_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDownloader_Init_Call) Return(_a0 error) *MockDownloader_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDownloader_Init_Call) RunAndReturn(run func(context.Context, string) error) *MockDownloader_Init_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessDownloadedFiles provides a mock function with given fields:
func (_m *MockDownloader) ProcessDownloadedFiles() {
	_m.Called()
}

// MockDownloader_ProcessDownloadedFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessDownloadedFiles'
type MockDownloader_ProcessDownloadedFiles_Call struct {
	*mock.Call
}

// ProcessDownloadedFiles is a helper method to define mock.On call
func (_e *MockDownloader_Expecter) ProcessDownloadedFiles() *MockDownloader_ProcessDownloadedFiles_Call {
	return &MockDownloader_ProcessDownloadedFiles_Call{Call: _e.mock.On("ProcessDownloadedFiles")}
}

func (_c *MockDownloader_ProcessDownloadedFiles_Call) Run(run func()) *MockDownloader_ProcessDownloadedFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDownloader_ProcessDownloadedFiles_Call) Return() *MockDownloader_ProcessDownloadedFiles_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDownloader_ProcessDownloadedFiles_Call) RunAndReturn(run func()) *MockDownloader_ProcessDownloadedFiles_Call {
	_c.Call.Return(run)
	return _c
}

// QueueFileForDownload provides a mock function with given fields: file
func (_m *MockDownloader) QueueFileForDownload(file files.LocalFileProvider) bool {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for QueueFileForDownload")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(files.LocalFileProvider) bool); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockDownloader_QueueFileForDownload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueFileForDownload'
type MockDownloader_QueueFileForDownload_Call struct {
	*mock.Call
}

// QueueFileForDownload is a helper method to define mock.On call
//   - file files.LocalFileProvider
func (_e *MockDownloader_Expecter) QueueFileForDownload(file interface{}) *MockDownloader_QueueFileForDownload_Call {
	return &MockDownloader_QueueFileForDownload_Call{Call: _e.mock.On("QueueFileForDownload", file)}
}

func (_c *MockDownloader_QueueFileForDownload_Call) Run(run func(file files.LocalFileProvider)) *MockDownloader_QueueFileForDownload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(files.LocalFileProvider))
	})
	return _c
}

func (_c *MockDownloader_QueueFileForDownload_Call) Return(_a0 bool) *MockDownloader_QueueFileForDownload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDownloader_QueueFileForDownload_Call) RunAndReturn(run func(files.LocalFileProvider) bool) *MockDownloader_QueueFileForDownload_Call {
	_c.Call.Return(run)
	return _c
}

// StopDownload provides a mock function with given fields:
func (_m *MockDownloader) StopDownload() {
	_m.Called()
}

// MockDownloader_StopDownload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopDownload'
type MockDownloader_StopDownload_Call struct {
	*mock.Call
}

// StopDownload is a helper method to define mock.On call
func (_e *MockDownloader_Expecter) StopDownload() *MockDownloader_StopDownload_Call {
	return &MockDownloader_StopDownload_Call{Call: _e.mock.On("StopDownload")}
}

func (_c *MockDownloader_StopDownload_Call) Run(run func()) *MockDownloader_StopDownload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDownloader_StopDownload_Call) Return() *MockDownloader_StopDownload_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDownloader_StopDownload_Call) RunAndReturn(run func()) *MockDownloader_StopDownload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDownloader creates a new instance of MockDownloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDownloader {
	mock := &MockDownloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
