// Code generated by mockery v2.26.1. DO NOT EDIT.

package mock_importer

import (
	context "context"

	converter "github.com/anyproto/anytype-heart/core/block/import/converter"

	mock "github.com/stretchr/testify/mock"

	treestorage "github.com/anyproto/any-sync/commonspace/object/tree/treestorage"

	types "github.com/gogo/protobuf/types"
)

// MockCreator is an autogenerated mock type for the Creator type
type MockCreator struct {
	mock.Mock
}

type MockCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreator) EXPECT() *MockCreator_Expecter {
	return &MockCreator_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, spaceID, sn, oldIDtoNew, createPayloads, filesIDs
func (_m *MockCreator) Create(ctx context.Context, spaceID string, sn *converter.Snapshot, oldIDtoNew map[string]string, createPayloads map[string]treestorage.TreeStorageCreatePayload, filesIDs []string) (*types.Struct, string, error) {
	ret := _m.Called(ctx, spaceID, sn, oldIDtoNew, createPayloads, filesIDs)

	var r0 *types.Struct
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *converter.Snapshot, map[string]string, map[string]treestorage.TreeStorageCreatePayload, []string) (*types.Struct, string, error)); ok {
		return rf(ctx, spaceID, sn, oldIDtoNew, createPayloads, filesIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *converter.Snapshot, map[string]string, map[string]treestorage.TreeStorageCreatePayload, []string) *types.Struct); ok {
		r0 = rf(ctx, spaceID, sn, oldIDtoNew, createPayloads, filesIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Struct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *converter.Snapshot, map[string]string, map[string]treestorage.TreeStorageCreatePayload, []string) string); ok {
		r1 = rf(ctx, spaceID, sn, oldIDtoNew, createPayloads, filesIDs)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *converter.Snapshot, map[string]string, map[string]treestorage.TreeStorageCreatePayload, []string) error); ok {
		r2 = rf(ctx, spaceID, sn, oldIDtoNew, createPayloads, filesIDs)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCreator_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCreator_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - sn *converter.Snapshot
//   - oldIDtoNew map[string]string
//   - createPayloads map[string]treestorage.TreeStorageCreatePayload
//   - filesIDs []string
func (_e *MockCreator_Expecter) Create(ctx interface{}, spaceID interface{}, sn interface{}, oldIDtoNew interface{}, createPayloads interface{}, filesIDs interface{}) *MockCreator_Create_Call {
	return &MockCreator_Create_Call{Call: _e.mock.On("Create", ctx, spaceID, sn, oldIDtoNew, createPayloads, filesIDs)}
}

func (_c *MockCreator_Create_Call) Run(run func(ctx context.Context, spaceID string, sn *converter.Snapshot, oldIDtoNew map[string]string, createPayloads map[string]treestorage.TreeStorageCreatePayload, filesIDs []string)) *MockCreator_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*converter.Snapshot), args[3].(map[string]string), args[4].(map[string]treestorage.TreeStorageCreatePayload), args[5].([]string))
	})
	return _c
}

func (_c *MockCreator_Create_Call) Return(_a0 *types.Struct, _a1 string, _a2 error) *MockCreator_Create_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockCreator_Create_Call) RunAndReturn(run func(context.Context, string, *converter.Snapshot, map[string]string, map[string]treestorage.TreeStorageCreatePayload, []string) (*types.Struct, string, error)) *MockCreator_Create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockCreator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCreator creates a new instance of MockCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCreator(t mockConstructorTestingTNewMockCreator) *MockCreator {
	mock := &MockCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
