// Code generated by mockery v2.26.1. DO NOT EDIT.

package mock_getblock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	smartblock "github.com/anyproto/anytype-heart/core/block/editor/smartblock"
)

// MockPicker is an autogenerated mock type for the Picker type
type MockPicker struct {
	mock.Mock
}

type MockPicker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPicker) EXPECT() *MockPicker_Expecter {
	return &MockPicker_Expecter{mock: &_m.Mock}
}

// PickBlock provides a mock function with given fields: ctx, id
func (_m *MockPicker) GetObject(ctx context.Context, id string) (smartblock.SmartBlock, error) {
	ret := _m.Called(ctx, id)

	var r0 smartblock.SmartBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (smartblock.SmartBlock, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) smartblock.SmartBlock); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(smartblock.SmartBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPicker_PickBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PickBlock'
type MockPicker_PickBlock_Call struct {
	*mock.Call
}

// PickBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockPicker_Expecter) PickBlock(ctx interface{}, id interface{}) *MockPicker_PickBlock_Call {
	return &MockPicker_PickBlock_Call{Call: _e.mock.On("PickBlock", ctx, id)}
}

func (_c *MockPicker_PickBlock_Call) Run(run func(ctx context.Context, id string)) *MockPicker_PickBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPicker_PickBlock_Call) Return(sb smartblock.SmartBlock, err error) *MockPicker_PickBlock_Call {
	_c.Call.Return(sb, err)
	return _c
}

func (_c *MockPicker_PickBlock_Call) RunAndReturn(run func(context.Context, string) (smartblock.SmartBlock, error)) *MockPicker_PickBlock_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockPicker interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPicker creates a new instance of MockPicker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPicker(t mockConstructorTestingTNewMockPicker) *MockPicker {
	mock := &MockPicker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
