// Code generated by mockery. DO NOT EDIT.

package mock_compatibility

import (
	app "github.com/anyproto/any-sync/app"

	mock "github.com/stretchr/testify/mock"
)

// MockChecker is an autogenerated mock type for the Checker type
type MockChecker struct {
	mock.Mock
}

type MockChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChecker) EXPECT() *MockChecker_Expecter {
	return &MockChecker_Expecter{mock: &_m.Mock}
}

// AddPeerVersion provides a mock function with given fields: peerId, version
func (_m *MockChecker) AddPeerVersion(peerId string, version uint32) {
	_m.Called(peerId, version)
}

// MockChecker_AddPeerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPeerVersion'
type MockChecker_AddPeerVersion_Call struct {
	*mock.Call
}

// AddPeerVersion is a helper method to define mock.On call
//   - peerId string
//   - version uint32
func (_e *MockChecker_Expecter) AddPeerVersion(peerId interface{}, version interface{}) *MockChecker_AddPeerVersion_Call {
	return &MockChecker_AddPeerVersion_Call{Call: _e.mock.On("AddPeerVersion", peerId, version)}
}

func (_c *MockChecker_AddPeerVersion_Call) Run(run func(peerId string, version uint32)) *MockChecker_AddPeerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint32))
	})
	return _c
}

func (_c *MockChecker_AddPeerVersion_Call) Return() *MockChecker_AddPeerVersion_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChecker_AddPeerVersion_Call) RunAndReturn(run func(string, uint32)) *MockChecker_AddPeerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockChecker) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChecker_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockChecker_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockChecker_Expecter) Init(a interface{}) *MockChecker_Init_Call {
	return &MockChecker_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockChecker_Init_Call) Run(run func(a *app.App)) *MockChecker_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockChecker_Init_Call) Return(err error) *MockChecker_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChecker_Init_Call) RunAndReturn(run func(*app.App) error) *MockChecker_Init_Call {
	_c.Call.Return(run)
	return _c
}

// IsVersionCompatibleWithPeers provides a mock function with given fields:
func (_m *MockChecker) IsVersionCompatibleWithPeers() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsVersionCompatibleWithPeers")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChecker_IsVersionCompatibleWithPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsVersionCompatibleWithPeers'
type MockChecker_IsVersionCompatibleWithPeers_Call struct {
	*mock.Call
}

// IsVersionCompatibleWithPeers is a helper method to define mock.On call
func (_e *MockChecker_Expecter) IsVersionCompatibleWithPeers() *MockChecker_IsVersionCompatibleWithPeers_Call {
	return &MockChecker_IsVersionCompatibleWithPeers_Call{Call: _e.mock.On("IsVersionCompatibleWithPeers")}
}

func (_c *MockChecker_IsVersionCompatibleWithPeers_Call) Run(run func()) *MockChecker_IsVersionCompatibleWithPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChecker_IsVersionCompatibleWithPeers_Call) Return(_a0 bool) *MockChecker_IsVersionCompatibleWithPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChecker_IsVersionCompatibleWithPeers_Call) RunAndReturn(run func() bool) *MockChecker_IsVersionCompatibleWithPeers_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockChecker) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockChecker_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockChecker_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockChecker_Expecter) Name() *MockChecker_Name_Call {
	return &MockChecker_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockChecker_Name_Call) Run(run func()) *MockChecker_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChecker_Name_Call) Return(name string) *MockChecker_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockChecker_Name_Call) RunAndReturn(run func() string) *MockChecker_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChecker creates a new instance of MockChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChecker {
	mock := &MockChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
