// Code generated by mockery. DO NOT EDIT.

package mock_subscription

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/gogo/protobuf/types"
)

// Mocksubscription is an autogenerated mock type for the subscription type
type Mocksubscription struct {
	mock.Mock
}

type Mocksubscription_Expecter struct {
	mock *mock.Mock
}

func (_m *Mocksubscription) EXPECT() *Mocksubscription_Expecter {
	return &Mocksubscription_Expecter{mock: &_m.Mock}
}

// close provides a mock function with given fields:
func (_m *Mocksubscription) close() {
	_m.Called()
}

// Mocksubscription_close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'close'
type Mocksubscription_close_Call struct {
	*mock.Call
}

// close is a helper method to define mock.On call
func (_e *Mocksubscription_Expecter) close() *Mocksubscription_close_Call {
	return &Mocksubscription_close_Call{Call: _e.mock.On("close")}
}

func (_c *Mocksubscription_close_Call) Run(run func()) *Mocksubscription_close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mocksubscription_close_Call) Return() *Mocksubscription_close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mocksubscription_close_Call) RunAndReturn(run func()) *Mocksubscription_close_Call {
	_c.Call.Return(run)
	return _c
}

// counters provides a mock function with given fields:
func (_m *Mocksubscription) counters() (int, int) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for counters")
	}

	var r0 int
	var r1 int
	if rf, ok := ret.Get(0).(func() (int, int)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// Mocksubscription_counters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'counters'
type Mocksubscription_counters_Call struct {
	*mock.Call
}

// counters is a helper method to define mock.On call
func (_e *Mocksubscription_Expecter) counters() *Mocksubscription_counters_Call {
	return &Mocksubscription_counters_Call{Call: _e.mock.On("counters")}
}

func (_c *Mocksubscription_counters_Call) Run(run func()) *Mocksubscription_counters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mocksubscription_counters_Call) Return(prev int, next int) *Mocksubscription_counters_Call {
	_c.Call.Return(prev, next)
	return _c
}

func (_c *Mocksubscription_counters_Call) RunAndReturn(run func() (int, int)) *Mocksubscription_counters_Call {
	_c.Call.Return(run)
	return _c
}

// getActiveRecords provides a mock function with given fields:
func (_m *Mocksubscription) getActiveRecords() []*types.Struct {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getActiveRecords")
	}

	var r0 []*types.Struct
	if rf, ok := ret.Get(0).(func() []*types.Struct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Struct)
		}
	}

	return r0
}

// Mocksubscription_getActiveRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getActiveRecords'
type Mocksubscription_getActiveRecords_Call struct {
	*mock.Call
}

// getActiveRecords is a helper method to define mock.On call
func (_e *Mocksubscription_Expecter) getActiveRecords() *Mocksubscription_getActiveRecords_Call {
	return &Mocksubscription_getActiveRecords_Call{Call: _e.mock.On("getActiveRecords")}
}

func (_c *Mocksubscription_getActiveRecords_Call) Run(run func()) *Mocksubscription_getActiveRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mocksubscription_getActiveRecords_Call) Return(res []*types.Struct) *Mocksubscription_getActiveRecords_Call {
	_c.Call.Return(res)
	return _c
}

func (_c *Mocksubscription_getActiveRecords_Call) RunAndReturn(run func() []*types.Struct) *Mocksubscription_getActiveRecords_Call {
	_c.Call.Return(run)
	return _c
}

// hasDep provides a mock function with given fields:
func (_m *Mocksubscription) hasDep() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for hasDep")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Mocksubscription_hasDep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'hasDep'
type Mocksubscription_hasDep_Call struct {
	*mock.Call
}

// hasDep is a helper method to define mock.On call
func (_e *Mocksubscription_Expecter) hasDep() *Mocksubscription_hasDep_Call {
	return &Mocksubscription_hasDep_Call{Call: _e.mock.On("hasDep")}
}

func (_c *Mocksubscription_hasDep_Call) Run(run func()) *Mocksubscription_hasDep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mocksubscription_hasDep_Call) Return(_a0 bool) *Mocksubscription_hasDep_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mocksubscription_hasDep_Call) RunAndReturn(run func() bool) *Mocksubscription_hasDep_Call {
	_c.Call.Return(run)
	return _c
}

// init provides a mock function with given fields: entries
func (_m *Mocksubscription) init(entries []*subscription.entry) error {
	ret := _m.Called(entries)

	if len(ret) == 0 {
		panic("no return value specified for init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*subscription.entry) error); ok {
		r0 = rf(entries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mocksubscription_init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'init'
type Mocksubscription_init_Call struct {
	*mock.Call
}

// init is a helper method to define mock.On call
//   - entries []*subscription.entry
func (_e *Mocksubscription_Expecter) init(entries interface{}) *Mocksubscription_init_Call {
	return &Mocksubscription_init_Call{Call: _e.mock.On("init", entries)}
}

func (_c *Mocksubscription_init_Call) Run(run func(entries []*subscription.entry)) *Mocksubscription_init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*subscription.entry))
	})
	return _c
}

func (_c *Mocksubscription_init_Call) Return(err error) *Mocksubscription_init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Mocksubscription_init_Call) RunAndReturn(run func([]*subscription.entry) error) *Mocksubscription_init_Call {
	_c.Call.Return(run)
	return _c
}

// onChange provides a mock function with given fields: ctx
func (_m *Mocksubscription) onChange(ctx *subscription.opCtx) {
	_m.Called(ctx)
}

// Mocksubscription_onChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'onChange'
type Mocksubscription_onChange_Call struct {
	*mock.Call
}

// onChange is a helper method to define mock.On call
//   - ctx *subscription.opCtx
func (_e *Mocksubscription_Expecter) onChange(ctx interface{}) *Mocksubscription_onChange_Call {
	return &Mocksubscription_onChange_Call{Call: _e.mock.On("onChange", ctx)}
}

func (_c *Mocksubscription_onChange_Call) Run(run func(ctx *subscription.opCtx)) *Mocksubscription_onChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*subscription.opCtx))
	})
	return _c
}

func (_c *Mocksubscription_onChange_Call) Return() *Mocksubscription_onChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mocksubscription_onChange_Call) RunAndReturn(run func(*subscription.opCtx)) *Mocksubscription_onChange_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocksubscription creates a new instance of Mocksubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mocksubscription {
	mock := &Mocksubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
