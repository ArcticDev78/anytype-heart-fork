// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/protos/service/service.proto

package service

import (
	context "context"
	fmt "fmt"
	pb "github.com/anytypeio/go-anytype-middleware/pb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/protos/service/service.proto", fileDescriptor_93a29dc403579097) }

var fileDescriptor_93a29dc403579097 = []byte{
	// 2873 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x9b, 0x5b, 0x6f, 0xdc, 0xb8,
	0x15, 0xc7, 0x77, 0x80, 0x62, 0x77, 0xcb, 0xbd, 0xab, 0xdd, 0x4b, 0x9c, 0xad, 0x73, 0xd9, 0x64,
	0x93, 0x38, 0x89, 0x9c, 0x38, 0xed, 0x16, 0xbd, 0x2e, 0xec, 0x71, 0xec, 0x18, 0xeb, 0x24, 0xae,
	0xc7, 0x89, 0x8b, 0x45, 0x6f, 0xb2, 0xc4, 0xcc, 0x68, 0x2d, 0x8b, 0x5a, 0x89, 0x33, 0xce, 0x14,
	0x68, 0xd1, 0x1b, 0x0a, 0xf4, 0x6d, 0x81, 0x3e, 0xf6, 0xa9, 0xaf, 0xfd, 0x24, 0x7d, 0xdc, 0xc7,
	0x3e, 0x16, 0xc9, 0x07, 0xe8, 0x57, 0x28, 0x48, 0x1e, 0x91, 0x22, 0x45, 0x52, 0x9a, 0x3c, 0x05,
	0x99, 0xf3, 0x3b, 0xff, 0x73, 0x24, 0x1d, 0x92, 0x87, 0x12, 0x8d, 0xce, 0x15, 0x47, 0xab, 0x45,
	0x49, 0x28, 0xa9, 0x56, 0x2b, 0x5c, 0xce, 0xd2, 0x18, 0xd7, 0xff, 0x86, 0xfc, 0xe7, 0xe0, 0x95,
	0x28, 0x9f, 0xd3, 0x79, 0x81, 0x97, 0x3e, 0x50, 0x64, 0x4c, 0x4e, 0x4e, 0xa2, 0x3c, 0xa9, 0x04,
	0xb2, 0xf4, 0x9e, 0xb2, 0xe0, 0x19, 0xce, 0x29, 0xfc, 0xbe, 0xf6, 0xbf, 0x0a, 0xbd, 0x39, 0xcc,
	0x52, 0x9c, 0xd3, 0x21, 0x38, 0x04, 0x25, 0x7a, 0xf7, 0xe1, 0xd1, 0x17, 0x38, 0xa6, 0xeb, 0x49,
	0x72, 0x98, 0xd2, 0x89, 0xf8, 0xcf, 0x4e, 0x12, 0x5c, 0x0f, 0x21, 0x4e, 0xb8, 0x5f, 0xc4, 0xa1,
	0xf8, 0x39, 0x34, 0xa0, 0x70, 0x1f, 0x7f, 0x39, 0xc5, 0x15, 0x5d, 0xba, 0xd1, 0x0f, 0xae, 0x0a,
	0x92, 0x57, 0x38, 0x78, 0x82, 0xde, 0x11, 0x3f, 0x8e, 0x26, 0x51, 0x89, 0x37, 0xe6, 0xbb, 0x69,
	0x7e, 0x1c, 0x5c, 0xb1, 0x49, 0x34, 0x00, 0x19, 0xeb, 0x6a, 0x37, 0x08, 0x71, 0x0e, 0xd1, 0xeb,
	0x87, 0x51, 0x96, 0x61, 0x3a, 0x2c, 0x71, 0x44, 0x71, 0x70, 0x51, 0xf3, 0x14, 0xa6, 0x50, 0xd8,
	0xa4, 0xfa, 0x47, 0x5e, 0x06, 0x84, 0x3f, 0x47, 0x6f, 0x08, 0xcb, 0x3e, 0x8e, 0xc9, 0x0c, 0x97,
	0x81, 0xd5, 0x0b, 0x8c, 0x52, 0xfa, 0x92, 0x1f, 0x32, 0xb5, 0x87, 0x24, 0x9f, 0xe1, 0x92, 0xda,
	0xb5, 0xc1, 0xe8, 0xd7, 0x56, 0x10, 0x68, 0xff, 0x06, 0xbd, 0x75, 0x48, 0xca, 0xe3, 0xaa, 0x88,
	0x62, 0x0c, 0xf7, 0xe4, 0xb2, 0xee, 0x58, 0x5b, 0xcd, 0xdb, 0xf2, 0x71, 0x17, 0x66, 0x89, 0x30,
	0xc2, 0x19, 0x8e, 0xa9, 0x33, 0x82, 0x30, 0x77, 0x46, 0x90, 0x18, 0x44, 0xc8, 0xd0, 0xb7, 0xa4,
	0x71, 0x1b, 0xd3, 0xe1, 0xb4, 0x2c, 0x71, 0x4e, 0x83, 0x6b, 0x0e, 0x77, 0x85, 0xc8, 0x48, 0x2b,
	0x7d, 0x50, 0xcb, 0xf5, 0x6c, 0x63, 0xba, 0x9e, 0x65, 0xce, 0xeb, 0x11, 0xe6, 0xce, 0xeb, 0x91,
	0x18, 0x44, 0xf8, 0x3d, 0x3a, 0xd3, 0xb8, 0x63, 0x74, 0xa7, 0xba, 0x97, 0x8e, 0x27, 0x59, 0x3a,
	0x9e, 0x50, 0x9c, 0x04, 0xab, 0xce, 0x9b, 0xa2, 0x83, 0x32, 0xea, 0xad, 0xfe, 0x0e, 0x10, 0xff,
	0x97, 0xe8, 0xcd, 0xf5, 0x38, 0x26, 0xd3, 0x5c, 0x16, 0xb3, 0x5e, 0x4b, 0x60, 0x6c, 0x55, 0xf3,
	0xe5, 0x0e, 0x4a, 0x95, 0x33, 0xd8, 0xa0, 0xe0, 0x3e, 0xb2, 0xfa, 0x19, 0xe5, 0x76, 0xc9, 0x0f,
	0xb5, 0xb4, 0xa1, 0xd4, 0xec, 0xda, 0x46, 0xa1, 0x5d, 0xf2, 0x43, 0xa0, 0x7d, 0x80, 0x5e, 0xab,
	0xb5, 0x29, 0x29, 0x82, 0x0b, 0x76, 0x27, 0x4a, 0x0a, 0xa9, 0x7b, 0xd1, 0x87, 0x28, 0xd5, 0xad,
	0x34, 0xc3, 0x0f, 0x9f, 0x3c, 0xc9, 0x48, 0x94, 0x18, 0xaa, 0xcc, 0x12, 0x82, 0xc9, 0xa1, 0x6a,
	0x20, 0xaa, 0x48, 0x99, 0x61, 0x37, 0xad, 0x68, 0xad, 0x7c, 0xb9, 0xe5, 0xc6, 0xac, 0x2d, 0xf5,
	0x8f, 0xbb, 0x30, 0x88, 0xf0, 0x33, 0x84, 0x1e, 0xe3, 0xb2, 0x4a, 0x49, 0xbe, 0x8d, 0x69, 0x70,
	0x5e, 0xf3, 0x02, 0x03, 0x2b, 0x6c, 0xa9, 0x7b, 0xc1, 0x43, 0x80, 0xe4, 0x3d, 0xf4, 0xca, 0x2e,
	0x19, 0x8f, 0x70, 0x9e, 0x04, 0xdf, 0xd1, 0xe8, 0x5d, 0x32, 0x0e, 0xd9, 0xcf, 0x52, 0x6c, 0xd9,
	0x65, 0x06, 0xa5, 0x07, 0xe8, 0x9b, 0x43, 0x92, 0x3f, 0x49, 0xc7, 0x2c, 0xb7, 0x73, 0x1a, 0x2c,
	0x7e, 0xd7, 0x52, 0x3b, 0xef, 0x06, 0x40, 0x6f, 0x07, 0xbd, 0x3a, 0x9a, 0x4c, 0x69, 0x42, 0x4e,
	0x73, 0x23, 0xb5, 0xfa, 0x67, 0x47, 0x6a, 0x0d, 0xb3, 0x5a, 0xe9, 0xee, 0x3e, 0xa5, 0xb8, 0xcc,
	0xa3, 0x6c, 0xb3, 0x24, 0x05, 0xbb, 0xc1, 0x95, 0xb1, 0xd2, 0x35, 0xed, 0xfc, 0x09, 0x54, 0x8e,
	0x95, 0xce, 0x0a, 0xaa, 0x49, 0xb1, 0x69, 0x1e, 0x92, 0x9c, 0xb6, 0x27, 0x45, 0x4d, 0x00, 0x10,
	0xc7, 0xa4, 0xe8, 0x40, 0x21, 0xda, 0x3e, 0x7a, 0x8d, 0x2d, 0xb4, 0x7b, 0x25, 0x9e, 0xa5, 0xf8,
	0xd4, 0x28, 0x87, 0x86, 0xc5, 0x51, 0x0e, 0x3a, 0x01, 0x9a, 0x0f, 0x11, 0x7a, 0x54, 0xb0, 0xa2,
	0x63, 0x57, 0x66, 0x3c, 0x45, 0x65, 0x70, 0x3c, 0x45, 0x0d, 0x00, 0xc1, 0x47, 0xe8, 0xf5, 0x4d,
	0x72, 0x9a, 0x4b, 0x49, 0x3d, 0x87, 0xa6, 0xc9, 0x31, 0xd6, 0x0c, 0x44, 0x8d, 0xe0, 0x8d, 0x8c,
	0xc4, 0xc7, 0x22, 0xa4, 0xa1, 0xca, 0x2d, 0x90, 0x8d, 0x43, 0xd5, 0x40, 0x54, 0xa7, 0xc2, 0x0d,
	0xfb, 0xb8, 0xc8, 0xa2, 0xd8, 0xec, 0x54, 0x84, 0x0f, 0xd8, 0x1c, 0x9d, 0x8a, 0xc9, 0x80, 0x70,
	0x8a, 0x02, 0x48, 0x37, 0x89, 0x28, 0xae, 0xeb, 0xe2, 0xaa, 0x35, 0xa5, 0x06, 0x21, 0x83, 0x5c,
	0xeb, 0x41, 0xaa, 0x61, 0xc8, 0xed, 0x0f, 0x0b, 0x9c, 0x1b, 0x0f, 0x50, 0xf8, 0x31, 0x83, 0xe3,
	0x01, 0x6a, 0x80, 0xa1, 0x37, 0x9a, 0x90, 0x53, 0xab, 0x1e, 0x33, 0x78, 0xf5, 0x00, 0x00, 0x3d,
	0x82, 0xbe, 0xcd, 0x7f, 0xde, 0xc6, 0x74, 0x6f, 0x7a, 0x94, 0xa5, 0xf1, 0x21, 0x3e, 0x7a, 0xb4,
	0xbf, 0x1b, 0xac, 0x58, 0x3c, 0x0d, 0x46, 0x46, 0xb9, 0xde, 0x8b, 0x35, 0x02, 0xb2, 0xcb, 0xda,
	0x28, 0x71, 0x94, 0xc4, 0xe5, 0xf4, 0xe4, 0xa8, 0xb2, 0x06, 0x34, 0x18, 0x6f, 0xc0, 0x36, 0xab,
	0x66, 0x01, 0x71, 0xc7, 0x30, 0x6d, 0xc6, 0xb3, 0x3d, 0x43, 0x1d, 0x71, 0xcc, 0x02, 0x0e, 0xd4,
	0x18, 0x09, 0xb0, 0xae, 0xdb, 0x46, 0x82, 0xb1, 0xaa, 0x5f, 0xf4, 0x21, 0x6a, 0x2d, 0x6b, 0xa8,
	0xee, 0x45, 0x63, 0xb3, 0x45, 0x6d, 0xba, 0x31, 0xb3, 0x63, 0x2d, 0xb3, 0x60, 0xaa, 0xe1, 0x69,
	0x44, 0x18, 0x61, 0x6a, 0x34, 0x3c, 0x4d, 0xcf, 0x51, 0x63, 0xe1, 0xb8, 0xdc, 0x41, 0x99, 0x13,
	0x44, 0x9e, 0xb1, 0x6d, 0x8d, 0x75, 0x82, 0xe0, 0x26, 0xff, 0x04, 0x51, 0x23, 0x6a, 0x01, 0x16,
	0x49, 0x67, 0xa4, 0xc2, 0x81, 0xad, 0xd8, 0xb9, 0xc5, 0x31, 0xe3, 0xea, 0x84, 0xea, 0x9e, 0xf8,
	0xef, 0xf5, 0x3c, 0x17, 0xd8, 0x26, 0x94, 0xda, 0xe8, 0xe8, 0x9e, 0x5a, 0x10, 0x68, 0xff, 0x02,
	0xb4, 0xb7, 0x31, 0xbd, 0x1f, 0x95, 0xc7, 0x95, 0xf5, 0x16, 0xb3, 0x45, 0x97, 0x5b, 0xbd, 0xb7,
	0xb8, 0x49, 0x19, 0x33, 0xc3, 0xa3, 0x3c, 0x21, 0xd6, 0x99, 0x81, 0x19, 0xbc, 0x33, 0x03, 0x00,
	0x86, 0xde, 0x3e, 0x76, 0xe8, 0x31, 0x83, 0x57, 0x0f, 0x00, 0xd0, 0xfb, 0x35, 0x54, 0xd8, 0x08,
	0xd3, 0xad, 0x14, 0x67, 0x49, 0x65, 0x2d, 0x61, 0x56, 0x35, 0xc2, 0xec, 0x2d, 0x61, 0x0d, 0x83,
	0x00, 0x5f, 0xc2, 0xcc, 0x32, 0x62, 0x3b, 0xd0, 0x8a, 0x96, 0x69, 0x4c, 0x53, 0x92, 0x57, 0xc1,
	0x75, 0x87, 0x7f, 0x13, 0x72, 0xec, 0xd9, 0x9d, 0xb0, 0x51, 0x2d, 0xac, 0x3f, 0xbc, 0x4f, 0x66,
	0xd8, 0x56, 0x2d, 0xbc, 0x77, 0x64, 0x46, 0x5f, 0xb5, 0x34, 0x21, 0xd0, 0x9e, 0xa2, 0xf7, 0x34,
	0xed, 0x03, 0xf2, 0x00, 0x9f, 0xf2, 0xa1, 0x7f, 0xc3, 0xe3, 0x2f, 0x29, 0x19, 0xed, 0x66, 0x4f,
	0x1a, 0xc2, 0x7e, 0x35, 0x40, 0xe7, 0x24, 0x04, 0x7b, 0xe5, 0xe1, 0x24, 0xcd, 0x92, 0x12, 0xe7,
	0x07, 0x84, 0xb1, 0x55, 0xf0, 0x3d, 0x87, 0xa4, 0x1d, 0x97, 0x99, 0x7c, 0xb2, 0xa8, 0x1b, 0xa4,
	0x74, 0x0c, 0xcb, 0x35, 0x83, 0x55, 0xf5, 0x5c, 0x73, 0xa8, 0x59, 0x2a, 0x68, 0xa5, 0x0f, 0x0a,
	0xc1, 0x66, 0xe8, 0xdd, 0x66, 0xb0, 0x03, 0xfc, 0x94, 0x8e, 0xe8, 0x3c, 0xc3, 0xc1, 0x4d, 0x8f,
	0x08, 0xa3, 0x42, 0x8e, 0xc9, 0x98, 0x61, 0x5f, 0xdc, 0xe8, 0x49, 0x18, 0xb4, 0x39, 0x2d, 0xb2,
	0x34, 0x66, 0xeb, 0xc7, 0x55, 0x87, 0x8a, 0x24, 0x7c, 0x3d, 0x49, 0x8b, 0x84, 0x50, 0x7f, 0x1d,
	0xa0, 0xb3, 0xcd, 0x6b, 0xdc, 0x88, 0xe2, 0xe3, 0x71, 0x49, 0xa6, 0x79, 0x32, 0x24, 0x19, 0x29,
	0x83, 0x35, 0x4f, 0xea, 0x06, 0x2b, 0xc3, 0xdf, 0x59, 0xc8, 0x07, 0x12, 0x99, 0xa0, 0x77, 0x9a,
	0x79, 0xac, 0x67, 0xe9, 0x38, 0x77, 0x5e, 0x32, 0x53, 0xe2, 0x44, 0xe7, 0x25, 0x37, 0x49, 0x88,
	0x54, 0xc1, 0xdc, 0x00, 0x91, 0x36, 0xd3, 0x99, 0x78, 0xa8, 0x37, 0x3c, 0x12, 0x9b, 0xe9, 0xcc,
	0x78, 0xa6, 0x37, 0x7b, 0xd2, 0x6a, 0x9f, 0x23, 0x99, 0x83, 0x69, 0x99, 0xef, 0xe4, 0x94, 0x18,
	0xfb, 0x1c, 0xa5, 0x51, 0x03, 0x8e, 0x7d, 0x8e, 0x15, 0x84, 0x38, 0x5f, 0x40, 0x9c, 0x11, 0xa6,
	0xbb, 0x11, 0xc5, 0x4f, 0x59, 0x79, 0xb9, 0xfa, 0x9b, 0x90, 0x13, 0xa2, 0x02, 0x3b, 0xfa, 0x1b,
	0x1d, 0x85, 0x58, 0x63, 0xf4, 0x76, 0x1d, 0x8b, 0x19, 0x78, 0xa8, 0xab, 0x0e, 0x7f, 0xee, 0xa9,
	0x45, 0xba, 0xd6, 0x83, 0x6c, 0x5f, 0x14, 0x33, 0x88, 0xca, 0xf4, 0xfa, 0xeb, 0x05, 0xb9, 0xd2,
	0x07, 0x75, 0x8f, 0x79, 0x11, 0xaf, 0x73, 0xcc, 0xeb, 0x31, 0xc3, 0xbe, 0xb8, 0xbd, 0x2a, 0x19,
	0xc2, 0x16, 0x75, 0x6f, 0x55, 0x72, 0x1d, 0x46, 0xf5, 0xaa, 0xca, 0x26, 0x6d, 0xbf, 0xb1, 0x62,
	0x1c, 0x78, 0x6f, 0xac, 0x3e, 0x08, 0x56, 0xfa, 0xa0, 0x10, 0xab, 0x50, 0xbd, 0x37, 0xbf, 0xa9,
	0x13, 0x1c, 0x1f, 0xe3, 0xc4, 0xb9, 0x22, 0x8b, 0x7b, 0x24, 0xa0, 0xce, 0x15, 0xd9, 0x80, 0x8d,
	0x96, 0x70, 0x54, 0x64, 0x29, 0xb5, 0xb6, 0x84, 0xdc, 0xe2, 0x6d, 0x09, 0x6b, 0xc2, 0x90, 0xbc,
	0x8f, 0xcb, 0xb1, 0xbd, 0xcb, 0xe4, 0x16, 0xaf, 0x64, 0x4d, 0x18, 0xbd, 0xd5, 0x90, 0x14, 0x73,
	0x6b, 0x6f, 0xc5, 0x0c, 0xde, 0xde, 0x0a, 0x00, 0x23, 0xc5, 0xbd, 0xa8, 0xa2, 0xf6, 0x14, 0xb9,
	0xc5, 0x9b, 0x62, 0x4d, 0x80, 0xe4, 0x67, 0xe8, 0x55, 0x91, 0xe2, 0x94, 0x06, 0xcb, 0xb6, 0x04,
	0xa6, 0xea, 0x26, 0x9e, 0x73, 0xda, 0x8d, 0xf6, 0xff, 0xee, 0xd3, 0x82, 0x94, 0xd4, 0xda, 0xfe,
	0x0b, 0x93, 0xb7, 0xfd, 0x97, 0x88, 0xb1, 0xb3, 0xdb, 0x39, 0x61, 0xbf, 0xb3, 0x2a, 0xe7, 0x6f,
	0xa7, 0x6c, 0xb5, 0xac, 0x23, 0xde, 0x5a, 0x6e, 0xa1, 0xed, 0x99, 0x6f, 0x2b, 0xcd, 0xf0, 0x83,
	0xe8, 0x04, 0x3b, 0x67, 0x3e, 0xfe, 0x76, 0x84, 0x11, 0x9d, 0x33, 0x5f, 0x93, 0x6c, 0x0f, 0xd0,
	0x9d, 0x93, 0x68, 0x2c, 0x22, 0xb9, 0xfc, 0x39, 0xa1, 0x87, 0x5a, 0xe9, 0x83, 0x42, 0xac, 0x13,
	0xe8, 0x3a, 0xea, 0x58, 0x87, 0x69, 0x42, 0x27, 0x81, 0x5f, 0x81, 0x33, 0xde, 0xbd, 0x78, 0x9b,
	0x6d, 0x5f, 0xda, 0xe3, 0x34, 0xc1, 0xc4, 0x7b, 0x69, 0x9c, 0xe8, 0x77, 0x69, 0x1a, 0xda, 0xbe,
	0x34, 0x6e, 0xf6, 0x5f, 0x9a, 0x50, 0xe8, 0x77, 0x69, 0x3a, 0x0b, 0xe1, 0xfe, 0x34, 0x40, 0x67,
	0xe4, 0x2a, 0x9c, 0xe6, 0xc7, 0x07, 0x51, 0x39, 0xc6, 0x54, 0xd4, 0x67, 0x12, 0xdc, 0x76, 0x2d,
	0xb1, 0x6c, 0x3f, 0xab, 0xa1, 0x32, 0xfa, 0xda, 0x22, 0x2e, 0x46, 0xa7, 0xbc, 0x41, 0xc8, 0xf1,
	0x49, 0x54, 0x1e, 0x6f, 0x61, 0x1a, 0x4f, 0xac, 0x37, 0xb8, 0x26, 0x42, 0x8e, 0x78, 0x6f, 0x70,
	0x0b, 0x35, 0xdb, 0xc8, 0x1a, 0x10, 0xfb, 0xfe, 0xf5, 0x3c, 0x11, 0x61, 0xd7, 0x7c, 0x5a, 0x3a,
	0xeb, 0x6b, 0x23, 0x3d, 0x3e, 0x90, 0xc8, 0xef, 0xd0, 0x07, 0x9c, 0x64, 0x63, 0x49, 0x32, 0xf0,
	0x2a, 0x72, 0xd5, 0x22, 0xc8, 0xc7, 0x9c, 0x01, 0x3a, 0xbe, 0x15, 0x79, 0x1d, 0x20, 0x7c, 0x0e,
	0xd3, 0xd0, 0x3e, 0xce, 0x22, 0xb6, 0x3f, 0x1c, 0x61, 0xfa, 0x19, 0x9e, 0x5b, 0x2b, 0xad, 0x46,
	0x42, 0xc1, 0x78, 0x2b, 0xad, 0xcd, 0x42, 0x3c, 0x0c, 0x13, 0x51, 0x0d, 0xac, 0x27, 0x89, 0xad,
	0xab, 0x54, 0x02, 0xeb, 0x49, 0xe2, 0xeb, 0x2a, 0x4d, 0x10, 0xc2, 0xfc, 0x16, 0xbd, 0x2f, 0xde,
	0x84, 0x44, 0x34, 0x9a, 0xa5, 0xf8, 0xf4, 0x71, 0x8a, 0x4f, 0xe1, 0xad, 0x56, 0x68, 0x7b, 0xdd,
	0x01, 0x58, 0xa8, 0x38, 0x19, 0x74, 0xb5, 0x37, 0xef, 0x89, 0xbd, 0x89, 0x33, 0xdc, 0x27, 0xb6,
	0xe0, 0xfa, 0xc7, 0x96, 0xbc, 0x27, 0xb6, 0x78, 0xb9, 0xdb, 0x1d, 0x5b, 0x70, 0xfd, 0x63, 0x4b,
	0x1e, 0x62, 0xff, 0x79, 0x80, 0x96, 0x5a, 0xc1, 0xd9, 0xce, 0x28, 0xa6, 0xe9, 0x0c, 0x5b, 0x67,
	0x11, 0x4d, 0x4f, 0xa2, 0xde, 0x59, 0xc4, 0xe9, 0x02, 0x59, 0xfc, 0x6d, 0x80, 0x3e, 0xb4, 0x65,
	0xb1, 0x47, 0xaa, 0x94, 0xd5, 0x49, 0x70, 0xa7, 0x87, 0x68, 0x0d, 0xcb, 0x4c, 0xbe, 0xbb, 0x98,
	0x13, 0xe4, 0x72, 0x0a, 0x6f, 0x41, 0x6a, 0x72, 0x84, 0xe9, 0x88, 0x4c, 0xcb, 0xd8, 0xba, 0x1f,
	0x57, 0x7a, 0x12, 0xf3, 0xf5, 0xe6, 0x76, 0xdc, 0x98, 0x54, 0x6a, 0xa6, 0x39, 0xda, 0xbc, 0xcf,
	0xb5, 0x01, 0x7a, 0x27, 0x15, 0x87, 0x83, 0x39, 0xb9, 0x9a, 0xf1, 0xa1, 0x14, 0xd7, 0xfa, 0x28,
	0x1a, 0xe5, 0x78, 0x67, 0x21, 0x9f, 0xae, 0x44, 0x60, 0x3c, 0xf6, 0x4a, 0xc4, 0x18, 0x93, 0x77,
	0x16, 0xf2, 0x81, 0x44, 0xfe, 0x31, 0x40, 0x17, 0xad, 0x89, 0xb0, 0xcd, 0xce, 0xfa, 0x2c, 0x4a,
	0xb3, 0xe8, 0x28, 0xc3, 0xc1, 0x0f, 0xfa, 0x68, 0x6b, 0x2e, 0x32, 0xad, 0x1f, 0xbe, 0x88, 0x2b,
	0x64, 0xf7, 0x87, 0x7a, 0xf9, 0x57, 0xd9, 0xc5, 0xa4, 0x4c, 0x60, 0xc2, 0xec, 0x78, 0xfe, 0x8a,
	0x94, 0xb9, 0xdc, 0x5e, 0xc0, 0xc3, 0x9f, 0x02, 0x14, 0x4c, 0x8f, 0x14, 0x8c, 0x72, 0xb9, 0xbd,
	0x80, 0x87, 0x3f, 0x05, 0x28, 0x95, 0x1e, 0x29, 0x18, 0x85, 0x72, 0x7b, 0x01, 0x0f, 0x48, 0xe1,
	0x9f, 0x03, 0x74, 0xc9, 0x92, 0x42, 0xfd, 0xf8, 0x1e, 0x16, 0xf5, 0x20, 0xfe, 0x51, 0xb7, 0x76,
	0xcb, 0x49, 0x26, 0xf6, 0xe3, 0x17, 0x73, 0x86, 0x1c, 0xff, 0x35, 0x40, 0x57, 0x3a, 0x73, 0x84,
	0xe7, 0xf6, 0xd3, 0x45, 0x23, 0x19, 0x4f, 0xf1, 0xd3, 0x17, 0xf6, 0x5f, 0x24, 0x59, 0x78, 0xc2,
	0x0b, 0x27, 0x6b, 0x3c, 0xef, 0x4f, 0x5f, 0xd8, 0xdf, 0x68, 0x80, 0xc5, 0x01, 0xb8, 0x83, 0x79,
	0xc1, 0x3f, 0x65, 0xd9, 0x1a, 0x60, 0x45, 0x84, 0xcd, 0xef, 0x59, 0x2b, 0x7d, 0x50, 0x08, 0x56,
	0xa2, 0x77, 0x1f, 0x44, 0xb3, 0x74, 0x2c, 0xe7, 0x05, 0x01, 0x9a, 0x5f, 0x1c, 0x14, 0x13, 0x36,
	0x20, 0xc7, 0xfb, 0x0d, 0x27, 0x0c, 0x31, 0xff, 0x3e, 0x40, 0xe7, 0x15, 0xb3, 0x8d, 0x81, 0xd8,
	0xc9, 0x9f, 0x90, 0xc3, 0x94, 0x4e, 0xd8, 0xe6, 0xa0, 0x0a, 0x3e, 0x71, 0x49, 0xda, 0x79, 0x99,
	0xca, 0xf7, 0x17, 0xf6, 0x53, 0xfb, 0x7b, 0x61, 0xdf, 0x2e, 0xa3, 0x62, 0x62, 0xec, 0xef, 0xe1,
	0x30, 0x22, 0x37, 0x39, 0xf6, 0xf7, 0x06, 0xa2, 0xbe, 0xff, 0xc3, 0x89, 0x48, 0x1c, 0x95, 0xf1,
	0x24, 0xb0, 0xfa, 0x08, 0x9b, 0xe3, 0xfb, 0xbf, 0xc9, 0x98, 0x47, 0x2d, 0xdd, 0x2d, 0x34, 0x78,
	0xda, 0x16, 0xf3, 0xab, 0xdd, 0xa0, 0xfa, 0xd6, 0xad, 0xc7, 0x81, 0x31, 0xbd, 0xe2, 0x53, 0x30,
	0xc6, 0xef, 0xf5, 0x5e, 0xac, 0x2b, 0x20, 0x8c, 0x4b, 0x6f, 0x40, 0x63, 0x0c, 0x5e, 0xef, 0xc5,
	0x42, 0xc0, 0xa7, 0xe8, 0x7d, 0x3d, 0xa0, 0x9a, 0x5f, 0x6f, 0xfa, 0x74, 0xda, 0x33, 0x6a, 0xd8,
	0x17, 0x87, 0xc8, 0x7f, 0x1c, 0xa0, 0x25, 0x5b, 0x68, 0xeb, 0x72, 0x67, 0x95, 0xf3, 0x2e, 0x77,
	0x7e, 0x8f, 0x8e, 0x1c, 0xac, 0xeb, 0x9d, 0x55, 0xd1, 0xbb, 0xde, 0xf9, 0x3d, 0x20, 0x87, 0xbf,
	0x0c, 0xd0, 0x59, 0x3d, 0x07, 0xbd, 0x1f, 0xf2, 0x4a, 0xda, 0xfb, 0xa0, 0xb5, 0x45, 0x5c, 0xd4,
	0x09, 0x85, 0x7a, 0xac, 0xd2, 0xdd, 0x68, 0x4e, 0xa6, 0xe6, 0x11, 0x57, 0x39, 0x14, 0xc1, 0xec,
	0xf8, 0xbc, 0x6b, 0xc1, 0x1a, 0xbd, 0x85, 0xb0, 0x6e, 0xe1, 0x88, 0x4e, 0x4b, 0x9c, 0x34, 0x47,
	0xaf, 0xf5, 0x5e, 0x9b, 0xa0, 0xb6, 0x13, 0xbe, 0xbd, 0x80, 0x47, 0x63, 0x63, 0x64, 0x4f, 0x61,
	0x1f, 0x9f, 0x90, 0x19, 0x36, 0x36, 0x46, 0x2e, 0x4d, 0x01, 0x3b, 0x36, 0x46, 0x9d, 0x4e, 0xea,
	0xe5, 0xa7, 0xbc, 0xe1, 0x3b, 0xd5, 0x56, 0x34, 0x23, 0x65, 0x4a, 0xcd, 0x97, 0x69, 0xea, 0x6e,
	0x2a, 0xc4, 0xb1, 0xd4, 0x39, 0x50, 0x6b, 0xb4, 0xf5, 0x32, 0x9e, 0xa4, 0x33, 0x9c, 0x78, 0xa2,
	0xd5, 0x48, 0x8f, 0x68, 0x0d, 0xd4, 0x5c, 0x4e, 0x0e, 0x08, 0x5b, 0xbe, 0xad, 0xcb, 0x09, 0x37,
	0xf9, 0x97, 0x93, 0x1a, 0x01, 0xd5, 0x18, 0xbd, 0x2d, 0x0c, 0xfc, 0x13, 0xab, 0x18, 0xa2, 0xb6,
	0xe2, 0x13, 0x9f, 0x4d, 0xf5, 0x81, 0x79, 0xa5, 0x93, 0x53, 0x6f, 0x0f, 0x94, 0x55, 0xbf, 0x59,
	0xa1, 0x4b, 0x83, 0xbf, 0x2e, 0x6d, 0xdf, 0xb1, 0xd5, 0xde, 0x3c, 0xc4, 0x3e, 0x82, 0x53, 0x42,
	0x23, 0x4c, 0x37, 0x31, 0x8d, 0xd2, 0xac, 0x0a, 0x5c, 0x67, 0x27, 0xc0, 0xee, 0xb8, 0x3e, 0x1b,
	0xa7, 0xbe, 0x34, 0xec, 0x45, 0xe3, 0xfa, 0x9c, 0xbc, 0xfe, 0xa5, 0x81, 0x1f, 0x24, 0x30, 0xf6,
	0x31, 0x17, 0x3c, 0x84, 0xfa, 0x18, 0x32, 0x92, 0x7f, 0x8d, 0xa0, 0x7f, 0x4a, 0x18, 0xb5, 0xff,
	0x14, 0xe1, 0xbc, 0x1b, 0x30, 0x9f, 0x33, 0xeb, 0xd8, 0x40, 0xd6, 0xf6, 0x9c, 0x79, 0x43, 0x67,
	0xa8, 0x5f, 0xe9, 0xe4, 0xd4, 0x79, 0x29, 0x65, 0x65, 0x4f, 0xc5, 0x38, 0xcc, 0xd3, 0x70, 0xe5,
	0xcf, 0xcc, 0x7e, 0x98, 0xa7, 0x4d, 0xa9, 0xd7, 0x1e, 0xca, 0xd6, 0x9c, 0x7a, 0xad, 0xcb, 0x2a,
	0x17, 0x90, 0x33, 0x85, 0x16, 0x2f, 0xec, 0x8b, 0x43, 0x60, 0x5a, 0xff, 0xe5, 0x4b, 0x33, 0x30,
	0x9b, 0x60, 0x6f, 0x74, 0x0a, 0x35, 0x27, 0xd7, 0x9b, 0x3d, 0x69, 0xf5, 0xb2, 0xa5, 0x1d, 0x15,
	0x56, 0xf2, 0xd5, 0x4e, 0x29, 0x63, 0x21, 0xbf, 0xd5, 0xdf, 0xc1, 0x17, 0x1e, 0xa6, 0xf4, 0xee,
	0xf0, 0xc6, 0x74, 0x7e, 0xab, 0xbf, 0x03, 0x84, 0xff, 0x09, 0xfa, 0xc6, 0x5e, 0x9a, 0x8f, 0x83,
	0x33, 0xfa, 0x58, 0x49, 0xf3, 0xb1, 0x14, 0x5d, 0xb2, 0x99, 0xd4, 0x21, 0xa4, 0xbd, 0x92, 0xc4,
	0xb8, 0xaa, 0x86, 0x51, 0x1e, 0xe3, 0xcc, 0x38, 0x84, 0x04, 0xb6, 0x50, 0x18, 0x1d, 0x87, 0x90,
	0x5a, 0x90, 0x9a, 0x89, 0xef, 0xa5, 0x15, 0x25, 0xe5, 0x9c, 0x1f, 0x38, 0xd5, 0x47, 0x33, 0x58,
	0xf4, 0x23, 0xa7, 0x17, 0x7d, 0x88, 0x6a, 0x16, 0xc0, 0x00, 0x87, 0xe0, 0xcd, 0xb3, 0x60, 0xb5,
	0x5b, 0x6d, 0x76, 0x34, 0x0b, 0x16, 0x4c, 0x75, 0xf8, 0x75, 0xde, 0x98, 0x82, 0xd9, 0xe8, 0xf0,
	0x65, 0x6a, 0x12, 0x70, 0x74, 0xf8, 0x56, 0x10, 0xe2, 0x0c, 0xd1, 0xcb, 0xf0, 0x4d, 0xf3, 0xac,
	0x71, 0x54, 0x5c, 0xfb, 0x9a, 0xf9, 0xa1, 0xdd, 0x08, 0x22, 0xbf, 0x42, 0x6f, 0x89, 0x9f, 0x0e,
	0xf0, 0x49, 0x91, 0x45, 0x14, 0x9b, 0x27, 0x03, 0x0d, 0xab, 0x63, 0x32, 0x69, 0x53, 0xa0, 0x1f,
	0xa1, 0xb7, 0x85, 0x6d, 0x97, 0xc4, 0x51, 0xc6, 0x2e, 0xc6, 0x3c, 0x3e, 0x6a, 0x9a, 0x1d, 0xf7,
	0xdb, 0x82, 0xa9, 0x73, 0xe5, 0xf7, 0xa3, 0x63, 0x5c, 0x07, 0x37, 0x0a, 0xa5, 0x69, 0x72, 0x14,
	0x8a, 0x81, 0x80, 0xec, 0x1c, 0x7d, 0xd0, 0x34, 0x6c, 0xcc, 0xd5, 0x70, 0x32, 0x26, 0x42, 0x17,
	0xe6, 0x98, 0x08, 0x3d, 0x38, 0x84, 0xfe, 0x39, 0x7a, 0x63, 0x98, 0x91, 0x5c, 0x5d, 0x92, 0x9e,
	0xaf, 0x66, 0x73, 0xec, 0x3e, 0x4d, 0x46, 0x29, 0xaf, 0x17, 0x45, 0x36, 0x77, 0x28, 0x6b, 0x36,
	0x87, 0xb2, 0xc9, 0xa8, 0x95, 0x74, 0x13, 0x1f, 0x4d, 0xc7, 0xa3, 0x79, 0x1e, 0x1b, 0x2b, 0x29,
	0xff, 0x3d, 0x64, 0x06, 0xc7, 0x4a, 0xaa, 0x01, 0x6a, 0xf4, 0xf3, 0x9f, 0x0f, 0x26, 0x25, 0x6e,
	0x1d, 0xeb, 0x17, 0x0e, 0xc2, 0xe4, 0xfa, 0x63, 0x01, 0x1d, 0x31, 0xb2, 0x3c, 0x28, 0x31, 0xb6,
	0x66, 0xc9, 0x0c, 0xde, 0x2c, 0x01, 0x00, 0xbd, 0x5b, 0xe8, 0x75, 0xb6, 0x86, 0xe1, 0xfc, 0x2e,
	0xff, 0xab, 0xce, 0xe0, 0x4d, 0xe9, 0x71, 0xf7, 0xa4, 0xa0, 0xf3, 0xa5, 0xc6, 0xff, 0x19, 0x70,
	0x6b, 0xb0, 0x71, 0xe1, 0xdf, 0xcf, 0x96, 0x07, 0x5f, 0x3f, 0x5b, 0x1e, 0xfc, 0xf7, 0xd9, 0xf2,
	0xe0, 0xab, 0xe7, 0xcb, 0x2f, 0x7d, 0xfd, 0x7c, 0xf9, 0xa5, 0xff, 0x3c, 0x5f, 0x7e, 0xe9, 0xf3,
	0x57, 0xe0, 0xaf, 0x4a, 0x8f, 0x5e, 0xe6, 0x7f, 0x1b, 0x7a, 0xe7, 0xff, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xc7, 0x8d, 0x4c, 0xfd, 0x79, 0x3a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientCommandsClient is the client API for ClientCommands service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientCommandsClient interface {
	ObjectAddWithObjectId(ctx context.Context, in *pb.RpcObjectAddWithObjectIdRequest, opts ...grpc.CallOption) (*pb.RpcObjectAddWithObjectIdResponse, error)
	ObjectShareByLink(ctx context.Context, in *pb.RpcObjectShareByLinkRequest, opts ...grpc.CallOption) (*pb.RpcObjectShareByLinkResponse, error)
	WalletCreate(ctx context.Context, in *pb.RpcWalletCreateRequest, opts ...grpc.CallOption) (*pb.RpcWalletCreateResponse, error)
	WalletRecover(ctx context.Context, in *pb.RpcWalletRecoverRequest, opts ...grpc.CallOption) (*pb.RpcWalletRecoverResponse, error)
	WalletConvert(ctx context.Context, in *pb.RpcWalletConvertRequest, opts ...grpc.CallOption) (*pb.RpcWalletConvertResponse, error)
	WorkspaceCreate(ctx context.Context, in *pb.RpcWorkspaceCreateRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceCreateResponse, error)
	WorkspaceSelect(ctx context.Context, in *pb.RpcWorkspaceSelectRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceSelectResponse, error)
	WorkspaceGetCurrent(ctx context.Context, in *pb.RpcWorkspaceGetCurrentRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceGetCurrentResponse, error)
	WorkspaceGetAll(ctx context.Context, in *pb.RpcWorkspaceGetAllRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceGetAllResponse, error)
	WorkspaceSetIsHighlighted(ctx context.Context, in *pb.RpcWorkspaceSetIsHighlightedRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceSetIsHighlightedResponse, error)
	AccountRecover(ctx context.Context, in *pb.RpcAccountRecoverRequest, opts ...grpc.CallOption) (*pb.RpcAccountRecoverResponse, error)
	AccountCreate(ctx context.Context, in *pb.RpcAccountCreateRequest, opts ...grpc.CallOption) (*pb.RpcAccountCreateResponse, error)
	AccountSelect(ctx context.Context, in *pb.RpcAccountSelectRequest, opts ...grpc.CallOption) (*pb.RpcAccountSelectResponse, error)
	AccountStop(ctx context.Context, in *pb.RpcAccountStopRequest, opts ...grpc.CallOption) (*pb.RpcAccountStopResponse, error)
	FileOffload(ctx context.Context, in *pb.RpcFileOffloadRequest, opts ...grpc.CallOption) (*pb.RpcFileOffloadResponse, error)
	FileListOffload(ctx context.Context, in *pb.RpcFileListOffloadRequest, opts ...grpc.CallOption) (*pb.RpcFileListOffloadResponse, error)
	VersionGet(ctx context.Context, in *pb.RpcVersionGetRequest, opts ...grpc.CallOption) (*pb.RpcVersionGetResponse, error)
	LogSend(ctx context.Context, in *pb.RpcLogSendRequest, opts ...grpc.CallOption) (*pb.RpcLogSendResponse, error)
	ConfigGet(ctx context.Context, in *pb.RpcConfigGetRequest, opts ...grpc.CallOption) (*pb.RpcConfigGetResponse, error)
	Shutdown(ctx context.Context, in *pb.RpcShutdownRequest, opts ...grpc.CallOption) (*pb.RpcShutdownResponse, error)
	ExternalDropFiles(ctx context.Context, in *pb.RpcExternalDropFilesRequest, opts ...grpc.CallOption) (*pb.RpcExternalDropFilesResponse, error)
	ExternalDropContent(ctx context.Context, in *pb.RpcExternalDropContentRequest, opts ...grpc.CallOption) (*pb.RpcExternalDropContentResponse, error)
	LinkPreview(ctx context.Context, in *pb.RpcLinkPreviewRequest, opts ...grpc.CallOption) (*pb.RpcLinkPreviewResponse, error)
	UploadFile(ctx context.Context, in *pb.RpcUploadFileRequest, opts ...grpc.CallOption) (*pb.RpcUploadFileResponse, error)
	DownloadFile(ctx context.Context, in *pb.RpcDownloadFileRequest, opts ...grpc.CallOption) (*pb.RpcDownloadFileResponse, error)
	BlockUpload(ctx context.Context, in *pb.RpcBlockUploadRequest, opts ...grpc.CallOption) (*pb.RpcBlockUploadResponse, error)
	BlockReplace(ctx context.Context, in *pb.RpcBlockReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockReplaceResponse, error)
	// BlockUpdateContent allows to update any simple block content to the new value of the same type
	BlockUpdateContent(ctx context.Context, in *pb.RpcBlockUpdateContentRequest, opts ...grpc.CallOption) (*pb.RpcBlockUpdateContentResponse, error)
	BlockOpen(ctx context.Context, in *pb.RpcBlockOpenRequest, opts ...grpc.CallOption) (*pb.RpcBlockOpenResponse, error)
	BlockShow(ctx context.Context, in *pb.RpcBlockShowRequest, opts ...grpc.CallOption) (*pb.RpcBlockShowResponse, error)
	BlockGetPublicWebURL(ctx context.Context, in *pb.RpcBlockGetPublicWebURLRequest, opts ...grpc.CallOption) (*pb.RpcBlockGetPublicWebURLResponse, error)
	BlockOpenBreadcrumbs(ctx context.Context, in *pb.RpcBlockOpenBreadcrumbsRequest, opts ...grpc.CallOption) (*pb.RpcBlockOpenBreadcrumbsResponse, error)
	BlockSetBreadcrumbs(ctx context.Context, in *pb.RpcBlockSetBreadcrumbsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetBreadcrumbsResponse, error)
	BlockCreate(ctx context.Context, in *pb.RpcBlockCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreateResponse, error)
	BlockCreatePage(ctx context.Context, in *pb.RpcBlockCreatePageRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreatePageResponse, error)
	BlockCreateSet(ctx context.Context, in *pb.RpcBlockCreateSetRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreateSetResponse, error)
	BlockUnlink(ctx context.Context, in *pb.RpcBlockUnlinkRequest, opts ...grpc.CallOption) (*pb.RpcBlockUnlinkResponse, error)
	BlockClose(ctx context.Context, in *pb.RpcBlockCloseRequest, opts ...grpc.CallOption) (*pb.RpcBlockCloseResponse, error)
	BlockDownload(ctx context.Context, in *pb.RpcBlockDownloadRequest, opts ...grpc.CallOption) (*pb.RpcBlockDownloadResponse, error)
	BlockGetMarks(ctx context.Context, in *pb.RpcBlockGetMarksRequest, opts ...grpc.CallOption) (*pb.RpcBlockGetMarksResponse, error)
	BlockUndo(ctx context.Context, in *pb.RpcBlockUndoRequest, opts ...grpc.CallOption) (*pb.RpcBlockUndoResponse, error)
	BlockRedo(ctx context.Context, in *pb.RpcBlockRedoRequest, opts ...grpc.CallOption) (*pb.RpcBlockRedoResponse, error)
	BlockSetFields(ctx context.Context, in *pb.RpcBlockSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetFieldsResponse, error)
	BlockSetRestrictions(ctx context.Context, in *pb.RpcBlockSetRestrictionsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetRestrictionsResponse, error)
	BlockListMove(ctx context.Context, in *pb.RpcBlockListMoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockListMoveResponse, error)
	BlockListMoveToNewPage(ctx context.Context, in *pb.RpcBlockListMoveToNewPageRequest, opts ...grpc.CallOption) (*pb.RpcBlockListMoveToNewPageResponse, error)
	BlockListConvertChildrenToPages(ctx context.Context, in *pb.RpcBlockListConvertChildrenToPagesRequest, opts ...grpc.CallOption) (*pb.RpcBlockListConvertChildrenToPagesResponse, error)
	BlockListSetFields(ctx context.Context, in *pb.RpcBlockListSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetFieldsResponse, error)
	BlockListSetTextStyle(ctx context.Context, in *pb.RpcBlockListSetTextStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextStyleResponse, error)
	BlockListDuplicate(ctx context.Context, in *pb.RpcBlockListDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcBlockListDuplicateResponse, error)
	BlockListSetBackgroundColor(ctx context.Context, in *pb.RpcBlockListSetBackgroundColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetBackgroundColorResponse, error)
	BlockListSetAlign(ctx context.Context, in *pb.RpcBlockListSetAlignRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetAlignResponse, error)
	BlockListSetDivStyle(ctx context.Context, in *pb.RpcBlockListSetDivStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetDivStyleResponse, error)
	BlockListTurnInto(ctx context.Context, in *pb.RpcBlockListTurnIntoRequest, opts ...grpc.CallOption) (*pb.RpcBlockListTurnIntoResponse, error)
	BlockSetLatexText(ctx context.Context, in *pb.RpcBlockSetLatexTextRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetLatexTextResponse, error)
	BlockSetTextText(ctx context.Context, in *pb.RpcBlockSetTextTextRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextTextResponse, error)
	BlockSetTextColor(ctx context.Context, in *pb.RpcBlockSetTextColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextColorResponse, error)
	BlockListSetTextColor(ctx context.Context, in *pb.RpcBlockListSetTextColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextColorResponse, error)
	BlockListSetTextMark(ctx context.Context, in *pb.RpcBlockListSetTextMarkRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextMarkResponse, error)
	BlockSetTextStyle(ctx context.Context, in *pb.RpcBlockSetTextStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextStyleResponse, error)
	BlockSetTextChecked(ctx context.Context, in *pb.RpcBlockSetTextCheckedRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextCheckedResponse, error)
	BlockSplit(ctx context.Context, in *pb.RpcBlockSplitRequest, opts ...grpc.CallOption) (*pb.RpcBlockSplitResponse, error)
	BlockMerge(ctx context.Context, in *pb.RpcBlockMergeRequest, opts ...grpc.CallOption) (*pb.RpcBlockMergeResponse, error)
	BlockCopy(ctx context.Context, in *pb.RpcBlockCopyRequest, opts ...grpc.CallOption) (*pb.RpcBlockCopyResponse, error)
	BlockPaste(ctx context.Context, in *pb.RpcBlockPasteRequest, opts ...grpc.CallOption) (*pb.RpcBlockPasteResponse, error)
	BlockCut(ctx context.Context, in *pb.RpcBlockCutRequest, opts ...grpc.CallOption) (*pb.RpcBlockCutResponse, error)
	BlockExport(ctx context.Context, in *pb.RpcBlockExportRequest, opts ...grpc.CallOption) (*pb.RpcBlockExportResponse, error)
	BlockImportMarkdown(ctx context.Context, in *pb.RpcBlockImportMarkdownRequest, opts ...grpc.CallOption) (*pb.RpcBlockImportMarkdownResponse, error)
	BlockSetFileName(ctx context.Context, in *pb.RpcBlockSetFileNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetFileNameResponse, error)
	BlockSetImageName(ctx context.Context, in *pb.RpcBlockSetImageNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetImageNameResponse, error)
	BlockSetImageWidth(ctx context.Context, in *pb.RpcBlockSetImageWidthRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetImageWidthResponse, error)
	BlockSetVideoName(ctx context.Context, in *pb.RpcBlockSetVideoNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetVideoNameResponse, error)
	BlockSetVideoWidth(ctx context.Context, in *pb.RpcBlockSetVideoWidthRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetVideoWidthResponse, error)
	BlockSetLinkTargetBlockId(ctx context.Context, in *pb.RpcBlockSetLinkTargetBlockIdRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetLinkTargetBlockIdResponse, error)
	BlockBookmarkFetch(ctx context.Context, in *pb.RpcBlockBookmarkFetchRequest, opts ...grpc.CallOption) (*pb.RpcBlockBookmarkFetchResponse, error)
	BlockBookmarkCreateAndFetch(ctx context.Context, in *pb.RpcBlockBookmarkCreateAndFetchRequest, opts ...grpc.CallOption) (*pb.RpcBlockBookmarkCreateAndFetchResponse, error)
	BlockFileCreateAndUpload(ctx context.Context, in *pb.RpcBlockFileCreateAndUploadRequest, opts ...grpc.CallOption) (*pb.RpcBlockFileCreateAndUploadResponse, error)
	BlockRelationSetKey(ctx context.Context, in *pb.RpcBlockRelationSetKeyRequest, opts ...grpc.CallOption) (*pb.RpcBlockRelationSetKeyResponse, error)
	BlockRelationAdd(ctx context.Context, in *pb.RpcBlockRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockRelationAddResponse, error)
	// ## Dataview
	// # View
	BlockDataviewViewCreate(ctx context.Context, in *pb.RpcBlockDataviewViewCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewCreateResponse, error)
	BlockDataviewViewDelete(ctx context.Context, in *pb.RpcBlockDataviewViewDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewDeleteResponse, error)
	BlockDataviewViewUpdate(ctx context.Context, in *pb.RpcBlockDataviewViewUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewUpdateResponse, error)
	BlockDataviewViewSetActive(ctx context.Context, in *pb.RpcBlockDataviewViewSetActiveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewSetActiveResponse, error)
	BlockDataviewViewSetPosition(ctx context.Context, in *pb.RpcBlockDataviewViewSetPositionRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewSetPositionResponse, error)
	BlockDataviewSetSource(ctx context.Context, in *pb.RpcBlockDataviewSetSourceRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSetSourceResponse, error)
	// # Relation
	BlockDataviewRelationAdd(ctx context.Context, in *pb.RpcBlockDataviewRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationAddResponse, error)
	BlockDataviewRelationUpdate(ctx context.Context, in *pb.RpcBlockDataviewRelationUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationUpdateResponse, error)
	BlockDataviewRelationDelete(ctx context.Context, in *pb.RpcBlockDataviewRelationDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationDeleteResponse, error)
	BlockDataviewRelationListAvailable(ctx context.Context, in *pb.RpcBlockDataviewRelationListAvailableRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationListAvailableResponse, error)
	// # Record
	BlockDataviewRecordCreate(ctx context.Context, in *pb.RpcBlockDataviewRecordCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordCreateResponse, error)
	BlockDataviewRecordUpdate(ctx context.Context, in *pb.RpcBlockDataviewRecordUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordUpdateResponse, error)
	BlockDataviewRecordDelete(ctx context.Context, in *pb.RpcBlockDataviewRecordDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordDeleteResponse, error)
	BlockDataviewRecordRelationOptionAdd(ctx context.Context, in *pb.RpcBlockDataviewRecordRelationOptionAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordRelationOptionAddResponse, error)
	BlockDataviewRecordRelationOptionUpdate(ctx context.Context, in *pb.RpcBlockDataviewRecordRelationOptionUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordRelationOptionUpdateResponse, error)
	BlockDataviewRecordRelationOptionDelete(ctx context.Context, in *pb.RpcBlockDataviewRecordRelationOptionDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordRelationOptionDeleteResponse, error)
	// ## Object's relations
	// set an existing object type to the object so it will appear in sets and suggests relations from this type
	// TODO: rename BlockObjectTypeSet -> ObjectObjectTypeSet
	BlockObjectTypeSet(ctx context.Context, in *pb.RpcBlockObjectTypeSetRequest, opts ...grpc.CallOption) (*pb.RpcBlockObjectTypeSetResponse, error)
	NavigationListObjects(ctx context.Context, in *pb.RpcNavigationListObjectsRequest, opts ...grpc.CallOption) (*pb.RpcNavigationListObjectsResponse, error)
	NavigationGetObjectInfoWithLinks(ctx context.Context, in *pb.RpcNavigationGetObjectInfoWithLinksRequest, opts ...grpc.CallOption) (*pb.RpcNavigationGetObjectInfoWithLinksResponse, error)
	ObjectGraph(ctx context.Context, in *pb.RpcObjectGraphRequest, opts ...grpc.CallOption) (*pb.RpcObjectGraphResponse, error)
	ObjectSearch(ctx context.Context, in *pb.RpcObjectSearchRequest, opts ...grpc.CallOption) (*pb.RpcObjectSearchResponse, error)
	ObjectRelationAdd(ctx context.Context, in *pb.RpcObjectRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationAddResponse, error)
	ObjectRelationUpdate(ctx context.Context, in *pb.RpcObjectRelationUpdateRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationUpdateResponse, error)
	ObjectRelationDelete(ctx context.Context, in *pb.RpcObjectRelationDeleteRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationDeleteResponse, error)
	ObjectRelationOptionAdd(ctx context.Context, in *pb.RpcObjectRelationOptionAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationOptionAddResponse, error)
	ObjectRelationOptionUpdate(ctx context.Context, in *pb.RpcObjectRelationOptionUpdateRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationOptionUpdateResponse, error)
	ObjectRelationOptionDelete(ctx context.Context, in *pb.RpcObjectRelationOptionDeleteRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationOptionDeleteResponse, error)
	ObjectRelationListAvailable(ctx context.Context, in *pb.RpcObjectRelationListAvailableRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationListAvailableResponse, error)
	ObjectSetLayout(ctx context.Context, in *pb.RpcObjectSetLayoutRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetLayoutResponse, error)
	ObjectFeaturedRelationAdd(ctx context.Context, in *pb.RpcObjectFeaturedRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectFeaturedRelationAddResponse, error)
	ObjectFeaturedRelationRemove(ctx context.Context, in *pb.RpcObjectFeaturedRelationRemoveRequest, opts ...grpc.CallOption) (*pb.RpcObjectFeaturedRelationRemoveResponse, error)
	ObjectSetIsFavorite(ctx context.Context, in *pb.RpcObjectSetIsFavoriteRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetIsFavoriteResponse, error)
	ObjectSetIsArchived(ctx context.Context, in *pb.RpcObjectSetIsArchivedRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetIsArchivedResponse, error)
	// ObjectToSet creates new set from given object and removes object
	ObjectToSet(ctx context.Context, in *pb.RpcObjectToSetRequest, opts ...grpc.CallOption) (*pb.RpcObjectToSetResponse, error)
	ObjectListDelete(ctx context.Context, in *pb.RpcObjectListDeleteRequest, opts ...grpc.CallOption) (*pb.RpcObjectListDeleteResponse, error)
	ObjectListSetIsArchived(ctx context.Context, in *pb.RpcObjectListSetIsArchivedRequest, opts ...grpc.CallOption) (*pb.RpcObjectListSetIsArchivedResponse, error)
	// TODO: rename BlockSetDetails -> ObjectSetDetails
	BlockSetDetails(ctx context.Context, in *pb.RpcBlockSetDetailsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetDetailsResponse, error)
	// PageCreate just creates the new page, without adding the link to it from some other page
	// TODO: rename PageCreate -> ObjectCreate
	PageCreate(ctx context.Context, in *pb.RpcPageCreateRequest, opts ...grpc.CallOption) (*pb.RpcPageCreateResponse, error)
	// SetCreate just creates the new set, without adding the link to it from some other page
	SetCreate(ctx context.Context, in *pb.RpcSetCreateRequest, opts ...grpc.CallOption) (*pb.RpcSetCreateResponse, error)
	// ## ObjectType
	ObjectTypeCreate(ctx context.Context, in *pb.RpcObjectTypeCreateRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeCreateResponse, error)
	// ObjectTypeList lists all object types both bundled and created by user
	ObjectTypeList(ctx context.Context, in *pb.RpcObjectTypeListRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeListResponse, error)
	ObjectTypeRelationList(ctx context.Context, in *pb.RpcObjectTypeRelationListRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationListResponse, error)
	ObjectTypeRelationAdd(ctx context.Context, in *pb.RpcObjectTypeRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationAddResponse, error)
	ObjectTypeRelationUpdate(ctx context.Context, in *pb.RpcObjectTypeRelationUpdateRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationUpdateResponse, error)
	ObjectTypeRelationRemove(ctx context.Context, in *pb.RpcObjectTypeRelationRemoveRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationRemoveResponse, error)
	Ping(ctx context.Context, in *pb.RpcPingRequest, opts ...grpc.CallOption) (*pb.RpcPingResponse, error)
	ProcessCancel(ctx context.Context, in *pb.RpcProcessCancelRequest, opts ...grpc.CallOption) (*pb.RpcProcessCancelResponse, error)
	HistoryShow(ctx context.Context, in *pb.RpcHistoryShowRequest, opts ...grpc.CallOption) (*pb.RpcHistoryShowResponse, error)
	HistoryVersions(ctx context.Context, in *pb.RpcHistoryVersionsRequest, opts ...grpc.CallOption) (*pb.RpcHistoryVersionsResponse, error)
	HistorySetVersion(ctx context.Context, in *pb.RpcHistorySetVersionRequest, opts ...grpc.CallOption) (*pb.RpcHistorySetVersionResponse, error)
	Export(ctx context.Context, in *pb.RpcExportRequest, opts ...grpc.CallOption) (*pb.RpcExportResponse, error)
	ExportTemplates(ctx context.Context, in *pb.RpcExportTemplatesRequest, opts ...grpc.CallOption) (*pb.RpcExportTemplatesResponse, error)
	ExportLocalstore(ctx context.Context, in *pb.RpcExportLocalstoreRequest, opts ...grpc.CallOption) (*pb.RpcExportLocalstoreResponse, error)
	MakeTemplate(ctx context.Context, in *pb.RpcMakeTemplateRequest, opts ...grpc.CallOption) (*pb.RpcMakeTemplateResponse, error)
	MakeTemplateByObjectType(ctx context.Context, in *pb.RpcMakeTemplateByObjectTypeRequest, opts ...grpc.CallOption) (*pb.RpcMakeTemplateByObjectTypeResponse, error)
	CloneTemplate(ctx context.Context, in *pb.RpcCloneTemplateRequest, opts ...grpc.CallOption) (*pb.RpcCloneTemplateResponse, error)
	ApplyTemplate(ctx context.Context, in *pb.RpcApplyTemplateRequest, opts ...grpc.CallOption) (*pb.RpcApplyTemplateResponse, error)
	DebugSync(ctx context.Context, in *pb.RpcDebugSyncRequest, opts ...grpc.CallOption) (*pb.RpcDebugSyncResponse, error)
	DebugThread(ctx context.Context, in *pb.RpcDebugThreadRequest, opts ...grpc.CallOption) (*pb.RpcDebugThreadResponse, error)
	DebugTree(ctx context.Context, in *pb.RpcDebugTreeRequest, opts ...grpc.CallOption) (*pb.RpcDebugTreeResponse, error)
	// used only for lib-server via grpc
	ListenEvents(ctx context.Context, in *pb.Empty, opts ...grpc.CallOption) (ClientCommands_ListenEventsClient, error)
}

type clientCommandsClient struct {
	cc *grpc.ClientConn
}

func NewClientCommandsClient(cc *grpc.ClientConn) ClientCommandsClient {
	return &clientCommandsClient{cc}
}

func (c *clientCommandsClient) ObjectAddWithObjectId(ctx context.Context, in *pb.RpcObjectAddWithObjectIdRequest, opts ...grpc.CallOption) (*pb.RpcObjectAddWithObjectIdResponse, error) {
	out := new(pb.RpcObjectAddWithObjectIdResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectAddWithObjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectShareByLink(ctx context.Context, in *pb.RpcObjectShareByLinkRequest, opts ...grpc.CallOption) (*pb.RpcObjectShareByLinkResponse, error) {
	out := new(pb.RpcObjectShareByLinkResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectShareByLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WalletCreate(ctx context.Context, in *pb.RpcWalletCreateRequest, opts ...grpc.CallOption) (*pb.RpcWalletCreateResponse, error) {
	out := new(pb.RpcWalletCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WalletCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WalletRecover(ctx context.Context, in *pb.RpcWalletRecoverRequest, opts ...grpc.CallOption) (*pb.RpcWalletRecoverResponse, error) {
	out := new(pb.RpcWalletRecoverResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WalletRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WalletConvert(ctx context.Context, in *pb.RpcWalletConvertRequest, opts ...grpc.CallOption) (*pb.RpcWalletConvertResponse, error) {
	out := new(pb.RpcWalletConvertResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WalletConvert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceCreate(ctx context.Context, in *pb.RpcWorkspaceCreateRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceCreateResponse, error) {
	out := new(pb.RpcWorkspaceCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceSelect(ctx context.Context, in *pb.RpcWorkspaceSelectRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceSelectResponse, error) {
	out := new(pb.RpcWorkspaceSelectResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceGetCurrent(ctx context.Context, in *pb.RpcWorkspaceGetCurrentRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceGetCurrentResponse, error) {
	out := new(pb.RpcWorkspaceGetCurrentResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceGetCurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceGetAll(ctx context.Context, in *pb.RpcWorkspaceGetAllRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceGetAllResponse, error) {
	out := new(pb.RpcWorkspaceGetAllResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceSetIsHighlighted(ctx context.Context, in *pb.RpcWorkspaceSetIsHighlightedRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceSetIsHighlightedResponse, error) {
	out := new(pb.RpcWorkspaceSetIsHighlightedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceSetIsHighlighted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountRecover(ctx context.Context, in *pb.RpcAccountRecoverRequest, opts ...grpc.CallOption) (*pb.RpcAccountRecoverResponse, error) {
	out := new(pb.RpcAccountRecoverResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountCreate(ctx context.Context, in *pb.RpcAccountCreateRequest, opts ...grpc.CallOption) (*pb.RpcAccountCreateResponse, error) {
	out := new(pb.RpcAccountCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountSelect(ctx context.Context, in *pb.RpcAccountSelectRequest, opts ...grpc.CallOption) (*pb.RpcAccountSelectResponse, error) {
	out := new(pb.RpcAccountSelectResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountStop(ctx context.Context, in *pb.RpcAccountStopRequest, opts ...grpc.CallOption) (*pb.RpcAccountStopResponse, error) {
	out := new(pb.RpcAccountStopResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) FileOffload(ctx context.Context, in *pb.RpcFileOffloadRequest, opts ...grpc.CallOption) (*pb.RpcFileOffloadResponse, error) {
	out := new(pb.RpcFileOffloadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/FileOffload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) FileListOffload(ctx context.Context, in *pb.RpcFileListOffloadRequest, opts ...grpc.CallOption) (*pb.RpcFileListOffloadResponse, error) {
	out := new(pb.RpcFileListOffloadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/FileListOffload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) VersionGet(ctx context.Context, in *pb.RpcVersionGetRequest, opts ...grpc.CallOption) (*pb.RpcVersionGetResponse, error) {
	out := new(pb.RpcVersionGetResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/VersionGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) LogSend(ctx context.Context, in *pb.RpcLogSendRequest, opts ...grpc.CallOption) (*pb.RpcLogSendResponse, error) {
	out := new(pb.RpcLogSendResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/LogSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ConfigGet(ctx context.Context, in *pb.RpcConfigGetRequest, opts ...grpc.CallOption) (*pb.RpcConfigGetResponse, error) {
	out := new(pb.RpcConfigGetResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ConfigGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) Shutdown(ctx context.Context, in *pb.RpcShutdownRequest, opts ...grpc.CallOption) (*pb.RpcShutdownResponse, error) {
	out := new(pb.RpcShutdownResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ExternalDropFiles(ctx context.Context, in *pb.RpcExternalDropFilesRequest, opts ...grpc.CallOption) (*pb.RpcExternalDropFilesResponse, error) {
	out := new(pb.RpcExternalDropFilesResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ExternalDropFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ExternalDropContent(ctx context.Context, in *pb.RpcExternalDropContentRequest, opts ...grpc.CallOption) (*pb.RpcExternalDropContentResponse, error) {
	out := new(pb.RpcExternalDropContentResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ExternalDropContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) LinkPreview(ctx context.Context, in *pb.RpcLinkPreviewRequest, opts ...grpc.CallOption) (*pb.RpcLinkPreviewResponse, error) {
	out := new(pb.RpcLinkPreviewResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/LinkPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) UploadFile(ctx context.Context, in *pb.RpcUploadFileRequest, opts ...grpc.CallOption) (*pb.RpcUploadFileResponse, error) {
	out := new(pb.RpcUploadFileResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DownloadFile(ctx context.Context, in *pb.RpcDownloadFileRequest, opts ...grpc.CallOption) (*pb.RpcDownloadFileResponse, error) {
	out := new(pb.RpcDownloadFileResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockUpload(ctx context.Context, in *pb.RpcBlockUploadRequest, opts ...grpc.CallOption) (*pb.RpcBlockUploadResponse, error) {
	out := new(pb.RpcBlockUploadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockReplace(ctx context.Context, in *pb.RpcBlockReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockReplaceResponse, error) {
	out := new(pb.RpcBlockReplaceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockUpdateContent(ctx context.Context, in *pb.RpcBlockUpdateContentRequest, opts ...grpc.CallOption) (*pb.RpcBlockUpdateContentResponse, error) {
	out := new(pb.RpcBlockUpdateContentResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockUpdateContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockOpen(ctx context.Context, in *pb.RpcBlockOpenRequest, opts ...grpc.CallOption) (*pb.RpcBlockOpenResponse, error) {
	out := new(pb.RpcBlockOpenResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockShow(ctx context.Context, in *pb.RpcBlockShowRequest, opts ...grpc.CallOption) (*pb.RpcBlockShowResponse, error) {
	out := new(pb.RpcBlockShowResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockGetPublicWebURL(ctx context.Context, in *pb.RpcBlockGetPublicWebURLRequest, opts ...grpc.CallOption) (*pb.RpcBlockGetPublicWebURLResponse, error) {
	out := new(pb.RpcBlockGetPublicWebURLResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockGetPublicWebURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockOpenBreadcrumbs(ctx context.Context, in *pb.RpcBlockOpenBreadcrumbsRequest, opts ...grpc.CallOption) (*pb.RpcBlockOpenBreadcrumbsResponse, error) {
	out := new(pb.RpcBlockOpenBreadcrumbsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockOpenBreadcrumbs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetBreadcrumbs(ctx context.Context, in *pb.RpcBlockSetBreadcrumbsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetBreadcrumbsResponse, error) {
	out := new(pb.RpcBlockSetBreadcrumbsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetBreadcrumbs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCreate(ctx context.Context, in *pb.RpcBlockCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreateResponse, error) {
	out := new(pb.RpcBlockCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCreatePage(ctx context.Context, in *pb.RpcBlockCreatePageRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreatePageResponse, error) {
	out := new(pb.RpcBlockCreatePageResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCreatePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCreateSet(ctx context.Context, in *pb.RpcBlockCreateSetRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreateSetResponse, error) {
	out := new(pb.RpcBlockCreateSetResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCreateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockUnlink(ctx context.Context, in *pb.RpcBlockUnlinkRequest, opts ...grpc.CallOption) (*pb.RpcBlockUnlinkResponse, error) {
	out := new(pb.RpcBlockUnlinkResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockUnlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockClose(ctx context.Context, in *pb.RpcBlockCloseRequest, opts ...grpc.CallOption) (*pb.RpcBlockCloseResponse, error) {
	out := new(pb.RpcBlockCloseResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDownload(ctx context.Context, in *pb.RpcBlockDownloadRequest, opts ...grpc.CallOption) (*pb.RpcBlockDownloadResponse, error) {
	out := new(pb.RpcBlockDownloadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockGetMarks(ctx context.Context, in *pb.RpcBlockGetMarksRequest, opts ...grpc.CallOption) (*pb.RpcBlockGetMarksResponse, error) {
	out := new(pb.RpcBlockGetMarksResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockGetMarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockUndo(ctx context.Context, in *pb.RpcBlockUndoRequest, opts ...grpc.CallOption) (*pb.RpcBlockUndoResponse, error) {
	out := new(pb.RpcBlockUndoResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockUndo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockRedo(ctx context.Context, in *pb.RpcBlockRedoRequest, opts ...grpc.CallOption) (*pb.RpcBlockRedoResponse, error) {
	out := new(pb.RpcBlockRedoResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockRedo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetFields(ctx context.Context, in *pb.RpcBlockSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetFieldsResponse, error) {
	out := new(pb.RpcBlockSetFieldsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetRestrictions(ctx context.Context, in *pb.RpcBlockSetRestrictionsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetRestrictionsResponse, error) {
	out := new(pb.RpcBlockSetRestrictionsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetRestrictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListMove(ctx context.Context, in *pb.RpcBlockListMoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockListMoveResponse, error) {
	out := new(pb.RpcBlockListMoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListMoveToNewPage(ctx context.Context, in *pb.RpcBlockListMoveToNewPageRequest, opts ...grpc.CallOption) (*pb.RpcBlockListMoveToNewPageResponse, error) {
	out := new(pb.RpcBlockListMoveToNewPageResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListMoveToNewPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListConvertChildrenToPages(ctx context.Context, in *pb.RpcBlockListConvertChildrenToPagesRequest, opts ...grpc.CallOption) (*pb.RpcBlockListConvertChildrenToPagesResponse, error) {
	out := new(pb.RpcBlockListConvertChildrenToPagesResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListConvertChildrenToPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetFields(ctx context.Context, in *pb.RpcBlockListSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetFieldsResponse, error) {
	out := new(pb.RpcBlockListSetFieldsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetTextStyle(ctx context.Context, in *pb.RpcBlockListSetTextStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextStyleResponse, error) {
	out := new(pb.RpcBlockListSetTextStyleResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetTextStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListDuplicate(ctx context.Context, in *pb.RpcBlockListDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcBlockListDuplicateResponse, error) {
	out := new(pb.RpcBlockListDuplicateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListDuplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetBackgroundColor(ctx context.Context, in *pb.RpcBlockListSetBackgroundColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetBackgroundColorResponse, error) {
	out := new(pb.RpcBlockListSetBackgroundColorResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetBackgroundColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetAlign(ctx context.Context, in *pb.RpcBlockListSetAlignRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetAlignResponse, error) {
	out := new(pb.RpcBlockListSetAlignResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetAlign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetDivStyle(ctx context.Context, in *pb.RpcBlockListSetDivStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetDivStyleResponse, error) {
	out := new(pb.RpcBlockListSetDivStyleResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetDivStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListTurnInto(ctx context.Context, in *pb.RpcBlockListTurnIntoRequest, opts ...grpc.CallOption) (*pb.RpcBlockListTurnIntoResponse, error) {
	out := new(pb.RpcBlockListTurnIntoResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListTurnInto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetLatexText(ctx context.Context, in *pb.RpcBlockSetLatexTextRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetLatexTextResponse, error) {
	out := new(pb.RpcBlockSetLatexTextResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetLatexText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetTextText(ctx context.Context, in *pb.RpcBlockSetTextTextRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextTextResponse, error) {
	out := new(pb.RpcBlockSetTextTextResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetTextText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetTextColor(ctx context.Context, in *pb.RpcBlockSetTextColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextColorResponse, error) {
	out := new(pb.RpcBlockSetTextColorResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetTextColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetTextColor(ctx context.Context, in *pb.RpcBlockListSetTextColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextColorResponse, error) {
	out := new(pb.RpcBlockListSetTextColorResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetTextColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetTextMark(ctx context.Context, in *pb.RpcBlockListSetTextMarkRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetTextMarkResponse, error) {
	out := new(pb.RpcBlockListSetTextMarkResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetTextMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetTextStyle(ctx context.Context, in *pb.RpcBlockSetTextStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextStyleResponse, error) {
	out := new(pb.RpcBlockSetTextStyleResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetTextStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetTextChecked(ctx context.Context, in *pb.RpcBlockSetTextCheckedRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetTextCheckedResponse, error) {
	out := new(pb.RpcBlockSetTextCheckedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetTextChecked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSplit(ctx context.Context, in *pb.RpcBlockSplitRequest, opts ...grpc.CallOption) (*pb.RpcBlockSplitResponse, error) {
	out := new(pb.RpcBlockSplitResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSplit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockMerge(ctx context.Context, in *pb.RpcBlockMergeRequest, opts ...grpc.CallOption) (*pb.RpcBlockMergeResponse, error) {
	out := new(pb.RpcBlockMergeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockMerge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCopy(ctx context.Context, in *pb.RpcBlockCopyRequest, opts ...grpc.CallOption) (*pb.RpcBlockCopyResponse, error) {
	out := new(pb.RpcBlockCopyResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockPaste(ctx context.Context, in *pb.RpcBlockPasteRequest, opts ...grpc.CallOption) (*pb.RpcBlockPasteResponse, error) {
	out := new(pb.RpcBlockPasteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockPaste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCut(ctx context.Context, in *pb.RpcBlockCutRequest, opts ...grpc.CallOption) (*pb.RpcBlockCutResponse, error) {
	out := new(pb.RpcBlockCutResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockExport(ctx context.Context, in *pb.RpcBlockExportRequest, opts ...grpc.CallOption) (*pb.RpcBlockExportResponse, error) {
	out := new(pb.RpcBlockExportResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockImportMarkdown(ctx context.Context, in *pb.RpcBlockImportMarkdownRequest, opts ...grpc.CallOption) (*pb.RpcBlockImportMarkdownResponse, error) {
	out := new(pb.RpcBlockImportMarkdownResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockImportMarkdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetFileName(ctx context.Context, in *pb.RpcBlockSetFileNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetFileNameResponse, error) {
	out := new(pb.RpcBlockSetFileNameResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetFileName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetImageName(ctx context.Context, in *pb.RpcBlockSetImageNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetImageNameResponse, error) {
	out := new(pb.RpcBlockSetImageNameResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetImageName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetImageWidth(ctx context.Context, in *pb.RpcBlockSetImageWidthRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetImageWidthResponse, error) {
	out := new(pb.RpcBlockSetImageWidthResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetImageWidth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetVideoName(ctx context.Context, in *pb.RpcBlockSetVideoNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetVideoNameResponse, error) {
	out := new(pb.RpcBlockSetVideoNameResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetVideoName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetVideoWidth(ctx context.Context, in *pb.RpcBlockSetVideoWidthRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetVideoWidthResponse, error) {
	out := new(pb.RpcBlockSetVideoWidthResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetVideoWidth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetLinkTargetBlockId(ctx context.Context, in *pb.RpcBlockSetLinkTargetBlockIdRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetLinkTargetBlockIdResponse, error) {
	out := new(pb.RpcBlockSetLinkTargetBlockIdResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetLinkTargetBlockId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockBookmarkFetch(ctx context.Context, in *pb.RpcBlockBookmarkFetchRequest, opts ...grpc.CallOption) (*pb.RpcBlockBookmarkFetchResponse, error) {
	out := new(pb.RpcBlockBookmarkFetchResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockBookmarkFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockBookmarkCreateAndFetch(ctx context.Context, in *pb.RpcBlockBookmarkCreateAndFetchRequest, opts ...grpc.CallOption) (*pb.RpcBlockBookmarkCreateAndFetchResponse, error) {
	out := new(pb.RpcBlockBookmarkCreateAndFetchResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockBookmarkCreateAndFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockFileCreateAndUpload(ctx context.Context, in *pb.RpcBlockFileCreateAndUploadRequest, opts ...grpc.CallOption) (*pb.RpcBlockFileCreateAndUploadResponse, error) {
	out := new(pb.RpcBlockFileCreateAndUploadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockFileCreateAndUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockRelationSetKey(ctx context.Context, in *pb.RpcBlockRelationSetKeyRequest, opts ...grpc.CallOption) (*pb.RpcBlockRelationSetKeyResponse, error) {
	out := new(pb.RpcBlockRelationSetKeyResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockRelationSetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockRelationAdd(ctx context.Context, in *pb.RpcBlockRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockRelationAddResponse, error) {
	out := new(pb.RpcBlockRelationAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewCreate(ctx context.Context, in *pb.RpcBlockDataviewViewCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewCreateResponse, error) {
	out := new(pb.RpcBlockDataviewViewCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewDelete(ctx context.Context, in *pb.RpcBlockDataviewViewDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewDeleteResponse, error) {
	out := new(pb.RpcBlockDataviewViewDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewUpdate(ctx context.Context, in *pb.RpcBlockDataviewViewUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewUpdateResponse, error) {
	out := new(pb.RpcBlockDataviewViewUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewSetActive(ctx context.Context, in *pb.RpcBlockDataviewViewSetActiveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewSetActiveResponse, error) {
	out := new(pb.RpcBlockDataviewViewSetActiveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewSetActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewSetPosition(ctx context.Context, in *pb.RpcBlockDataviewViewSetPositionRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewSetPositionResponse, error) {
	out := new(pb.RpcBlockDataviewViewSetPositionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewSetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewSetSource(ctx context.Context, in *pb.RpcBlockDataviewSetSourceRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSetSourceResponse, error) {
	out := new(pb.RpcBlockDataviewSetSourceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewSetSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRelationAdd(ctx context.Context, in *pb.RpcBlockDataviewRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationAddResponse, error) {
	out := new(pb.RpcBlockDataviewRelationAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRelationUpdate(ctx context.Context, in *pb.RpcBlockDataviewRelationUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationUpdateResponse, error) {
	out := new(pb.RpcBlockDataviewRelationUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRelationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRelationDelete(ctx context.Context, in *pb.RpcBlockDataviewRelationDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationDeleteResponse, error) {
	out := new(pb.RpcBlockDataviewRelationDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRelationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRelationListAvailable(ctx context.Context, in *pb.RpcBlockDataviewRelationListAvailableRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationListAvailableResponse, error) {
	out := new(pb.RpcBlockDataviewRelationListAvailableResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRelationListAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRecordCreate(ctx context.Context, in *pb.RpcBlockDataviewRecordCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordCreateResponse, error) {
	out := new(pb.RpcBlockDataviewRecordCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRecordCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRecordUpdate(ctx context.Context, in *pb.RpcBlockDataviewRecordUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordUpdateResponse, error) {
	out := new(pb.RpcBlockDataviewRecordUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRecordUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRecordDelete(ctx context.Context, in *pb.RpcBlockDataviewRecordDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordDeleteResponse, error) {
	out := new(pb.RpcBlockDataviewRecordDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRecordDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRecordRelationOptionAdd(ctx context.Context, in *pb.RpcBlockDataviewRecordRelationOptionAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordRelationOptionAddResponse, error) {
	out := new(pb.RpcBlockDataviewRecordRelationOptionAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRecordRelationOptionAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRecordRelationOptionUpdate(ctx context.Context, in *pb.RpcBlockDataviewRecordRelationOptionUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordRelationOptionUpdateResponse, error) {
	out := new(pb.RpcBlockDataviewRecordRelationOptionUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRecordRelationOptionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRecordRelationOptionDelete(ctx context.Context, in *pb.RpcBlockDataviewRecordRelationOptionDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRecordRelationOptionDeleteResponse, error) {
	out := new(pb.RpcBlockDataviewRecordRelationOptionDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRecordRelationOptionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockObjectTypeSet(ctx context.Context, in *pb.RpcBlockObjectTypeSetRequest, opts ...grpc.CallOption) (*pb.RpcBlockObjectTypeSetResponse, error) {
	out := new(pb.RpcBlockObjectTypeSetResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockObjectTypeSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) NavigationListObjects(ctx context.Context, in *pb.RpcNavigationListObjectsRequest, opts ...grpc.CallOption) (*pb.RpcNavigationListObjectsResponse, error) {
	out := new(pb.RpcNavigationListObjectsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/NavigationListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) NavigationGetObjectInfoWithLinks(ctx context.Context, in *pb.RpcNavigationGetObjectInfoWithLinksRequest, opts ...grpc.CallOption) (*pb.RpcNavigationGetObjectInfoWithLinksResponse, error) {
	out := new(pb.RpcNavigationGetObjectInfoWithLinksResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/NavigationGetObjectInfoWithLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectGraph(ctx context.Context, in *pb.RpcObjectGraphRequest, opts ...grpc.CallOption) (*pb.RpcObjectGraphResponse, error) {
	out := new(pb.RpcObjectGraphResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSearch(ctx context.Context, in *pb.RpcObjectSearchRequest, opts ...grpc.CallOption) (*pb.RpcObjectSearchResponse, error) {
	out := new(pb.RpcObjectSearchResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationAdd(ctx context.Context, in *pb.RpcObjectRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationAddResponse, error) {
	out := new(pb.RpcObjectRelationAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationUpdate(ctx context.Context, in *pb.RpcObjectRelationUpdateRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationUpdateResponse, error) {
	out := new(pb.RpcObjectRelationUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationDelete(ctx context.Context, in *pb.RpcObjectRelationDeleteRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationDeleteResponse, error) {
	out := new(pb.RpcObjectRelationDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationOptionAdd(ctx context.Context, in *pb.RpcObjectRelationOptionAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationOptionAddResponse, error) {
	out := new(pb.RpcObjectRelationOptionAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationOptionAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationOptionUpdate(ctx context.Context, in *pb.RpcObjectRelationOptionUpdateRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationOptionUpdateResponse, error) {
	out := new(pb.RpcObjectRelationOptionUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationOptionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationOptionDelete(ctx context.Context, in *pb.RpcObjectRelationOptionDeleteRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationOptionDeleteResponse, error) {
	out := new(pb.RpcObjectRelationOptionDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationOptionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationListAvailable(ctx context.Context, in *pb.RpcObjectRelationListAvailableRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationListAvailableResponse, error) {
	out := new(pb.RpcObjectRelationListAvailableResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationListAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSetLayout(ctx context.Context, in *pb.RpcObjectSetLayoutRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetLayoutResponse, error) {
	out := new(pb.RpcObjectSetLayoutResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSetLayout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectFeaturedRelationAdd(ctx context.Context, in *pb.RpcObjectFeaturedRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectFeaturedRelationAddResponse, error) {
	out := new(pb.RpcObjectFeaturedRelationAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectFeaturedRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectFeaturedRelationRemove(ctx context.Context, in *pb.RpcObjectFeaturedRelationRemoveRequest, opts ...grpc.CallOption) (*pb.RpcObjectFeaturedRelationRemoveResponse, error) {
	out := new(pb.RpcObjectFeaturedRelationRemoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectFeaturedRelationRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSetIsFavorite(ctx context.Context, in *pb.RpcObjectSetIsFavoriteRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetIsFavoriteResponse, error) {
	out := new(pb.RpcObjectSetIsFavoriteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSetIsFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSetIsArchived(ctx context.Context, in *pb.RpcObjectSetIsArchivedRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetIsArchivedResponse, error) {
	out := new(pb.RpcObjectSetIsArchivedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSetIsArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectToSet(ctx context.Context, in *pb.RpcObjectToSetRequest, opts ...grpc.CallOption) (*pb.RpcObjectToSetResponse, error) {
	out := new(pb.RpcObjectToSetResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectToSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectListDelete(ctx context.Context, in *pb.RpcObjectListDeleteRequest, opts ...grpc.CallOption) (*pb.RpcObjectListDeleteResponse, error) {
	out := new(pb.RpcObjectListDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectListDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectListSetIsArchived(ctx context.Context, in *pb.RpcObjectListSetIsArchivedRequest, opts ...grpc.CallOption) (*pb.RpcObjectListSetIsArchivedResponse, error) {
	out := new(pb.RpcObjectListSetIsArchivedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectListSetIsArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetDetails(ctx context.Context, in *pb.RpcBlockSetDetailsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetDetailsResponse, error) {
	out := new(pb.RpcBlockSetDetailsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) PageCreate(ctx context.Context, in *pb.RpcPageCreateRequest, opts ...grpc.CallOption) (*pb.RpcPageCreateResponse, error) {
	out := new(pb.RpcPageCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/PageCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) SetCreate(ctx context.Context, in *pb.RpcSetCreateRequest, opts ...grpc.CallOption) (*pb.RpcSetCreateResponse, error) {
	out := new(pb.RpcSetCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/SetCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectTypeCreate(ctx context.Context, in *pb.RpcObjectTypeCreateRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeCreateResponse, error) {
	out := new(pb.RpcObjectTypeCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectTypeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectTypeList(ctx context.Context, in *pb.RpcObjectTypeListRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeListResponse, error) {
	out := new(pb.RpcObjectTypeListResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectTypeRelationList(ctx context.Context, in *pb.RpcObjectTypeRelationListRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationListResponse, error) {
	out := new(pb.RpcObjectTypeRelationListResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectTypeRelationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectTypeRelationAdd(ctx context.Context, in *pb.RpcObjectTypeRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationAddResponse, error) {
	out := new(pb.RpcObjectTypeRelationAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectTypeRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectTypeRelationUpdate(ctx context.Context, in *pb.RpcObjectTypeRelationUpdateRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationUpdateResponse, error) {
	out := new(pb.RpcObjectTypeRelationUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectTypeRelationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectTypeRelationRemove(ctx context.Context, in *pb.RpcObjectTypeRelationRemoveRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationRemoveResponse, error) {
	out := new(pb.RpcObjectTypeRelationRemoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectTypeRelationRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) Ping(ctx context.Context, in *pb.RpcPingRequest, opts ...grpc.CallOption) (*pb.RpcPingResponse, error) {
	out := new(pb.RpcPingResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ProcessCancel(ctx context.Context, in *pb.RpcProcessCancelRequest, opts ...grpc.CallOption) (*pb.RpcProcessCancelResponse, error) {
	out := new(pb.RpcProcessCancelResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ProcessCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) HistoryShow(ctx context.Context, in *pb.RpcHistoryShowRequest, opts ...grpc.CallOption) (*pb.RpcHistoryShowResponse, error) {
	out := new(pb.RpcHistoryShowResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/HistoryShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) HistoryVersions(ctx context.Context, in *pb.RpcHistoryVersionsRequest, opts ...grpc.CallOption) (*pb.RpcHistoryVersionsResponse, error) {
	out := new(pb.RpcHistoryVersionsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/HistoryVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) HistorySetVersion(ctx context.Context, in *pb.RpcHistorySetVersionRequest, opts ...grpc.CallOption) (*pb.RpcHistorySetVersionResponse, error) {
	out := new(pb.RpcHistorySetVersionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/HistorySetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) Export(ctx context.Context, in *pb.RpcExportRequest, opts ...grpc.CallOption) (*pb.RpcExportResponse, error) {
	out := new(pb.RpcExportResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ExportTemplates(ctx context.Context, in *pb.RpcExportTemplatesRequest, opts ...grpc.CallOption) (*pb.RpcExportTemplatesResponse, error) {
	out := new(pb.RpcExportTemplatesResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ExportTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ExportLocalstore(ctx context.Context, in *pb.RpcExportLocalstoreRequest, opts ...grpc.CallOption) (*pb.RpcExportLocalstoreResponse, error) {
	out := new(pb.RpcExportLocalstoreResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ExportLocalstore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) MakeTemplate(ctx context.Context, in *pb.RpcMakeTemplateRequest, opts ...grpc.CallOption) (*pb.RpcMakeTemplateResponse, error) {
	out := new(pb.RpcMakeTemplateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/MakeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) MakeTemplateByObjectType(ctx context.Context, in *pb.RpcMakeTemplateByObjectTypeRequest, opts ...grpc.CallOption) (*pb.RpcMakeTemplateByObjectTypeResponse, error) {
	out := new(pb.RpcMakeTemplateByObjectTypeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/MakeTemplateByObjectType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) CloneTemplate(ctx context.Context, in *pb.RpcCloneTemplateRequest, opts ...grpc.CallOption) (*pb.RpcCloneTemplateResponse, error) {
	out := new(pb.RpcCloneTemplateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/CloneTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ApplyTemplate(ctx context.Context, in *pb.RpcApplyTemplateRequest, opts ...grpc.CallOption) (*pb.RpcApplyTemplateResponse, error) {
	out := new(pb.RpcApplyTemplateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ApplyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugSync(ctx context.Context, in *pb.RpcDebugSyncRequest, opts ...grpc.CallOption) (*pb.RpcDebugSyncResponse, error) {
	out := new(pb.RpcDebugSyncResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugThread(ctx context.Context, in *pb.RpcDebugThreadRequest, opts ...grpc.CallOption) (*pb.RpcDebugThreadResponse, error) {
	out := new(pb.RpcDebugThreadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugTree(ctx context.Context, in *pb.RpcDebugTreeRequest, opts ...grpc.CallOption) (*pb.RpcDebugTreeResponse, error) {
	out := new(pb.RpcDebugTreeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ListenEvents(ctx context.Context, in *pb.Empty, opts ...grpc.CallOption) (ClientCommands_ListenEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientCommands_serviceDesc.Streams[0], "/anytype.ClientCommands/ListenEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientCommandsListenEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientCommands_ListenEventsClient interface {
	Recv() (*pb.Event, error)
	grpc.ClientStream
}

type clientCommandsListenEventsClient struct {
	grpc.ClientStream
}

func (x *clientCommandsListenEventsClient) Recv() (*pb.Event, error) {
	m := new(pb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientCommandsServer is the server API for ClientCommands service.
type ClientCommandsServer interface {
	ObjectAddWithObjectId(*pb.RpcObjectAddWithObjectIdRequest) *pb.RpcObjectAddWithObjectIdResponse
	ObjectShareByLink(*pb.RpcObjectShareByLinkRequest) *pb.RpcObjectShareByLinkResponse
	WalletCreate(*pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse
	WalletRecover(*pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse
	WalletConvert(*pb.RpcWalletConvertRequest) *pb.RpcWalletConvertResponse
	WorkspaceCreate(*pb.RpcWorkspaceCreateRequest) *pb.RpcWorkspaceCreateResponse
	WorkspaceSelect(*pb.RpcWorkspaceSelectRequest) *pb.RpcWorkspaceSelectResponse
	WorkspaceGetCurrent(*pb.RpcWorkspaceGetCurrentRequest) *pb.RpcWorkspaceGetCurrentResponse
	WorkspaceGetAll(*pb.RpcWorkspaceGetAllRequest) *pb.RpcWorkspaceGetAllResponse
	WorkspaceSetIsHighlighted(*pb.RpcWorkspaceSetIsHighlightedRequest) *pb.RpcWorkspaceSetIsHighlightedResponse
	AccountRecover(*pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse
	AccountCreate(*pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse
	AccountSelect(*pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse
	AccountStop(*pb.RpcAccountStopRequest) *pb.RpcAccountStopResponse
	FileOffload(*pb.RpcFileOffloadRequest) *pb.RpcFileOffloadResponse
	FileListOffload(*pb.RpcFileListOffloadRequest) *pb.RpcFileListOffloadResponse
	VersionGet(*pb.RpcVersionGetRequest) *pb.RpcVersionGetResponse
	LogSend(*pb.RpcLogSendRequest) *pb.RpcLogSendResponse
	ConfigGet(*pb.RpcConfigGetRequest) *pb.RpcConfigGetResponse
	Shutdown(*pb.RpcShutdownRequest) *pb.RpcShutdownResponse
	ExternalDropFiles(*pb.RpcExternalDropFilesRequest) *pb.RpcExternalDropFilesResponse
	ExternalDropContent(*pb.RpcExternalDropContentRequest) *pb.RpcExternalDropContentResponse
	LinkPreview(*pb.RpcLinkPreviewRequest) *pb.RpcLinkPreviewResponse
	UploadFile(*pb.RpcUploadFileRequest) *pb.RpcUploadFileResponse
	DownloadFile(*pb.RpcDownloadFileRequest) *pb.RpcDownloadFileResponse
	BlockUpload(*pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse
	BlockReplace(*pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse
	// BlockUpdateContent allows to update any simple block content to the new value of the same type
	BlockUpdateContent(*pb.RpcBlockUpdateContentRequest) *pb.RpcBlockUpdateContentResponse
	BlockOpen(*pb.RpcBlockOpenRequest) *pb.RpcBlockOpenResponse
	BlockShow(*pb.RpcBlockShowRequest) *pb.RpcBlockShowResponse
	BlockGetPublicWebURL(*pb.RpcBlockGetPublicWebURLRequest) *pb.RpcBlockGetPublicWebURLResponse
	BlockOpenBreadcrumbs(*pb.RpcBlockOpenBreadcrumbsRequest) *pb.RpcBlockOpenBreadcrumbsResponse
	BlockSetBreadcrumbs(*pb.RpcBlockSetBreadcrumbsRequest) *pb.RpcBlockSetBreadcrumbsResponse
	BlockCreate(*pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse
	BlockCreatePage(*pb.RpcBlockCreatePageRequest) *pb.RpcBlockCreatePageResponse
	BlockCreateSet(*pb.RpcBlockCreateSetRequest) *pb.RpcBlockCreateSetResponse
	BlockUnlink(*pb.RpcBlockUnlinkRequest) *pb.RpcBlockUnlinkResponse
	BlockClose(*pb.RpcBlockCloseRequest) *pb.RpcBlockCloseResponse
	BlockDownload(*pb.RpcBlockDownloadRequest) *pb.RpcBlockDownloadResponse
	BlockGetMarks(*pb.RpcBlockGetMarksRequest) *pb.RpcBlockGetMarksResponse
	BlockUndo(*pb.RpcBlockUndoRequest) *pb.RpcBlockUndoResponse
	BlockRedo(*pb.RpcBlockRedoRequest) *pb.RpcBlockRedoResponse
	BlockSetFields(*pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse
	BlockSetRestrictions(*pb.RpcBlockSetRestrictionsRequest) *pb.RpcBlockSetRestrictionsResponse
	BlockListMove(*pb.RpcBlockListMoveRequest) *pb.RpcBlockListMoveResponse
	BlockListMoveToNewPage(*pb.RpcBlockListMoveToNewPageRequest) *pb.RpcBlockListMoveToNewPageResponse
	BlockListConvertChildrenToPages(*pb.RpcBlockListConvertChildrenToPagesRequest) *pb.RpcBlockListConvertChildrenToPagesResponse
	BlockListSetFields(*pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse
	BlockListSetTextStyle(*pb.RpcBlockListSetTextStyleRequest) *pb.RpcBlockListSetTextStyleResponse
	BlockListDuplicate(*pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse
	BlockListSetBackgroundColor(*pb.RpcBlockListSetBackgroundColorRequest) *pb.RpcBlockListSetBackgroundColorResponse
	BlockListSetAlign(*pb.RpcBlockListSetAlignRequest) *pb.RpcBlockListSetAlignResponse
	BlockListSetDivStyle(*pb.RpcBlockListSetDivStyleRequest) *pb.RpcBlockListSetDivStyleResponse
	BlockListTurnInto(*pb.RpcBlockListTurnIntoRequest) *pb.RpcBlockListTurnIntoResponse
	BlockSetLatexText(*pb.RpcBlockSetLatexTextRequest) *pb.RpcBlockSetLatexTextResponse
	BlockSetTextText(*pb.RpcBlockSetTextTextRequest) *pb.RpcBlockSetTextTextResponse
	BlockSetTextColor(*pb.RpcBlockSetTextColorRequest) *pb.RpcBlockSetTextColorResponse
	BlockListSetTextColor(*pb.RpcBlockListSetTextColorRequest) *pb.RpcBlockListSetTextColorResponse
	BlockListSetTextMark(*pb.RpcBlockListSetTextMarkRequest) *pb.RpcBlockListSetTextMarkResponse
	BlockSetTextStyle(*pb.RpcBlockSetTextStyleRequest) *pb.RpcBlockSetTextStyleResponse
	BlockSetTextChecked(*pb.RpcBlockSetTextCheckedRequest) *pb.RpcBlockSetTextCheckedResponse
	BlockSplit(*pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse
	BlockMerge(*pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse
	BlockCopy(*pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse
	BlockPaste(*pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse
	BlockCut(*pb.RpcBlockCutRequest) *pb.RpcBlockCutResponse
	BlockExport(*pb.RpcBlockExportRequest) *pb.RpcBlockExportResponse
	BlockImportMarkdown(*pb.RpcBlockImportMarkdownRequest) *pb.RpcBlockImportMarkdownResponse
	BlockSetFileName(*pb.RpcBlockSetFileNameRequest) *pb.RpcBlockSetFileNameResponse
	BlockSetImageName(*pb.RpcBlockSetImageNameRequest) *pb.RpcBlockSetImageNameResponse
	BlockSetImageWidth(*pb.RpcBlockSetImageWidthRequest) *pb.RpcBlockSetImageWidthResponse
	BlockSetVideoName(*pb.RpcBlockSetVideoNameRequest) *pb.RpcBlockSetVideoNameResponse
	BlockSetVideoWidth(*pb.RpcBlockSetVideoWidthRequest) *pb.RpcBlockSetVideoWidthResponse
	BlockSetLinkTargetBlockId(*pb.RpcBlockSetLinkTargetBlockIdRequest) *pb.RpcBlockSetLinkTargetBlockIdResponse
	BlockBookmarkFetch(*pb.RpcBlockBookmarkFetchRequest) *pb.RpcBlockBookmarkFetchResponse
	BlockBookmarkCreateAndFetch(*pb.RpcBlockBookmarkCreateAndFetchRequest) *pb.RpcBlockBookmarkCreateAndFetchResponse
	BlockFileCreateAndUpload(*pb.RpcBlockFileCreateAndUploadRequest) *pb.RpcBlockFileCreateAndUploadResponse
	BlockRelationSetKey(*pb.RpcBlockRelationSetKeyRequest) *pb.RpcBlockRelationSetKeyResponse
	BlockRelationAdd(*pb.RpcBlockRelationAddRequest) *pb.RpcBlockRelationAddResponse
	// ## Dataview
	// # View
	BlockDataviewViewCreate(*pb.RpcBlockDataviewViewCreateRequest) *pb.RpcBlockDataviewViewCreateResponse
	BlockDataviewViewDelete(*pb.RpcBlockDataviewViewDeleteRequest) *pb.RpcBlockDataviewViewDeleteResponse
	BlockDataviewViewUpdate(*pb.RpcBlockDataviewViewUpdateRequest) *pb.RpcBlockDataviewViewUpdateResponse
	BlockDataviewViewSetActive(*pb.RpcBlockDataviewViewSetActiveRequest) *pb.RpcBlockDataviewViewSetActiveResponse
	BlockDataviewViewSetPosition(*pb.RpcBlockDataviewViewSetPositionRequest) *pb.RpcBlockDataviewViewSetPositionResponse
	BlockDataviewSetSource(*pb.RpcBlockDataviewSetSourceRequest) *pb.RpcBlockDataviewSetSourceResponse
	// # Relation
	BlockDataviewRelationAdd(*pb.RpcBlockDataviewRelationAddRequest) *pb.RpcBlockDataviewRelationAddResponse
	BlockDataviewRelationUpdate(*pb.RpcBlockDataviewRelationUpdateRequest) *pb.RpcBlockDataviewRelationUpdateResponse
	BlockDataviewRelationDelete(*pb.RpcBlockDataviewRelationDeleteRequest) *pb.RpcBlockDataviewRelationDeleteResponse
	BlockDataviewRelationListAvailable(*pb.RpcBlockDataviewRelationListAvailableRequest) *pb.RpcBlockDataviewRelationListAvailableResponse
	// # Record
	BlockDataviewRecordCreate(*pb.RpcBlockDataviewRecordCreateRequest) *pb.RpcBlockDataviewRecordCreateResponse
	BlockDataviewRecordUpdate(*pb.RpcBlockDataviewRecordUpdateRequest) *pb.RpcBlockDataviewRecordUpdateResponse
	BlockDataviewRecordDelete(*pb.RpcBlockDataviewRecordDeleteRequest) *pb.RpcBlockDataviewRecordDeleteResponse
	BlockDataviewRecordRelationOptionAdd(*pb.RpcBlockDataviewRecordRelationOptionAddRequest) *pb.RpcBlockDataviewRecordRelationOptionAddResponse
	BlockDataviewRecordRelationOptionUpdate(*pb.RpcBlockDataviewRecordRelationOptionUpdateRequest) *pb.RpcBlockDataviewRecordRelationOptionUpdateResponse
	BlockDataviewRecordRelationOptionDelete(*pb.RpcBlockDataviewRecordRelationOptionDeleteRequest) *pb.RpcBlockDataviewRecordRelationOptionDeleteResponse
	// ## Object's relations
	// set an existing object type to the object so it will appear in sets and suggests relations from this type
	// TODO: rename BlockObjectTypeSet -> ObjectObjectTypeSet
	BlockObjectTypeSet(*pb.RpcBlockObjectTypeSetRequest) *pb.RpcBlockObjectTypeSetResponse
	NavigationListObjects(*pb.RpcNavigationListObjectsRequest) *pb.RpcNavigationListObjectsResponse
	NavigationGetObjectInfoWithLinks(*pb.RpcNavigationGetObjectInfoWithLinksRequest) *pb.RpcNavigationGetObjectInfoWithLinksResponse
	ObjectGraph(*pb.RpcObjectGraphRequest) *pb.RpcObjectGraphResponse
	ObjectSearch(*pb.RpcObjectSearchRequest) *pb.RpcObjectSearchResponse
	ObjectRelationAdd(*pb.RpcObjectRelationAddRequest) *pb.RpcObjectRelationAddResponse
	ObjectRelationUpdate(*pb.RpcObjectRelationUpdateRequest) *pb.RpcObjectRelationUpdateResponse
	ObjectRelationDelete(*pb.RpcObjectRelationDeleteRequest) *pb.RpcObjectRelationDeleteResponse
	ObjectRelationOptionAdd(*pb.RpcObjectRelationOptionAddRequest) *pb.RpcObjectRelationOptionAddResponse
	ObjectRelationOptionUpdate(*pb.RpcObjectRelationOptionUpdateRequest) *pb.RpcObjectRelationOptionUpdateResponse
	ObjectRelationOptionDelete(*pb.RpcObjectRelationOptionDeleteRequest) *pb.RpcObjectRelationOptionDeleteResponse
	ObjectRelationListAvailable(*pb.RpcObjectRelationListAvailableRequest) *pb.RpcObjectRelationListAvailableResponse
	ObjectSetLayout(*pb.RpcObjectSetLayoutRequest) *pb.RpcObjectSetLayoutResponse
	ObjectFeaturedRelationAdd(*pb.RpcObjectFeaturedRelationAddRequest) *pb.RpcObjectFeaturedRelationAddResponse
	ObjectFeaturedRelationRemove(*pb.RpcObjectFeaturedRelationRemoveRequest) *pb.RpcObjectFeaturedRelationRemoveResponse
	ObjectSetIsFavorite(*pb.RpcObjectSetIsFavoriteRequest) *pb.RpcObjectSetIsFavoriteResponse
	ObjectSetIsArchived(*pb.RpcObjectSetIsArchivedRequest) *pb.RpcObjectSetIsArchivedResponse
	// ObjectToSet creates new set from given object and removes object
	ObjectToSet(*pb.RpcObjectToSetRequest) *pb.RpcObjectToSetResponse
	ObjectListDelete(*pb.RpcObjectListDeleteRequest) *pb.RpcObjectListDeleteResponse
	ObjectListSetIsArchived(*pb.RpcObjectListSetIsArchivedRequest) *pb.RpcObjectListSetIsArchivedResponse
	// TODO: rename BlockSetDetails -> ObjectSetDetails
	BlockSetDetails(*pb.RpcBlockSetDetailsRequest) *pb.RpcBlockSetDetailsResponse
	// PageCreate just creates the new page, without adding the link to it from some other page
	// TODO: rename PageCreate -> ObjectCreate
	PageCreate(*pb.RpcPageCreateRequest) *pb.RpcPageCreateResponse
	// SetCreate just creates the new set, without adding the link to it from some other page
	SetCreate(*pb.RpcSetCreateRequest) *pb.RpcSetCreateResponse
	// ## ObjectType
	ObjectTypeCreate(*pb.RpcObjectTypeCreateRequest) *pb.RpcObjectTypeCreateResponse
	// ObjectTypeList lists all object types both bundled and created by user
	ObjectTypeList(*pb.RpcObjectTypeListRequest) *pb.RpcObjectTypeListResponse
	ObjectTypeRelationList(*pb.RpcObjectTypeRelationListRequest) *pb.RpcObjectTypeRelationListResponse
	ObjectTypeRelationAdd(*pb.RpcObjectTypeRelationAddRequest) *pb.RpcObjectTypeRelationAddResponse
	ObjectTypeRelationUpdate(*pb.RpcObjectTypeRelationUpdateRequest) *pb.RpcObjectTypeRelationUpdateResponse
	ObjectTypeRelationRemove(*pb.RpcObjectTypeRelationRemoveRequest) *pb.RpcObjectTypeRelationRemoveResponse
	Ping(*pb.RpcPingRequest) *pb.RpcPingResponse
	ProcessCancel(*pb.RpcProcessCancelRequest) *pb.RpcProcessCancelResponse
	HistoryShow(*pb.RpcHistoryShowRequest) *pb.RpcHistoryShowResponse
	HistoryVersions(*pb.RpcHistoryVersionsRequest) *pb.RpcHistoryVersionsResponse
	HistorySetVersion(*pb.RpcHistorySetVersionRequest) *pb.RpcHistorySetVersionResponse
	Export(*pb.RpcExportRequest) *pb.RpcExportResponse
	ExportTemplates(*pb.RpcExportTemplatesRequest) *pb.RpcExportTemplatesResponse
	ExportLocalstore(*pb.RpcExportLocalstoreRequest) *pb.RpcExportLocalstoreResponse
	MakeTemplate(*pb.RpcMakeTemplateRequest) *pb.RpcMakeTemplateResponse
	MakeTemplateByObjectType(*pb.RpcMakeTemplateByObjectTypeRequest) *pb.RpcMakeTemplateByObjectTypeResponse
	CloneTemplate(*pb.RpcCloneTemplateRequest) *pb.RpcCloneTemplateResponse
	ApplyTemplate(*pb.RpcApplyTemplateRequest) *pb.RpcApplyTemplateResponse
	DebugSync(*pb.RpcDebugSyncRequest) *pb.RpcDebugSyncResponse
	DebugThread(*pb.RpcDebugThreadRequest) *pb.RpcDebugThreadResponse
	DebugTree(*pb.RpcDebugTreeRequest) *pb.RpcDebugTreeResponse
	// used only for lib-server via grpc
	ListenEvents(*pb.Empty, ClientCommands_ListenEventsServer)
}

// UnimplementedClientCommandsServer can be embedded to have forward compatible implementations.
type UnimplementedClientCommandsServer struct {
}

func (*UnimplementedClientCommandsServer) ObjectAddWithObjectId(req *pb.RpcObjectAddWithObjectIdRequest) *pb.RpcObjectAddWithObjectIdResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectShareByLink(req *pb.RpcObjectShareByLinkRequest) *pb.RpcObjectShareByLinkResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WalletCreate(req *pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WalletRecover(req *pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WalletConvert(req *pb.RpcWalletConvertRequest) *pb.RpcWalletConvertResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceCreate(req *pb.RpcWorkspaceCreateRequest) *pb.RpcWorkspaceCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceSelect(req *pb.RpcWorkspaceSelectRequest) *pb.RpcWorkspaceSelectResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceGetCurrent(req *pb.RpcWorkspaceGetCurrentRequest) *pb.RpcWorkspaceGetCurrentResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceGetAll(req *pb.RpcWorkspaceGetAllRequest) *pb.RpcWorkspaceGetAllResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceSetIsHighlighted(req *pb.RpcWorkspaceSetIsHighlightedRequest) *pb.RpcWorkspaceSetIsHighlightedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountRecover(req *pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountCreate(req *pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountSelect(req *pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountStop(req *pb.RpcAccountStopRequest) *pb.RpcAccountStopResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) FileOffload(req *pb.RpcFileOffloadRequest) *pb.RpcFileOffloadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) FileListOffload(req *pb.RpcFileListOffloadRequest) *pb.RpcFileListOffloadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) VersionGet(req *pb.RpcVersionGetRequest) *pb.RpcVersionGetResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) LogSend(req *pb.RpcLogSendRequest) *pb.RpcLogSendResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ConfigGet(req *pb.RpcConfigGetRequest) *pb.RpcConfigGetResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) Shutdown(req *pb.RpcShutdownRequest) *pb.RpcShutdownResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ExternalDropFiles(req *pb.RpcExternalDropFilesRequest) *pb.RpcExternalDropFilesResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ExternalDropContent(req *pb.RpcExternalDropContentRequest) *pb.RpcExternalDropContentResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) LinkPreview(req *pb.RpcLinkPreviewRequest) *pb.RpcLinkPreviewResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) UploadFile(req *pb.RpcUploadFileRequest) *pb.RpcUploadFileResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DownloadFile(req *pb.RpcDownloadFileRequest) *pb.RpcDownloadFileResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockUpload(req *pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockReplace(req *pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockUpdateContent(req *pb.RpcBlockUpdateContentRequest) *pb.RpcBlockUpdateContentResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockOpen(req *pb.RpcBlockOpenRequest) *pb.RpcBlockOpenResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockShow(req *pb.RpcBlockShowRequest) *pb.RpcBlockShowResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockGetPublicWebURL(req *pb.RpcBlockGetPublicWebURLRequest) *pb.RpcBlockGetPublicWebURLResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockOpenBreadcrumbs(req *pb.RpcBlockOpenBreadcrumbsRequest) *pb.RpcBlockOpenBreadcrumbsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetBreadcrumbs(req *pb.RpcBlockSetBreadcrumbsRequest) *pb.RpcBlockSetBreadcrumbsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCreate(req *pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCreatePage(req *pb.RpcBlockCreatePageRequest) *pb.RpcBlockCreatePageResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCreateSet(req *pb.RpcBlockCreateSetRequest) *pb.RpcBlockCreateSetResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockUnlink(req *pb.RpcBlockUnlinkRequest) *pb.RpcBlockUnlinkResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockClose(req *pb.RpcBlockCloseRequest) *pb.RpcBlockCloseResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDownload(req *pb.RpcBlockDownloadRequest) *pb.RpcBlockDownloadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockGetMarks(req *pb.RpcBlockGetMarksRequest) *pb.RpcBlockGetMarksResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockUndo(req *pb.RpcBlockUndoRequest) *pb.RpcBlockUndoResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockRedo(req *pb.RpcBlockRedoRequest) *pb.RpcBlockRedoResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetFields(req *pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetRestrictions(req *pb.RpcBlockSetRestrictionsRequest) *pb.RpcBlockSetRestrictionsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListMove(req *pb.RpcBlockListMoveRequest) *pb.RpcBlockListMoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListMoveToNewPage(req *pb.RpcBlockListMoveToNewPageRequest) *pb.RpcBlockListMoveToNewPageResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListConvertChildrenToPages(req *pb.RpcBlockListConvertChildrenToPagesRequest) *pb.RpcBlockListConvertChildrenToPagesResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetFields(req *pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetTextStyle(req *pb.RpcBlockListSetTextStyleRequest) *pb.RpcBlockListSetTextStyleResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListDuplicate(req *pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetBackgroundColor(req *pb.RpcBlockListSetBackgroundColorRequest) *pb.RpcBlockListSetBackgroundColorResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetAlign(req *pb.RpcBlockListSetAlignRequest) *pb.RpcBlockListSetAlignResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetDivStyle(req *pb.RpcBlockListSetDivStyleRequest) *pb.RpcBlockListSetDivStyleResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListTurnInto(req *pb.RpcBlockListTurnIntoRequest) *pb.RpcBlockListTurnIntoResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetLatexText(req *pb.RpcBlockSetLatexTextRequest) *pb.RpcBlockSetLatexTextResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetTextText(req *pb.RpcBlockSetTextTextRequest) *pb.RpcBlockSetTextTextResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetTextColor(req *pb.RpcBlockSetTextColorRequest) *pb.RpcBlockSetTextColorResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetTextColor(req *pb.RpcBlockListSetTextColorRequest) *pb.RpcBlockListSetTextColorResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetTextMark(req *pb.RpcBlockListSetTextMarkRequest) *pb.RpcBlockListSetTextMarkResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetTextStyle(req *pb.RpcBlockSetTextStyleRequest) *pb.RpcBlockSetTextStyleResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetTextChecked(req *pb.RpcBlockSetTextCheckedRequest) *pb.RpcBlockSetTextCheckedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSplit(req *pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockMerge(req *pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCopy(req *pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockPaste(req *pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCut(req *pb.RpcBlockCutRequest) *pb.RpcBlockCutResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockExport(req *pb.RpcBlockExportRequest) *pb.RpcBlockExportResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockImportMarkdown(req *pb.RpcBlockImportMarkdownRequest) *pb.RpcBlockImportMarkdownResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetFileName(req *pb.RpcBlockSetFileNameRequest) *pb.RpcBlockSetFileNameResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetImageName(req *pb.RpcBlockSetImageNameRequest) *pb.RpcBlockSetImageNameResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetImageWidth(req *pb.RpcBlockSetImageWidthRequest) *pb.RpcBlockSetImageWidthResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetVideoName(req *pb.RpcBlockSetVideoNameRequest) *pb.RpcBlockSetVideoNameResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetVideoWidth(req *pb.RpcBlockSetVideoWidthRequest) *pb.RpcBlockSetVideoWidthResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetLinkTargetBlockId(req *pb.RpcBlockSetLinkTargetBlockIdRequest) *pb.RpcBlockSetLinkTargetBlockIdResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockBookmarkFetch(req *pb.RpcBlockBookmarkFetchRequest) *pb.RpcBlockBookmarkFetchResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockBookmarkCreateAndFetch(req *pb.RpcBlockBookmarkCreateAndFetchRequest) *pb.RpcBlockBookmarkCreateAndFetchResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockFileCreateAndUpload(req *pb.RpcBlockFileCreateAndUploadRequest) *pb.RpcBlockFileCreateAndUploadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockRelationSetKey(req *pb.RpcBlockRelationSetKeyRequest) *pb.RpcBlockRelationSetKeyResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockRelationAdd(req *pb.RpcBlockRelationAddRequest) *pb.RpcBlockRelationAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewCreate(req *pb.RpcBlockDataviewViewCreateRequest) *pb.RpcBlockDataviewViewCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewDelete(req *pb.RpcBlockDataviewViewDeleteRequest) *pb.RpcBlockDataviewViewDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewUpdate(req *pb.RpcBlockDataviewViewUpdateRequest) *pb.RpcBlockDataviewViewUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewSetActive(req *pb.RpcBlockDataviewViewSetActiveRequest) *pb.RpcBlockDataviewViewSetActiveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewSetPosition(req *pb.RpcBlockDataviewViewSetPositionRequest) *pb.RpcBlockDataviewViewSetPositionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewSetSource(req *pb.RpcBlockDataviewSetSourceRequest) *pb.RpcBlockDataviewSetSourceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRelationAdd(req *pb.RpcBlockDataviewRelationAddRequest) *pb.RpcBlockDataviewRelationAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRelationUpdate(req *pb.RpcBlockDataviewRelationUpdateRequest) *pb.RpcBlockDataviewRelationUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRelationDelete(req *pb.RpcBlockDataviewRelationDeleteRequest) *pb.RpcBlockDataviewRelationDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRelationListAvailable(req *pb.RpcBlockDataviewRelationListAvailableRequest) *pb.RpcBlockDataviewRelationListAvailableResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRecordCreate(req *pb.RpcBlockDataviewRecordCreateRequest) *pb.RpcBlockDataviewRecordCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRecordUpdate(req *pb.RpcBlockDataviewRecordUpdateRequest) *pb.RpcBlockDataviewRecordUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRecordDelete(req *pb.RpcBlockDataviewRecordDeleteRequest) *pb.RpcBlockDataviewRecordDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRecordRelationOptionAdd(req *pb.RpcBlockDataviewRecordRelationOptionAddRequest) *pb.RpcBlockDataviewRecordRelationOptionAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRecordRelationOptionUpdate(req *pb.RpcBlockDataviewRecordRelationOptionUpdateRequest) *pb.RpcBlockDataviewRecordRelationOptionUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRecordRelationOptionDelete(req *pb.RpcBlockDataviewRecordRelationOptionDeleteRequest) *pb.RpcBlockDataviewRecordRelationOptionDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockObjectTypeSet(req *pb.RpcBlockObjectTypeSetRequest) *pb.RpcBlockObjectTypeSetResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) NavigationListObjects(req *pb.RpcNavigationListObjectsRequest) *pb.RpcNavigationListObjectsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) NavigationGetObjectInfoWithLinks(req *pb.RpcNavigationGetObjectInfoWithLinksRequest) *pb.RpcNavigationGetObjectInfoWithLinksResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectGraph(req *pb.RpcObjectGraphRequest) *pb.RpcObjectGraphResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSearch(req *pb.RpcObjectSearchRequest) *pb.RpcObjectSearchResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationAdd(req *pb.RpcObjectRelationAddRequest) *pb.RpcObjectRelationAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationUpdate(req *pb.RpcObjectRelationUpdateRequest) *pb.RpcObjectRelationUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationDelete(req *pb.RpcObjectRelationDeleteRequest) *pb.RpcObjectRelationDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationOptionAdd(req *pb.RpcObjectRelationOptionAddRequest) *pb.RpcObjectRelationOptionAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationOptionUpdate(req *pb.RpcObjectRelationOptionUpdateRequest) *pb.RpcObjectRelationOptionUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationOptionDelete(req *pb.RpcObjectRelationOptionDeleteRequest) *pb.RpcObjectRelationOptionDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationListAvailable(req *pb.RpcObjectRelationListAvailableRequest) *pb.RpcObjectRelationListAvailableResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSetLayout(req *pb.RpcObjectSetLayoutRequest) *pb.RpcObjectSetLayoutResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectFeaturedRelationAdd(req *pb.RpcObjectFeaturedRelationAddRequest) *pb.RpcObjectFeaturedRelationAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectFeaturedRelationRemove(req *pb.RpcObjectFeaturedRelationRemoveRequest) *pb.RpcObjectFeaturedRelationRemoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSetIsFavorite(req *pb.RpcObjectSetIsFavoriteRequest) *pb.RpcObjectSetIsFavoriteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSetIsArchived(req *pb.RpcObjectSetIsArchivedRequest) *pb.RpcObjectSetIsArchivedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectToSet(req *pb.RpcObjectToSetRequest) *pb.RpcObjectToSetResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectListDelete(req *pb.RpcObjectListDeleteRequest) *pb.RpcObjectListDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectListSetIsArchived(req *pb.RpcObjectListSetIsArchivedRequest) *pb.RpcObjectListSetIsArchivedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetDetails(req *pb.RpcBlockSetDetailsRequest) *pb.RpcBlockSetDetailsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) PageCreate(req *pb.RpcPageCreateRequest) *pb.RpcPageCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) SetCreate(req *pb.RpcSetCreateRequest) *pb.RpcSetCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectTypeCreate(req *pb.RpcObjectTypeCreateRequest) *pb.RpcObjectTypeCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectTypeList(req *pb.RpcObjectTypeListRequest) *pb.RpcObjectTypeListResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectTypeRelationList(req *pb.RpcObjectTypeRelationListRequest) *pb.RpcObjectTypeRelationListResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectTypeRelationAdd(req *pb.RpcObjectTypeRelationAddRequest) *pb.RpcObjectTypeRelationAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectTypeRelationUpdate(req *pb.RpcObjectTypeRelationUpdateRequest) *pb.RpcObjectTypeRelationUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectTypeRelationRemove(req *pb.RpcObjectTypeRelationRemoveRequest) *pb.RpcObjectTypeRelationRemoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) Ping(req *pb.RpcPingRequest) *pb.RpcPingResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ProcessCancel(req *pb.RpcProcessCancelRequest) *pb.RpcProcessCancelResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) HistoryShow(req *pb.RpcHistoryShowRequest) *pb.RpcHistoryShowResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) HistoryVersions(req *pb.RpcHistoryVersionsRequest) *pb.RpcHistoryVersionsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) HistorySetVersion(req *pb.RpcHistorySetVersionRequest) *pb.RpcHistorySetVersionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) Export(req *pb.RpcExportRequest) *pb.RpcExportResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ExportTemplates(req *pb.RpcExportTemplatesRequest) *pb.RpcExportTemplatesResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ExportLocalstore(req *pb.RpcExportLocalstoreRequest) *pb.RpcExportLocalstoreResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) MakeTemplate(req *pb.RpcMakeTemplateRequest) *pb.RpcMakeTemplateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) MakeTemplateByObjectType(req *pb.RpcMakeTemplateByObjectTypeRequest) *pb.RpcMakeTemplateByObjectTypeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) CloneTemplate(req *pb.RpcCloneTemplateRequest) *pb.RpcCloneTemplateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ApplyTemplate(req *pb.RpcApplyTemplateRequest) *pb.RpcApplyTemplateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugSync(req *pb.RpcDebugSyncRequest) *pb.RpcDebugSyncResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugThread(req *pb.RpcDebugThreadRequest) *pb.RpcDebugThreadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugTree(req *pb.RpcDebugTreeRequest) *pb.RpcDebugTreeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ListenEvents(req *pb.Empty, srv ClientCommands_ListenEventsServer) {
	return
}

func RegisterClientCommandsServer(s *grpc.Server, srv ClientCommandsServer) {
	s.RegisterService(&_ClientCommands_serviceDesc, srv)
}

func _ClientCommands_ObjectAddWithObjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectAddWithObjectIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectAddWithObjectId(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectAddWithObjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectAddWithObjectId(req.(*pb.RpcObjectAddWithObjectIdRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectShareByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectShareByLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectShareByLink(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectShareByLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectShareByLink(req.(*pb.RpcObjectShareByLinkRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WalletCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWalletCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WalletCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WalletCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WalletCreate(req.(*pb.RpcWalletCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WalletRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWalletRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WalletRecover(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WalletRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WalletRecover(req.(*pb.RpcWalletRecoverRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WalletConvert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWalletConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WalletConvert(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WalletConvert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WalletConvert(req.(*pb.RpcWalletConvertRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceCreate(req.(*pb.RpcWorkspaceCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceSelect(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceSelect(req.(*pb.RpcWorkspaceSelectRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceGetCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceGetCurrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceGetCurrent(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceGetCurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceGetCurrent(req.(*pb.RpcWorkspaceGetCurrentRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceGetAll(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceGetAll(req.(*pb.RpcWorkspaceGetAllRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceSetIsHighlighted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceSetIsHighlightedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceSetIsHighlighted(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceSetIsHighlighted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceSetIsHighlighted(req.(*pb.RpcWorkspaceSetIsHighlightedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountRecover(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountRecover(req.(*pb.RpcAccountRecoverRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountCreate(req.(*pb.RpcAccountCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountSelect(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountSelect(req.(*pb.RpcAccountSelectRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountStop(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountStop(req.(*pb.RpcAccountStopRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_FileOffload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcFileOffloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).FileOffload(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/FileOffload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).FileOffload(req.(*pb.RpcFileOffloadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_FileListOffload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcFileListOffloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).FileListOffload(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/FileListOffload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).FileListOffload(req.(*pb.RpcFileListOffloadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_VersionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcVersionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).VersionGet(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/VersionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).VersionGet(req.(*pb.RpcVersionGetRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_LogSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcLogSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).LogSend(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/LogSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).LogSend(req.(*pb.RpcLogSendRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcConfigGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ConfigGet(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ConfigGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ConfigGet(req.(*pb.RpcConfigGetRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).Shutdown(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).Shutdown(req.(*pb.RpcShutdownRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ExternalDropFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcExternalDropFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ExternalDropFiles(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ExternalDropFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ExternalDropFiles(req.(*pb.RpcExternalDropFilesRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ExternalDropContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcExternalDropContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ExternalDropContent(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ExternalDropContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ExternalDropContent(req.(*pb.RpcExternalDropContentRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_LinkPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcLinkPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).LinkPreview(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/LinkPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).LinkPreview(req.(*pb.RpcLinkPreviewRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).UploadFile(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).UploadFile(req.(*pb.RpcUploadFileRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DownloadFile(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DownloadFile(req.(*pb.RpcDownloadFileRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockUpload(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockUpload(req.(*pb.RpcBlockUploadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockReplace(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockReplace(req.(*pb.RpcBlockReplaceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockUpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockUpdateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockUpdateContent(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockUpdateContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockUpdateContent(req.(*pb.RpcBlockUpdateContentRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockOpen(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockOpen(req.(*pb.RpcBlockOpenRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockShow(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockShow(req.(*pb.RpcBlockShowRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockGetPublicWebURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockGetPublicWebURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockGetPublicWebURL(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockGetPublicWebURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockGetPublicWebURL(req.(*pb.RpcBlockGetPublicWebURLRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockOpenBreadcrumbs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockOpenBreadcrumbsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockOpenBreadcrumbs(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockOpenBreadcrumbs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockOpenBreadcrumbs(req.(*pb.RpcBlockOpenBreadcrumbsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetBreadcrumbs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetBreadcrumbsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetBreadcrumbs(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetBreadcrumbs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetBreadcrumbs(req.(*pb.RpcBlockSetBreadcrumbsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCreate(req.(*pb.RpcBlockCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCreatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCreatePage(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCreatePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCreatePage(req.(*pb.RpcBlockCreatePageRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCreateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCreateSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCreateSet(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCreateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCreateSet(req.(*pb.RpcBlockCreateSetRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockUnlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockUnlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockUnlink(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockUnlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockUnlink(req.(*pb.RpcBlockUnlinkRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockClose(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockClose(req.(*pb.RpcBlockCloseRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDownload(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDownload(req.(*pb.RpcBlockDownloadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockGetMarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockGetMarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockGetMarks(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockGetMarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockGetMarks(req.(*pb.RpcBlockGetMarksRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockUndo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockUndoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockUndo(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockUndo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockUndo(req.(*pb.RpcBlockUndoRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockRedo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockRedoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockRedo(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockRedo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockRedo(req.(*pb.RpcBlockRedoRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetFields(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetFields(req.(*pb.RpcBlockSetFieldsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetRestrictions(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetRestrictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetRestrictions(req.(*pb.RpcBlockSetRestrictionsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListMove(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListMove(req.(*pb.RpcBlockListMoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListMoveToNewPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListMoveToNewPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListMoveToNewPage(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListMoveToNewPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListMoveToNewPage(req.(*pb.RpcBlockListMoveToNewPageRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListConvertChildrenToPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListConvertChildrenToPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListConvertChildrenToPages(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListConvertChildrenToPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListConvertChildrenToPages(req.(*pb.RpcBlockListConvertChildrenToPagesRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetFields(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetFields(req.(*pb.RpcBlockListSetFieldsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetTextStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetTextStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetTextStyle(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetTextStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetTextStyle(req.(*pb.RpcBlockListSetTextStyleRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListDuplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListDuplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListDuplicate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListDuplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListDuplicate(req.(*pb.RpcBlockListDuplicateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetBackgroundColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetBackgroundColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetBackgroundColor(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetBackgroundColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetBackgroundColor(req.(*pb.RpcBlockListSetBackgroundColorRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetAlign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetAlignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetAlign(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetAlign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetAlign(req.(*pb.RpcBlockListSetAlignRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetDivStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetDivStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetDivStyle(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetDivStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetDivStyle(req.(*pb.RpcBlockListSetDivStyleRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListTurnInto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListTurnIntoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListTurnInto(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListTurnInto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListTurnInto(req.(*pb.RpcBlockListTurnIntoRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetLatexText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetLatexTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetLatexText(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetLatexText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetLatexText(req.(*pb.RpcBlockSetLatexTextRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetTextText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetTextTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetTextText(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetTextText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetTextText(req.(*pb.RpcBlockSetTextTextRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetTextColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetTextColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetTextColor(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetTextColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetTextColor(req.(*pb.RpcBlockSetTextColorRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetTextColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetTextColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetTextColor(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetTextColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetTextColor(req.(*pb.RpcBlockListSetTextColorRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetTextMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetTextMarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetTextMark(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetTextMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetTextMark(req.(*pb.RpcBlockListSetTextMarkRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetTextStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetTextStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetTextStyle(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetTextStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetTextStyle(req.(*pb.RpcBlockSetTextStyleRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetTextChecked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetTextCheckedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetTextChecked(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetTextChecked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetTextChecked(req.(*pb.RpcBlockSetTextCheckedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSplit(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSplit(req.(*pb.RpcBlockSplitRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockMergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockMerge(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockMerge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockMerge(req.(*pb.RpcBlockMergeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCopy(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCopy(req.(*pb.RpcBlockCopyRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockPaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockPasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockPaste(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockPaste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockPaste(req.(*pb.RpcBlockPasteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCut(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCut(req.(*pb.RpcBlockCutRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockExport(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockExport(req.(*pb.RpcBlockExportRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockImportMarkdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockImportMarkdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockImportMarkdown(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockImportMarkdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockImportMarkdown(req.(*pb.RpcBlockImportMarkdownRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetFileName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetFileNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetFileName(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetFileName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetFileName(req.(*pb.RpcBlockSetFileNameRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetImageName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetImageNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetImageName(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetImageName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetImageName(req.(*pb.RpcBlockSetImageNameRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetImageWidth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetImageWidthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetImageWidth(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetImageWidth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetImageWidth(req.(*pb.RpcBlockSetImageWidthRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetVideoName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetVideoNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetVideoName(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetVideoName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetVideoName(req.(*pb.RpcBlockSetVideoNameRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetVideoWidth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetVideoWidthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetVideoWidth(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetVideoWidth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetVideoWidth(req.(*pb.RpcBlockSetVideoWidthRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetLinkTargetBlockId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetLinkTargetBlockIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetLinkTargetBlockId(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetLinkTargetBlockId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetLinkTargetBlockId(req.(*pb.RpcBlockSetLinkTargetBlockIdRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockBookmarkFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockBookmarkFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockBookmarkFetch(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockBookmarkFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockBookmarkFetch(req.(*pb.RpcBlockBookmarkFetchRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockBookmarkCreateAndFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockBookmarkCreateAndFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockBookmarkCreateAndFetch(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockBookmarkCreateAndFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockBookmarkCreateAndFetch(req.(*pb.RpcBlockBookmarkCreateAndFetchRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockFileCreateAndUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockFileCreateAndUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockFileCreateAndUpload(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockFileCreateAndUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockFileCreateAndUpload(req.(*pb.RpcBlockFileCreateAndUploadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockRelationSetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockRelationSetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockRelationSetKey(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockRelationSetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockRelationSetKey(req.(*pb.RpcBlockRelationSetKeyRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockRelationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockRelationAdd(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockRelationAdd(req.(*pb.RpcBlockRelationAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewCreate(req.(*pb.RpcBlockDataviewViewCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewDelete(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewDelete(req.(*pb.RpcBlockDataviewViewDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewUpdate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewUpdate(req.(*pb.RpcBlockDataviewViewUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewSetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewSetActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewSetActive(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewSetActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewSetActive(req.(*pb.RpcBlockDataviewViewSetActiveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewSetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewSetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewSetPosition(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewSetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewSetPosition(req.(*pb.RpcBlockDataviewViewSetPositionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewSetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewSetSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewSetSource(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewSetSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewSetSource(req.(*pb.RpcBlockDataviewSetSourceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRelationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRelationAdd(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRelationAdd(req.(*pb.RpcBlockDataviewRelationAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRelationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRelationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRelationUpdate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRelationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRelationUpdate(req.(*pb.RpcBlockDataviewRelationUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRelationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRelationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRelationDelete(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRelationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRelationDelete(req.(*pb.RpcBlockDataviewRelationDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRelationListAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRelationListAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRelationListAvailable(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRelationListAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRelationListAvailable(req.(*pb.RpcBlockDataviewRelationListAvailableRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRecordCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRecordCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRecordCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRecordCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRecordCreate(req.(*pb.RpcBlockDataviewRecordCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRecordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRecordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRecordUpdate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRecordUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRecordUpdate(req.(*pb.RpcBlockDataviewRecordUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRecordDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRecordDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRecordDelete(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRecordDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRecordDelete(req.(*pb.RpcBlockDataviewRecordDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRecordRelationOptionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRecordRelationOptionAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRecordRelationOptionAdd(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRecordRelationOptionAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRecordRelationOptionAdd(req.(*pb.RpcBlockDataviewRecordRelationOptionAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRecordRelationOptionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRecordRelationOptionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRecordRelationOptionUpdate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRecordRelationOptionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRecordRelationOptionUpdate(req.(*pb.RpcBlockDataviewRecordRelationOptionUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRecordRelationOptionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRecordRelationOptionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRecordRelationOptionDelete(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRecordRelationOptionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRecordRelationOptionDelete(req.(*pb.RpcBlockDataviewRecordRelationOptionDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockObjectTypeSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockObjectTypeSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockObjectTypeSet(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockObjectTypeSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockObjectTypeSet(req.(*pb.RpcBlockObjectTypeSetRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_NavigationListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcNavigationListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).NavigationListObjects(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/NavigationListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).NavigationListObjects(req.(*pb.RpcNavigationListObjectsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_NavigationGetObjectInfoWithLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcNavigationGetObjectInfoWithLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).NavigationGetObjectInfoWithLinks(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/NavigationGetObjectInfoWithLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).NavigationGetObjectInfoWithLinks(req.(*pb.RpcNavigationGetObjectInfoWithLinksRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectGraph(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectGraph(req.(*pb.RpcObjectGraphRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSearch(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSearch(req.(*pb.RpcObjectSearchRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationAdd(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationAdd(req.(*pb.RpcObjectRelationAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationUpdate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationUpdate(req.(*pb.RpcObjectRelationUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationDelete(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationDelete(req.(*pb.RpcObjectRelationDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationOptionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationOptionAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationOptionAdd(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationOptionAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationOptionAdd(req.(*pb.RpcObjectRelationOptionAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationOptionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationOptionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationOptionUpdate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationOptionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationOptionUpdate(req.(*pb.RpcObjectRelationOptionUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationOptionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationOptionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationOptionDelete(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationOptionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationOptionDelete(req.(*pb.RpcObjectRelationOptionDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationListAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationListAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationListAvailable(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationListAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationListAvailable(req.(*pb.RpcObjectRelationListAvailableRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSetLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSetLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSetLayout(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSetLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSetLayout(req.(*pb.RpcObjectSetLayoutRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectFeaturedRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectFeaturedRelationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectFeaturedRelationAdd(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectFeaturedRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectFeaturedRelationAdd(req.(*pb.RpcObjectFeaturedRelationAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectFeaturedRelationRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectFeaturedRelationRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectFeaturedRelationRemove(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectFeaturedRelationRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectFeaturedRelationRemove(req.(*pb.RpcObjectFeaturedRelationRemoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSetIsFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSetIsFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSetIsFavorite(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSetIsFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSetIsFavorite(req.(*pb.RpcObjectSetIsFavoriteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSetIsArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSetIsArchivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSetIsArchived(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSetIsArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSetIsArchived(req.(*pb.RpcObjectSetIsArchivedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectToSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectToSet(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectToSet(req.(*pb.RpcObjectToSetRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectListDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectListDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectListDelete(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectListDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectListDelete(req.(*pb.RpcObjectListDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectListSetIsArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectListSetIsArchivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectListSetIsArchived(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectListSetIsArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectListSetIsArchived(req.(*pb.RpcObjectListSetIsArchivedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetDetails(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetDetails(req.(*pb.RpcBlockSetDetailsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_PageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcPageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).PageCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/PageCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).PageCreate(req.(*pb.RpcPageCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_SetCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcSetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).SetCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/SetCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).SetCreate(req.(*pb.RpcSetCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectTypeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectTypeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectTypeCreate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectTypeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectTypeCreate(req.(*pb.RpcObjectTypeCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectTypeList(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectTypeList(req.(*pb.RpcObjectTypeListRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectTypeRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectTypeRelationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectTypeRelationList(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectTypeRelationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectTypeRelationList(req.(*pb.RpcObjectTypeRelationListRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectTypeRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectTypeRelationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectTypeRelationAdd(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectTypeRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectTypeRelationAdd(req.(*pb.RpcObjectTypeRelationAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectTypeRelationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectTypeRelationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectTypeRelationUpdate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectTypeRelationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectTypeRelationUpdate(req.(*pb.RpcObjectTypeRelationUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectTypeRelationRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectTypeRelationRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectTypeRelationRemove(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectTypeRelationRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectTypeRelationRemove(req.(*pb.RpcObjectTypeRelationRemoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).Ping(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).Ping(req.(*pb.RpcPingRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ProcessCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcProcessCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ProcessCancel(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ProcessCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ProcessCancel(req.(*pb.RpcProcessCancelRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_HistoryShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcHistoryShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).HistoryShow(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/HistoryShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).HistoryShow(req.(*pb.RpcHistoryShowRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_HistoryVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcHistoryVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).HistoryVersions(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/HistoryVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).HistoryVersions(req.(*pb.RpcHistoryVersionsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_HistorySetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcHistorySetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).HistorySetVersion(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/HistorySetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).HistorySetVersion(req.(*pb.RpcHistorySetVersionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).Export(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).Export(req.(*pb.RpcExportRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ExportTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcExportTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ExportTemplates(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ExportTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ExportTemplates(req.(*pb.RpcExportTemplatesRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ExportLocalstore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcExportLocalstoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ExportLocalstore(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ExportLocalstore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ExportLocalstore(req.(*pb.RpcExportLocalstoreRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_MakeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcMakeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).MakeTemplate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/MakeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).MakeTemplate(req.(*pb.RpcMakeTemplateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_MakeTemplateByObjectType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcMakeTemplateByObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).MakeTemplateByObjectType(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/MakeTemplateByObjectType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).MakeTemplateByObjectType(req.(*pb.RpcMakeTemplateByObjectTypeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_CloneTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcCloneTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).CloneTemplate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/CloneTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).CloneTemplate(req.(*pb.RpcCloneTemplateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ApplyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcApplyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ApplyTemplate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ApplyTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ApplyTemplate(req.(*pb.RpcApplyTemplateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugSync(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugSync(req.(*pb.RpcDebugSyncRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugThread(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugThread(req.(*pb.RpcDebugThreadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugTree(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugTree(req.(*pb.RpcDebugTreeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ListenEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	srv.(ClientCommandsServer).ListenEvents(m, &clientCommandsListenEventsServer{stream})
	return nil
}

type ClientCommands_ListenEventsServer interface {
	Send(*pb.Event) error
	grpc.ServerStream
}

type clientCommandsListenEventsServer struct {
	grpc.ServerStream
}

func (x *clientCommandsListenEventsServer) Send(m *pb.Event) error {
	return x.ServerStream.SendMsg(m)
}

var _ClientCommands_serviceDesc = grpc.ServiceDesc{
	ServiceName: "anytype.ClientCommands",
	HandlerType: (*ClientCommandsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObjectAddWithObjectId",
			Handler:    _ClientCommands_ObjectAddWithObjectId_Handler,
		},
		{
			MethodName: "ObjectShareByLink",
			Handler:    _ClientCommands_ObjectShareByLink_Handler,
		},
		{
			MethodName: "WalletCreate",
			Handler:    _ClientCommands_WalletCreate_Handler,
		},
		{
			MethodName: "WalletRecover",
			Handler:    _ClientCommands_WalletRecover_Handler,
		},
		{
			MethodName: "WalletConvert",
			Handler:    _ClientCommands_WalletConvert_Handler,
		},
		{
			MethodName: "WorkspaceCreate",
			Handler:    _ClientCommands_WorkspaceCreate_Handler,
		},
		{
			MethodName: "WorkspaceSelect",
			Handler:    _ClientCommands_WorkspaceSelect_Handler,
		},
		{
			MethodName: "WorkspaceGetCurrent",
			Handler:    _ClientCommands_WorkspaceGetCurrent_Handler,
		},
		{
			MethodName: "WorkspaceGetAll",
			Handler:    _ClientCommands_WorkspaceGetAll_Handler,
		},
		{
			MethodName: "WorkspaceSetIsHighlighted",
			Handler:    _ClientCommands_WorkspaceSetIsHighlighted_Handler,
		},
		{
			MethodName: "AccountRecover",
			Handler:    _ClientCommands_AccountRecover_Handler,
		},
		{
			MethodName: "AccountCreate",
			Handler:    _ClientCommands_AccountCreate_Handler,
		},
		{
			MethodName: "AccountSelect",
			Handler:    _ClientCommands_AccountSelect_Handler,
		},
		{
			MethodName: "AccountStop",
			Handler:    _ClientCommands_AccountStop_Handler,
		},
		{
			MethodName: "FileOffload",
			Handler:    _ClientCommands_FileOffload_Handler,
		},
		{
			MethodName: "FileListOffload",
			Handler:    _ClientCommands_FileListOffload_Handler,
		},
		{
			MethodName: "VersionGet",
			Handler:    _ClientCommands_VersionGet_Handler,
		},
		{
			MethodName: "LogSend",
			Handler:    _ClientCommands_LogSend_Handler,
		},
		{
			MethodName: "ConfigGet",
			Handler:    _ClientCommands_ConfigGet_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _ClientCommands_Shutdown_Handler,
		},
		{
			MethodName: "ExternalDropFiles",
			Handler:    _ClientCommands_ExternalDropFiles_Handler,
		},
		{
			MethodName: "ExternalDropContent",
			Handler:    _ClientCommands_ExternalDropContent_Handler,
		},
		{
			MethodName: "LinkPreview",
			Handler:    _ClientCommands_LinkPreview_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _ClientCommands_UploadFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _ClientCommands_DownloadFile_Handler,
		},
		{
			MethodName: "BlockUpload",
			Handler:    _ClientCommands_BlockUpload_Handler,
		},
		{
			MethodName: "BlockReplace",
			Handler:    _ClientCommands_BlockReplace_Handler,
		},
		{
			MethodName: "BlockUpdateContent",
			Handler:    _ClientCommands_BlockUpdateContent_Handler,
		},
		{
			MethodName: "BlockOpen",
			Handler:    _ClientCommands_BlockOpen_Handler,
		},
		{
			MethodName: "BlockShow",
			Handler:    _ClientCommands_BlockShow_Handler,
		},
		{
			MethodName: "BlockGetPublicWebURL",
			Handler:    _ClientCommands_BlockGetPublicWebURL_Handler,
		},
		{
			MethodName: "BlockOpenBreadcrumbs",
			Handler:    _ClientCommands_BlockOpenBreadcrumbs_Handler,
		},
		{
			MethodName: "BlockSetBreadcrumbs",
			Handler:    _ClientCommands_BlockSetBreadcrumbs_Handler,
		},
		{
			MethodName: "BlockCreate",
			Handler:    _ClientCommands_BlockCreate_Handler,
		},
		{
			MethodName: "BlockCreatePage",
			Handler:    _ClientCommands_BlockCreatePage_Handler,
		},
		{
			MethodName: "BlockCreateSet",
			Handler:    _ClientCommands_BlockCreateSet_Handler,
		},
		{
			MethodName: "BlockUnlink",
			Handler:    _ClientCommands_BlockUnlink_Handler,
		},
		{
			MethodName: "BlockClose",
			Handler:    _ClientCommands_BlockClose_Handler,
		},
		{
			MethodName: "BlockDownload",
			Handler:    _ClientCommands_BlockDownload_Handler,
		},
		{
			MethodName: "BlockGetMarks",
			Handler:    _ClientCommands_BlockGetMarks_Handler,
		},
		{
			MethodName: "BlockUndo",
			Handler:    _ClientCommands_BlockUndo_Handler,
		},
		{
			MethodName: "BlockRedo",
			Handler:    _ClientCommands_BlockRedo_Handler,
		},
		{
			MethodName: "BlockSetFields",
			Handler:    _ClientCommands_BlockSetFields_Handler,
		},
		{
			MethodName: "BlockSetRestrictions",
			Handler:    _ClientCommands_BlockSetRestrictions_Handler,
		},
		{
			MethodName: "BlockListMove",
			Handler:    _ClientCommands_BlockListMove_Handler,
		},
		{
			MethodName: "BlockListMoveToNewPage",
			Handler:    _ClientCommands_BlockListMoveToNewPage_Handler,
		},
		{
			MethodName: "BlockListConvertChildrenToPages",
			Handler:    _ClientCommands_BlockListConvertChildrenToPages_Handler,
		},
		{
			MethodName: "BlockListSetFields",
			Handler:    _ClientCommands_BlockListSetFields_Handler,
		},
		{
			MethodName: "BlockListSetTextStyle",
			Handler:    _ClientCommands_BlockListSetTextStyle_Handler,
		},
		{
			MethodName: "BlockListDuplicate",
			Handler:    _ClientCommands_BlockListDuplicate_Handler,
		},
		{
			MethodName: "BlockListSetBackgroundColor",
			Handler:    _ClientCommands_BlockListSetBackgroundColor_Handler,
		},
		{
			MethodName: "BlockListSetAlign",
			Handler:    _ClientCommands_BlockListSetAlign_Handler,
		},
		{
			MethodName: "BlockListSetDivStyle",
			Handler:    _ClientCommands_BlockListSetDivStyle_Handler,
		},
		{
			MethodName: "BlockListTurnInto",
			Handler:    _ClientCommands_BlockListTurnInto_Handler,
		},
		{
			MethodName: "BlockSetLatexText",
			Handler:    _ClientCommands_BlockSetLatexText_Handler,
		},
		{
			MethodName: "BlockSetTextText",
			Handler:    _ClientCommands_BlockSetTextText_Handler,
		},
		{
			MethodName: "BlockSetTextColor",
			Handler:    _ClientCommands_BlockSetTextColor_Handler,
		},
		{
			MethodName: "BlockListSetTextColor",
			Handler:    _ClientCommands_BlockListSetTextColor_Handler,
		},
		{
			MethodName: "BlockListSetTextMark",
			Handler:    _ClientCommands_BlockListSetTextMark_Handler,
		},
		{
			MethodName: "BlockSetTextStyle",
			Handler:    _ClientCommands_BlockSetTextStyle_Handler,
		},
		{
			MethodName: "BlockSetTextChecked",
			Handler:    _ClientCommands_BlockSetTextChecked_Handler,
		},
		{
			MethodName: "BlockSplit",
			Handler:    _ClientCommands_BlockSplit_Handler,
		},
		{
			MethodName: "BlockMerge",
			Handler:    _ClientCommands_BlockMerge_Handler,
		},
		{
			MethodName: "BlockCopy",
			Handler:    _ClientCommands_BlockCopy_Handler,
		},
		{
			MethodName: "BlockPaste",
			Handler:    _ClientCommands_BlockPaste_Handler,
		},
		{
			MethodName: "BlockCut",
			Handler:    _ClientCommands_BlockCut_Handler,
		},
		{
			MethodName: "BlockExport",
			Handler:    _ClientCommands_BlockExport_Handler,
		},
		{
			MethodName: "BlockImportMarkdown",
			Handler:    _ClientCommands_BlockImportMarkdown_Handler,
		},
		{
			MethodName: "BlockSetFileName",
			Handler:    _ClientCommands_BlockSetFileName_Handler,
		},
		{
			MethodName: "BlockSetImageName",
			Handler:    _ClientCommands_BlockSetImageName_Handler,
		},
		{
			MethodName: "BlockSetImageWidth",
			Handler:    _ClientCommands_BlockSetImageWidth_Handler,
		},
		{
			MethodName: "BlockSetVideoName",
			Handler:    _ClientCommands_BlockSetVideoName_Handler,
		},
		{
			MethodName: "BlockSetVideoWidth",
			Handler:    _ClientCommands_BlockSetVideoWidth_Handler,
		},
		{
			MethodName: "BlockSetLinkTargetBlockId",
			Handler:    _ClientCommands_BlockSetLinkTargetBlockId_Handler,
		},
		{
			MethodName: "BlockBookmarkFetch",
			Handler:    _ClientCommands_BlockBookmarkFetch_Handler,
		},
		{
			MethodName: "BlockBookmarkCreateAndFetch",
			Handler:    _ClientCommands_BlockBookmarkCreateAndFetch_Handler,
		},
		{
			MethodName: "BlockFileCreateAndUpload",
			Handler:    _ClientCommands_BlockFileCreateAndUpload_Handler,
		},
		{
			MethodName: "BlockRelationSetKey",
			Handler:    _ClientCommands_BlockRelationSetKey_Handler,
		},
		{
			MethodName: "BlockRelationAdd",
			Handler:    _ClientCommands_BlockRelationAdd_Handler,
		},
		{
			MethodName: "BlockDataviewViewCreate",
			Handler:    _ClientCommands_BlockDataviewViewCreate_Handler,
		},
		{
			MethodName: "BlockDataviewViewDelete",
			Handler:    _ClientCommands_BlockDataviewViewDelete_Handler,
		},
		{
			MethodName: "BlockDataviewViewUpdate",
			Handler:    _ClientCommands_BlockDataviewViewUpdate_Handler,
		},
		{
			MethodName: "BlockDataviewViewSetActive",
			Handler:    _ClientCommands_BlockDataviewViewSetActive_Handler,
		},
		{
			MethodName: "BlockDataviewViewSetPosition",
			Handler:    _ClientCommands_BlockDataviewViewSetPosition_Handler,
		},
		{
			MethodName: "BlockDataviewSetSource",
			Handler:    _ClientCommands_BlockDataviewSetSource_Handler,
		},
		{
			MethodName: "BlockDataviewRelationAdd",
			Handler:    _ClientCommands_BlockDataviewRelationAdd_Handler,
		},
		{
			MethodName: "BlockDataviewRelationUpdate",
			Handler:    _ClientCommands_BlockDataviewRelationUpdate_Handler,
		},
		{
			MethodName: "BlockDataviewRelationDelete",
			Handler:    _ClientCommands_BlockDataviewRelationDelete_Handler,
		},
		{
			MethodName: "BlockDataviewRelationListAvailable",
			Handler:    _ClientCommands_BlockDataviewRelationListAvailable_Handler,
		},
		{
			MethodName: "BlockDataviewRecordCreate",
			Handler:    _ClientCommands_BlockDataviewRecordCreate_Handler,
		},
		{
			MethodName: "BlockDataviewRecordUpdate",
			Handler:    _ClientCommands_BlockDataviewRecordUpdate_Handler,
		},
		{
			MethodName: "BlockDataviewRecordDelete",
			Handler:    _ClientCommands_BlockDataviewRecordDelete_Handler,
		},
		{
			MethodName: "BlockDataviewRecordRelationOptionAdd",
			Handler:    _ClientCommands_BlockDataviewRecordRelationOptionAdd_Handler,
		},
		{
			MethodName: "BlockDataviewRecordRelationOptionUpdate",
			Handler:    _ClientCommands_BlockDataviewRecordRelationOptionUpdate_Handler,
		},
		{
			MethodName: "BlockDataviewRecordRelationOptionDelete",
			Handler:    _ClientCommands_BlockDataviewRecordRelationOptionDelete_Handler,
		},
		{
			MethodName: "BlockObjectTypeSet",
			Handler:    _ClientCommands_BlockObjectTypeSet_Handler,
		},
		{
			MethodName: "NavigationListObjects",
			Handler:    _ClientCommands_NavigationListObjects_Handler,
		},
		{
			MethodName: "NavigationGetObjectInfoWithLinks",
			Handler:    _ClientCommands_NavigationGetObjectInfoWithLinks_Handler,
		},
		{
			MethodName: "ObjectGraph",
			Handler:    _ClientCommands_ObjectGraph_Handler,
		},
		{
			MethodName: "ObjectSearch",
			Handler:    _ClientCommands_ObjectSearch_Handler,
		},
		{
			MethodName: "ObjectRelationAdd",
			Handler:    _ClientCommands_ObjectRelationAdd_Handler,
		},
		{
			MethodName: "ObjectRelationUpdate",
			Handler:    _ClientCommands_ObjectRelationUpdate_Handler,
		},
		{
			MethodName: "ObjectRelationDelete",
			Handler:    _ClientCommands_ObjectRelationDelete_Handler,
		},
		{
			MethodName: "ObjectRelationOptionAdd",
			Handler:    _ClientCommands_ObjectRelationOptionAdd_Handler,
		},
		{
			MethodName: "ObjectRelationOptionUpdate",
			Handler:    _ClientCommands_ObjectRelationOptionUpdate_Handler,
		},
		{
			MethodName: "ObjectRelationOptionDelete",
			Handler:    _ClientCommands_ObjectRelationOptionDelete_Handler,
		},
		{
			MethodName: "ObjectRelationListAvailable",
			Handler:    _ClientCommands_ObjectRelationListAvailable_Handler,
		},
		{
			MethodName: "ObjectSetLayout",
			Handler:    _ClientCommands_ObjectSetLayout_Handler,
		},
		{
			MethodName: "ObjectFeaturedRelationAdd",
			Handler:    _ClientCommands_ObjectFeaturedRelationAdd_Handler,
		},
		{
			MethodName: "ObjectFeaturedRelationRemove",
			Handler:    _ClientCommands_ObjectFeaturedRelationRemove_Handler,
		},
		{
			MethodName: "ObjectSetIsFavorite",
			Handler:    _ClientCommands_ObjectSetIsFavorite_Handler,
		},
		{
			MethodName: "ObjectSetIsArchived",
			Handler:    _ClientCommands_ObjectSetIsArchived_Handler,
		},
		{
			MethodName: "ObjectToSet",
			Handler:    _ClientCommands_ObjectToSet_Handler,
		},
		{
			MethodName: "ObjectListDelete",
			Handler:    _ClientCommands_ObjectListDelete_Handler,
		},
		{
			MethodName: "ObjectListSetIsArchived",
			Handler:    _ClientCommands_ObjectListSetIsArchived_Handler,
		},
		{
			MethodName: "BlockSetDetails",
			Handler:    _ClientCommands_BlockSetDetails_Handler,
		},
		{
			MethodName: "PageCreate",
			Handler:    _ClientCommands_PageCreate_Handler,
		},
		{
			MethodName: "SetCreate",
			Handler:    _ClientCommands_SetCreate_Handler,
		},
		{
			MethodName: "ObjectTypeCreate",
			Handler:    _ClientCommands_ObjectTypeCreate_Handler,
		},
		{
			MethodName: "ObjectTypeList",
			Handler:    _ClientCommands_ObjectTypeList_Handler,
		},
		{
			MethodName: "ObjectTypeRelationList",
			Handler:    _ClientCommands_ObjectTypeRelationList_Handler,
		},
		{
			MethodName: "ObjectTypeRelationAdd",
			Handler:    _ClientCommands_ObjectTypeRelationAdd_Handler,
		},
		{
			MethodName: "ObjectTypeRelationUpdate",
			Handler:    _ClientCommands_ObjectTypeRelationUpdate_Handler,
		},
		{
			MethodName: "ObjectTypeRelationRemove",
			Handler:    _ClientCommands_ObjectTypeRelationRemove_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ClientCommands_Ping_Handler,
		},
		{
			MethodName: "ProcessCancel",
			Handler:    _ClientCommands_ProcessCancel_Handler,
		},
		{
			MethodName: "HistoryShow",
			Handler:    _ClientCommands_HistoryShow_Handler,
		},
		{
			MethodName: "HistoryVersions",
			Handler:    _ClientCommands_HistoryVersions_Handler,
		},
		{
			MethodName: "HistorySetVersion",
			Handler:    _ClientCommands_HistorySetVersion_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _ClientCommands_Export_Handler,
		},
		{
			MethodName: "ExportTemplates",
			Handler:    _ClientCommands_ExportTemplates_Handler,
		},
		{
			MethodName: "ExportLocalstore",
			Handler:    _ClientCommands_ExportLocalstore_Handler,
		},
		{
			MethodName: "MakeTemplate",
			Handler:    _ClientCommands_MakeTemplate_Handler,
		},
		{
			MethodName: "MakeTemplateByObjectType",
			Handler:    _ClientCommands_MakeTemplateByObjectType_Handler,
		},
		{
			MethodName: "CloneTemplate",
			Handler:    _ClientCommands_CloneTemplate_Handler,
		},
		{
			MethodName: "ApplyTemplate",
			Handler:    _ClientCommands_ApplyTemplate_Handler,
		},
		{
			MethodName: "DebugSync",
			Handler:    _ClientCommands_DebugSync_Handler,
		},
		{
			MethodName: "DebugThread",
			Handler:    _ClientCommands_DebugThread_Handler,
		},
		{
			MethodName: "DebugTree",
			Handler:    _ClientCommands_DebugTree_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenEvents",
			Handler:       _ClientCommands_ListenEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/protos/service/service.proto",
}
