// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commands.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Rpc_Block_HistoryMove_Response_Error_Code int32

const (
	Rpc_Block_HistoryMove_Response_Error_NULL          Rpc_Block_HistoryMove_Response_Error_Code = 0
	Rpc_Block_HistoryMove_Response_Error_UNKNOWN_ERROR Rpc_Block_HistoryMove_Response_Error_Code = 1
	Rpc_Block_HistoryMove_Response_Error_BAD_INPUT     Rpc_Block_HistoryMove_Response_Error_Code = 2
	Rpc_Block_HistoryMove_Response_Error_CAN_NOT_MOVE  Rpc_Block_HistoryMove_Response_Error_Code = 3
)

var Rpc_Block_HistoryMove_Response_Error_Code_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
	3: "CAN_NOT_MOVE",
}

var Rpc_Block_HistoryMove_Response_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"CAN_NOT_MOVE":  3,
}

func (x Rpc_Block_HistoryMove_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Block_HistoryMove_Response_Error_Code_name, int32(x))
}

func (Rpc_Block_HistoryMove_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 0, 1, 0, 0}
}

type Rpc_Block_Open_Response_Error_Code int32

const (
	Rpc_Block_Open_Response_Error_NULL          Rpc_Block_Open_Response_Error_Code = 0
	Rpc_Block_Open_Response_Error_UNKNOWN_ERROR Rpc_Block_Open_Response_Error_Code = 1
	Rpc_Block_Open_Response_Error_BAD_INPUT     Rpc_Block_Open_Response_Error_Code = 2
)

var Rpc_Block_Open_Response_Error_Code_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var Rpc_Block_Open_Response_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x Rpc_Block_Open_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Block_Open_Response_Error_Code_name, int32(x))
}

func (Rpc_Block_Open_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 1, 1, 0, 0}
}

type Rpc_Block_Create_Response_Error_Code int32

const (
	Rpc_Block_Create_Response_Error_NULL          Rpc_Block_Create_Response_Error_Code = 0
	Rpc_Block_Create_Response_Error_UNKNOWN_ERROR Rpc_Block_Create_Response_Error_Code = 1
	Rpc_Block_Create_Response_Error_BAD_INPUT     Rpc_Block_Create_Response_Error_Code = 2
)

var Rpc_Block_Create_Response_Error_Code_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var Rpc_Block_Create_Response_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x Rpc_Block_Create_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Block_Create_Response_Error_Code_name, int32(x))
}

func (Rpc_Block_Create_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 2, 1, 0, 0}
}

type Rpc_Block_Update_Response_Error_Code int32

const (
	Rpc_Block_Update_Response_Error_NULL          Rpc_Block_Update_Response_Error_Code = 0
	Rpc_Block_Update_Response_Error_UNKNOWN_ERROR Rpc_Block_Update_Response_Error_Code = 1
	Rpc_Block_Update_Response_Error_BAD_INPUT     Rpc_Block_Update_Response_Error_Code = 2
)

var Rpc_Block_Update_Response_Error_Code_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var Rpc_Block_Update_Response_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x Rpc_Block_Update_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Block_Update_Response_Error_Code_name, int32(x))
}

func (Rpc_Block_Update_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 3, 1, 0, 0}
}

type Rpc_Wallet_Create_Response_Error_Code int32

const (
	Rpc_Wallet_Create_Response_Error_NULL                        Rpc_Wallet_Create_Response_Error_Code = 0
	Rpc_Wallet_Create_Response_Error_UNKNOWN_ERROR               Rpc_Wallet_Create_Response_Error_Code = 1
	Rpc_Wallet_Create_Response_Error_BAD_INPUT                   Rpc_Wallet_Create_Response_Error_Code = 2
	Rpc_Wallet_Create_Response_Error_FAILED_TO_CREATE_LOCAL_REPO Rpc_Wallet_Create_Response_Error_Code = 101
)

var Rpc_Wallet_Create_Response_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "FAILED_TO_CREATE_LOCAL_REPO",
}

var Rpc_Wallet_Create_Response_Error_Code_value = map[string]int32{
	"NULL":                        0,
	"UNKNOWN_ERROR":               1,
	"BAD_INPUT":                   2,
	"FAILED_TO_CREATE_LOCAL_REPO": 101,
}

func (x Rpc_Wallet_Create_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Wallet_Create_Response_Error_Code_name, int32(x))
}

func (Rpc_Wallet_Create_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1, 0, 1, 0, 0}
}

type Rpc_Wallet_Recover_Response_Error_Code int32

const (
	Rpc_Wallet_Recover_Response_Error_NULL                        Rpc_Wallet_Recover_Response_Error_Code = 0
	Rpc_Wallet_Recover_Response_Error_UNKNOWN_ERROR               Rpc_Wallet_Recover_Response_Error_Code = 1
	Rpc_Wallet_Recover_Response_Error_BAD_INPUT                   Rpc_Wallet_Recover_Response_Error_Code = 2
	Rpc_Wallet_Recover_Response_Error_FAILED_TO_CREATE_LOCAL_REPO Rpc_Wallet_Recover_Response_Error_Code = 101
)

var Rpc_Wallet_Recover_Response_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "FAILED_TO_CREATE_LOCAL_REPO",
}

var Rpc_Wallet_Recover_Response_Error_Code_value = map[string]int32{
	"NULL":                        0,
	"UNKNOWN_ERROR":               1,
	"BAD_INPUT":                   2,
	"FAILED_TO_CREATE_LOCAL_REPO": 101,
}

func (x Rpc_Wallet_Recover_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Wallet_Recover_Response_Error_Code_name, int32(x))
}

func (Rpc_Wallet_Recover_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1, 1, 1, 0, 0}
}

type Rpc_Account_Create_Response_Error_Code int32

const (
	Rpc_Account_Create_Response_Error_NULL                                     Rpc_Account_Create_Response_Error_Code = 0
	Rpc_Account_Create_Response_Error_UNKNOWN_ERROR                            Rpc_Account_Create_Response_Error_Code = 1
	Rpc_Account_Create_Response_Error_BAD_INPUT                                Rpc_Account_Create_Response_Error_Code = 2
	Rpc_Account_Create_Response_Error_ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE Rpc_Account_Create_Response_Error_Code = 101
	Rpc_Account_Create_Response_Error_ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME   Rpc_Account_Create_Response_Error_Code = 102
	Rpc_Account_Create_Response_Error_ACCOUNT_CREATED_BUT_FAILED_TO_SET_AVATAR Rpc_Account_Create_Response_Error_Code = 103
)

var Rpc_Account_Create_Response_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE",
	102: "ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME",
	103: "ACCOUNT_CREATED_BUT_FAILED_TO_SET_AVATAR",
}

var Rpc_Account_Create_Response_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE": 101,
	"ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME":   102,
	"ACCOUNT_CREATED_BUT_FAILED_TO_SET_AVATAR": 103,
}

func (x Rpc_Account_Create_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Account_Create_Response_Error_Code_name, int32(x))
}

func (Rpc_Account_Create_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 0, 1, 0, 0}
}

type Rpc_Account_Recover_Response_Error_Code int32

const (
	Rpc_Account_Recover_Response_Error_NULL                            Rpc_Account_Recover_Response_Error_Code = 0
	Rpc_Account_Recover_Response_Error_UNKNOWN_ERROR                   Rpc_Account_Recover_Response_Error_Code = 1
	Rpc_Account_Recover_Response_Error_BAD_INPUT                       Rpc_Account_Recover_Response_Error_Code = 2
	Rpc_Account_Recover_Response_Error_NO_ACCOUNTS_FOUND               Rpc_Account_Recover_Response_Error_Code = 101
	Rpc_Account_Recover_Response_Error_NEED_TO_RECOVER_WALLET_FIRST    Rpc_Account_Recover_Response_Error_Code = 102
	Rpc_Account_Recover_Response_Error_FAILED_TO_CREATE_LOCAL_REPO     Rpc_Account_Recover_Response_Error_Code = 103
	Rpc_Account_Recover_Response_Error_LOCAL_REPO_EXISTS_BUT_CORRUPTED Rpc_Account_Recover_Response_Error_Code = 104
	Rpc_Account_Recover_Response_Error_FAILED_TO_RUN_NODE              Rpc_Account_Recover_Response_Error_Code = 105
	Rpc_Account_Recover_Response_Error_WALLET_RECOVER_NOT_PERFORMED    Rpc_Account_Recover_Response_Error_Code = 106
)

var Rpc_Account_Recover_Response_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NO_ACCOUNTS_FOUND",
	102: "NEED_TO_RECOVER_WALLET_FIRST",
	103: "FAILED_TO_CREATE_LOCAL_REPO",
	104: "LOCAL_REPO_EXISTS_BUT_CORRUPTED",
	105: "FAILED_TO_RUN_NODE",
	106: "WALLET_RECOVER_NOT_PERFORMED",
}

var Rpc_Account_Recover_Response_Error_Code_value = map[string]int32{
	"NULL":                            0,
	"UNKNOWN_ERROR":                   1,
	"BAD_INPUT":                       2,
	"NO_ACCOUNTS_FOUND":               101,
	"NEED_TO_RECOVER_WALLET_FIRST":    102,
	"FAILED_TO_CREATE_LOCAL_REPO":     103,
	"LOCAL_REPO_EXISTS_BUT_CORRUPTED": 104,
	"FAILED_TO_RUN_NODE":              105,
	"WALLET_RECOVER_NOT_PERFORMED":    106,
}

func (x Rpc_Account_Recover_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Account_Recover_Response_Error_Code_name, int32(x))
}

func (Rpc_Account_Recover_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 1, 1, 0, 0}
}

type Rpc_Account_Select_Response_Error_Code int32

const (
	Rpc_Account_Select_Response_Error_NULL                                       Rpc_Account_Select_Response_Error_Code = 0
	Rpc_Account_Select_Response_Error_UNKNOWN_ERROR                              Rpc_Account_Select_Response_Error_Code = 1
	Rpc_Account_Select_Response_Error_BAD_INPUT                                  Rpc_Account_Select_Response_Error_Code = 2
	Rpc_Account_Select_Response_Error_FAILED_TO_CREATE_LOCAL_REPO                Rpc_Account_Select_Response_Error_Code = 101
	Rpc_Account_Select_Response_Error_LOCAL_REPO_EXISTS_BUT_CORRUPTED            Rpc_Account_Select_Response_Error_Code = 102
	Rpc_Account_Select_Response_Error_FAILED_TO_RUN_NODE                         Rpc_Account_Select_Response_Error_Code = 103
	Rpc_Account_Select_Response_Error_FAILED_TO_FIND_ACCOUNT_INFO                Rpc_Account_Select_Response_Error_Code = 104
	Rpc_Account_Select_Response_Error_LOCAL_REPO_NOT_EXISTS_AND_MNEMONIC_NOT_SET Rpc_Account_Select_Response_Error_Code = 105
)

var Rpc_Account_Select_Response_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "FAILED_TO_CREATE_LOCAL_REPO",
	102: "LOCAL_REPO_EXISTS_BUT_CORRUPTED",
	103: "FAILED_TO_RUN_NODE",
	104: "FAILED_TO_FIND_ACCOUNT_INFO",
	105: "LOCAL_REPO_NOT_EXISTS_AND_MNEMONIC_NOT_SET",
}

var Rpc_Account_Select_Response_Error_Code_value = map[string]int32{
	"NULL":                                       0,
	"UNKNOWN_ERROR":                              1,
	"BAD_INPUT":                                  2,
	"FAILED_TO_CREATE_LOCAL_REPO":                101,
	"LOCAL_REPO_EXISTS_BUT_CORRUPTED":            102,
	"FAILED_TO_RUN_NODE":                         103,
	"FAILED_TO_FIND_ACCOUNT_INFO":                104,
	"LOCAL_REPO_NOT_EXISTS_AND_MNEMONIC_NOT_SET": 105,
}

func (x Rpc_Account_Select_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Account_Select_Response_Error_Code_name, int32(x))
}

func (Rpc_Account_Select_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 2, 1, 0, 0}
}

type Rpc_Version_Get_Response_Error_Code int32

const (
	Rpc_Version_Get_Response_Error_NULL             Rpc_Version_Get_Response_Error_Code = 0
	Rpc_Version_Get_Response_Error_UNKNOWN_ERROR    Rpc_Version_Get_Response_Error_Code = 1
	Rpc_Version_Get_Response_Error_BAD_INPUT        Rpc_Version_Get_Response_Error_Code = 2
	Rpc_Version_Get_Response_Error_VERSION_IS_EMPTY Rpc_Version_Get_Response_Error_Code = 3
	Rpc_Version_Get_Response_Error_NOT_FOUND        Rpc_Version_Get_Response_Error_Code = 101
	Rpc_Version_Get_Response_Error_TIMEOUT          Rpc_Version_Get_Response_Error_Code = 102
)

var Rpc_Version_Get_Response_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	3:   "VERSION_IS_EMPTY",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var Rpc_Version_Get_Response_Error_Code_value = map[string]int32{
	"NULL":             0,
	"UNKNOWN_ERROR":    1,
	"BAD_INPUT":        2,
	"VERSION_IS_EMPTY": 3,
	"NOT_FOUND":        101,
	"TIMEOUT":          102,
}

func (x Rpc_Version_Get_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Version_Get_Response_Error_Code_name, int32(x))
}

func (Rpc_Version_Get_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 3, 0, 1, 0, 0}
}

type Rpc_Log_Send_Request_Level int32

const (
	Rpc_Log_Send_Request_DEBUG   Rpc_Log_Send_Request_Level = 0
	Rpc_Log_Send_Request_ERROR   Rpc_Log_Send_Request_Level = 1
	Rpc_Log_Send_Request_FATAL   Rpc_Log_Send_Request_Level = 2
	Rpc_Log_Send_Request_INFO    Rpc_Log_Send_Request_Level = 3
	Rpc_Log_Send_Request_PANIC   Rpc_Log_Send_Request_Level = 4
	Rpc_Log_Send_Request_WARNING Rpc_Log_Send_Request_Level = 5
)

var Rpc_Log_Send_Request_Level_name = map[int32]string{
	0: "DEBUG",
	1: "ERROR",
	2: "FATAL",
	3: "INFO",
	4: "PANIC",
	5: "WARNING",
}

var Rpc_Log_Send_Request_Level_value = map[string]int32{
	"DEBUG":   0,
	"ERROR":   1,
	"FATAL":   2,
	"INFO":    3,
	"PANIC":   4,
	"WARNING": 5,
}

func (x Rpc_Log_Send_Request_Level) String() string {
	return proto.EnumName(Rpc_Log_Send_Request_Level_name, int32(x))
}

func (Rpc_Log_Send_Request_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 4, 0, 0, 0}
}

type Rpc_Log_Send_Response_Error_Code int32

const (
	Rpc_Log_Send_Response_Error_NULL          Rpc_Log_Send_Response_Error_Code = 0
	Rpc_Log_Send_Response_Error_UNKNOWN_ERROR Rpc_Log_Send_Response_Error_Code = 1
	Rpc_Log_Send_Response_Error_BAD_INPUT     Rpc_Log_Send_Response_Error_Code = 2
	Rpc_Log_Send_Response_Error_NOT_FOUND     Rpc_Log_Send_Response_Error_Code = 101
	Rpc_Log_Send_Response_Error_TIMEOUT       Rpc_Log_Send_Response_Error_Code = 102
)

var Rpc_Log_Send_Response_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var Rpc_Log_Send_Response_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x Rpc_Log_Send_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Log_Send_Response_Error_Code_name, int32(x))
}

func (Rpc_Log_Send_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 4, 0, 1, 0, 0}
}

type Rpc_Ipfs_GetFile_Response_Error_Code int32

const (
	Rpc_Ipfs_GetFile_Response_Error_NULL          Rpc_Ipfs_GetFile_Response_Error_Code = 0
	Rpc_Ipfs_GetFile_Response_Error_UNKNOWN_ERROR Rpc_Ipfs_GetFile_Response_Error_Code = 1
	Rpc_Ipfs_GetFile_Response_Error_BAD_INPUT     Rpc_Ipfs_GetFile_Response_Error_Code = 2
	Rpc_Ipfs_GetFile_Response_Error_NOT_FOUND     Rpc_Ipfs_GetFile_Response_Error_Code = 101
	Rpc_Ipfs_GetFile_Response_Error_TIMEOUT       Rpc_Ipfs_GetFile_Response_Error_Code = 102
)

var Rpc_Ipfs_GetFile_Response_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var Rpc_Ipfs_GetFile_Response_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x Rpc_Ipfs_GetFile_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Ipfs_GetFile_Response_Error_Code_name, int32(x))
}

func (Rpc_Ipfs_GetFile_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 5, 0, 1, 0, 0}
}

type Rpc_Image_GetBlob_Response_Error_Code int32

const (
	Rpc_Image_GetBlob_Response_Error_NULL          Rpc_Image_GetBlob_Response_Error_Code = 0
	Rpc_Image_GetBlob_Response_Error_UNKNOWN_ERROR Rpc_Image_GetBlob_Response_Error_Code = 1
	Rpc_Image_GetBlob_Response_Error_BAD_INPUT     Rpc_Image_GetBlob_Response_Error_Code = 2
	Rpc_Image_GetBlob_Response_Error_NOT_FOUND     Rpc_Image_GetBlob_Response_Error_Code = 101
	Rpc_Image_GetBlob_Response_Error_TIMEOUT       Rpc_Image_GetBlob_Response_Error_Code = 102
)

var Rpc_Image_GetBlob_Response_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var Rpc_Image_GetBlob_Response_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x Rpc_Image_GetBlob_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Image_GetBlob_Response_Error_Code_name, int32(x))
}

func (Rpc_Image_GetBlob_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6, 0, 1, 0, 0}
}

type Rpc_Image_GetFile_Response_Error_Code int32

const (
	Rpc_Image_GetFile_Response_Error_NULL          Rpc_Image_GetFile_Response_Error_Code = 0
	Rpc_Image_GetFile_Response_Error_UNKNOWN_ERROR Rpc_Image_GetFile_Response_Error_Code = 1
	Rpc_Image_GetFile_Response_Error_BAD_INPUT     Rpc_Image_GetFile_Response_Error_Code = 2
	Rpc_Image_GetFile_Response_Error_NOT_FOUND     Rpc_Image_GetFile_Response_Error_Code = 101
	Rpc_Image_GetFile_Response_Error_TIMEOUT       Rpc_Image_GetFile_Response_Error_Code = 102
)

var Rpc_Image_GetFile_Response_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var Rpc_Image_GetFile_Response_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x Rpc_Image_GetFile_Response_Error_Code) String() string {
	return proto.EnumName(Rpc_Image_GetFile_Response_Error_Code_name, int32(x))
}

func (Rpc_Image_GetFile_Response_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6, 1, 1, 0, 0}
}

type Rpc struct {
}

func (m *Rpc) Reset()         { *m = Rpc{} }
func (m *Rpc) String() string { return proto.CompactTextString(m) }
func (*Rpc) ProtoMessage()    {}
func (*Rpc) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0}
}
func (m *Rpc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc.Merge(m, src)
}
func (m *Rpc) XXX_Size() int {
	return m.Size()
}
func (m *Rpc) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc proto.InternalMessageInfo

type Rpc_Block struct {
}

func (m *Rpc_Block) Reset()         { *m = Rpc_Block{} }
func (m *Rpc_Block) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block) ProtoMessage()    {}
func (*Rpc_Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0}
}
func (m *Rpc_Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block.Merge(m, src)
}
func (m *Rpc_Block) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block proto.InternalMessageInfo

type Rpc_Block_HistoryMove struct {
}

func (m *Rpc_Block_HistoryMove) Reset()         { *m = Rpc_Block_HistoryMove{} }
func (m *Rpc_Block_HistoryMove) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_HistoryMove) ProtoMessage()    {}
func (*Rpc_Block_HistoryMove) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 0}
}
func (m *Rpc_Block_HistoryMove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_HistoryMove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_HistoryMove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_HistoryMove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_HistoryMove.Merge(m, src)
}
func (m *Rpc_Block_HistoryMove) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_HistoryMove) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_HistoryMove.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_HistoryMove proto.InternalMessageInfo

type Rpc_Block_HistoryMove_Request struct {
	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ContextBlockId string `protobuf:"bytes,2,opt,name=contextBlockId,proto3" json:"contextBlockId,omitempty"`
	MoveForward    bool   `protobuf:"varint,3,opt,name=moveForward,proto3" json:"moveForward,omitempty"`
}

func (m *Rpc_Block_HistoryMove_Request) Reset()         { *m = Rpc_Block_HistoryMove_Request{} }
func (m *Rpc_Block_HistoryMove_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_HistoryMove_Request) ProtoMessage()    {}
func (*Rpc_Block_HistoryMove_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 0, 0}
}
func (m *Rpc_Block_HistoryMove_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_HistoryMove_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_HistoryMove_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_HistoryMove_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_HistoryMove_Request.Merge(m, src)
}
func (m *Rpc_Block_HistoryMove_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_HistoryMove_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_HistoryMove_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_HistoryMove_Request proto.InternalMessageInfo

func (m *Rpc_Block_HistoryMove_Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rpc_Block_HistoryMove_Request) GetContextBlockId() string {
	if m != nil {
		return m.ContextBlockId
	}
	return ""
}

func (m *Rpc_Block_HistoryMove_Request) GetMoveForward() bool {
	if m != nil {
		return m.MoveForward
	}
	return false
}

type Rpc_Block_HistoryMove_Response struct {
	Error *Rpc_Block_HistoryMove_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Rpc_Block_HistoryMove_Response) Reset()         { *m = Rpc_Block_HistoryMove_Response{} }
func (m *Rpc_Block_HistoryMove_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_HistoryMove_Response) ProtoMessage()    {}
func (*Rpc_Block_HistoryMove_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 0, 1}
}
func (m *Rpc_Block_HistoryMove_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_HistoryMove_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_HistoryMove_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_HistoryMove_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_HistoryMove_Response.Merge(m, src)
}
func (m *Rpc_Block_HistoryMove_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_HistoryMove_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_HistoryMove_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_HistoryMove_Response proto.InternalMessageInfo

func (m *Rpc_Block_HistoryMove_Response) GetError() *Rpc_Block_HistoryMove_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Rpc_Block_HistoryMove_Response_Error struct {
	Code        Rpc_Block_HistoryMove_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Block_HistoryMove_Response_Error_Code" json:"code,omitempty"`
	Description string                                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Block_HistoryMove_Response_Error) Reset()         { *m = Rpc_Block_HistoryMove_Response_Error{} }
func (m *Rpc_Block_HistoryMove_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_HistoryMove_Response_Error) ProtoMessage()    {}
func (*Rpc_Block_HistoryMove_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 0, 1, 0}
}
func (m *Rpc_Block_HistoryMove_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_HistoryMove_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_HistoryMove_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_HistoryMove_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_HistoryMove_Response_Error.Merge(m, src)
}
func (m *Rpc_Block_HistoryMove_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_HistoryMove_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_HistoryMove_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_HistoryMove_Response_Error proto.InternalMessageInfo

func (m *Rpc_Block_HistoryMove_Response_Error) GetCode() Rpc_Block_HistoryMove_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Block_HistoryMove_Response_Error_NULL
}

func (m *Rpc_Block_HistoryMove_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Block_Open struct {
}

func (m *Rpc_Block_Open) Reset()         { *m = Rpc_Block_Open{} }
func (m *Rpc_Block_Open) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Open) ProtoMessage()    {}
func (*Rpc_Block_Open) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 1}
}
func (m *Rpc_Block_Open) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Open) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Open.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Open) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Open.Merge(m, src)
}
func (m *Rpc_Block_Open) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Open) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Open.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Open proto.InternalMessageInfo

type Rpc_Block_Open_Request struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Rpc_Block_Open_Request) Reset()         { *m = Rpc_Block_Open_Request{} }
func (m *Rpc_Block_Open_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Open_Request) ProtoMessage()    {}
func (*Rpc_Block_Open_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 1, 0}
}
func (m *Rpc_Block_Open_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Open_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Open_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Open_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Open_Request.Merge(m, src)
}
func (m *Rpc_Block_Open_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Open_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Open_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Open_Request proto.InternalMessageInfo

func (m *Rpc_Block_Open_Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Rpc_Block_Open_Response struct {
	Error       *Rpc_Block_Open_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	BlockHeader *Model_Block_Header            `protobuf:"bytes,2,opt,name=blockHeader,proto3" json:"blockHeader,omitempty"`
}

func (m *Rpc_Block_Open_Response) Reset()         { *m = Rpc_Block_Open_Response{} }
func (m *Rpc_Block_Open_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Open_Response) ProtoMessage()    {}
func (*Rpc_Block_Open_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 1, 1}
}
func (m *Rpc_Block_Open_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Open_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Open_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Open_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Open_Response.Merge(m, src)
}
func (m *Rpc_Block_Open_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Open_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Open_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Open_Response proto.InternalMessageInfo

func (m *Rpc_Block_Open_Response) GetError() *Rpc_Block_Open_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Rpc_Block_Open_Response) GetBlockHeader() *Model_Block_Header {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

type Rpc_Block_Open_Response_Error struct {
	Code        Rpc_Block_Open_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Block_Open_Response_Error_Code" json:"code,omitempty"`
	Description string                             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Block_Open_Response_Error) Reset()         { *m = Rpc_Block_Open_Response_Error{} }
func (m *Rpc_Block_Open_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Open_Response_Error) ProtoMessage()    {}
func (*Rpc_Block_Open_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 1, 1, 0}
}
func (m *Rpc_Block_Open_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Open_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Open_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Open_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Open_Response_Error.Merge(m, src)
}
func (m *Rpc_Block_Open_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Open_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Open_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Open_Response_Error proto.InternalMessageInfo

func (m *Rpc_Block_Open_Response_Error) GetCode() Rpc_Block_Open_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Block_Open_Response_Error_NULL
}

func (m *Rpc_Block_Open_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Block_Create struct {
}

func (m *Rpc_Block_Create) Reset()         { *m = Rpc_Block_Create{} }
func (m *Rpc_Block_Create) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Create) ProtoMessage()    {}
func (*Rpc_Block_Create) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 2}
}
func (m *Rpc_Block_Create) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Create) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Create.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Create) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Create.Merge(m, src)
}
func (m *Rpc_Block_Create) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Create) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Create.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Create proto.InternalMessageInfo

type Rpc_Block_Create_Request struct {
	Type           Model_Block_Header_Type `protobuf:"varint,1,opt,name=type,proto3,enum=anytype.Model_Block_Header_Type" json:"type,omitempty"`
	ContextBlockId string                  `protobuf:"bytes,2,opt,name=contextBlockId,proto3" json:"contextBlockId,omitempty"`
}

func (m *Rpc_Block_Create_Request) Reset()         { *m = Rpc_Block_Create_Request{} }
func (m *Rpc_Block_Create_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Create_Request) ProtoMessage()    {}
func (*Rpc_Block_Create_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 2, 0}
}
func (m *Rpc_Block_Create_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Create_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Create_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Create_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Create_Request.Merge(m, src)
}
func (m *Rpc_Block_Create_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Create_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Create_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Create_Request proto.InternalMessageInfo

func (m *Rpc_Block_Create_Request) GetType() Model_Block_Header_Type {
	if m != nil {
		return m.Type
	}
	return Model_Block_Header_DASHBOARD
}

func (m *Rpc_Block_Create_Request) GetContextBlockId() string {
	if m != nil {
		return m.ContextBlockId
	}
	return ""
}

type Rpc_Block_Create_Response struct {
	Error *Rpc_Block_Create_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Rpc_Block_Create_Response) Reset()         { *m = Rpc_Block_Create_Response{} }
func (m *Rpc_Block_Create_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Create_Response) ProtoMessage()    {}
func (*Rpc_Block_Create_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 2, 1}
}
func (m *Rpc_Block_Create_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Create_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Create_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Create_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Create_Response.Merge(m, src)
}
func (m *Rpc_Block_Create_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Create_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Create_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Create_Response proto.InternalMessageInfo

func (m *Rpc_Block_Create_Response) GetError() *Rpc_Block_Create_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Rpc_Block_Create_Response_Error struct {
	Code        Rpc_Block_Create_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Block_Create_Response_Error_Code" json:"code,omitempty"`
	Description string                               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Block_Create_Response_Error) Reset()         { *m = Rpc_Block_Create_Response_Error{} }
func (m *Rpc_Block_Create_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Create_Response_Error) ProtoMessage()    {}
func (*Rpc_Block_Create_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 2, 1, 0}
}
func (m *Rpc_Block_Create_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Create_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Create_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Create_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Create_Response_Error.Merge(m, src)
}
func (m *Rpc_Block_Create_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Create_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Create_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Create_Response_Error proto.InternalMessageInfo

func (m *Rpc_Block_Create_Response_Error) GetCode() Rpc_Block_Create_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Block_Create_Response_Error_NULL
}

func (m *Rpc_Block_Create_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Block_Update struct {
}

func (m *Rpc_Block_Update) Reset()         { *m = Rpc_Block_Update{} }
func (m *Rpc_Block_Update) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Update) ProtoMessage()    {}
func (*Rpc_Block_Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 3}
}
func (m *Rpc_Block_Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Update.Merge(m, src)
}
func (m *Rpc_Block_Update) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Update proto.InternalMessageInfo

type Rpc_Block_Update_Request struct {
	Changes *BlockChanges `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (m *Rpc_Block_Update_Request) Reset()         { *m = Rpc_Block_Update_Request{} }
func (m *Rpc_Block_Update_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Update_Request) ProtoMessage()    {}
func (*Rpc_Block_Update_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 3, 0}
}
func (m *Rpc_Block_Update_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Update_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Update_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Update_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Update_Request.Merge(m, src)
}
func (m *Rpc_Block_Update_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Update_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Update_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Update_Request proto.InternalMessageInfo

func (m *Rpc_Block_Update_Request) GetChanges() *BlockChanges {
	if m != nil {
		return m.Changes
	}
	return nil
}

type Rpc_Block_Update_Response struct {
	Error *Rpc_Block_Update_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Rpc_Block_Update_Response) Reset()         { *m = Rpc_Block_Update_Response{} }
func (m *Rpc_Block_Update_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Update_Response) ProtoMessage()    {}
func (*Rpc_Block_Update_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 3, 1}
}
func (m *Rpc_Block_Update_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Update_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Update_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Update_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Update_Response.Merge(m, src)
}
func (m *Rpc_Block_Update_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Update_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Update_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Update_Response proto.InternalMessageInfo

func (m *Rpc_Block_Update_Response) GetError() *Rpc_Block_Update_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Rpc_Block_Update_Response_Error struct {
	Code        Rpc_Block_Update_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Block_Update_Response_Error_Code" json:"code,omitempty"`
	Description string                               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Block_Update_Response_Error) Reset()         { *m = Rpc_Block_Update_Response_Error{} }
func (m *Rpc_Block_Update_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Block_Update_Response_Error) ProtoMessage()    {}
func (*Rpc_Block_Update_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 0, 3, 1, 0}
}
func (m *Rpc_Block_Update_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Block_Update_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Block_Update_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Block_Update_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Block_Update_Response_Error.Merge(m, src)
}
func (m *Rpc_Block_Update_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Block_Update_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Block_Update_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Block_Update_Response_Error proto.InternalMessageInfo

func (m *Rpc_Block_Update_Response_Error) GetCode() Rpc_Block_Update_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Block_Update_Response_Error_NULL
}

func (m *Rpc_Block_Update_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Wallet struct {
}

func (m *Rpc_Wallet) Reset()         { *m = Rpc_Wallet{} }
func (m *Rpc_Wallet) String() string { return proto.CompactTextString(m) }
func (*Rpc_Wallet) ProtoMessage()    {}
func (*Rpc_Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1}
}
func (m *Rpc_Wallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Wallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Wallet.Merge(m, src)
}
func (m *Rpc_Wallet) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Wallet proto.InternalMessageInfo

type Rpc_Wallet_Create struct {
}

func (m *Rpc_Wallet_Create) Reset()         { *m = Rpc_Wallet_Create{} }
func (m *Rpc_Wallet_Create) String() string { return proto.CompactTextString(m) }
func (*Rpc_Wallet_Create) ProtoMessage()    {}
func (*Rpc_Wallet_Create) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1, 0}
}
func (m *Rpc_Wallet_Create) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Wallet_Create) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Wallet_Create.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Wallet_Create) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Wallet_Create.Merge(m, src)
}
func (m *Rpc_Wallet_Create) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Wallet_Create) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Wallet_Create.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Wallet_Create proto.InternalMessageInfo

//*
// Front-end-to-middleware request to create a new wallet
type Rpc_Wallet_Create_Request struct {
	RootPath string `protobuf:"bytes,1,opt,name=rootPath,proto3" json:"rootPath,omitempty"`
}

func (m *Rpc_Wallet_Create_Request) Reset()         { *m = Rpc_Wallet_Create_Request{} }
func (m *Rpc_Wallet_Create_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Wallet_Create_Request) ProtoMessage()    {}
func (*Rpc_Wallet_Create_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1, 0, 0}
}
func (m *Rpc_Wallet_Create_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Wallet_Create_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Wallet_Create_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Wallet_Create_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Wallet_Create_Request.Merge(m, src)
}
func (m *Rpc_Wallet_Create_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Wallet_Create_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Wallet_Create_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Wallet_Create_Request proto.InternalMessageInfo

func (m *Rpc_Wallet_Create_Request) GetRootPath() string {
	if m != nil {
		return m.RootPath
	}
	return ""
}

//*
// Middleware-to-front-end response, that can contain mnemonic of a created account and a NULL error or an empty mnemonic and a non-NULL error
type Rpc_Wallet_Create_Response struct {
	Error    *Rpc_Wallet_Create_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Mnemonic string                            `protobuf:"bytes,2,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
}

func (m *Rpc_Wallet_Create_Response) Reset()         { *m = Rpc_Wallet_Create_Response{} }
func (m *Rpc_Wallet_Create_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Wallet_Create_Response) ProtoMessage()    {}
func (*Rpc_Wallet_Create_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1, 0, 1}
}
func (m *Rpc_Wallet_Create_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Wallet_Create_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Wallet_Create_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Wallet_Create_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Wallet_Create_Response.Merge(m, src)
}
func (m *Rpc_Wallet_Create_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Wallet_Create_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Wallet_Create_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Wallet_Create_Response proto.InternalMessageInfo

func (m *Rpc_Wallet_Create_Response) GetError() *Rpc_Wallet_Create_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Rpc_Wallet_Create_Response) GetMnemonic() string {
	if m != nil {
		return m.Mnemonic
	}
	return ""
}

type Rpc_Wallet_Create_Response_Error struct {
	Code        Rpc_Wallet_Create_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Wallet_Create_Response_Error_Code" json:"code,omitempty"`
	Description string                                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Wallet_Create_Response_Error) Reset()         { *m = Rpc_Wallet_Create_Response_Error{} }
func (m *Rpc_Wallet_Create_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Wallet_Create_Response_Error) ProtoMessage()    {}
func (*Rpc_Wallet_Create_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1, 0, 1, 0}
}
func (m *Rpc_Wallet_Create_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Wallet_Create_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Wallet_Create_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Wallet_Create_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Wallet_Create_Response_Error.Merge(m, src)
}
func (m *Rpc_Wallet_Create_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Wallet_Create_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Wallet_Create_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Wallet_Create_Response_Error proto.InternalMessageInfo

func (m *Rpc_Wallet_Create_Response_Error) GetCode() Rpc_Wallet_Create_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Wallet_Create_Response_Error_NULL
}

func (m *Rpc_Wallet_Create_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Wallet_Recover struct {
}

func (m *Rpc_Wallet_Recover) Reset()         { *m = Rpc_Wallet_Recover{} }
func (m *Rpc_Wallet_Recover) String() string { return proto.CompactTextString(m) }
func (*Rpc_Wallet_Recover) ProtoMessage()    {}
func (*Rpc_Wallet_Recover) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1, 1}
}
func (m *Rpc_Wallet_Recover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Wallet_Recover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Wallet_Recover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Wallet_Recover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Wallet_Recover.Merge(m, src)
}
func (m *Rpc_Wallet_Recover) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Wallet_Recover) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Wallet_Recover.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Wallet_Recover proto.InternalMessageInfo

//*
// Front end to middleware request-to-recover-a wallet with this mnemonic and a rootPath
type Rpc_Wallet_Recover_Request struct {
	RootPath string `protobuf:"bytes,1,opt,name=rootPath,proto3" json:"rootPath,omitempty"`
	Mnemonic string `protobuf:"bytes,2,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
}

func (m *Rpc_Wallet_Recover_Request) Reset()         { *m = Rpc_Wallet_Recover_Request{} }
func (m *Rpc_Wallet_Recover_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Wallet_Recover_Request) ProtoMessage()    {}
func (*Rpc_Wallet_Recover_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1, 1, 0}
}
func (m *Rpc_Wallet_Recover_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Wallet_Recover_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Wallet_Recover_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Wallet_Recover_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Wallet_Recover_Request.Merge(m, src)
}
func (m *Rpc_Wallet_Recover_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Wallet_Recover_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Wallet_Recover_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Wallet_Recover_Request proto.InternalMessageInfo

func (m *Rpc_Wallet_Recover_Request) GetRootPath() string {
	if m != nil {
		return m.RootPath
	}
	return ""
}

func (m *Rpc_Wallet_Recover_Request) GetMnemonic() string {
	if m != nil {
		return m.Mnemonic
	}
	return ""
}

//*
// Middleware-to-front-end response, that can contain a NULL error or a non-NULL error
type Rpc_Wallet_Recover_Response struct {
	Error *Rpc_Wallet_Recover_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Rpc_Wallet_Recover_Response) Reset()         { *m = Rpc_Wallet_Recover_Response{} }
func (m *Rpc_Wallet_Recover_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Wallet_Recover_Response) ProtoMessage()    {}
func (*Rpc_Wallet_Recover_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1, 1, 1}
}
func (m *Rpc_Wallet_Recover_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Wallet_Recover_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Wallet_Recover_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Wallet_Recover_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Wallet_Recover_Response.Merge(m, src)
}
func (m *Rpc_Wallet_Recover_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Wallet_Recover_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Wallet_Recover_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Wallet_Recover_Response proto.InternalMessageInfo

func (m *Rpc_Wallet_Recover_Response) GetError() *Rpc_Wallet_Recover_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Rpc_Wallet_Recover_Response_Error struct {
	Code        Rpc_Wallet_Recover_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Wallet_Recover_Response_Error_Code" json:"code,omitempty"`
	Description string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Wallet_Recover_Response_Error) Reset()         { *m = Rpc_Wallet_Recover_Response_Error{} }
func (m *Rpc_Wallet_Recover_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Wallet_Recover_Response_Error) ProtoMessage()    {}
func (*Rpc_Wallet_Recover_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 1, 1, 1, 0}
}
func (m *Rpc_Wallet_Recover_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Wallet_Recover_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Wallet_Recover_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Wallet_Recover_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Wallet_Recover_Response_Error.Merge(m, src)
}
func (m *Rpc_Wallet_Recover_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Wallet_Recover_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Wallet_Recover_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Wallet_Recover_Response_Error proto.InternalMessageInfo

func (m *Rpc_Wallet_Recover_Response_Error) GetCode() Rpc_Wallet_Recover_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Wallet_Recover_Response_Error_NULL
}

func (m *Rpc_Wallet_Recover_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Account struct {
}

func (m *Rpc_Account) Reset()         { *m = Rpc_Account{} }
func (m *Rpc_Account) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account) ProtoMessage()    {}
func (*Rpc_Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2}
}
func (m *Rpc_Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account.Merge(m, src)
}
func (m *Rpc_Account) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account proto.InternalMessageInfo

type Rpc_Account_Create struct {
}

func (m *Rpc_Account_Create) Reset()         { *m = Rpc_Account_Create{} }
func (m *Rpc_Account_Create) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Create) ProtoMessage()    {}
func (*Rpc_Account_Create) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 0}
}
func (m *Rpc_Account_Create) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Create) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Create.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Create) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Create.Merge(m, src)
}
func (m *Rpc_Account_Create) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Create) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Create.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Create proto.InternalMessageInfo

//*
// Front end to middleware request-to-create-an account
type Rpc_Account_Create_Request struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Avatar:
	//	*Rpc_Account_Create_Request_AvatarLocalPath
	//	*Rpc_Account_Create_Request_AvatarColor
	Avatar isRpc_Account_Create_Request_Avatar `protobuf_oneof:"avatar"`
}

func (m *Rpc_Account_Create_Request) Reset()         { *m = Rpc_Account_Create_Request{} }
func (m *Rpc_Account_Create_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Create_Request) ProtoMessage()    {}
func (*Rpc_Account_Create_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 0, 0}
}
func (m *Rpc_Account_Create_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Create_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Create_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Create_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Create_Request.Merge(m, src)
}
func (m *Rpc_Account_Create_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Create_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Create_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Create_Request proto.InternalMessageInfo

type isRpc_Account_Create_Request_Avatar interface {
	isRpc_Account_Create_Request_Avatar()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Rpc_Account_Create_Request_AvatarLocalPath struct {
	AvatarLocalPath string `protobuf:"bytes,2,opt,name=avatarLocalPath,proto3,oneof" json:"avatarLocalPath,omitempty"`
}
type Rpc_Account_Create_Request_AvatarColor struct {
	AvatarColor string `protobuf:"bytes,3,opt,name=avatarColor,proto3,oneof" json:"avatarColor,omitempty"`
}

func (*Rpc_Account_Create_Request_AvatarLocalPath) isRpc_Account_Create_Request_Avatar() {}
func (*Rpc_Account_Create_Request_AvatarColor) isRpc_Account_Create_Request_Avatar()     {}

func (m *Rpc_Account_Create_Request) GetAvatar() isRpc_Account_Create_Request_Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *Rpc_Account_Create_Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Rpc_Account_Create_Request) GetAvatarLocalPath() string {
	if x, ok := m.GetAvatar().(*Rpc_Account_Create_Request_AvatarLocalPath); ok {
		return x.AvatarLocalPath
	}
	return ""
}

func (m *Rpc_Account_Create_Request) GetAvatarColor() string {
	if x, ok := m.GetAvatar().(*Rpc_Account_Create_Request_AvatarColor); ok {
		return x.AvatarColor
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Rpc_Account_Create_Request) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Rpc_Account_Create_Request_AvatarLocalPath)(nil),
		(*Rpc_Account_Create_Request_AvatarColor)(nil),
	}
}

//*
// Middleware-to-front-end response for an account creation request, that can contain a NULL error and created account or a non-NULL error and an empty account
type Rpc_Account_Create_Response struct {
	Error   *Rpc_Account_Create_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Account *Model_Account                     `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *Rpc_Account_Create_Response) Reset()         { *m = Rpc_Account_Create_Response{} }
func (m *Rpc_Account_Create_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Create_Response) ProtoMessage()    {}
func (*Rpc_Account_Create_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 0, 1}
}
func (m *Rpc_Account_Create_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Create_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Create_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Create_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Create_Response.Merge(m, src)
}
func (m *Rpc_Account_Create_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Create_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Create_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Create_Response proto.InternalMessageInfo

func (m *Rpc_Account_Create_Response) GetError() *Rpc_Account_Create_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Rpc_Account_Create_Response) GetAccount() *Model_Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type Rpc_Account_Create_Response_Error struct {
	Code        Rpc_Account_Create_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Account_Create_Response_Error_Code" json:"code,omitempty"`
	Description string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Account_Create_Response_Error) Reset()         { *m = Rpc_Account_Create_Response_Error{} }
func (m *Rpc_Account_Create_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Create_Response_Error) ProtoMessage()    {}
func (*Rpc_Account_Create_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 0, 1, 0}
}
func (m *Rpc_Account_Create_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Create_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Create_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Create_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Create_Response_Error.Merge(m, src)
}
func (m *Rpc_Account_Create_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Create_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Create_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Create_Response_Error proto.InternalMessageInfo

func (m *Rpc_Account_Create_Response_Error) GetCode() Rpc_Account_Create_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Account_Create_Response_Error_NULL
}

func (m *Rpc_Account_Create_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Account_Recover struct {
}

func (m *Rpc_Account_Recover) Reset()         { *m = Rpc_Account_Recover{} }
func (m *Rpc_Account_Recover) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Recover) ProtoMessage()    {}
func (*Rpc_Account_Recover) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 1}
}
func (m *Rpc_Account_Recover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Recover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Recover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Recover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Recover.Merge(m, src)
}
func (m *Rpc_Account_Recover) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Recover) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Recover.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Recover proto.InternalMessageInfo

//*
// Front end to middleware request-to-start-search of an accounts for a recovered mnemonic.
// Each of an account that would be found will come with an AccountAdd event
type Rpc_Account_Recover_Request struct {
}

func (m *Rpc_Account_Recover_Request) Reset()         { *m = Rpc_Account_Recover_Request{} }
func (m *Rpc_Account_Recover_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Recover_Request) ProtoMessage()    {}
func (*Rpc_Account_Recover_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 1, 0}
}
func (m *Rpc_Account_Recover_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Recover_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Recover_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Recover_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Recover_Request.Merge(m, src)
}
func (m *Rpc_Account_Recover_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Recover_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Recover_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Recover_Request proto.InternalMessageInfo

//*
// Middleware-to-front-end response to an account recover request, that can contain a NULL error and created account or a non-NULL error and an empty account
type Rpc_Account_Recover_Response struct {
	Error *Rpc_Account_Recover_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Rpc_Account_Recover_Response) Reset()         { *m = Rpc_Account_Recover_Response{} }
func (m *Rpc_Account_Recover_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Recover_Response) ProtoMessage()    {}
func (*Rpc_Account_Recover_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 1, 1}
}
func (m *Rpc_Account_Recover_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Recover_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Recover_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Recover_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Recover_Response.Merge(m, src)
}
func (m *Rpc_Account_Recover_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Recover_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Recover_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Recover_Response proto.InternalMessageInfo

func (m *Rpc_Account_Recover_Response) GetError() *Rpc_Account_Recover_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Rpc_Account_Recover_Response_Error struct {
	Code        Rpc_Account_Recover_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Account_Recover_Response_Error_Code" json:"code,omitempty"`
	Description string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Account_Recover_Response_Error) Reset()         { *m = Rpc_Account_Recover_Response_Error{} }
func (m *Rpc_Account_Recover_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Recover_Response_Error) ProtoMessage()    {}
func (*Rpc_Account_Recover_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 1, 1, 0}
}
func (m *Rpc_Account_Recover_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Recover_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Recover_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Recover_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Recover_Response_Error.Merge(m, src)
}
func (m *Rpc_Account_Recover_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Recover_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Recover_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Recover_Response_Error proto.InternalMessageInfo

func (m *Rpc_Account_Recover_Response_Error) GetCode() Rpc_Account_Recover_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Account_Recover_Response_Error_NULL
}

func (m *Rpc_Account_Recover_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Account_Select struct {
}

func (m *Rpc_Account_Select) Reset()         { *m = Rpc_Account_Select{} }
func (m *Rpc_Account_Select) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Select) ProtoMessage()    {}
func (*Rpc_Account_Select) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 2}
}
func (m *Rpc_Account_Select) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Select) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Select.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Select) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Select.Merge(m, src)
}
func (m *Rpc_Account_Select) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Select) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Select.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Select proto.InternalMessageInfo

//*
// Front end to middleware request-to-launch-a specific account using account id and a root path
// User can select an account from those, that came with an AccountAdd events
type Rpc_Account_Select_Request struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RootPath string `protobuf:"bytes,2,opt,name=rootPath,proto3" json:"rootPath,omitempty"`
}

func (m *Rpc_Account_Select_Request) Reset()         { *m = Rpc_Account_Select_Request{} }
func (m *Rpc_Account_Select_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Select_Request) ProtoMessage()    {}
func (*Rpc_Account_Select_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 2, 0}
}
func (m *Rpc_Account_Select_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Select_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Select_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Select_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Select_Request.Merge(m, src)
}
func (m *Rpc_Account_Select_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Select_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Select_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Select_Request proto.InternalMessageInfo

func (m *Rpc_Account_Select_Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rpc_Account_Select_Request) GetRootPath() string {
	if m != nil {
		return m.RootPath
	}
	return ""
}

//*
// Middleware-to-front-end response for an account select request, that can contain a NULL error and selected account or a non-NULL error and an empty account
type Rpc_Account_Select_Response struct {
	Error   *Rpc_Account_Select_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Account *Model_Account                     `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *Rpc_Account_Select_Response) Reset()         { *m = Rpc_Account_Select_Response{} }
func (m *Rpc_Account_Select_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Select_Response) ProtoMessage()    {}
func (*Rpc_Account_Select_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 2, 1}
}
func (m *Rpc_Account_Select_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Select_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Select_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Select_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Select_Response.Merge(m, src)
}
func (m *Rpc_Account_Select_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Select_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Select_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Select_Response proto.InternalMessageInfo

func (m *Rpc_Account_Select_Response) GetError() *Rpc_Account_Select_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Rpc_Account_Select_Response) GetAccount() *Model_Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type Rpc_Account_Select_Response_Error struct {
	Code        Rpc_Account_Select_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Account_Select_Response_Error_Code" json:"code,omitempty"`
	Description string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Account_Select_Response_Error) Reset()         { *m = Rpc_Account_Select_Response_Error{} }
func (m *Rpc_Account_Select_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Account_Select_Response_Error) ProtoMessage()    {}
func (*Rpc_Account_Select_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 2, 2, 1, 0}
}
func (m *Rpc_Account_Select_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Account_Select_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Account_Select_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Account_Select_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Account_Select_Response_Error.Merge(m, src)
}
func (m *Rpc_Account_Select_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Account_Select_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Account_Select_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Account_Select_Response_Error proto.InternalMessageInfo

func (m *Rpc_Account_Select_Response_Error) GetCode() Rpc_Account_Select_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Account_Select_Response_Error_NULL
}

func (m *Rpc_Account_Select_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Version struct {
}

func (m *Rpc_Version) Reset()         { *m = Rpc_Version{} }
func (m *Rpc_Version) String() string { return proto.CompactTextString(m) }
func (*Rpc_Version) ProtoMessage()    {}
func (*Rpc_Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 3}
}
func (m *Rpc_Version) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Version.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Version.Merge(m, src)
}
func (m *Rpc_Version) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Version proto.InternalMessageInfo

type Rpc_Version_Get struct {
}

func (m *Rpc_Version_Get) Reset()         { *m = Rpc_Version_Get{} }
func (m *Rpc_Version_Get) String() string { return proto.CompactTextString(m) }
func (*Rpc_Version_Get) ProtoMessage()    {}
func (*Rpc_Version_Get) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 3, 0}
}
func (m *Rpc_Version_Get) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Version_Get) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Version_Get.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Version_Get) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Version_Get.Merge(m, src)
}
func (m *Rpc_Version_Get) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Version_Get) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Version_Get.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Version_Get proto.InternalMessageInfo

type Rpc_Version_Get_Request struct {
}

func (m *Rpc_Version_Get_Request) Reset()         { *m = Rpc_Version_Get_Request{} }
func (m *Rpc_Version_Get_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Version_Get_Request) ProtoMessage()    {}
func (*Rpc_Version_Get_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 3, 0, 0}
}
func (m *Rpc_Version_Get_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Version_Get_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Version_Get_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Version_Get_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Version_Get_Request.Merge(m, src)
}
func (m *Rpc_Version_Get_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Version_Get_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Version_Get_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Version_Get_Request proto.InternalMessageInfo

type Rpc_Version_Get_Response struct {
	Error   *Rpc_Version_Get_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Version string                          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Rpc_Version_Get_Response) Reset()         { *m = Rpc_Version_Get_Response{} }
func (m *Rpc_Version_Get_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Version_Get_Response) ProtoMessage()    {}
func (*Rpc_Version_Get_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 3, 0, 1}
}
func (m *Rpc_Version_Get_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Version_Get_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Version_Get_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Version_Get_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Version_Get_Response.Merge(m, src)
}
func (m *Rpc_Version_Get_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Version_Get_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Version_Get_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Version_Get_Response proto.InternalMessageInfo

func (m *Rpc_Version_Get_Response) GetError() *Rpc_Version_Get_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Rpc_Version_Get_Response) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Rpc_Version_Get_Response_Error struct {
	Code        Rpc_Version_Get_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Version_Get_Response_Error_Code" json:"code,omitempty"`
	Description string                              `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Version_Get_Response_Error) Reset()         { *m = Rpc_Version_Get_Response_Error{} }
func (m *Rpc_Version_Get_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Version_Get_Response_Error) ProtoMessage()    {}
func (*Rpc_Version_Get_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 3, 0, 1, 0}
}
func (m *Rpc_Version_Get_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Version_Get_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Version_Get_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Version_Get_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Version_Get_Response_Error.Merge(m, src)
}
func (m *Rpc_Version_Get_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Version_Get_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Version_Get_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Version_Get_Response_Error proto.InternalMessageInfo

func (m *Rpc_Version_Get_Response_Error) GetCode() Rpc_Version_Get_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Version_Get_Response_Error_NULL
}

func (m *Rpc_Version_Get_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Log struct {
}

func (m *Rpc_Log) Reset()         { *m = Rpc_Log{} }
func (m *Rpc_Log) String() string { return proto.CompactTextString(m) }
func (*Rpc_Log) ProtoMessage()    {}
func (*Rpc_Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 4}
}
func (m *Rpc_Log) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Log.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Log.Merge(m, src)
}
func (m *Rpc_Log) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Log proto.InternalMessageInfo

type Rpc_Log_Send struct {
}

func (m *Rpc_Log_Send) Reset()         { *m = Rpc_Log_Send{} }
func (m *Rpc_Log_Send) String() string { return proto.CompactTextString(m) }
func (*Rpc_Log_Send) ProtoMessage()    {}
func (*Rpc_Log_Send) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 4, 0}
}
func (m *Rpc_Log_Send) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Log_Send) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Log_Send.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Log_Send) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Log_Send.Merge(m, src)
}
func (m *Rpc_Log_Send) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Log_Send) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Log_Send.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Log_Send proto.InternalMessageInfo

type Rpc_Log_Send_Request struct {
	Message string                     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Level   Rpc_Log_Send_Request_Level `protobuf:"varint,2,opt,name=level,proto3,enum=anytype.Rpc_Log_Send_Request_Level" json:"level,omitempty"`
}

func (m *Rpc_Log_Send_Request) Reset()         { *m = Rpc_Log_Send_Request{} }
func (m *Rpc_Log_Send_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Log_Send_Request) ProtoMessage()    {}
func (*Rpc_Log_Send_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 4, 0, 0}
}
func (m *Rpc_Log_Send_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Log_Send_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Log_Send_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Log_Send_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Log_Send_Request.Merge(m, src)
}
func (m *Rpc_Log_Send_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Log_Send_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Log_Send_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Log_Send_Request proto.InternalMessageInfo

func (m *Rpc_Log_Send_Request) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Rpc_Log_Send_Request) GetLevel() Rpc_Log_Send_Request_Level {
	if m != nil {
		return m.Level
	}
	return Rpc_Log_Send_Request_DEBUG
}

type Rpc_Log_Send_Response struct {
	Error *Rpc_Log_Send_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Rpc_Log_Send_Response) Reset()         { *m = Rpc_Log_Send_Response{} }
func (m *Rpc_Log_Send_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Log_Send_Response) ProtoMessage()    {}
func (*Rpc_Log_Send_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 4, 0, 1}
}
func (m *Rpc_Log_Send_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Log_Send_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Log_Send_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Log_Send_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Log_Send_Response.Merge(m, src)
}
func (m *Rpc_Log_Send_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Log_Send_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Log_Send_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Log_Send_Response proto.InternalMessageInfo

func (m *Rpc_Log_Send_Response) GetError() *Rpc_Log_Send_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Rpc_Log_Send_Response_Error struct {
	Code        Rpc_Log_Send_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Log_Send_Response_Error_Code" json:"code,omitempty"`
	Description string                           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Log_Send_Response_Error) Reset()         { *m = Rpc_Log_Send_Response_Error{} }
func (m *Rpc_Log_Send_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Log_Send_Response_Error) ProtoMessage()    {}
func (*Rpc_Log_Send_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 4, 0, 1, 0}
}
func (m *Rpc_Log_Send_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Log_Send_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Log_Send_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Log_Send_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Log_Send_Response_Error.Merge(m, src)
}
func (m *Rpc_Log_Send_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Log_Send_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Log_Send_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Log_Send_Response_Error proto.InternalMessageInfo

func (m *Rpc_Log_Send_Response_Error) GetCode() Rpc_Log_Send_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Log_Send_Response_Error_NULL
}

func (m *Rpc_Log_Send_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Ipfs struct {
}

func (m *Rpc_Ipfs) Reset()         { *m = Rpc_Ipfs{} }
func (m *Rpc_Ipfs) String() string { return proto.CompactTextString(m) }
func (*Rpc_Ipfs) ProtoMessage()    {}
func (*Rpc_Ipfs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 5}
}
func (m *Rpc_Ipfs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Ipfs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Ipfs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Ipfs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Ipfs.Merge(m, src)
}
func (m *Rpc_Ipfs) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Ipfs) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Ipfs.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Ipfs proto.InternalMessageInfo

type Rpc_Ipfs_GetFile struct {
}

func (m *Rpc_Ipfs_GetFile) Reset()         { *m = Rpc_Ipfs_GetFile{} }
func (m *Rpc_Ipfs_GetFile) String() string { return proto.CompactTextString(m) }
func (*Rpc_Ipfs_GetFile) ProtoMessage()    {}
func (*Rpc_Ipfs_GetFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 5, 0}
}
func (m *Rpc_Ipfs_GetFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Ipfs_GetFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Ipfs_GetFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Ipfs_GetFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Ipfs_GetFile.Merge(m, src)
}
func (m *Rpc_Ipfs_GetFile) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Ipfs_GetFile) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Ipfs_GetFile.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Ipfs_GetFile proto.InternalMessageInfo

type Rpc_Ipfs_GetFile_Request struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Rpc_Ipfs_GetFile_Request) Reset()         { *m = Rpc_Ipfs_GetFile_Request{} }
func (m *Rpc_Ipfs_GetFile_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Ipfs_GetFile_Request) ProtoMessage()    {}
func (*Rpc_Ipfs_GetFile_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 5, 0, 0}
}
func (m *Rpc_Ipfs_GetFile_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Ipfs_GetFile_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Ipfs_GetFile_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Ipfs_GetFile_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Ipfs_GetFile_Request.Merge(m, src)
}
func (m *Rpc_Ipfs_GetFile_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Ipfs_GetFile_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Ipfs_GetFile_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Ipfs_GetFile_Request proto.InternalMessageInfo

func (m *Rpc_Ipfs_GetFile_Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Rpc_Ipfs_GetFile_Response struct {
	Error *Rpc_Ipfs_GetFile_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  []byte                           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Media string                           `protobuf:"bytes,3,opt,name=media,proto3" json:"media,omitempty"`
	Name  string                           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Rpc_Ipfs_GetFile_Response) Reset()         { *m = Rpc_Ipfs_GetFile_Response{} }
func (m *Rpc_Ipfs_GetFile_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Ipfs_GetFile_Response) ProtoMessage()    {}
func (*Rpc_Ipfs_GetFile_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 5, 0, 1}
}
func (m *Rpc_Ipfs_GetFile_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Ipfs_GetFile_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Ipfs_GetFile_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Ipfs_GetFile_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Ipfs_GetFile_Response.Merge(m, src)
}
func (m *Rpc_Ipfs_GetFile_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Ipfs_GetFile_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Ipfs_GetFile_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Ipfs_GetFile_Response proto.InternalMessageInfo

func (m *Rpc_Ipfs_GetFile_Response) GetError() *Rpc_Ipfs_GetFile_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Rpc_Ipfs_GetFile_Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Rpc_Ipfs_GetFile_Response) GetMedia() string {
	if m != nil {
		return m.Media
	}
	return ""
}

func (m *Rpc_Ipfs_GetFile_Response) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Rpc_Ipfs_GetFile_Response_Error struct {
	Code        Rpc_Ipfs_GetFile_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Ipfs_GetFile_Response_Error_Code" json:"code,omitempty"`
	Description string                               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Ipfs_GetFile_Response_Error) Reset()         { *m = Rpc_Ipfs_GetFile_Response_Error{} }
func (m *Rpc_Ipfs_GetFile_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Ipfs_GetFile_Response_Error) ProtoMessage()    {}
func (*Rpc_Ipfs_GetFile_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 5, 0, 1, 0}
}
func (m *Rpc_Ipfs_GetFile_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Ipfs_GetFile_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Ipfs_GetFile_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Ipfs_GetFile_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Ipfs_GetFile_Response_Error.Merge(m, src)
}
func (m *Rpc_Ipfs_GetFile_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Ipfs_GetFile_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Ipfs_GetFile_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Ipfs_GetFile_Response_Error proto.InternalMessageInfo

func (m *Rpc_Ipfs_GetFile_Response_Error) GetCode() Rpc_Ipfs_GetFile_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Ipfs_GetFile_Response_Error_NULL
}

func (m *Rpc_Ipfs_GetFile_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Image struct {
}

func (m *Rpc_Image) Reset()         { *m = Rpc_Image{} }
func (m *Rpc_Image) String() string { return proto.CompactTextString(m) }
func (*Rpc_Image) ProtoMessage()    {}
func (*Rpc_Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6}
}
func (m *Rpc_Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Image.Merge(m, src)
}
func (m *Rpc_Image) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Image proto.InternalMessageInfo

type Rpc_Image_GetBlob struct {
}

func (m *Rpc_Image_GetBlob) Reset()         { *m = Rpc_Image_GetBlob{} }
func (m *Rpc_Image_GetBlob) String() string { return proto.CompactTextString(m) }
func (*Rpc_Image_GetBlob) ProtoMessage()    {}
func (*Rpc_Image_GetBlob) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6, 0}
}
func (m *Rpc_Image_GetBlob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Image_GetBlob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Image_GetBlob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Image_GetBlob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Image_GetBlob.Merge(m, src)
}
func (m *Rpc_Image_GetBlob) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Image_GetBlob) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Image_GetBlob.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Image_GetBlob proto.InternalMessageInfo

type Rpc_Image_GetBlob_Request struct {
	Id    string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size_ Model_Image_Size `protobuf:"varint,2,opt,name=size,proto3,enum=anytype.Model_Image_Size" json:"size,omitempty"`
}

func (m *Rpc_Image_GetBlob_Request) Reset()         { *m = Rpc_Image_GetBlob_Request{} }
func (m *Rpc_Image_GetBlob_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Image_GetBlob_Request) ProtoMessage()    {}
func (*Rpc_Image_GetBlob_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6, 0, 0}
}
func (m *Rpc_Image_GetBlob_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Image_GetBlob_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Image_GetBlob_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Image_GetBlob_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Image_GetBlob_Request.Merge(m, src)
}
func (m *Rpc_Image_GetBlob_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Image_GetBlob_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Image_GetBlob_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Image_GetBlob_Request proto.InternalMessageInfo

func (m *Rpc_Image_GetBlob_Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rpc_Image_GetBlob_Request) GetSize_() Model_Image_Size {
	if m != nil {
		return m.Size_
	}
	return Model_Image_LARGE
}

type Rpc_Image_GetBlob_Response struct {
	Error *Rpc_Image_GetBlob_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Blob  []byte                            `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (m *Rpc_Image_GetBlob_Response) Reset()         { *m = Rpc_Image_GetBlob_Response{} }
func (m *Rpc_Image_GetBlob_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Image_GetBlob_Response) ProtoMessage()    {}
func (*Rpc_Image_GetBlob_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6, 0, 1}
}
func (m *Rpc_Image_GetBlob_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Image_GetBlob_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Image_GetBlob_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Image_GetBlob_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Image_GetBlob_Response.Merge(m, src)
}
func (m *Rpc_Image_GetBlob_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Image_GetBlob_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Image_GetBlob_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Image_GetBlob_Response proto.InternalMessageInfo

func (m *Rpc_Image_GetBlob_Response) GetError() *Rpc_Image_GetBlob_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Rpc_Image_GetBlob_Response) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type Rpc_Image_GetBlob_Response_Error struct {
	Code        Rpc_Image_GetBlob_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Image_GetBlob_Response_Error_Code" json:"code,omitempty"`
	Description string                                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Image_GetBlob_Response_Error) Reset()         { *m = Rpc_Image_GetBlob_Response_Error{} }
func (m *Rpc_Image_GetBlob_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Image_GetBlob_Response_Error) ProtoMessage()    {}
func (*Rpc_Image_GetBlob_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6, 0, 1, 0}
}
func (m *Rpc_Image_GetBlob_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Image_GetBlob_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Image_GetBlob_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Image_GetBlob_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Image_GetBlob_Response_Error.Merge(m, src)
}
func (m *Rpc_Image_GetBlob_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Image_GetBlob_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Image_GetBlob_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Image_GetBlob_Response_Error proto.InternalMessageInfo

func (m *Rpc_Image_GetBlob_Response_Error) GetCode() Rpc_Image_GetBlob_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Image_GetBlob_Response_Error_NULL
}

func (m *Rpc_Image_GetBlob_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Rpc_Image_GetFile struct {
}

func (m *Rpc_Image_GetFile) Reset()         { *m = Rpc_Image_GetFile{} }
func (m *Rpc_Image_GetFile) String() string { return proto.CompactTextString(m) }
func (*Rpc_Image_GetFile) ProtoMessage()    {}
func (*Rpc_Image_GetFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6, 1}
}
func (m *Rpc_Image_GetFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Image_GetFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Image_GetFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Image_GetFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Image_GetFile.Merge(m, src)
}
func (m *Rpc_Image_GetFile) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Image_GetFile) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Image_GetFile.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Image_GetFile proto.InternalMessageInfo

type Rpc_Image_GetFile_Request struct {
	Id    string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size_ Model_Image_Size `protobuf:"varint,2,opt,name=size,proto3,enum=anytype.Model_Image_Size" json:"size,omitempty"`
}

func (m *Rpc_Image_GetFile_Request) Reset()         { *m = Rpc_Image_GetFile_Request{} }
func (m *Rpc_Image_GetFile_Request) String() string { return proto.CompactTextString(m) }
func (*Rpc_Image_GetFile_Request) ProtoMessage()    {}
func (*Rpc_Image_GetFile_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6, 1, 0}
}
func (m *Rpc_Image_GetFile_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Image_GetFile_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Image_GetFile_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Image_GetFile_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Image_GetFile_Request.Merge(m, src)
}
func (m *Rpc_Image_GetFile_Request) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Image_GetFile_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Image_GetFile_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Image_GetFile_Request proto.InternalMessageInfo

func (m *Rpc_Image_GetFile_Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rpc_Image_GetFile_Request) GetSize_() Model_Image_Size {
	if m != nil {
		return m.Size_
	}
	return Model_Image_LARGE
}

type Rpc_Image_GetFile_Response struct {
	Error     *Rpc_Image_GetFile_Response_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	LocalPath string                            `protobuf:"bytes,2,opt,name=localPath,proto3" json:"localPath,omitempty"`
}

func (m *Rpc_Image_GetFile_Response) Reset()         { *m = Rpc_Image_GetFile_Response{} }
func (m *Rpc_Image_GetFile_Response) String() string { return proto.CompactTextString(m) }
func (*Rpc_Image_GetFile_Response) ProtoMessage()    {}
func (*Rpc_Image_GetFile_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6, 1, 1}
}
func (m *Rpc_Image_GetFile_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Image_GetFile_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Image_GetFile_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Image_GetFile_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Image_GetFile_Response.Merge(m, src)
}
func (m *Rpc_Image_GetFile_Response) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Image_GetFile_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Image_GetFile_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Image_GetFile_Response proto.InternalMessageInfo

func (m *Rpc_Image_GetFile_Response) GetError() *Rpc_Image_GetFile_Response_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Rpc_Image_GetFile_Response) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

type Rpc_Image_GetFile_Response_Error struct {
	Code        Rpc_Image_GetFile_Response_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.Rpc_Image_GetFile_Response_Error_Code" json:"code,omitempty"`
	Description string                                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Rpc_Image_GetFile_Response_Error) Reset()         { *m = Rpc_Image_GetFile_Response_Error{} }
func (m *Rpc_Image_GetFile_Response_Error) String() string { return proto.CompactTextString(m) }
func (*Rpc_Image_GetFile_Response_Error) ProtoMessage()    {}
func (*Rpc_Image_GetFile_Response_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0, 6, 1, 1, 0}
}
func (m *Rpc_Image_GetFile_Response_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc_Image_GetFile_Response_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc_Image_GetFile_Response_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc_Image_GetFile_Response_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc_Image_GetFile_Response_Error.Merge(m, src)
}
func (m *Rpc_Image_GetFile_Response_Error) XXX_Size() int {
	return m.Size()
}
func (m *Rpc_Image_GetFile_Response_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc_Image_GetFile_Response_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc_Image_GetFile_Response_Error proto.InternalMessageInfo

func (m *Rpc_Image_GetFile_Response_Error) GetCode() Rpc_Image_GetFile_Response_Error_Code {
	if m != nil {
		return m.Code
	}
	return Rpc_Image_GetFile_Response_Error_NULL
}

func (m *Rpc_Image_GetFile_Response_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterEnum("anytype.Rpc_Block_HistoryMove_Response_Error_Code", Rpc_Block_HistoryMove_Response_Error_Code_name, Rpc_Block_HistoryMove_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Block_Open_Response_Error_Code", Rpc_Block_Open_Response_Error_Code_name, Rpc_Block_Open_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Block_Create_Response_Error_Code", Rpc_Block_Create_Response_Error_Code_name, Rpc_Block_Create_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Block_Update_Response_Error_Code", Rpc_Block_Update_Response_Error_Code_name, Rpc_Block_Update_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Wallet_Create_Response_Error_Code", Rpc_Wallet_Create_Response_Error_Code_name, Rpc_Wallet_Create_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Wallet_Recover_Response_Error_Code", Rpc_Wallet_Recover_Response_Error_Code_name, Rpc_Wallet_Recover_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Account_Create_Response_Error_Code", Rpc_Account_Create_Response_Error_Code_name, Rpc_Account_Create_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Account_Recover_Response_Error_Code", Rpc_Account_Recover_Response_Error_Code_name, Rpc_Account_Recover_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Account_Select_Response_Error_Code", Rpc_Account_Select_Response_Error_Code_name, Rpc_Account_Select_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Version_Get_Response_Error_Code", Rpc_Version_Get_Response_Error_Code_name, Rpc_Version_Get_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Log_Send_Request_Level", Rpc_Log_Send_Request_Level_name, Rpc_Log_Send_Request_Level_value)
	proto.RegisterEnum("anytype.Rpc_Log_Send_Response_Error_Code", Rpc_Log_Send_Response_Error_Code_name, Rpc_Log_Send_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Ipfs_GetFile_Response_Error_Code", Rpc_Ipfs_GetFile_Response_Error_Code_name, Rpc_Ipfs_GetFile_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Image_GetBlob_Response_Error_Code", Rpc_Image_GetBlob_Response_Error_Code_name, Rpc_Image_GetBlob_Response_Error_Code_value)
	proto.RegisterEnum("anytype.Rpc_Image_GetFile_Response_Error_Code", Rpc_Image_GetFile_Response_Error_Code_name, Rpc_Image_GetFile_Response_Error_Code_value)
	proto.RegisterType((*Rpc)(nil), "anytype.Rpc")
	proto.RegisterType((*Rpc_Block)(nil), "anytype.Rpc.Block")
	proto.RegisterType((*Rpc_Block_HistoryMove)(nil), "anytype.Rpc.Block.HistoryMove")
	proto.RegisterType((*Rpc_Block_HistoryMove_Request)(nil), "anytype.Rpc.Block.HistoryMove.Request")
	proto.RegisterType((*Rpc_Block_HistoryMove_Response)(nil), "anytype.Rpc.Block.HistoryMove.Response")
	proto.RegisterType((*Rpc_Block_HistoryMove_Response_Error)(nil), "anytype.Rpc.Block.HistoryMove.Response.Error")
	proto.RegisterType((*Rpc_Block_Open)(nil), "anytype.Rpc.Block.Open")
	proto.RegisterType((*Rpc_Block_Open_Request)(nil), "anytype.Rpc.Block.Open.Request")
	proto.RegisterType((*Rpc_Block_Open_Response)(nil), "anytype.Rpc.Block.Open.Response")
	proto.RegisterType((*Rpc_Block_Open_Response_Error)(nil), "anytype.Rpc.Block.Open.Response.Error")
	proto.RegisterType((*Rpc_Block_Create)(nil), "anytype.Rpc.Block.Create")
	proto.RegisterType((*Rpc_Block_Create_Request)(nil), "anytype.Rpc.Block.Create.Request")
	proto.RegisterType((*Rpc_Block_Create_Response)(nil), "anytype.Rpc.Block.Create.Response")
	proto.RegisterType((*Rpc_Block_Create_Response_Error)(nil), "anytype.Rpc.Block.Create.Response.Error")
	proto.RegisterType((*Rpc_Block_Update)(nil), "anytype.Rpc.Block.Update")
	proto.RegisterType((*Rpc_Block_Update_Request)(nil), "anytype.Rpc.Block.Update.Request")
	proto.RegisterType((*Rpc_Block_Update_Response)(nil), "anytype.Rpc.Block.Update.Response")
	proto.RegisterType((*Rpc_Block_Update_Response_Error)(nil), "anytype.Rpc.Block.Update.Response.Error")
	proto.RegisterType((*Rpc_Wallet)(nil), "anytype.Rpc.Wallet")
	proto.RegisterType((*Rpc_Wallet_Create)(nil), "anytype.Rpc.Wallet.Create")
	proto.RegisterType((*Rpc_Wallet_Create_Request)(nil), "anytype.Rpc.Wallet.Create.Request")
	proto.RegisterType((*Rpc_Wallet_Create_Response)(nil), "anytype.Rpc.Wallet.Create.Response")
	proto.RegisterType((*Rpc_Wallet_Create_Response_Error)(nil), "anytype.Rpc.Wallet.Create.Response.Error")
	proto.RegisterType((*Rpc_Wallet_Recover)(nil), "anytype.Rpc.Wallet.Recover")
	proto.RegisterType((*Rpc_Wallet_Recover_Request)(nil), "anytype.Rpc.Wallet.Recover.Request")
	proto.RegisterType((*Rpc_Wallet_Recover_Response)(nil), "anytype.Rpc.Wallet.Recover.Response")
	proto.RegisterType((*Rpc_Wallet_Recover_Response_Error)(nil), "anytype.Rpc.Wallet.Recover.Response.Error")
	proto.RegisterType((*Rpc_Account)(nil), "anytype.Rpc.Account")
	proto.RegisterType((*Rpc_Account_Create)(nil), "anytype.Rpc.Account.Create")
	proto.RegisterType((*Rpc_Account_Create_Request)(nil), "anytype.Rpc.Account.Create.Request")
	proto.RegisterType((*Rpc_Account_Create_Response)(nil), "anytype.Rpc.Account.Create.Response")
	proto.RegisterType((*Rpc_Account_Create_Response_Error)(nil), "anytype.Rpc.Account.Create.Response.Error")
	proto.RegisterType((*Rpc_Account_Recover)(nil), "anytype.Rpc.Account.Recover")
	proto.RegisterType((*Rpc_Account_Recover_Request)(nil), "anytype.Rpc.Account.Recover.Request")
	proto.RegisterType((*Rpc_Account_Recover_Response)(nil), "anytype.Rpc.Account.Recover.Response")
	proto.RegisterType((*Rpc_Account_Recover_Response_Error)(nil), "anytype.Rpc.Account.Recover.Response.Error")
	proto.RegisterType((*Rpc_Account_Select)(nil), "anytype.Rpc.Account.Select")
	proto.RegisterType((*Rpc_Account_Select_Request)(nil), "anytype.Rpc.Account.Select.Request")
	proto.RegisterType((*Rpc_Account_Select_Response)(nil), "anytype.Rpc.Account.Select.Response")
	proto.RegisterType((*Rpc_Account_Select_Response_Error)(nil), "anytype.Rpc.Account.Select.Response.Error")
	proto.RegisterType((*Rpc_Version)(nil), "anytype.Rpc.Version")
	proto.RegisterType((*Rpc_Version_Get)(nil), "anytype.Rpc.Version.Get")
	proto.RegisterType((*Rpc_Version_Get_Request)(nil), "anytype.Rpc.Version.Get.Request")
	proto.RegisterType((*Rpc_Version_Get_Response)(nil), "anytype.Rpc.Version.Get.Response")
	proto.RegisterType((*Rpc_Version_Get_Response_Error)(nil), "anytype.Rpc.Version.Get.Response.Error")
	proto.RegisterType((*Rpc_Log)(nil), "anytype.Rpc.Log")
	proto.RegisterType((*Rpc_Log_Send)(nil), "anytype.Rpc.Log.Send")
	proto.RegisterType((*Rpc_Log_Send_Request)(nil), "anytype.Rpc.Log.Send.Request")
	proto.RegisterType((*Rpc_Log_Send_Response)(nil), "anytype.Rpc.Log.Send.Response")
	proto.RegisterType((*Rpc_Log_Send_Response_Error)(nil), "anytype.Rpc.Log.Send.Response.Error")
	proto.RegisterType((*Rpc_Ipfs)(nil), "anytype.Rpc.Ipfs")
	proto.RegisterType((*Rpc_Ipfs_GetFile)(nil), "anytype.Rpc.Ipfs.GetFile")
	proto.RegisterType((*Rpc_Ipfs_GetFile_Request)(nil), "anytype.Rpc.Ipfs.GetFile.Request")
	proto.RegisterType((*Rpc_Ipfs_GetFile_Response)(nil), "anytype.Rpc.Ipfs.GetFile.Response")
	proto.RegisterType((*Rpc_Ipfs_GetFile_Response_Error)(nil), "anytype.Rpc.Ipfs.GetFile.Response.Error")
	proto.RegisterType((*Rpc_Image)(nil), "anytype.Rpc.Image")
	proto.RegisterType((*Rpc_Image_GetBlob)(nil), "anytype.Rpc.Image.GetBlob")
	proto.RegisterType((*Rpc_Image_GetBlob_Request)(nil), "anytype.Rpc.Image.GetBlob.Request")
	proto.RegisterType((*Rpc_Image_GetBlob_Response)(nil), "anytype.Rpc.Image.GetBlob.Response")
	proto.RegisterType((*Rpc_Image_GetBlob_Response_Error)(nil), "anytype.Rpc.Image.GetBlob.Response.Error")
	proto.RegisterType((*Rpc_Image_GetFile)(nil), "anytype.Rpc.Image.GetFile")
	proto.RegisterType((*Rpc_Image_GetFile_Request)(nil), "anytype.Rpc.Image.GetFile.Request")
	proto.RegisterType((*Rpc_Image_GetFile_Response)(nil), "anytype.Rpc.Image.GetFile.Response")
	proto.RegisterType((*Rpc_Image_GetFile_Response_Error)(nil), "anytype.Rpc.Image.GetFile.Response.Error")
}

func init() { proto.RegisterFile("commands.proto", fileDescriptor_0dff099eb2e3dfdb) }

var fileDescriptor_0dff099eb2e3dfdb = []byte{
	// 1508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x5d, 0x6c, 0xdb, 0xd4,
	0x17, 0x6f, 0x9c, 0xa4, 0x69, 0x4f, 0xbb, 0xfe, 0x3d, 0x6b, 0x9b, 0xba, 0xbb, 0xa9, 0xab, 0xba,
	0xff, 0x7f, 0xff, 0xee, 0xcb, 0x9b, 0x0a, 0x3c, 0x30, 0x31, 0x36, 0xc7, 0x71, 0x5a, 0x43, 0x62,
	0x47, 0x37, 0x4e, 0x0b, 0xbc, 0x58, 0xae, 0x7d, 0x9b, 0x06, 0x92, 0x38, 0x38, 0x5e, 0x47, 0xf7,
	0xb6, 0x47, 0xde, 0x10, 0x12, 0x4f, 0x48, 0xc0, 0x23, 0x1f, 0x43, 0xe2, 0x01, 0x69, 0x08, 0x81,
	0x90, 0x00, 0x09, 0x84, 0x40, 0x1a, 0x20, 0x21, 0x5e, 0x40, 0x6c, 0x7b, 0x44, 0xf0, 0x80, 0x84,
	0x78, 0x03, 0xe4, 0x8f, 0x38, 0x76, 0x95, 0x64, 0x76, 0xb5, 0x69, 0x7b, 0xf3, 0xbd, 0x39, 0xf7,
	0x77, 0xce, 0xf9, 0xfd, 0xce, 0xb9, 0x1f, 0x81, 0x19, 0xdd, 0x6c, 0xb5, 0xb4, 0xb6, 0xd1, 0x65,
	0x3b, 0x96, 0x69, 0x9b, 0x4c, 0x4e, 0x6b, 0x6f, 0xdb, 0xdb, 0x1d, 0x82, 0xa6, 0x5b, 0xa6, 0x41,
	0x9a, 0xfe, 0x34, 0xda, 0xa3, 0x6f, 0x6a, 0xed, 0x3a, 0xf1, 0x87, 0x0b, 0x57, 0x4f, 0x41, 0x1a,
	0x77, 0x74, 0xf4, 0x07, 0x40, 0x36, 0xdf, 0x34, 0xf5, 0xe7, 0xd0, 0xdf, 0x14, 0x4c, 0xad, 0x34,
	0xba, 0xb6, 0x69, 0x6d, 0x97, 0xcd, 0x2d, 0x82, 0x74, 0xc8, 0x61, 0xf2, 0xfc, 0x25, 0xd2, 0xb5,
	0x99, 0x19, 0xa0, 0x1a, 0xc6, 0x6c, 0x6a, 0x3e, 0xb5, 0x38, 0x89, 0xa9, 0x86, 0xc1, 0x1c, 0x73,
	0x9c, 0xb6, 0x6d, 0xf2, 0x82, 0xed, 0x2e, 0x15, 0x8d, 0x59, 0xca, 0xfd, 0x6d, 0xc7, 0x2c, 0x33,
	0x0f, 0x53, 0x2d, 0x73, 0x8b, 0x14, 0x4d, 0xeb, 0xb2, 0x66, 0x19, 0xb3, 0xe9, 0xf9, 0xd4, 0xe2,
	0x04, 0x0e, 0x4f, 0xa1, 0x17, 0x29, 0x98, 0xc0, 0xa4, 0xdb, 0x31, 0xdb, 0x5d, 0xc2, 0xf0, 0x90,
	0x25, 0x96, 0x65, 0x5a, 0xae, 0xa7, 0xa9, 0xa5, 0xd3, 0xac, 0x9f, 0x09, 0x8b, 0x3b, 0x3a, 0xeb,
	0x62, 0xb2, 0xa1, 0x00, 0xd9, 0xde, 0x3a, 0x56, 0x70, 0x16, 0x61, 0x6f, 0x2d, 0xba, 0x9e, 0x82,
	0xac, 0x3b, 0xc1, 0x14, 0x21, 0xa3, 0x9b, 0x06, 0x71, 0xd1, 0x66, 0x96, 0x96, 0x12, 0xa1, 0xb1,
	0xbc, 0x69, 0x10, 0xec, 0xae, 0x77, 0xb2, 0x30, 0x48, 0x57, 0xb7, 0x1a, 0x1d, 0xbb, 0x61, 0xb6,
	0xfd, 0x54, 0xc3, 0x53, 0x0b, 0x05, 0xc8, 0x38, 0xf6, 0xcc, 0x04, 0x64, 0xa4, 0x5a, 0xa9, 0x44,
	0x8f, 0x31, 0x7b, 0x61, 0x4f, 0x4d, 0x7a, 0x52, 0x92, 0xd7, 0x24, 0x55, 0xc0, 0x58, 0xc6, 0x74,
	0x8a, 0xd9, 0x03, 0x93, 0x79, 0xae, 0xa0, 0x8a, 0x52, 0xa5, 0xa6, 0xd0, 0x14, 0x43, 0xc3, 0x34,
	0xcf, 0x49, 0xaa, 0x24, 0x2b, 0x6a, 0x59, 0x5e, 0x15, 0xe8, 0x34, 0xfa, 0x9a, 0x82, 0x8c, 0xdc,
	0x21, 0x6d, 0x74, 0x70, 0x28, 0xf3, 0xe8, 0xcd, 0x30, 0x5f, 0x8f, 0x45, 0xf9, 0x3a, 0x36, 0x20,
	0x43, 0x07, 0x6f, 0x30, 0x51, 0xcc, 0x79, 0x98, 0x5a, 0x77, 0x6c, 0x56, 0x88, 0x66, 0x10, 0xcb,
	0x4d, 0x6b, 0x6a, 0xe9, 0x50, 0x80, 0x51, 0x76, 0x8a, 0xa7, 0xc7, 0x93, 0x6b, 0x82, 0xc3, 0xf6,
	0xe8, 0xb5, 0x80, 0xe7, 0x0b, 0x11, 0x9e, 0x4f, 0xc6, 0x8b, 0x22, 0x19, 0xc1, 0x4b, 0xc9, 0x09,
	0x46, 0x37, 0x29, 0x18, 0xe7, 0x2d, 0xa2, 0xd9, 0x04, 0xd5, 0xfb, 0x84, 0x3e, 0x0c, 0x19, 0x27,
	0x38, 0x3f, 0xd8, 0xf9, 0x11, 0xe9, 0xb2, 0xca, 0x76, 0x87, 0x60, 0xd7, 0x3a, 0x6e, 0xc1, 0xa3,
	0xdf, 0x52, 0x21, 0x79, 0x1e, 0x8f, 0xca, 0xb3, 0x38, 0x80, 0x18, 0x2f, 0xbe, 0x21, 0x95, 0xfc,
	0x46, 0xc0, 0x30, 0x17, 0x61, 0xf8, 0x74, 0x5c, 0xa0, 0x7b, 0xcf, 0xf1, 0xfb, 0x14, 0x8c, 0xd7,
	0x3a, 0x86, 0xc3, 0xf1, 0xb9, 0x3e, 0xc7, 0x67, 0x20, 0xe7, 0x6f, 0x36, 0x7e, 0xea, 0xfb, 0x83,
	0x88, 0xdd, 0x68, 0x79, 0xef, 0x47, 0xdc, 0xb3, 0x4a, 0x4c, 0x9b, 0xe7, 0xf2, 0x2e, 0xd0, 0x36,
	0x10, 0xe8, 0xde, 0xd3, 0xf6, 0x4d, 0x16, 0xc6, 0xd7, 0xb4, 0x66, 0x93, 0xd8, 0xe8, 0xe7, 0x7e,
	0x95, 0xfe, 0xaf, 0xcf, 0x20, 0x82, 0x09, 0xcb, 0x34, 0xed, 0x8a, 0x66, 0x6f, 0xfa, 0xcd, 0x1f,
	0x8c, 0xd1, 0xb5, 0xf0, 0x16, 0x70, 0x21, 0x4a, 0xd6, 0xf1, 0x48, 0x8e, 0x9e, 0x8b, 0x91, 0x45,
	0xe6, 0x78, 0x6a, 0xb5, 0x49, 0xcb, 0x6c, 0x37, 0x74, 0x3f, 0xbb, 0x60, 0x8c, 0x3e, 0x0d, 0x98,
	0xcc, 0x47, 0x98, 0x64, 0x63, 0x7b, 0x49, 0x46, 0x65, 0x75, 0x17, 0xdb, 0xe8, 0x11, 0x38, 0x54,
	0xe4, 0xc4, 0x92, 0x50, 0x50, 0x15, 0x59, 0xe5, 0xb1, 0xc0, 0x29, 0x82, 0x5a, 0x92, 0x79, 0xae,
	0xa4, 0x62, 0xa1, 0x22, 0xd3, 0xc4, 0xd9, 0x06, 0x72, 0x98, 0xe8, 0xe6, 0x16, 0xb1, 0x10, 0x17,
	0x8b, 0xe1, 0x91, 0x9c, 0xbc, 0x1c, 0x66, 0xff, 0x62, 0x94, 0xfd, 0x13, 0x83, 0x78, 0xf1, 0x7d,
	0x0f, 0x29, 0xd6, 0xcf, 0x02, 0x8a, 0xf9, 0x08, 0xc5, 0x67, 0xe2, 0x43, 0x3d, 0x00, 0x1c, 0xbf,
	0x3a, 0x0d, 0x39, 0x4e, 0xd7, 0xcd, 0x4b, 0x6d, 0x1b, 0xbd, 0x97, 0x09, 0x0a, 0xfa, 0x72, 0x9f,
	0x6e, 0x06, 0x32, 0x6d, 0xad, 0x45, 0x7c, 0xaa, 0xdd, 0x6f, 0xe6, 0x04, 0xfc, 0x47, 0xdb, 0xd2,
	0x6c, 0xcd, 0x2a, 0x99, 0xba, 0xd6, 0x74, 0x95, 0x70, 0x03, 0x5e, 0x19, 0xc3, 0x3b, 0x7f, 0x60,
	0x16, 0x60, 0xca, 0x9b, 0xe2, 0xcd, 0xa6, 0x69, 0xb9, 0x37, 0x09, 0xc7, 0x2e, 0x3c, 0x99, 0x9f,
	0x80, 0x71, 0x6f, 0x88, 0xae, 0xa5, 0xe3, 0x8a, 0xe4, 0x47, 0x3d, 0xba, 0x47, 0xce, 0x42, 0x4e,
	0xf3, 0xec, 0xfc, 0x53, 0xf2, 0xc0, 0x8e, 0x63, 0xc3, 0x47, 0xc1, 0x3d, 0x33, 0xf4, 0x0e, 0x15,
	0x47, 0xd6, 0x91, 0xce, 0x93, 0xc9, 0xfa, 0x61, 0x6a, 0x17, 0xba, 0x9e, 0x82, 0x45, 0x8e, 0xe7,
	0xe5, 0x9a, 0xa4, 0xf8, 0xaa, 0x16, 0xd4, 0x7c, 0x4d, 0x51, 0xfb, 0x5a, 0x57, 0x15, 0x0e, 0x2b,
	0xaa, 0x24, 0x17, 0x04, 0xda, 0x91, 0xeb, 0xd8, 0x1d, 0xac, 0x05, 0x45, 0x95, 0xb8, 0xb2, 0x40,
	0x6f, 0xc4, 0x40, 0x16, 0x14, 0x95, 0x5b, 0xe5, 0x14, 0x0e, 0xd3, 0x75, 0xf4, 0x79, 0xba, 0xdf,
	0xa2, 0x93, 0x41, 0xcd, 0xa0, 0x77, 0xc3, 0x2a, 0x72, 0x51, 0x15, 0x4f, 0x0e, 0x24, 0x72, 0x74,
	0xaf, 0xfd, 0x14, 0x88, 0x52, 0x88, 0x88, 0x72, 0x36, 0x01, 0x56, 0x32, 0x55, 0x7e, 0xdd, 0x8d,
	0x2a, 0xfb, 0x61, 0xaf, 0x24, 0xab, 0x3e, 0x7d, 0x55, 0xb5, 0x28, 0xd7, 0xa4, 0x02, 0xed, 0x78,
	0x3b, 0x2c, 0x09, 0x1e, 0x79, 0x58, 0xe0, 0xe5, 0x55, 0x01, 0xab, 0x6b, 0x5c, 0xa9, 0x24, 0x28,
	0x6a, 0x51, 0xc4, 0x55, 0x85, 0xde, 0xb8, 0x53, 0x9b, 0xd6, 0x99, 0xa3, 0x70, 0xa4, 0x3f, 0x56,
	0x85, 0xa7, 0xc4, 0xaa, 0x52, 0x75, 0x75, 0xe1, 0x65, 0x8c, 0x6b, 0x15, 0x45, 0x28, 0xd0, 0x9b,
	0xcc, 0x01, 0x60, 0xfa, 0x28, 0xb8, 0x26, 0x79, 0xf2, 0x37, 0x1c, 0xff, 0xbe, 0xbf, 0x9e, 0x7b,
	0xe7, 0xea, 0x5a, 0x11, 0x70, 0x51, 0xc6, 0x65, 0xa1, 0x40, 0x3f, 0x8b, 0x5e, 0xc9, 0xc0, 0x78,
	0x95, 0x34, 0x89, 0x6e, 0xa3, 0x47, 0x86, 0xbf, 0x1d, 0xc2, 0x1b, 0x2f, 0xb5, 0xe3, 0x68, 0xfb,
	0x3e, 0x71, 0xdf, 0x7a, 0xfe, 0xee, 0x5a, 0xdf, 0x7e, 0x97, 0xa8, 0x6f, 0x07, 0x3a, 0x4f, 0x56,
	0x21, 0x37, 0x53, 0xf7, 0x60, 0x3f, 0x8e, 0x23, 0xf4, 0xc6, 0x10, 0xa1, 0xeb, 0x51, 0xf4, 0xa2,
	0x28, 0x15, 0x7a, 0xb5, 0xa8, 0x8a, 0x52, 0x51, 0xa6, 0x37, 0x19, 0x16, 0x4e, 0x84, 0xd0, 0x9d,
	0x2a, 0xf0, 0x3d, 0x70, 0x52, 0x41, 0x2d, 0x4b, 0x42, 0x59, 0x96, 0x44, 0xde, 0x9d, 0xaf, 0x0a,
	0x0a, 0xdd, 0x40, 0x3f, 0x50, 0x90, 0x5b, 0x25, 0x56, 0xb7, 0x61, 0xb6, 0xd1, 0x57, 0x14, 0xa4,
	0x97, 0x89, 0x1d, 0x6e, 0xf3, 0xeb, 0xe1, 0x13, 0xf5, 0x7c, 0x54, 0xf4, 0xff, 0x47, 0x78, 0xf7,
	0x41, 0xd8, 0x65, 0x32, 0x4c, 0xf1, 0x59, 0xc8, 0x6d, 0x79, 0x46, 0x3e, 0xd9, 0xbd, 0x21, 0xfa,
	0x36, 0x38, 0x68, 0x2f, 0x46, 0x94, 0x3d, 0x15, 0xd3, 0x43, 0x32, 0x59, 0x8d, 0x5d, 0xa8, 0xba,
	0x0f, 0xe8, 0x55, 0x01, 0x57, 0x45, 0x59, 0x52, 0xc5, 0xaa, 0x2a, 0x94, 0x2b, 0xca, 0xd3, 0x74,
	0xda, 0x31, 0x72, 0x98, 0xec, 0xed, 0x02, 0x53, 0x90, 0x53, 0xc4, 0xb2, 0x20, 0xd7, 0x14, 0x7a,
	0x03, 0x7d, 0x92, 0x86, 0x74, 0xc9, 0xac, 0xa3, 0xeb, 0x69, 0xc8, 0x54, 0x49, 0xdb, 0x40, 0x6f,
	0xa7, 0xfa, 0x7d, 0x37, 0x0b, 0xb9, 0x16, 0xe9, 0x76, 0xb5, 0x7a, 0xef, 0xd0, 0xed, 0x0d, 0x99,
	0x47, 0x21, 0xdb, 0x24, 0x5b, 0xa4, 0xe9, 0x06, 0x3e, 0xb3, 0x74, 0x34, 0xc2, 0x40, 0xc9, 0xac,
	0xb3, 0x0e, 0x16, 0xeb, 0xe3, 0xb0, 0x25, 0xc7, 0x14, 0x7b, 0x2b, 0x16, 0x9e, 0x80, 0xac, 0x3b,
	0x66, 0x26, 0x21, 0x5b, 0x10, 0xf2, 0xb5, 0x65, 0x7a, 0xcc, 0xf9, 0xec, 0x65, 0x34, 0x09, 0xd9,
	0x22, 0xa7, 0x70, 0x25, 0x9a, 0x72, 0x32, 0x77, 0xcb, 0x25, 0xed, 0x4c, 0x56, 0x38, 0x49, 0xe4,
	0xe9, 0x8c, 0x13, 0xfd, 0x1a, 0x87, 0x25, 0x51, 0x5a, 0xa6, 0xb3, 0xe8, 0x6a, 0x58, 0xf7, 0x73,
	0x51, 0xdd, 0xff, 0x3b, 0x2c, 0xa6, 0x41, 0xfb, 0xfa, 0x07, 0x81, 0xb4, 0xe7, 0x23, 0xd2, 0x1e,
	0x8f, 0x03, 0x92, 0x4c, 0x57, 0x69, 0x17, 0xba, 0x8e, 0x52, 0xf0, 0x2f, 0x0a, 0x32, 0x62, 0x67,
	0xa3, 0x8b, 0x7e, 0xa7, 0x20, 0xb7, 0x4c, 0xec, 0x62, 0xa3, 0x49, 0x46, 0x3d, 0xff, 0xbf, 0xa0,
	0xe2, 0x3e, 0x94, 0x1c, 0x54, 0xd6, 0x47, 0x1c, 0xd2, 0x2c, 0x0c, 0x64, 0x0c, 0xcd, 0xd6, 0xdc,
	0x3c, 0xa7, 0xb1, 0xfb, 0xcd, 0xec, 0x83, 0x6c, 0x8b, 0x18, 0x0d, 0xcd, 0xbb, 0x61, 0x61, 0x6f,
	0x10, 0xdc, 0xde, 0x32, 0xfd, 0xdb, 0x1b, 0xfa, 0x28, 0xd6, 0x33, 0x6b, 0x44, 0x18, 0xf7, 0x97,
	0xf9, 0xab, 0xe3, 0x90, 0x15, 0x5b, 0x5a, 0x9d, 0xa0, 0x3f, 0x3d, 0xea, 0xf3, 0x4d, 0x73, 0x1d,
	0xad, 0x0c, 0x3f, 0xb7, 0x4e, 0x43, 0xa6, 0xdb, 0xb8, 0x42, 0xfc, 0xa6, 0x39, 0xb8, 0xe3, 0x24,
	0x71, 0xa1, 0xd8, 0x6a, 0xe3, 0x0a, 0xc1, 0xae, 0x19, 0x7a, 0x3d, 0xf6, 0x2b, 0xcd, 0x5b, 0xea,
	0x47, 0x30, 0x5c, 0xaa, 0xf5, 0xa6, 0xb9, 0xde, 0x93, 0xca, 0xf9, 0x46, 0x1f, 0xc7, 0x7a, 0x9d,
	0x8d, 0x42, 0xbf, 0xbf, 0x0a, 0xfc, 0x13, 0x2a, 0xf9, 0xbb, 0xc7, 0xfb, 0x5b, 0xc9, 0x79, 0x1f,
	0xd1, 0x22, 0x87, 0x61, 0xb2, 0x19, 0x7d, 0x9c, 0xe0, 0xfe, 0x44, 0x52, 0x05, 0x1e, 0xb4, 0x1e,
	0xc8, 0x1f, 0xfe, 0xf2, 0xd6, 0x5c, 0xea, 0xc6, 0xad, 0xb9, 0xd4, 0x2f, 0xb7, 0xe6, 0x52, 0x2f,
	0xdd, 0x9e, 0x1b, 0xbb, 0x71, 0x7b, 0x6e, 0xec, 0xc7, 0xdb, 0x73, 0x63, 0xcf, 0x50, 0x9d, 0xf5,
	0xf5, 0x71, 0xf7, 0x8f, 0xe2, 0x87, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x6a, 0x54, 0x70,
	0x60, 0x16, 0x00, 0x00,
}

func (m *Rpc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_HistoryMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_HistoryMove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_HistoryMove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_HistoryMove_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_HistoryMove_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_HistoryMove_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MoveForward {
		i--
		if m.MoveForward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContextBlockId) > 0 {
		i -= len(m.ContextBlockId)
		copy(dAtA[i:], m.ContextBlockId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextBlockId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_HistoryMove_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_HistoryMove_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_HistoryMove_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_HistoryMove_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_HistoryMove_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_HistoryMove_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Open) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Open) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Open) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Open_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Open_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Open_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Open_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Open_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Open_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Open_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Open_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Open_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Create) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Create) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Create) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Create_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Create_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Create_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextBlockId) > 0 {
		i -= len(m.ContextBlockId)
		copy(dAtA[i:], m.ContextBlockId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextBlockId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Create_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Create_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Create_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Create_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Create_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Create_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Update) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Update) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Update_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Update_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Update_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Changes != nil {
		{
			size, err := m.Changes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Update_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Update_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Update_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Block_Update_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Block_Update_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Block_Update_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Wallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Wallet_Create) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Wallet_Create) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Wallet_Create) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Wallet_Create_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Wallet_Create_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Wallet_Create_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RootPath) > 0 {
		i -= len(m.RootPath)
		copy(dAtA[i:], m.RootPath)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.RootPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Wallet_Create_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Wallet_Create_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Wallet_Create_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Wallet_Create_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Wallet_Create_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Wallet_Create_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Wallet_Recover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Wallet_Recover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Wallet_Recover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Wallet_Recover_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Wallet_Recover_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Wallet_Recover_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RootPath) > 0 {
		i -= len(m.RootPath)
		copy(dAtA[i:], m.RootPath)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.RootPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Wallet_Recover_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Wallet_Recover_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Wallet_Recover_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Wallet_Recover_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Wallet_Recover_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Wallet_Recover_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Create) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Create) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Create) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Create_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Create_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Create_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Avatar != nil {
		{
			size := m.Avatar.Size()
			i -= size
			if _, err := m.Avatar.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Create_Request_AvatarLocalPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Create_Request_AvatarLocalPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AvatarLocalPath)
	copy(dAtA[i:], m.AvatarLocalPath)
	i = encodeVarintCommands(dAtA, i, uint64(len(m.AvatarLocalPath)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *Rpc_Account_Create_Request_AvatarColor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Create_Request_AvatarColor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AvatarColor)
	copy(dAtA[i:], m.AvatarColor)
	i = encodeVarintCommands(dAtA, i, uint64(len(m.AvatarColor)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Rpc_Account_Create_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Create_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Create_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Create_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Create_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Create_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Recover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Recover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Recover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Recover_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Recover_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Recover_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Recover_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Recover_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Recover_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Recover_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Recover_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Recover_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Select) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Select) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Select) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Select_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Select_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Select_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RootPath) > 0 {
		i -= len(m.RootPath)
		copy(dAtA[i:], m.RootPath)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.RootPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Select_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Select_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Select_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Account_Select_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Account_Select_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Account_Select_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Version) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Version) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Version_Get) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Version_Get) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Version_Get) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Version_Get_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Version_Get_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Version_Get_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Version_Get_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Version_Get_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Version_Get_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Version_Get_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Version_Get_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Version_Get_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Log) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Log) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Log_Send) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Log_Send) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Log_Send) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Log_Send_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Log_Send_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Log_Send_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Log_Send_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Log_Send_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Log_Send_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Log_Send_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Log_Send_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Log_Send_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Ipfs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Ipfs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Ipfs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Ipfs_GetFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Ipfs_GetFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Ipfs_GetFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Ipfs_GetFile_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Ipfs_GetFile_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Ipfs_GetFile_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Ipfs_GetFile_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Ipfs_GetFile_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Ipfs_GetFile_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Media) > 0 {
		i -= len(m.Media)
		copy(dAtA[i:], m.Media)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Media)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Ipfs_GetFile_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Ipfs_GetFile_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Ipfs_GetFile_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Image_GetBlob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Image_GetBlob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Image_GetBlob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Image_GetBlob_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Image_GetBlob_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Image_GetBlob_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Image_GetBlob_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Image_GetBlob_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Image_GetBlob_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blob) > 0 {
		i -= len(m.Blob)
		copy(dAtA[i:], m.Blob)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Blob)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Image_GetBlob_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Image_GetBlob_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Image_GetBlob_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Image_GetFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Image_GetFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Image_GetFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rpc_Image_GetFile_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Image_GetFile_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Image_GetFile_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Image_GetFile_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Image_GetFile_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Image_GetFile_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalPath) > 0 {
		i -= len(m.LocalPath)
		copy(dAtA[i:], m.LocalPath)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.LocalPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rpc_Image_GetFile_Response_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc_Image_GetFile_Response_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc_Image_GetFile_Response_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommands(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommands(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Rpc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Block_HistoryMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Block_HistoryMove_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.ContextBlockId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.MoveForward {
		n += 2
	}
	return n
}

func (m *Rpc_Block_HistoryMove_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Block_HistoryMove_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Block_Open) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Block_Open_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Block_Open_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Block_Open_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Block_Create) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Block_Create_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCommands(uint64(m.Type))
	}
	l = len(m.ContextBlockId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Block_Create_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Block_Create_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Block_Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Block_Update_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Changes != nil {
		l = m.Changes.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Block_Update_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Block_Update_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Wallet_Create) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Wallet_Create_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootPath)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Wallet_Create_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Wallet_Create_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Wallet_Recover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Wallet_Recover_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootPath)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Wallet_Recover_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Wallet_Recover_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Account_Create) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Account_Create_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Avatar != nil {
		n += m.Avatar.Size()
	}
	return n
}

func (m *Rpc_Account_Create_Request_AvatarLocalPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvatarLocalPath)
	n += 1 + l + sovCommands(uint64(l))
	return n
}
func (m *Rpc_Account_Create_Request_AvatarColor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvatarColor)
	n += 1 + l + sovCommands(uint64(l))
	return n
}
func (m *Rpc_Account_Create_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Account_Create_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Account_Recover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Account_Recover_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Account_Recover_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Account_Recover_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Account_Select) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Account_Select_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.RootPath)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Account_Select_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Account_Select_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Version) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Version_Get) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Version_Get_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Version_Get_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Version_Get_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Log) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Log_Send) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Log_Send_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovCommands(uint64(m.Level))
	}
	return n
}

func (m *Rpc_Log_Send_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Log_Send_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Ipfs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Ipfs_GetFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Ipfs_GetFile_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Ipfs_GetFile_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Ipfs_GetFile_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Image_GetBlob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Image_GetBlob_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommands(uint64(m.Size_))
	}
	return n
}

func (m *Rpc_Image_GetBlob_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Blob)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Image_GetBlob_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Image_GetFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rpc_Image_GetFile_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommands(uint64(m.Size_))
	}
	return n
}

func (m *Rpc_Image_GetFile_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.LocalPath)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *Rpc_Image_GetFile_Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func sovCommands(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommands(x uint64) (n int) {
	return sovCommands(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Rpc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rpc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rpc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_HistoryMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_HistoryMove_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextBlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextBlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveForward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MoveForward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_HistoryMove_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Block_HistoryMove_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_HistoryMove_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Block_HistoryMove_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Open) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Open: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Open: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Open_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Open_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Block_Open_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &Model_Block_Header{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Open_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Block_Open_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Create) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Create_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Model_Block_Header_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextBlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextBlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Create_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Block_Create_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Create_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Block_Create_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Update_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Changes == nil {
				m.Changes = &BlockChanges{}
			}
			if err := m.Changes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Update_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Block_Update_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Block_Update_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Block_Update_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Wallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Wallet_Create) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Wallet_Create_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Wallet_Create_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Wallet_Create_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Wallet_Create_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Wallet_Create_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Wallet_Recover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Wallet_Recover_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Wallet_Recover_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Wallet_Recover_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Wallet_Recover_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Wallet_Recover_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Create) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Create_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarLocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = &Rpc_Account_Create_Request_AvatarLocalPath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = &Rpc_Account_Create_Request_AvatarColor{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Create_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Account_Create_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Model_Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Create_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Account_Create_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Recover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Recover_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Recover_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Account_Recover_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Recover_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Account_Recover_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Select) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Select: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Select: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Select_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Select_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Account_Select_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Model_Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Account_Select_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Account_Select_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Version_Get) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Version_Get_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Version_Get_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Version_Get_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Version_Get_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Version_Get_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Log_Send) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Send: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Send: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Log_Send_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Rpc_Log_Send_Request_Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Log_Send_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Log_Send_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Log_Send_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Log_Send_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Ipfs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ipfs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ipfs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Ipfs_GetFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Ipfs_GetFile_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Ipfs_GetFile_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Ipfs_GetFile_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Ipfs_GetFile_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Ipfs_GetFile_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Image_GetBlob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Image_GetBlob_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= Model_Image_Size(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Image_GetBlob_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Image_GetBlob_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blob = append(m.Blob[:0], dAtA[iNdEx:postIndex]...)
			if m.Blob == nil {
				m.Blob = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Image_GetBlob_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Image_GetBlob_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Image_GetFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Image_GetFile_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= Model_Image_Size(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Image_GetFile_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Rpc_Image_GetFile_Response_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rpc_Image_GetFile_Response_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Rpc_Image_GetFile_Response_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommands(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommands
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommands
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommands
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommands        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommands          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommands = fmt.Errorf("proto: unexpected end of group")
)
