// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/protos/commands.proto

package pb

import (
	fmt "fmt"
	model "github.com/anytypeio/go-anytype-library/pb/model"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RpcBlockHistoryMoveResponseErrorCode int32

const (
	RpcBlockHistoryMoveResponseError_NULL          RpcBlockHistoryMoveResponseErrorCode = 0
	RpcBlockHistoryMoveResponseError_UNKNOWN_ERROR RpcBlockHistoryMoveResponseErrorCode = 1
	RpcBlockHistoryMoveResponseError_BAD_INPUT     RpcBlockHistoryMoveResponseErrorCode = 2
	RpcBlockHistoryMoveResponseError_CAN_NOT_MOVE  RpcBlockHistoryMoveResponseErrorCode = 3
)

var RpcBlockHistoryMoveResponseErrorCode_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
	3: "CAN_NOT_MOVE",
}

var RpcBlockHistoryMoveResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"CAN_NOT_MOVE":  3,
}

func (x RpcBlockHistoryMoveResponseErrorCode) String() string {
	return proto.EnumName(RpcBlockHistoryMoveResponseErrorCode_name, int32(x))
}

func (RpcBlockHistoryMoveResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 0, 0, 1, 0, 0}
}

type RpcBlockOpenResponseErrorCode int32

const (
	RpcBlockOpenResponseError_NULL          RpcBlockOpenResponseErrorCode = 0
	RpcBlockOpenResponseError_UNKNOWN_ERROR RpcBlockOpenResponseErrorCode = 1
	RpcBlockOpenResponseError_BAD_INPUT     RpcBlockOpenResponseErrorCode = 2
)

var RpcBlockOpenResponseErrorCode_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var RpcBlockOpenResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x RpcBlockOpenResponseErrorCode) String() string {
	return proto.EnumName(RpcBlockOpenResponseErrorCode_name, int32(x))
}

func (RpcBlockOpenResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 1, 1, 0, 0}
}

type RpcBlockCreateResponseErrorCode int32

const (
	RpcBlockCreateResponseError_NULL          RpcBlockCreateResponseErrorCode = 0
	RpcBlockCreateResponseError_UNKNOWN_ERROR RpcBlockCreateResponseErrorCode = 1
	RpcBlockCreateResponseError_BAD_INPUT     RpcBlockCreateResponseErrorCode = 2
)

var RpcBlockCreateResponseErrorCode_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var RpcBlockCreateResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x RpcBlockCreateResponseErrorCode) String() string {
	return proto.EnumName(RpcBlockCreateResponseErrorCode_name, int32(x))
}

func (RpcBlockCreateResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 2, 1, 0, 0}
}

type RpcBlockUpdateResponseErrorCode int32

const (
	RpcBlockUpdateResponseError_NULL          RpcBlockUpdateResponseErrorCode = 0
	RpcBlockUpdateResponseError_UNKNOWN_ERROR RpcBlockUpdateResponseErrorCode = 1
	RpcBlockUpdateResponseError_BAD_INPUT     RpcBlockUpdateResponseErrorCode = 2
)

var RpcBlockUpdateResponseErrorCode_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var RpcBlockUpdateResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x RpcBlockUpdateResponseErrorCode) String() string {
	return proto.EnumName(RpcBlockUpdateResponseErrorCode_name, int32(x))
}

func (RpcBlockUpdateResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 3, 1, 0, 0}
}

type RpcBlockCloseResponseErrorCode int32

const (
	RpcBlockCloseResponseError_NULL          RpcBlockCloseResponseErrorCode = 0
	RpcBlockCloseResponseError_UNKNOWN_ERROR RpcBlockCloseResponseErrorCode = 1
	RpcBlockCloseResponseError_BAD_INPUT     RpcBlockCloseResponseErrorCode = 2
)

var RpcBlockCloseResponseErrorCode_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var RpcBlockCloseResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x RpcBlockCloseResponseErrorCode) String() string {
	return proto.EnumName(RpcBlockCloseResponseErrorCode_name, int32(x))
}

func (RpcBlockCloseResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 4, 1, 0, 0}
}

type RpcBlockActionMarkSetResponseErrorCode int32

const (
	RpcBlockActionMarkSetResponseError_NULL          RpcBlockActionMarkSetResponseErrorCode = 0
	RpcBlockActionMarkSetResponseError_UNKNOWN_ERROR RpcBlockActionMarkSetResponseErrorCode = 1
	RpcBlockActionMarkSetResponseError_BAD_INPUT     RpcBlockActionMarkSetResponseErrorCode = 2
)

var RpcBlockActionMarkSetResponseErrorCode_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var RpcBlockActionMarkSetResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x RpcBlockActionMarkSetResponseErrorCode) String() string {
	return proto.EnumName(RpcBlockActionMarkSetResponseErrorCode_name, int32(x))
}

func (RpcBlockActionMarkSetResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 0, 1, 0, 0}
}

type RpcBlockActionMarksGetResponseErrorCode int32

const (
	RpcBlockActionMarksGetResponseError_NULL          RpcBlockActionMarksGetResponseErrorCode = 0
	RpcBlockActionMarksGetResponseError_UNKNOWN_ERROR RpcBlockActionMarksGetResponseErrorCode = 1
	RpcBlockActionMarksGetResponseError_BAD_INPUT     RpcBlockActionMarksGetResponseErrorCode = 2
)

var RpcBlockActionMarksGetResponseErrorCode_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var RpcBlockActionMarksGetResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x RpcBlockActionMarksGetResponseErrorCode) String() string {
	return proto.EnumName(RpcBlockActionMarksGetResponseErrorCode_name, int32(x))
}

func (RpcBlockActionMarksGetResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 1, 1, 0, 0}
}

type RpcBlockActionBlocksDropResponseErrorCode int32

const (
	RpcBlockActionBlocksDropResponseError_NULL          RpcBlockActionBlocksDropResponseErrorCode = 0
	RpcBlockActionBlocksDropResponseError_UNKNOWN_ERROR RpcBlockActionBlocksDropResponseErrorCode = 1
	RpcBlockActionBlocksDropResponseError_BAD_INPUT     RpcBlockActionBlocksDropResponseErrorCode = 2
)

var RpcBlockActionBlocksDropResponseErrorCode_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var RpcBlockActionBlocksDropResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x RpcBlockActionBlocksDropResponseErrorCode) String() string {
	return proto.EnumName(RpcBlockActionBlocksDropResponseErrorCode_name, int32(x))
}

func (RpcBlockActionBlocksDropResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 2, 1, 0, 0}
}

type RpcBlockActionContentUploadResponseErrorCode int32

const (
	RpcBlockActionContentUploadResponseError_NULL          RpcBlockActionContentUploadResponseErrorCode = 0
	RpcBlockActionContentUploadResponseError_UNKNOWN_ERROR RpcBlockActionContentUploadResponseErrorCode = 1
	RpcBlockActionContentUploadResponseError_BAD_INPUT     RpcBlockActionContentUploadResponseErrorCode = 2
)

var RpcBlockActionContentUploadResponseErrorCode_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var RpcBlockActionContentUploadResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x RpcBlockActionContentUploadResponseErrorCode) String() string {
	return proto.EnumName(RpcBlockActionContentUploadResponseErrorCode_name, int32(x))
}

func (RpcBlockActionContentUploadResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3, 0, 1, 0, 0}
}

type RpcBlockActionContentDownloadResponseErrorCode int32

const (
	RpcBlockActionContentDownloadResponseError_NULL          RpcBlockActionContentDownloadResponseErrorCode = 0
	RpcBlockActionContentDownloadResponseError_UNKNOWN_ERROR RpcBlockActionContentDownloadResponseErrorCode = 1
	RpcBlockActionContentDownloadResponseError_BAD_INPUT     RpcBlockActionContentDownloadResponseErrorCode = 2
)

var RpcBlockActionContentDownloadResponseErrorCode_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var RpcBlockActionContentDownloadResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x RpcBlockActionContentDownloadResponseErrorCode) String() string {
	return proto.EnumName(RpcBlockActionContentDownloadResponseErrorCode_name, int32(x))
}

func (RpcBlockActionContentDownloadResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3, 1, 1, 0, 0}
}

type RpcWalletCreateResponseErrorCode int32

const (
	RpcWalletCreateResponseError_NULL                        RpcWalletCreateResponseErrorCode = 0
	RpcWalletCreateResponseError_UNKNOWN_ERROR               RpcWalletCreateResponseErrorCode = 1
	RpcWalletCreateResponseError_BAD_INPUT                   RpcWalletCreateResponseErrorCode = 2
	RpcWalletCreateResponseError_FAILED_TO_CREATE_LOCAL_REPO RpcWalletCreateResponseErrorCode = 101
)

var RpcWalletCreateResponseErrorCode_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "FAILED_TO_CREATE_LOCAL_REPO",
}

var RpcWalletCreateResponseErrorCode_value = map[string]int32{
	"NULL":                        0,
	"UNKNOWN_ERROR":               1,
	"BAD_INPUT":                   2,
	"FAILED_TO_CREATE_LOCAL_REPO": 101,
}

func (x RpcWalletCreateResponseErrorCode) String() string {
	return proto.EnumName(RpcWalletCreateResponseErrorCode_name, int32(x))
}

func (RpcWalletCreateResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1, 0, 1, 0, 0}
}

type RpcWalletRecoverResponseErrorCode int32

const (
	RpcWalletRecoverResponseError_NULL                        RpcWalletRecoverResponseErrorCode = 0
	RpcWalletRecoverResponseError_UNKNOWN_ERROR               RpcWalletRecoverResponseErrorCode = 1
	RpcWalletRecoverResponseError_BAD_INPUT                   RpcWalletRecoverResponseErrorCode = 2
	RpcWalletRecoverResponseError_FAILED_TO_CREATE_LOCAL_REPO RpcWalletRecoverResponseErrorCode = 101
)

var RpcWalletRecoverResponseErrorCode_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "FAILED_TO_CREATE_LOCAL_REPO",
}

var RpcWalletRecoverResponseErrorCode_value = map[string]int32{
	"NULL":                        0,
	"UNKNOWN_ERROR":               1,
	"BAD_INPUT":                   2,
	"FAILED_TO_CREATE_LOCAL_REPO": 101,
}

func (x RpcWalletRecoverResponseErrorCode) String() string {
	return proto.EnumName(RpcWalletRecoverResponseErrorCode_name, int32(x))
}

func (RpcWalletRecoverResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1, 1, 1, 0, 0}
}

type RpcAccountCreateResponseErrorCode int32

const (
	RpcAccountCreateResponseError_NULL                                     RpcAccountCreateResponseErrorCode = 0
	RpcAccountCreateResponseError_UNKNOWN_ERROR                            RpcAccountCreateResponseErrorCode = 1
	RpcAccountCreateResponseError_BAD_INPUT                                RpcAccountCreateResponseErrorCode = 2
	RpcAccountCreateResponseError_ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE RpcAccountCreateResponseErrorCode = 101
	RpcAccountCreateResponseError_ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME   RpcAccountCreateResponseErrorCode = 102
	RpcAccountCreateResponseError_ACCOUNT_CREATED_BUT_FAILED_TO_SET_AVATAR RpcAccountCreateResponseErrorCode = 103
)

var RpcAccountCreateResponseErrorCode_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE",
	102: "ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME",
	103: "ACCOUNT_CREATED_BUT_FAILED_TO_SET_AVATAR",
}

var RpcAccountCreateResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE": 101,
	"ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME":   102,
	"ACCOUNT_CREATED_BUT_FAILED_TO_SET_AVATAR": 103,
}

func (x RpcAccountCreateResponseErrorCode) String() string {
	return proto.EnumName(RpcAccountCreateResponseErrorCode_name, int32(x))
}

func (RpcAccountCreateResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 0, 1, 0, 0}
}

type RpcAccountRecoverResponseErrorCode int32

const (
	RpcAccountRecoverResponseError_NULL                            RpcAccountRecoverResponseErrorCode = 0
	RpcAccountRecoverResponseError_UNKNOWN_ERROR                   RpcAccountRecoverResponseErrorCode = 1
	RpcAccountRecoverResponseError_BAD_INPUT                       RpcAccountRecoverResponseErrorCode = 2
	RpcAccountRecoverResponseError_NO_ACCOUNTS_FOUND               RpcAccountRecoverResponseErrorCode = 101
	RpcAccountRecoverResponseError_NEED_TO_RECOVER_WALLET_FIRST    RpcAccountRecoverResponseErrorCode = 102
	RpcAccountRecoverResponseError_FAILED_TO_CREATE_LOCAL_REPO     RpcAccountRecoverResponseErrorCode = 103
	RpcAccountRecoverResponseError_LOCAL_REPO_EXISTS_BUT_CORRUPTED RpcAccountRecoverResponseErrorCode = 104
	RpcAccountRecoverResponseError_FAILED_TO_RUN_NODE              RpcAccountRecoverResponseErrorCode = 105
	RpcAccountRecoverResponseError_WALLET_RECOVER_NOT_PERFORMED    RpcAccountRecoverResponseErrorCode = 106
)

var RpcAccountRecoverResponseErrorCode_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NO_ACCOUNTS_FOUND",
	102: "NEED_TO_RECOVER_WALLET_FIRST",
	103: "FAILED_TO_CREATE_LOCAL_REPO",
	104: "LOCAL_REPO_EXISTS_BUT_CORRUPTED",
	105: "FAILED_TO_RUN_NODE",
	106: "WALLET_RECOVER_NOT_PERFORMED",
}

var RpcAccountRecoverResponseErrorCode_value = map[string]int32{
	"NULL":                            0,
	"UNKNOWN_ERROR":                   1,
	"BAD_INPUT":                       2,
	"NO_ACCOUNTS_FOUND":               101,
	"NEED_TO_RECOVER_WALLET_FIRST":    102,
	"FAILED_TO_CREATE_LOCAL_REPO":     103,
	"LOCAL_REPO_EXISTS_BUT_CORRUPTED": 104,
	"FAILED_TO_RUN_NODE":              105,
	"WALLET_RECOVER_NOT_PERFORMED":    106,
}

func (x RpcAccountRecoverResponseErrorCode) String() string {
	return proto.EnumName(RpcAccountRecoverResponseErrorCode_name, int32(x))
}

func (RpcAccountRecoverResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 1, 1, 0, 0}
}

type RpcAccountSelectResponseErrorCode int32

const (
	RpcAccountSelectResponseError_NULL                                       RpcAccountSelectResponseErrorCode = 0
	RpcAccountSelectResponseError_UNKNOWN_ERROR                              RpcAccountSelectResponseErrorCode = 1
	RpcAccountSelectResponseError_BAD_INPUT                                  RpcAccountSelectResponseErrorCode = 2
	RpcAccountSelectResponseError_FAILED_TO_CREATE_LOCAL_REPO                RpcAccountSelectResponseErrorCode = 101
	RpcAccountSelectResponseError_LOCAL_REPO_EXISTS_BUT_CORRUPTED            RpcAccountSelectResponseErrorCode = 102
	RpcAccountSelectResponseError_FAILED_TO_RUN_NODE                         RpcAccountSelectResponseErrorCode = 103
	RpcAccountSelectResponseError_FAILED_TO_FIND_ACCOUNT_INFO                RpcAccountSelectResponseErrorCode = 104
	RpcAccountSelectResponseError_LOCAL_REPO_NOT_EXISTS_AND_MNEMONIC_NOT_SET RpcAccountSelectResponseErrorCode = 105
)

var RpcAccountSelectResponseErrorCode_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "FAILED_TO_CREATE_LOCAL_REPO",
	102: "LOCAL_REPO_EXISTS_BUT_CORRUPTED",
	103: "FAILED_TO_RUN_NODE",
	104: "FAILED_TO_FIND_ACCOUNT_INFO",
	105: "LOCAL_REPO_NOT_EXISTS_AND_MNEMONIC_NOT_SET",
}

var RpcAccountSelectResponseErrorCode_value = map[string]int32{
	"NULL":                                       0,
	"UNKNOWN_ERROR":                              1,
	"BAD_INPUT":                                  2,
	"FAILED_TO_CREATE_LOCAL_REPO":                101,
	"LOCAL_REPO_EXISTS_BUT_CORRUPTED":            102,
	"FAILED_TO_RUN_NODE":                         103,
	"FAILED_TO_FIND_ACCOUNT_INFO":                104,
	"LOCAL_REPO_NOT_EXISTS_AND_MNEMONIC_NOT_SET": 105,
}

func (x RpcAccountSelectResponseErrorCode) String() string {
	return proto.EnumName(RpcAccountSelectResponseErrorCode_name, int32(x))
}

func (RpcAccountSelectResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 2, 1, 0, 0}
}

type RpcLogSendRequestLevel int32

const (
	RpcLogSendRequest_DEBUG   RpcLogSendRequestLevel = 0
	RpcLogSendRequest_ERROR   RpcLogSendRequestLevel = 1
	RpcLogSendRequest_FATAL   RpcLogSendRequestLevel = 2
	RpcLogSendRequest_INFO    RpcLogSendRequestLevel = 3
	RpcLogSendRequest_PANIC   RpcLogSendRequestLevel = 4
	RpcLogSendRequest_WARNING RpcLogSendRequestLevel = 5
)

var RpcLogSendRequestLevel_name = map[int32]string{
	0: "DEBUG",
	1: "ERROR",
	2: "FATAL",
	3: "INFO",
	4: "PANIC",
	5: "WARNING",
}

var RpcLogSendRequestLevel_value = map[string]int32{
	"DEBUG":   0,
	"ERROR":   1,
	"FATAL":   2,
	"INFO":    3,
	"PANIC":   4,
	"WARNING": 5,
}

func (x RpcLogSendRequestLevel) String() string {
	return proto.EnumName(RpcLogSendRequestLevel_name, int32(x))
}

func (RpcLogSendRequestLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 3, 0, 0, 0}
}

type RpcLogSendResponseErrorCode int32

const (
	RpcLogSendResponseError_NULL          RpcLogSendResponseErrorCode = 0
	RpcLogSendResponseError_UNKNOWN_ERROR RpcLogSendResponseErrorCode = 1
	RpcLogSendResponseError_BAD_INPUT     RpcLogSendResponseErrorCode = 2
	RpcLogSendResponseError_NOT_FOUND     RpcLogSendResponseErrorCode = 101
	RpcLogSendResponseError_TIMEOUT       RpcLogSendResponseErrorCode = 102
)

var RpcLogSendResponseErrorCode_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var RpcLogSendResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x RpcLogSendResponseErrorCode) String() string {
	return proto.EnumName(RpcLogSendResponseErrorCode_name, int32(x))
}

func (RpcLogSendResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 3, 0, 1, 0, 0}
}

type RpcVersionGetResponseErrorCode int32

const (
	RpcVersionGetResponseError_NULL             RpcVersionGetResponseErrorCode = 0
	RpcVersionGetResponseError_UNKNOWN_ERROR    RpcVersionGetResponseErrorCode = 1
	RpcVersionGetResponseError_BAD_INPUT        RpcVersionGetResponseErrorCode = 2
	RpcVersionGetResponseError_VERSION_IS_EMPTY RpcVersionGetResponseErrorCode = 3
	RpcVersionGetResponseError_NOT_FOUND        RpcVersionGetResponseErrorCode = 101
	RpcVersionGetResponseError_TIMEOUT          RpcVersionGetResponseErrorCode = 102
)

var RpcVersionGetResponseErrorCode_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	3:   "VERSION_IS_EMPTY",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var RpcVersionGetResponseErrorCode_value = map[string]int32{
	"NULL":             0,
	"UNKNOWN_ERROR":    1,
	"BAD_INPUT":        2,
	"VERSION_IS_EMPTY": 3,
	"NOT_FOUND":        101,
	"TIMEOUT":          102,
}

func (x RpcVersionGetResponseErrorCode) String() string {
	return proto.EnumName(RpcVersionGetResponseErrorCode_name, int32(x))
}

func (RpcVersionGetResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 4, 0, 1, 0, 0}
}

type RpcIpfsFileGetResponseErrorCode int32

const (
	RpcIpfsFileGetResponseError_NULL          RpcIpfsFileGetResponseErrorCode = 0
	RpcIpfsFileGetResponseError_UNKNOWN_ERROR RpcIpfsFileGetResponseErrorCode = 1
	RpcIpfsFileGetResponseError_BAD_INPUT     RpcIpfsFileGetResponseErrorCode = 2
	RpcIpfsFileGetResponseError_NOT_FOUND     RpcIpfsFileGetResponseErrorCode = 101
	RpcIpfsFileGetResponseError_TIMEOUT       RpcIpfsFileGetResponseErrorCode = 102
)

var RpcIpfsFileGetResponseErrorCode_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var RpcIpfsFileGetResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x RpcIpfsFileGetResponseErrorCode) String() string {
	return proto.EnumName(RpcIpfsFileGetResponseErrorCode_name, int32(x))
}

func (RpcIpfsFileGetResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 0, 0, 1, 0, 0}
}

type RpcIpfsImageGetBlobResponseErrorCode int32

const (
	RpcIpfsImageGetBlobResponseError_NULL          RpcIpfsImageGetBlobResponseErrorCode = 0
	RpcIpfsImageGetBlobResponseError_UNKNOWN_ERROR RpcIpfsImageGetBlobResponseErrorCode = 1
	RpcIpfsImageGetBlobResponseError_BAD_INPUT     RpcIpfsImageGetBlobResponseErrorCode = 2
	RpcIpfsImageGetBlobResponseError_NOT_FOUND     RpcIpfsImageGetBlobResponseErrorCode = 101
	RpcIpfsImageGetBlobResponseError_TIMEOUT       RpcIpfsImageGetBlobResponseErrorCode = 102
)

var RpcIpfsImageGetBlobResponseErrorCode_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var RpcIpfsImageGetBlobResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x RpcIpfsImageGetBlobResponseErrorCode) String() string {
	return proto.EnumName(RpcIpfsImageGetBlobResponseErrorCode_name, int32(x))
}

func (RpcIpfsImageGetBlobResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0, 0, 1, 0, 0}
}

type RpcIpfsImageGetFileResponseErrorCode int32

const (
	RpcIpfsImageGetFileResponseError_NULL          RpcIpfsImageGetFileResponseErrorCode = 0
	RpcIpfsImageGetFileResponseError_UNKNOWN_ERROR RpcIpfsImageGetFileResponseErrorCode = 1
	RpcIpfsImageGetFileResponseError_BAD_INPUT     RpcIpfsImageGetFileResponseErrorCode = 2
	RpcIpfsImageGetFileResponseError_NOT_FOUND     RpcIpfsImageGetFileResponseErrorCode = 101
	RpcIpfsImageGetFileResponseError_TIMEOUT       RpcIpfsImageGetFileResponseErrorCode = 102
)

var RpcIpfsImageGetFileResponseErrorCode_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var RpcIpfsImageGetFileResponseErrorCode_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x RpcIpfsImageGetFileResponseErrorCode) String() string {
	return proto.EnumName(RpcIpfsImageGetFileResponseErrorCode_name, int32(x))
}

func (RpcIpfsImageGetFileResponseErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0, 1, 1, 0, 0}
}

//
// Rpc is a namespace, that agregates all of the service commands between client and middleware.
// Structure: Topic > Subtopic > Subsub... > Action > (Request, Response).
// Request – message from a client.
// Response – message from a middleware.
type Rpc struct {
}

func (m *Rpc) Reset()         { *m = Rpc{} }
func (m *Rpc) String() string { return proto.CompactTextString(m) }
func (*Rpc) ProtoMessage()    {}
func (*Rpc) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0}
}
func (m *Rpc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rpc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rpc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rpc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rpc.Merge(m, src)
}
func (m *Rpc) XXX_Size() int {
	return m.Size()
}
func (m *Rpc) XXX_DiscardUnknown() {
	xxx_messageInfo_Rpc.DiscardUnknown(m)
}

var xxx_messageInfo_Rpc proto.InternalMessageInfo

//
// Namespace, that agregates subtopics and actions, that relates to blocks.
type RpcBlock struct {
}

func (m *RpcBlock) Reset()         { *m = RpcBlock{} }
func (m *RpcBlock) String() string { return proto.CompactTextString(m) }
func (*RpcBlock) ProtoMessage()    {}
func (*RpcBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0}
}
func (m *RpcBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlock.Merge(m, src)
}
func (m *RpcBlock) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlock.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlock proto.InternalMessageInfo

//
// Block history: switch between versions (lib context: switch block head), move forward or backward
// **Example scenario**
// 1. User -> MacOS Front: CMD+Z
// 2. Front -> MW: Rpc.Block.History.Move.Request(blockId, false)
// 3. MW -> Lib: ?? TODO
// 4. Lib: switches current block header to a previous one
// 5. Lib -> MW: prev version of block
// 6. MW -> Front: BlockShow(block.prevVersion)
type RpcBlockHistory struct {
}

func (m *RpcBlockHistory) Reset()         { *m = RpcBlockHistory{} }
func (m *RpcBlockHistory) String() string { return proto.CompactTextString(m) }
func (*RpcBlockHistory) ProtoMessage()    {}
func (*RpcBlockHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 0}
}
func (m *RpcBlockHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockHistory.Merge(m, src)
}
func (m *RpcBlockHistory) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockHistory.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockHistory proto.InternalMessageInfo

type RpcBlockHistoryMove struct {
}

func (m *RpcBlockHistoryMove) Reset()         { *m = RpcBlockHistoryMove{} }
func (m *RpcBlockHistoryMove) String() string { return proto.CompactTextString(m) }
func (*RpcBlockHistoryMove) ProtoMessage()    {}
func (*RpcBlockHistoryMove) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 0, 0}
}
func (m *RpcBlockHistoryMove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockHistoryMove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockHistoryMove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockHistoryMove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockHistoryMove.Merge(m, src)
}
func (m *RpcBlockHistoryMove) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockHistoryMove) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockHistoryMove.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockHistoryMove proto.InternalMessageInfo

type RpcBlockHistoryMoveRequest struct {
	BlockId     string `protobuf:"bytes,1,opt,name=blockId,proto3" json:"blockId,omitempty"`
	MoveForward bool   `protobuf:"varint,2,opt,name=moveForward,proto3" json:"moveForward,omitempty"`
	ContextId   string `protobuf:"bytes,3,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (m *RpcBlockHistoryMoveRequest) Reset()         { *m = RpcBlockHistoryMoveRequest{} }
func (m *RpcBlockHistoryMoveRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBlockHistoryMoveRequest) ProtoMessage()    {}
func (*RpcBlockHistoryMoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 0, 0, 0}
}
func (m *RpcBlockHistoryMoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockHistoryMoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockHistoryMoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockHistoryMoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockHistoryMoveRequest.Merge(m, src)
}
func (m *RpcBlockHistoryMoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockHistoryMoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockHistoryMoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockHistoryMoveRequest proto.InternalMessageInfo

func (m *RpcBlockHistoryMoveRequest) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

func (m *RpcBlockHistoryMoveRequest) GetMoveForward() bool {
	if m != nil {
		return m.MoveForward
	}
	return false
}

func (m *RpcBlockHistoryMoveRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type RpcBlockHistoryMoveResponse struct {
	Error *RpcBlockHistoryMoveResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcBlockHistoryMoveResponse) Reset()         { *m = RpcBlockHistoryMoveResponse{} }
func (m *RpcBlockHistoryMoveResponse) String() string { return proto.CompactTextString(m) }
func (*RpcBlockHistoryMoveResponse) ProtoMessage()    {}
func (*RpcBlockHistoryMoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 0, 0, 1}
}
func (m *RpcBlockHistoryMoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockHistoryMoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockHistoryMoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockHistoryMoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockHistoryMoveResponse.Merge(m, src)
}
func (m *RpcBlockHistoryMoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockHistoryMoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockHistoryMoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockHistoryMoveResponse proto.InternalMessageInfo

func (m *RpcBlockHistoryMoveResponse) GetError() *RpcBlockHistoryMoveResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcBlockHistoryMoveResponseError struct {
	Code        RpcBlockHistoryMoveResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcBlockHistoryMoveResponseErrorCode" json:"code,omitempty"`
	Description string                               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcBlockHistoryMoveResponseError) Reset()         { *m = RpcBlockHistoryMoveResponseError{} }
func (m *RpcBlockHistoryMoveResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcBlockHistoryMoveResponseError) ProtoMessage()    {}
func (*RpcBlockHistoryMoveResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 0, 0, 1, 0}
}
func (m *RpcBlockHistoryMoveResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockHistoryMoveResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockHistoryMoveResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockHistoryMoveResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockHistoryMoveResponseError.Merge(m, src)
}
func (m *RpcBlockHistoryMoveResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockHistoryMoveResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockHistoryMoveResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockHistoryMoveResponseError proto.InternalMessageInfo

func (m *RpcBlockHistoryMoveResponseError) GetCode() RpcBlockHistoryMoveResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcBlockHistoryMoveResponseError_NULL
}

func (m *RpcBlockHistoryMoveResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
// Works with a smart blocks (block-organizers, like page, dashboard etc)
// **Example scenario**
// 1A. On front-end start.
//     1. Front -> MW: Rpc.Block.Open.Request(dashboard.id)
//     2. MW -> Front: BlockShow(dashboard)
//     3. MW -> Front: Rpc.Block.Open.Response(err)
// 1B. User clicks on a page icon on the dashboard.
//     1. Front -> MW: Rpc.Block.Close.Request(dashboard.id)
// Get close response first, then open request:
//     2. MW -> Front: Rpc.Block.Close.Response(err)
//     3. Front -> MW: Rpc.Block.Open.Request(page.id)
//     4. MW -> Front: BlockShow(<page, blocks>)
//     5. MW -> Front: Rpc.Block.Open.Response(err)
// Image/Video/File blocks then:
//     6. MW -> Front: BlockShow(<blocks>)
type RpcBlockOpen struct {
}

func (m *RpcBlockOpen) Reset()         { *m = RpcBlockOpen{} }
func (m *RpcBlockOpen) String() string { return proto.CompactTextString(m) }
func (*RpcBlockOpen) ProtoMessage()    {}
func (*RpcBlockOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 1}
}
func (m *RpcBlockOpen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockOpen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockOpen.Merge(m, src)
}
func (m *RpcBlockOpen) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockOpen.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockOpen proto.InternalMessageInfo

type RpcBlockOpenRequest struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ContextId string `protobuf:"bytes,2,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (m *RpcBlockOpenRequest) Reset()         { *m = RpcBlockOpenRequest{} }
func (m *RpcBlockOpenRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBlockOpenRequest) ProtoMessage()    {}
func (*RpcBlockOpenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 1, 0}
}
func (m *RpcBlockOpenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockOpenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockOpenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockOpenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockOpenRequest.Merge(m, src)
}
func (m *RpcBlockOpenRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockOpenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockOpenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockOpenRequest proto.InternalMessageInfo

func (m *RpcBlockOpenRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RpcBlockOpenRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type RpcBlockOpenResponse struct {
	Error *RpcBlockOpenResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcBlockOpenResponse) Reset()         { *m = RpcBlockOpenResponse{} }
func (m *RpcBlockOpenResponse) String() string { return proto.CompactTextString(m) }
func (*RpcBlockOpenResponse) ProtoMessage()    {}
func (*RpcBlockOpenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 1, 1}
}
func (m *RpcBlockOpenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockOpenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockOpenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockOpenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockOpenResponse.Merge(m, src)
}
func (m *RpcBlockOpenResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockOpenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockOpenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockOpenResponse proto.InternalMessageInfo

func (m *RpcBlockOpenResponse) GetError() *RpcBlockOpenResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcBlockOpenResponseError struct {
	Code        RpcBlockOpenResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcBlockOpenResponseErrorCode" json:"code,omitempty"`
	Description string                        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcBlockOpenResponseError) Reset()         { *m = RpcBlockOpenResponseError{} }
func (m *RpcBlockOpenResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcBlockOpenResponseError) ProtoMessage()    {}
func (*RpcBlockOpenResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 1, 1, 0}
}
func (m *RpcBlockOpenResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockOpenResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockOpenResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockOpenResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockOpenResponseError.Merge(m, src)
}
func (m *RpcBlockOpenResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockOpenResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockOpenResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockOpenResponseError proto.InternalMessageInfo

func (m *RpcBlockOpenResponseError) GetCode() RpcBlockOpenResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcBlockOpenResponseError_NULL
}

func (m *RpcBlockOpenResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
// Create a Smart/Internal block. Request can contain a block with a content, or it can be an empty block with a specific block.content.
// **Example scenario**
// 1A. Create Page on a dashboard
//     1. Front -> MW: Rpc.Block.Create.Request(targetId:dashboard.id, position:after, block: emtpy block with page content and id = "")
//     2. Front -> MW: Rpc.Block.Close.Request(block: dashboard.id)
//     3. Front <- MW: Rpc.Block.Close.Response(err)
//     4. Front <- MW: Rpc.Block.Create.Response(page.id)
//     5. Front <- MW: Rpc.Block.Open.Response(err)
//     6. Front <- MW: Event.Block.Show(page)
// 1B. Create Page on a Page
//     1. Front -> MW: Rpc.Block.Create.Request(targetId:dashboard.id, position:after, block: emtpy block with page content and id = "")
//     2. Front <- MW: Rpc.Block.Create.Response(newPage.id)
//     3. Front <- MW: Event.Block.Show(newPage)
type RpcBlockCreate struct {
}

func (m *RpcBlockCreate) Reset()         { *m = RpcBlockCreate{} }
func (m *RpcBlockCreate) String() string { return proto.CompactTextString(m) }
func (*RpcBlockCreate) ProtoMessage()    {}
func (*RpcBlockCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 2}
}
func (m *RpcBlockCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockCreate.Merge(m, src)
}
func (m *RpcBlockCreate) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockCreate.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockCreate proto.InternalMessageInfo

type RpcBlockCreateRequest struct {
	Block     *model.Block        `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	TargetId  string              `protobuf:"bytes,2,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Position  model.BlockPosition `protobuf:"varint,3,opt,name=position,proto3,enum=anytype.model.BlockPosition" json:"position,omitempty"`
	ContextId string              `protobuf:"bytes,4,opt,name=contextId,proto3" json:"contextId,omitempty"`
	ParentId  string              `protobuf:"bytes,5,opt,name=parentId,proto3" json:"parentId,omitempty"`
}

func (m *RpcBlockCreateRequest) Reset()         { *m = RpcBlockCreateRequest{} }
func (m *RpcBlockCreateRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBlockCreateRequest) ProtoMessage()    {}
func (*RpcBlockCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 2, 0}
}
func (m *RpcBlockCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockCreateRequest.Merge(m, src)
}
func (m *RpcBlockCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockCreateRequest proto.InternalMessageInfo

func (m *RpcBlockCreateRequest) GetBlock() *model.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *RpcBlockCreateRequest) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *RpcBlockCreateRequest) GetPosition() model.BlockPosition {
	if m != nil {
		return m.Position
	}
	return model.Block_Before
}

func (m *RpcBlockCreateRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

func (m *RpcBlockCreateRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

type RpcBlockCreateResponse struct {
	Error   *RpcBlockCreateResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	BlockId string                       `protobuf:"bytes,2,opt,name=blockId,proto3" json:"blockId,omitempty"`
}

func (m *RpcBlockCreateResponse) Reset()         { *m = RpcBlockCreateResponse{} }
func (m *RpcBlockCreateResponse) String() string { return proto.CompactTextString(m) }
func (*RpcBlockCreateResponse) ProtoMessage()    {}
func (*RpcBlockCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 2, 1}
}
func (m *RpcBlockCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockCreateResponse.Merge(m, src)
}
func (m *RpcBlockCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockCreateResponse proto.InternalMessageInfo

func (m *RpcBlockCreateResponse) GetError() *RpcBlockCreateResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RpcBlockCreateResponse) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

type RpcBlockCreateResponseError struct {
	Code        RpcBlockCreateResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcBlockCreateResponseErrorCode" json:"code,omitempty"`
	Description string                          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcBlockCreateResponseError) Reset()         { *m = RpcBlockCreateResponseError{} }
func (m *RpcBlockCreateResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcBlockCreateResponseError) ProtoMessage()    {}
func (*RpcBlockCreateResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 2, 1, 0}
}
func (m *RpcBlockCreateResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockCreateResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockCreateResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockCreateResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockCreateResponseError.Merge(m, src)
}
func (m *RpcBlockCreateResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockCreateResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockCreateResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockCreateResponseError proto.InternalMessageInfo

func (m *RpcBlockCreateResponseError) GetCode() RpcBlockCreateResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcBlockCreateResponseError_NULL
}

func (m *RpcBlockCreateResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
// Update a Smart/Internal block. Request can contain a content/field/permission/children update
// **Example scenarios**
// Case A. Update text block on page
// 1. TODO
// Case B. Update page on dashboard
// 1. TODO
// Case C. Update page on page
// 1. TODO
// Case D. Update page permission on a dashboard
// 1. TODO
// Case E. Update page children of the same page
// 1. TODO
// Case F. Update children of a layout block on a page
// 1. TODO
type RpcBlockUpdate struct {
}

func (m *RpcBlockUpdate) Reset()         { *m = RpcBlockUpdate{} }
func (m *RpcBlockUpdate) String() string { return proto.CompactTextString(m) }
func (*RpcBlockUpdate) ProtoMessage()    {}
func (*RpcBlockUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 3}
}
func (m *RpcBlockUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockUpdate.Merge(m, src)
}
func (m *RpcBlockUpdate) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockUpdate proto.InternalMessageInfo

type RpcBlockUpdateRequest struct {
	Changes   *ChangeMultipleBlocksList `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
	ContextId string                    `protobuf:"bytes,2,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (m *RpcBlockUpdateRequest) Reset()         { *m = RpcBlockUpdateRequest{} }
func (m *RpcBlockUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBlockUpdateRequest) ProtoMessage()    {}
func (*RpcBlockUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 3, 0}
}
func (m *RpcBlockUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockUpdateRequest.Merge(m, src)
}
func (m *RpcBlockUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockUpdateRequest proto.InternalMessageInfo

func (m *RpcBlockUpdateRequest) GetChanges() *ChangeMultipleBlocksList {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *RpcBlockUpdateRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type RpcBlockUpdateResponse struct {
	Error *RpcBlockUpdateResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcBlockUpdateResponse) Reset()         { *m = RpcBlockUpdateResponse{} }
func (m *RpcBlockUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*RpcBlockUpdateResponse) ProtoMessage()    {}
func (*RpcBlockUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 3, 1}
}
func (m *RpcBlockUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockUpdateResponse.Merge(m, src)
}
func (m *RpcBlockUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockUpdateResponse proto.InternalMessageInfo

func (m *RpcBlockUpdateResponse) GetError() *RpcBlockUpdateResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcBlockUpdateResponseError struct {
	Code        RpcBlockUpdateResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcBlockUpdateResponseErrorCode" json:"code,omitempty"`
	Description string                          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcBlockUpdateResponseError) Reset()         { *m = RpcBlockUpdateResponseError{} }
func (m *RpcBlockUpdateResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcBlockUpdateResponseError) ProtoMessage()    {}
func (*RpcBlockUpdateResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 3, 1, 0}
}
func (m *RpcBlockUpdateResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockUpdateResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockUpdateResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockUpdateResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockUpdateResponseError.Merge(m, src)
}
func (m *RpcBlockUpdateResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockUpdateResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockUpdateResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockUpdateResponseError proto.InternalMessageInfo

func (m *RpcBlockUpdateResponseError) GetCode() RpcBlockUpdateResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcBlockUpdateResponseError_NULL
}

func (m *RpcBlockUpdateResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
// Block.Close – it means unsubscribe from a block.
// Precondition: block should be opened.
type RpcBlockClose struct {
}

func (m *RpcBlockClose) Reset()         { *m = RpcBlockClose{} }
func (m *RpcBlockClose) String() string { return proto.CompactTextString(m) }
func (*RpcBlockClose) ProtoMessage()    {}
func (*RpcBlockClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 4}
}
func (m *RpcBlockClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockClose.Merge(m, src)
}
func (m *RpcBlockClose) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockClose) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockClose.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockClose proto.InternalMessageInfo

type RpcBlockCloseRequest struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ContextId string `protobuf:"bytes,2,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (m *RpcBlockCloseRequest) Reset()         { *m = RpcBlockCloseRequest{} }
func (m *RpcBlockCloseRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBlockCloseRequest) ProtoMessage()    {}
func (*RpcBlockCloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 4, 0}
}
func (m *RpcBlockCloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockCloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockCloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockCloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockCloseRequest.Merge(m, src)
}
func (m *RpcBlockCloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockCloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockCloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockCloseRequest proto.InternalMessageInfo

func (m *RpcBlockCloseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RpcBlockCloseRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type RpcBlockCloseResponse struct {
	Error *RpcBlockCloseResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcBlockCloseResponse) Reset()         { *m = RpcBlockCloseResponse{} }
func (m *RpcBlockCloseResponse) String() string { return proto.CompactTextString(m) }
func (*RpcBlockCloseResponse) ProtoMessage()    {}
func (*RpcBlockCloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 4, 1}
}
func (m *RpcBlockCloseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockCloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockCloseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockCloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockCloseResponse.Merge(m, src)
}
func (m *RpcBlockCloseResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockCloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockCloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockCloseResponse proto.InternalMessageInfo

func (m *RpcBlockCloseResponse) GetError() *RpcBlockCloseResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcBlockCloseResponseError struct {
	Code        RpcBlockCloseResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcBlockCloseResponseErrorCode" json:"code,omitempty"`
	Description string                         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcBlockCloseResponseError) Reset()         { *m = RpcBlockCloseResponseError{} }
func (m *RpcBlockCloseResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcBlockCloseResponseError) ProtoMessage()    {}
func (*RpcBlockCloseResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 4, 1, 0}
}
func (m *RpcBlockCloseResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockCloseResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockCloseResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockCloseResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockCloseResponseError.Merge(m, src)
}
func (m *RpcBlockCloseResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockCloseResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockCloseResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockCloseResponseError proto.InternalMessageInfo

func (m *RpcBlockCloseResponseError) GetCode() RpcBlockCloseResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcBlockCloseResponseError_NULL
}

func (m *RpcBlockCloseResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RpcBlockAction struct {
}

func (m *RpcBlockAction) Reset()         { *m = RpcBlockAction{} }
func (m *RpcBlockAction) String() string { return proto.CompactTextString(m) }
func (*RpcBlockAction) ProtoMessage()    {}
func (*RpcBlockAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5}
}
func (m *RpcBlockAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockAction.Merge(m, src)
}
func (m *RpcBlockAction) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockAction) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockAction.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockAction proto.InternalMessageInfo

//
// Set mark to the selected range in the text block.
type RpcBlockActionMarkSet struct {
}

func (m *RpcBlockActionMarkSet) Reset()         { *m = RpcBlockActionMarkSet{} }
func (m *RpcBlockActionMarkSet) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionMarkSet) ProtoMessage()    {}
func (*RpcBlockActionMarkSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 0}
}
func (m *RpcBlockActionMarkSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionMarkSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionMarkSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionMarkSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionMarkSet.Merge(m, src)
}
func (m *RpcBlockActionMarkSet) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionMarkSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionMarkSet.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionMarkSet proto.InternalMessageInfo

type RpcBlockActionMarkSetRequest struct {
	ContextId string                         `protobuf:"bytes,1,opt,name=contextId,proto3" json:"contextId,omitempty"`
	TargetId  string                         `protobuf:"bytes,2,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Range     *model.Range                   `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	Type      model.BlockContentTextMarkType `protobuf:"varint,4,opt,name=type,proto3,enum=anytype.model.BlockContentTextMarkType" json:"type,omitempty"`
}

func (m *RpcBlockActionMarkSetRequest) Reset()         { *m = RpcBlockActionMarkSetRequest{} }
func (m *RpcBlockActionMarkSetRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionMarkSetRequest) ProtoMessage()    {}
func (*RpcBlockActionMarkSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 0, 0}
}
func (m *RpcBlockActionMarkSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionMarkSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionMarkSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionMarkSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionMarkSetRequest.Merge(m, src)
}
func (m *RpcBlockActionMarkSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionMarkSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionMarkSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionMarkSetRequest proto.InternalMessageInfo

func (m *RpcBlockActionMarkSetRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

func (m *RpcBlockActionMarkSetRequest) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *RpcBlockActionMarkSetRequest) GetRange() *model.Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *RpcBlockActionMarkSetRequest) GetType() model.BlockContentTextMarkType {
	if m != nil {
		return m.Type
	}
	return model.BlockContentTextMark_Strikethrough
}

type RpcBlockActionMarkSetResponse struct {
	Error *RpcBlockActionMarkSetResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcBlockActionMarkSetResponse) Reset()         { *m = RpcBlockActionMarkSetResponse{} }
func (m *RpcBlockActionMarkSetResponse) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionMarkSetResponse) ProtoMessage()    {}
func (*RpcBlockActionMarkSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 0, 1}
}
func (m *RpcBlockActionMarkSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionMarkSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionMarkSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionMarkSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionMarkSetResponse.Merge(m, src)
}
func (m *RpcBlockActionMarkSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionMarkSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionMarkSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionMarkSetResponse proto.InternalMessageInfo

func (m *RpcBlockActionMarkSetResponse) GetError() *RpcBlockActionMarkSetResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcBlockActionMarkSetResponseError struct {
	Code        RpcBlockActionMarkSetResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcBlockActionMarkSetResponseErrorCode" json:"code,omitempty"`
	Description string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcBlockActionMarkSetResponseError) Reset()         { *m = RpcBlockActionMarkSetResponseError{} }
func (m *RpcBlockActionMarkSetResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionMarkSetResponseError) ProtoMessage()    {}
func (*RpcBlockActionMarkSetResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 0, 1, 0}
}
func (m *RpcBlockActionMarkSetResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionMarkSetResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionMarkSetResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionMarkSetResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionMarkSetResponseError.Merge(m, src)
}
func (m *RpcBlockActionMarkSetResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionMarkSetResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionMarkSetResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionMarkSetResponseError proto.InternalMessageInfo

func (m *RpcBlockActionMarkSetResponseError) GetCode() RpcBlockActionMarkSetResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcBlockActionMarkSetResponseError_NULL
}

func (m *RpcBlockActionMarkSetResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
// Get marks list in the selected range in text block.
type RpcBlockActionMarksGet struct {
}

func (m *RpcBlockActionMarksGet) Reset()         { *m = RpcBlockActionMarksGet{} }
func (m *RpcBlockActionMarksGet) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionMarksGet) ProtoMessage()    {}
func (*RpcBlockActionMarksGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 1}
}
func (m *RpcBlockActionMarksGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionMarksGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionMarksGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionMarksGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionMarksGet.Merge(m, src)
}
func (m *RpcBlockActionMarksGet) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionMarksGet) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionMarksGet.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionMarksGet proto.InternalMessageInfo

type RpcBlockActionMarksGetRequest struct {
	ContextId string       `protobuf:"bytes,1,opt,name=contextId,proto3" json:"contextId,omitempty"`
	TargetId  string       `protobuf:"bytes,2,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Range     *model.Range `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
}

func (m *RpcBlockActionMarksGetRequest) Reset()         { *m = RpcBlockActionMarksGetRequest{} }
func (m *RpcBlockActionMarksGetRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionMarksGetRequest) ProtoMessage()    {}
func (*RpcBlockActionMarksGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 1, 0}
}
func (m *RpcBlockActionMarksGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionMarksGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionMarksGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionMarksGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionMarksGetRequest.Merge(m, src)
}
func (m *RpcBlockActionMarksGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionMarksGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionMarksGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionMarksGetRequest proto.InternalMessageInfo

func (m *RpcBlockActionMarksGetRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

func (m *RpcBlockActionMarksGetRequest) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *RpcBlockActionMarksGetRequest) GetRange() *model.Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type RpcBlockActionMarksGetResponse struct {
	Error *RpcBlockActionMarksGetResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcBlockActionMarksGetResponse) Reset()         { *m = RpcBlockActionMarksGetResponse{} }
func (m *RpcBlockActionMarksGetResponse) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionMarksGetResponse) ProtoMessage()    {}
func (*RpcBlockActionMarksGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 1, 1}
}
func (m *RpcBlockActionMarksGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionMarksGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionMarksGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionMarksGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionMarksGetResponse.Merge(m, src)
}
func (m *RpcBlockActionMarksGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionMarksGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionMarksGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionMarksGetResponse proto.InternalMessageInfo

func (m *RpcBlockActionMarksGetResponse) GetError() *RpcBlockActionMarksGetResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcBlockActionMarksGetResponseError struct {
	Code        RpcBlockActionMarksGetResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcBlockActionMarksGetResponseErrorCode" json:"code,omitempty"`
	Description string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcBlockActionMarksGetResponseError) Reset()         { *m = RpcBlockActionMarksGetResponseError{} }
func (m *RpcBlockActionMarksGetResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionMarksGetResponseError) ProtoMessage()    {}
func (*RpcBlockActionMarksGetResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 1, 1, 0}
}
func (m *RpcBlockActionMarksGetResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionMarksGetResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionMarksGetResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionMarksGetResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionMarksGetResponseError.Merge(m, src)
}
func (m *RpcBlockActionMarksGetResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionMarksGetResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionMarksGetResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionMarksGetResponseError proto.InternalMessageInfo

func (m *RpcBlockActionMarksGetResponseError) GetCode() RpcBlockActionMarksGetResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcBlockActionMarksGetResponseError_NULL
}

func (m *RpcBlockActionMarksGetResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RpcBlockActionBlocksDrop struct {
}

func (m *RpcBlockActionBlocksDrop) Reset()         { *m = RpcBlockActionBlocksDrop{} }
func (m *RpcBlockActionBlocksDrop) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionBlocksDrop) ProtoMessage()    {}
func (*RpcBlockActionBlocksDrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 2}
}
func (m *RpcBlockActionBlocksDrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionBlocksDrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionBlocksDrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionBlocksDrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionBlocksDrop.Merge(m, src)
}
func (m *RpcBlockActionBlocksDrop) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionBlocksDrop) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionBlocksDrop.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionBlocksDrop proto.InternalMessageInfo

type RpcBlockActionBlocksDropRequest struct {
	ContextId string              `protobuf:"bytes,1,opt,name=contextId,proto3" json:"contextId,omitempty"`
	TargetId  string              `protobuf:"bytes,2,opt,name=targetId,proto3" json:"targetId,omitempty"`
	BlocksId  []string            `protobuf:"bytes,3,rep,name=blocksId,proto3" json:"blocksId,omitempty"`
	Position  model.BlockPosition `protobuf:"varint,4,opt,name=position,proto3,enum=anytype.model.BlockPosition" json:"position,omitempty"`
}

func (m *RpcBlockActionBlocksDropRequest) Reset()         { *m = RpcBlockActionBlocksDropRequest{} }
func (m *RpcBlockActionBlocksDropRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionBlocksDropRequest) ProtoMessage()    {}
func (*RpcBlockActionBlocksDropRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 2, 0}
}
func (m *RpcBlockActionBlocksDropRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionBlocksDropRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionBlocksDropRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionBlocksDropRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionBlocksDropRequest.Merge(m, src)
}
func (m *RpcBlockActionBlocksDropRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionBlocksDropRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionBlocksDropRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionBlocksDropRequest proto.InternalMessageInfo

func (m *RpcBlockActionBlocksDropRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

func (m *RpcBlockActionBlocksDropRequest) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *RpcBlockActionBlocksDropRequest) GetBlocksId() []string {
	if m != nil {
		return m.BlocksId
	}
	return nil
}

func (m *RpcBlockActionBlocksDropRequest) GetPosition() model.BlockPosition {
	if m != nil {
		return m.Position
	}
	return model.Block_Before
}

type RpcBlockActionBlocksDropResponse struct {
	Error *RpcBlockActionBlocksDropResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcBlockActionBlocksDropResponse) Reset()         { *m = RpcBlockActionBlocksDropResponse{} }
func (m *RpcBlockActionBlocksDropResponse) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionBlocksDropResponse) ProtoMessage()    {}
func (*RpcBlockActionBlocksDropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 2, 1}
}
func (m *RpcBlockActionBlocksDropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionBlocksDropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionBlocksDropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionBlocksDropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionBlocksDropResponse.Merge(m, src)
}
func (m *RpcBlockActionBlocksDropResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionBlocksDropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionBlocksDropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionBlocksDropResponse proto.InternalMessageInfo

func (m *RpcBlockActionBlocksDropResponse) GetError() *RpcBlockActionBlocksDropResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcBlockActionBlocksDropResponseError struct {
	Code        RpcBlockActionBlocksDropResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcBlockActionBlocksDropResponseErrorCode" json:"code,omitempty"`
	Description string                                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcBlockActionBlocksDropResponseError) Reset()         { *m = RpcBlockActionBlocksDropResponseError{} }
func (m *RpcBlockActionBlocksDropResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionBlocksDropResponseError) ProtoMessage()    {}
func (*RpcBlockActionBlocksDropResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 2, 1, 0}
}
func (m *RpcBlockActionBlocksDropResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionBlocksDropResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionBlocksDropResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionBlocksDropResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionBlocksDropResponseError.Merge(m, src)
}
func (m *RpcBlockActionBlocksDropResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionBlocksDropResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionBlocksDropResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionBlocksDropResponseError proto.InternalMessageInfo

func (m *RpcBlockActionBlocksDropResponseError) GetCode() RpcBlockActionBlocksDropResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcBlockActionBlocksDropResponseError_NULL
}

func (m *RpcBlockActionBlocksDropResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RpcBlockActionContent struct {
}

func (m *RpcBlockActionContent) Reset()         { *m = RpcBlockActionContent{} }
func (m *RpcBlockActionContent) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionContent) ProtoMessage()    {}
func (*RpcBlockActionContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3}
}
func (m *RpcBlockActionContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionContent.Merge(m, src)
}
func (m *RpcBlockActionContent) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionContent) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionContent.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionContent proto.InternalMessageInfo

type RpcBlockActionContentUpload struct {
}

func (m *RpcBlockActionContentUpload) Reset()         { *m = RpcBlockActionContentUpload{} }
func (m *RpcBlockActionContentUpload) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionContentUpload) ProtoMessage()    {}
func (*RpcBlockActionContentUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3, 0}
}
func (m *RpcBlockActionContentUpload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionContentUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionContentUpload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionContentUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionContentUpload.Merge(m, src)
}
func (m *RpcBlockActionContentUpload) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionContentUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionContentUpload.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionContentUpload proto.InternalMessageInfo

type RpcBlockActionContentUploadRequest struct {
	LocalPath string `protobuf:"bytes,1,opt,name=localPath,proto3" json:"localPath,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	TargetId  string `protobuf:"bytes,3,opt,name=targetId,proto3" json:"targetId,omitempty"`
	ContextId string `protobuf:"bytes,4,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (m *RpcBlockActionContentUploadRequest) Reset()         { *m = RpcBlockActionContentUploadRequest{} }
func (m *RpcBlockActionContentUploadRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionContentUploadRequest) ProtoMessage()    {}
func (*RpcBlockActionContentUploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3, 0, 0}
}
func (m *RpcBlockActionContentUploadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionContentUploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionContentUploadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionContentUploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionContentUploadRequest.Merge(m, src)
}
func (m *RpcBlockActionContentUploadRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionContentUploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionContentUploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionContentUploadRequest proto.InternalMessageInfo

func (m *RpcBlockActionContentUploadRequest) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

func (m *RpcBlockActionContentUploadRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RpcBlockActionContentUploadRequest) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *RpcBlockActionContentUploadRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type RpcBlockActionContentUploadResponse struct {
	Error *RpcBlockActionContentUploadResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcBlockActionContentUploadResponse) Reset()         { *m = RpcBlockActionContentUploadResponse{} }
func (m *RpcBlockActionContentUploadResponse) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionContentUploadResponse) ProtoMessage()    {}
func (*RpcBlockActionContentUploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3, 0, 1}
}
func (m *RpcBlockActionContentUploadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionContentUploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionContentUploadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionContentUploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionContentUploadResponse.Merge(m, src)
}
func (m *RpcBlockActionContentUploadResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionContentUploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionContentUploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionContentUploadResponse proto.InternalMessageInfo

func (m *RpcBlockActionContentUploadResponse) GetError() *RpcBlockActionContentUploadResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcBlockActionContentUploadResponseError struct {
	Code        RpcBlockActionContentUploadResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcBlockActionContentUploadResponseErrorCode" json:"code,omitempty"`
	Description string                                       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcBlockActionContentUploadResponseError) Reset() {
	*m = RpcBlockActionContentUploadResponseError{}
}
func (m *RpcBlockActionContentUploadResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionContentUploadResponseError) ProtoMessage()    {}
func (*RpcBlockActionContentUploadResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3, 0, 1, 0}
}
func (m *RpcBlockActionContentUploadResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionContentUploadResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionContentUploadResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionContentUploadResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionContentUploadResponseError.Merge(m, src)
}
func (m *RpcBlockActionContentUploadResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionContentUploadResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionContentUploadResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionContentUploadResponseError proto.InternalMessageInfo

func (m *RpcBlockActionContentUploadResponseError) GetCode() RpcBlockActionContentUploadResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcBlockActionContentUploadResponseError_NULL
}

func (m *RpcBlockActionContentUploadResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RpcBlockActionContentDownload struct {
}

func (m *RpcBlockActionContentDownload) Reset()         { *m = RpcBlockActionContentDownload{} }
func (m *RpcBlockActionContentDownload) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionContentDownload) ProtoMessage()    {}
func (*RpcBlockActionContentDownload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3, 1}
}
func (m *RpcBlockActionContentDownload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionContentDownload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionContentDownload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionContentDownload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionContentDownload.Merge(m, src)
}
func (m *RpcBlockActionContentDownload) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionContentDownload) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionContentDownload.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionContentDownload proto.InternalMessageInfo

type RpcBlockActionContentDownloadRequest struct {
	TargetId  string `protobuf:"bytes,1,opt,name=targetId,proto3" json:"targetId,omitempty"`
	ContextId string `protobuf:"bytes,2,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (m *RpcBlockActionContentDownloadRequest) Reset()         { *m = RpcBlockActionContentDownloadRequest{} }
func (m *RpcBlockActionContentDownloadRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionContentDownloadRequest) ProtoMessage()    {}
func (*RpcBlockActionContentDownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3, 1, 0}
}
func (m *RpcBlockActionContentDownloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionContentDownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionContentDownloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionContentDownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionContentDownloadRequest.Merge(m, src)
}
func (m *RpcBlockActionContentDownloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionContentDownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionContentDownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionContentDownloadRequest proto.InternalMessageInfo

func (m *RpcBlockActionContentDownloadRequest) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *RpcBlockActionContentDownloadRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type RpcBlockActionContentDownloadResponse struct {
	Error *RpcBlockActionContentDownloadResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcBlockActionContentDownloadResponse) Reset()         { *m = RpcBlockActionContentDownloadResponse{} }
func (m *RpcBlockActionContentDownloadResponse) String() string { return proto.CompactTextString(m) }
func (*RpcBlockActionContentDownloadResponse) ProtoMessage()    {}
func (*RpcBlockActionContentDownloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3, 1, 1}
}
func (m *RpcBlockActionContentDownloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionContentDownloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionContentDownloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionContentDownloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionContentDownloadResponse.Merge(m, src)
}
func (m *RpcBlockActionContentDownloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionContentDownloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionContentDownloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionContentDownloadResponse proto.InternalMessageInfo

func (m *RpcBlockActionContentDownloadResponse) GetError() *RpcBlockActionContentDownloadResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcBlockActionContentDownloadResponseError struct {
	Code        RpcBlockActionContentDownloadResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcBlockActionContentDownloadResponseErrorCode" json:"code,omitempty"`
	Description string                                         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcBlockActionContentDownloadResponseError) Reset() {
	*m = RpcBlockActionContentDownloadResponseError{}
}
func (m *RpcBlockActionContentDownloadResponseError) String() string {
	return proto.CompactTextString(m)
}
func (*RpcBlockActionContentDownloadResponseError) ProtoMessage() {}
func (*RpcBlockActionContentDownloadResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 0, 5, 3, 1, 1, 0}
}
func (m *RpcBlockActionContentDownloadResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBlockActionContentDownloadResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBlockActionContentDownloadResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBlockActionContentDownloadResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockActionContentDownloadResponseError.Merge(m, src)
}
func (m *RpcBlockActionContentDownloadResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcBlockActionContentDownloadResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockActionContentDownloadResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockActionContentDownloadResponseError proto.InternalMessageInfo

func (m *RpcBlockActionContentDownloadResponseError) GetCode() RpcBlockActionContentDownloadResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcBlockActionContentDownloadResponseError_NULL
}

func (m *RpcBlockActionContentDownloadResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
// Namespace, that agregates subtopics and actions, that relates to wallet.
type RpcWallet struct {
}

func (m *RpcWallet) Reset()         { *m = RpcWallet{} }
func (m *RpcWallet) String() string { return proto.CompactTextString(m) }
func (*RpcWallet) ProtoMessage()    {}
func (*RpcWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1}
}
func (m *RpcWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcWallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcWallet.Merge(m, src)
}
func (m *RpcWallet) XXX_Size() int {
	return m.Size()
}
func (m *RpcWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcWallet.DiscardUnknown(m)
}

var xxx_messageInfo_RpcWallet proto.InternalMessageInfo

type RpcWalletCreate struct {
}

func (m *RpcWalletCreate) Reset()         { *m = RpcWalletCreate{} }
func (m *RpcWalletCreate) String() string { return proto.CompactTextString(m) }
func (*RpcWalletCreate) ProtoMessage()    {}
func (*RpcWalletCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1, 0}
}
func (m *RpcWalletCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcWalletCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcWalletCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcWalletCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcWalletCreate.Merge(m, src)
}
func (m *RpcWalletCreate) XXX_Size() int {
	return m.Size()
}
func (m *RpcWalletCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcWalletCreate.DiscardUnknown(m)
}

var xxx_messageInfo_RpcWalletCreate proto.InternalMessageInfo

//*
// Front-end-to-middleware request to create a new wallet
type RpcWalletCreateRequest struct {
	RootPath string `protobuf:"bytes,1,opt,name=rootPath,proto3" json:"rootPath,omitempty"`
}

func (m *RpcWalletCreateRequest) Reset()         { *m = RpcWalletCreateRequest{} }
func (m *RpcWalletCreateRequest) String() string { return proto.CompactTextString(m) }
func (*RpcWalletCreateRequest) ProtoMessage()    {}
func (*RpcWalletCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1, 0, 0}
}
func (m *RpcWalletCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcWalletCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcWalletCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcWalletCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcWalletCreateRequest.Merge(m, src)
}
func (m *RpcWalletCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcWalletCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcWalletCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcWalletCreateRequest proto.InternalMessageInfo

func (m *RpcWalletCreateRequest) GetRootPath() string {
	if m != nil {
		return m.RootPath
	}
	return ""
}

//*
// Middleware-to-front-end response, that can contain mnemonic of a created account and a NULL error or an empty mnemonic and a non-NULL error
type RpcWalletCreateResponse struct {
	Error    *RpcWalletCreateResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Mnemonic string                        `protobuf:"bytes,2,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
}

func (m *RpcWalletCreateResponse) Reset()         { *m = RpcWalletCreateResponse{} }
func (m *RpcWalletCreateResponse) String() string { return proto.CompactTextString(m) }
func (*RpcWalletCreateResponse) ProtoMessage()    {}
func (*RpcWalletCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1, 0, 1}
}
func (m *RpcWalletCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcWalletCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcWalletCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcWalletCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcWalletCreateResponse.Merge(m, src)
}
func (m *RpcWalletCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcWalletCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcWalletCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcWalletCreateResponse proto.InternalMessageInfo

func (m *RpcWalletCreateResponse) GetError() *RpcWalletCreateResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RpcWalletCreateResponse) GetMnemonic() string {
	if m != nil {
		return m.Mnemonic
	}
	return ""
}

type RpcWalletCreateResponseError struct {
	Code        RpcWalletCreateResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcWalletCreateResponseErrorCode" json:"code,omitempty"`
	Description string                           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcWalletCreateResponseError) Reset()         { *m = RpcWalletCreateResponseError{} }
func (m *RpcWalletCreateResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcWalletCreateResponseError) ProtoMessage()    {}
func (*RpcWalletCreateResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1, 0, 1, 0}
}
func (m *RpcWalletCreateResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcWalletCreateResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcWalletCreateResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcWalletCreateResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcWalletCreateResponseError.Merge(m, src)
}
func (m *RpcWalletCreateResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcWalletCreateResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcWalletCreateResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcWalletCreateResponseError proto.InternalMessageInfo

func (m *RpcWalletCreateResponseError) GetCode() RpcWalletCreateResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcWalletCreateResponseError_NULL
}

func (m *RpcWalletCreateResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RpcWalletRecover struct {
}

func (m *RpcWalletRecover) Reset()         { *m = RpcWalletRecover{} }
func (m *RpcWalletRecover) String() string { return proto.CompactTextString(m) }
func (*RpcWalletRecover) ProtoMessage()    {}
func (*RpcWalletRecover) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1, 1}
}
func (m *RpcWalletRecover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcWalletRecover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcWalletRecover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcWalletRecover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcWalletRecover.Merge(m, src)
}
func (m *RpcWalletRecover) XXX_Size() int {
	return m.Size()
}
func (m *RpcWalletRecover) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcWalletRecover.DiscardUnknown(m)
}

var xxx_messageInfo_RpcWalletRecover proto.InternalMessageInfo

//*
// Front end to middleware request-to-recover-a wallet with this mnemonic and a rootPath
type RpcWalletRecoverRequest struct {
	RootPath string `protobuf:"bytes,1,opt,name=rootPath,proto3" json:"rootPath,omitempty"`
	Mnemonic string `protobuf:"bytes,2,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
}

func (m *RpcWalletRecoverRequest) Reset()         { *m = RpcWalletRecoverRequest{} }
func (m *RpcWalletRecoverRequest) String() string { return proto.CompactTextString(m) }
func (*RpcWalletRecoverRequest) ProtoMessage()    {}
func (*RpcWalletRecoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1, 1, 0}
}
func (m *RpcWalletRecoverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcWalletRecoverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcWalletRecoverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcWalletRecoverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcWalletRecoverRequest.Merge(m, src)
}
func (m *RpcWalletRecoverRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcWalletRecoverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcWalletRecoverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcWalletRecoverRequest proto.InternalMessageInfo

func (m *RpcWalletRecoverRequest) GetRootPath() string {
	if m != nil {
		return m.RootPath
	}
	return ""
}

func (m *RpcWalletRecoverRequest) GetMnemonic() string {
	if m != nil {
		return m.Mnemonic
	}
	return ""
}

//*
// Middleware-to-front-end response, that can contain a NULL error or a non-NULL error
type RpcWalletRecoverResponse struct {
	Error *RpcWalletRecoverResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcWalletRecoverResponse) Reset()         { *m = RpcWalletRecoverResponse{} }
func (m *RpcWalletRecoverResponse) String() string { return proto.CompactTextString(m) }
func (*RpcWalletRecoverResponse) ProtoMessage()    {}
func (*RpcWalletRecoverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1, 1, 1}
}
func (m *RpcWalletRecoverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcWalletRecoverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcWalletRecoverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcWalletRecoverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcWalletRecoverResponse.Merge(m, src)
}
func (m *RpcWalletRecoverResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcWalletRecoverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcWalletRecoverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcWalletRecoverResponse proto.InternalMessageInfo

func (m *RpcWalletRecoverResponse) GetError() *RpcWalletRecoverResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcWalletRecoverResponseError struct {
	Code        RpcWalletRecoverResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcWalletRecoverResponseErrorCode" json:"code,omitempty"`
	Description string                            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcWalletRecoverResponseError) Reset()         { *m = RpcWalletRecoverResponseError{} }
func (m *RpcWalletRecoverResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcWalletRecoverResponseError) ProtoMessage()    {}
func (*RpcWalletRecoverResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 1, 1, 1, 0}
}
func (m *RpcWalletRecoverResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcWalletRecoverResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcWalletRecoverResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcWalletRecoverResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcWalletRecoverResponseError.Merge(m, src)
}
func (m *RpcWalletRecoverResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcWalletRecoverResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcWalletRecoverResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcWalletRecoverResponseError proto.InternalMessageInfo

func (m *RpcWalletRecoverResponseError) GetCode() RpcWalletRecoverResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcWalletRecoverResponseError_NULL
}

func (m *RpcWalletRecoverResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
// Namespace, that agregates subtopics and actions, that relates to account.
type RpcAccount struct {
}

func (m *RpcAccount) Reset()         { *m = RpcAccount{} }
func (m *RpcAccount) String() string { return proto.CompactTextString(m) }
func (*RpcAccount) ProtoMessage()    {}
func (*RpcAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2}
}
func (m *RpcAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccount.Merge(m, src)
}
func (m *RpcAccount) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccount.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccount proto.InternalMessageInfo

type RpcAccountCreate struct {
}

func (m *RpcAccountCreate) Reset()         { *m = RpcAccountCreate{} }
func (m *RpcAccountCreate) String() string { return proto.CompactTextString(m) }
func (*RpcAccountCreate) ProtoMessage()    {}
func (*RpcAccountCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 0}
}
func (m *RpcAccountCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountCreate.Merge(m, src)
}
func (m *RpcAccountCreate) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountCreate.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountCreate proto.InternalMessageInfo

//*
// Front end to middleware request-to-create-an account
type RpcAccountCreateRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Avatar:
	//	*RpcAccountCreateRequestAvatarOfAvatarLocalPath
	//	*RpcAccountCreateRequestAvatarOfAvatarColor
	Avatar IsRpcAccountCreateRequestAvatar `protobuf_oneof:"avatar"`
}

func (m *RpcAccountCreateRequest) Reset()         { *m = RpcAccountCreateRequest{} }
func (m *RpcAccountCreateRequest) String() string { return proto.CompactTextString(m) }
func (*RpcAccountCreateRequest) ProtoMessage()    {}
func (*RpcAccountCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 0, 0}
}
func (m *RpcAccountCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountCreateRequest.Merge(m, src)
}
func (m *RpcAccountCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountCreateRequest proto.InternalMessageInfo

type IsRpcAccountCreateRequestAvatar interface {
	IsRpcAccountCreateRequestAvatar()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RpcAccountCreateRequestAvatarOfAvatarLocalPath struct {
	AvatarLocalPath string `protobuf:"bytes,2,opt,name=avatarLocalPath,proto3,oneof" json:"avatarLocalPath,omitempty"`
}
type RpcAccountCreateRequestAvatarOfAvatarColor struct {
	AvatarColor string `protobuf:"bytes,3,opt,name=avatarColor,proto3,oneof" json:"avatarColor,omitempty"`
}

func (*RpcAccountCreateRequestAvatarOfAvatarLocalPath) IsRpcAccountCreateRequestAvatar() {}
func (*RpcAccountCreateRequestAvatarOfAvatarColor) IsRpcAccountCreateRequestAvatar()     {}

func (m *RpcAccountCreateRequest) GetAvatar() IsRpcAccountCreateRequestAvatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *RpcAccountCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RpcAccountCreateRequest) GetAvatarLocalPath() string {
	if x, ok := m.GetAvatar().(*RpcAccountCreateRequestAvatarOfAvatarLocalPath); ok {
		return x.AvatarLocalPath
	}
	return ""
}

func (m *RpcAccountCreateRequest) GetAvatarColor() string {
	if x, ok := m.GetAvatar().(*RpcAccountCreateRequestAvatarOfAvatarColor); ok {
		return x.AvatarColor
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RpcAccountCreateRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RpcAccountCreateRequestAvatarOfAvatarLocalPath)(nil),
		(*RpcAccountCreateRequestAvatarOfAvatarColor)(nil),
	}
}

//*
// Middleware-to-front-end response for an account creation request, that can contain a NULL error and created account or a non-NULL error and an empty account
type RpcAccountCreateResponse struct {
	Error   *RpcAccountCreateResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Account *model.Account                 `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *RpcAccountCreateResponse) Reset()         { *m = RpcAccountCreateResponse{} }
func (m *RpcAccountCreateResponse) String() string { return proto.CompactTextString(m) }
func (*RpcAccountCreateResponse) ProtoMessage()    {}
func (*RpcAccountCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 0, 1}
}
func (m *RpcAccountCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountCreateResponse.Merge(m, src)
}
func (m *RpcAccountCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountCreateResponse proto.InternalMessageInfo

func (m *RpcAccountCreateResponse) GetError() *RpcAccountCreateResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RpcAccountCreateResponse) GetAccount() *model.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type RpcAccountCreateResponseError struct {
	Code        RpcAccountCreateResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcAccountCreateResponseErrorCode" json:"code,omitempty"`
	Description string                            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcAccountCreateResponseError) Reset()         { *m = RpcAccountCreateResponseError{} }
func (m *RpcAccountCreateResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcAccountCreateResponseError) ProtoMessage()    {}
func (*RpcAccountCreateResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 0, 1, 0}
}
func (m *RpcAccountCreateResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountCreateResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountCreateResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountCreateResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountCreateResponseError.Merge(m, src)
}
func (m *RpcAccountCreateResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountCreateResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountCreateResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountCreateResponseError proto.InternalMessageInfo

func (m *RpcAccountCreateResponseError) GetCode() RpcAccountCreateResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcAccountCreateResponseError_NULL
}

func (m *RpcAccountCreateResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RpcAccountRecover struct {
}

func (m *RpcAccountRecover) Reset()         { *m = RpcAccountRecover{} }
func (m *RpcAccountRecover) String() string { return proto.CompactTextString(m) }
func (*RpcAccountRecover) ProtoMessage()    {}
func (*RpcAccountRecover) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 1}
}
func (m *RpcAccountRecover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountRecover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountRecover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountRecover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountRecover.Merge(m, src)
}
func (m *RpcAccountRecover) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountRecover) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountRecover.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountRecover proto.InternalMessageInfo

//*
// Front end to middleware request-to-start-search of an accounts for a recovered mnemonic.
// Each of an account that would be found will come with an AccountAdd event
type RpcAccountRecoverRequest struct {
}

func (m *RpcAccountRecoverRequest) Reset()         { *m = RpcAccountRecoverRequest{} }
func (m *RpcAccountRecoverRequest) String() string { return proto.CompactTextString(m) }
func (*RpcAccountRecoverRequest) ProtoMessage()    {}
func (*RpcAccountRecoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 1, 0}
}
func (m *RpcAccountRecoverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountRecoverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountRecoverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountRecoverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountRecoverRequest.Merge(m, src)
}
func (m *RpcAccountRecoverRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountRecoverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountRecoverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountRecoverRequest proto.InternalMessageInfo

//*
// Middleware-to-front-end response to an account recover request, that can contain a NULL error and created account or a non-NULL error and an empty account
type RpcAccountRecoverResponse struct {
	Error *RpcAccountRecoverResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcAccountRecoverResponse) Reset()         { *m = RpcAccountRecoverResponse{} }
func (m *RpcAccountRecoverResponse) String() string { return proto.CompactTextString(m) }
func (*RpcAccountRecoverResponse) ProtoMessage()    {}
func (*RpcAccountRecoverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 1, 1}
}
func (m *RpcAccountRecoverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountRecoverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountRecoverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountRecoverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountRecoverResponse.Merge(m, src)
}
func (m *RpcAccountRecoverResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountRecoverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountRecoverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountRecoverResponse proto.InternalMessageInfo

func (m *RpcAccountRecoverResponse) GetError() *RpcAccountRecoverResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcAccountRecoverResponseError struct {
	Code        RpcAccountRecoverResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcAccountRecoverResponseErrorCode" json:"code,omitempty"`
	Description string                             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcAccountRecoverResponseError) Reset()         { *m = RpcAccountRecoverResponseError{} }
func (m *RpcAccountRecoverResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcAccountRecoverResponseError) ProtoMessage()    {}
func (*RpcAccountRecoverResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 1, 1, 0}
}
func (m *RpcAccountRecoverResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountRecoverResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountRecoverResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountRecoverResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountRecoverResponseError.Merge(m, src)
}
func (m *RpcAccountRecoverResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountRecoverResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountRecoverResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountRecoverResponseError proto.InternalMessageInfo

func (m *RpcAccountRecoverResponseError) GetCode() RpcAccountRecoverResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcAccountRecoverResponseError_NULL
}

func (m *RpcAccountRecoverResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RpcAccountSelect struct {
}

func (m *RpcAccountSelect) Reset()         { *m = RpcAccountSelect{} }
func (m *RpcAccountSelect) String() string { return proto.CompactTextString(m) }
func (*RpcAccountSelect) ProtoMessage()    {}
func (*RpcAccountSelect) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 2}
}
func (m *RpcAccountSelect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountSelect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountSelect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountSelect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountSelect.Merge(m, src)
}
func (m *RpcAccountSelect) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountSelect) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountSelect.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountSelect proto.InternalMessageInfo

//*
// Front end to middleware request-to-launch-a specific account using account id and a root path
// User can select an account from those, that came with an AccountAdd events
type RpcAccountSelectRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RootPath string `protobuf:"bytes,2,opt,name=rootPath,proto3" json:"rootPath,omitempty"`
}

func (m *RpcAccountSelectRequest) Reset()         { *m = RpcAccountSelectRequest{} }
func (m *RpcAccountSelectRequest) String() string { return proto.CompactTextString(m) }
func (*RpcAccountSelectRequest) ProtoMessage()    {}
func (*RpcAccountSelectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 2, 0}
}
func (m *RpcAccountSelectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountSelectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountSelectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountSelectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountSelectRequest.Merge(m, src)
}
func (m *RpcAccountSelectRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountSelectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountSelectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountSelectRequest proto.InternalMessageInfo

func (m *RpcAccountSelectRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RpcAccountSelectRequest) GetRootPath() string {
	if m != nil {
		return m.RootPath
	}
	return ""
}

//*
// Middleware-to-front-end response for an account select request, that can contain a NULL error and selected account or a non-NULL error and an empty account
type RpcAccountSelectResponse struct {
	Error   *RpcAccountSelectResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Account *model.Account                 `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *RpcAccountSelectResponse) Reset()         { *m = RpcAccountSelectResponse{} }
func (m *RpcAccountSelectResponse) String() string { return proto.CompactTextString(m) }
func (*RpcAccountSelectResponse) ProtoMessage()    {}
func (*RpcAccountSelectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 2, 1}
}
func (m *RpcAccountSelectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountSelectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountSelectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountSelectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountSelectResponse.Merge(m, src)
}
func (m *RpcAccountSelectResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountSelectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountSelectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountSelectResponse proto.InternalMessageInfo

func (m *RpcAccountSelectResponse) GetError() *RpcAccountSelectResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RpcAccountSelectResponse) GetAccount() *model.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type RpcAccountSelectResponseError struct {
	Code        RpcAccountSelectResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcAccountSelectResponseErrorCode" json:"code,omitempty"`
	Description string                            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcAccountSelectResponseError) Reset()         { *m = RpcAccountSelectResponseError{} }
func (m *RpcAccountSelectResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcAccountSelectResponseError) ProtoMessage()    {}
func (*RpcAccountSelectResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 2, 2, 1, 0}
}
func (m *RpcAccountSelectResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcAccountSelectResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcAccountSelectResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcAccountSelectResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAccountSelectResponseError.Merge(m, src)
}
func (m *RpcAccountSelectResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcAccountSelectResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAccountSelectResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAccountSelectResponseError proto.InternalMessageInfo

func (m *RpcAccountSelectResponseError) GetCode() RpcAccountSelectResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcAccountSelectResponseError_NULL
}

func (m *RpcAccountSelectResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
// Namespace, that agregates log subtopics and actions.
// Usage: send request with topic (Level) and description (message) from client to middleware to log.
type RpcLog struct {
}

func (m *RpcLog) Reset()         { *m = RpcLog{} }
func (m *RpcLog) String() string { return proto.CompactTextString(m) }
func (*RpcLog) ProtoMessage()    {}
func (*RpcLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 3}
}
func (m *RpcLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcLog.Merge(m, src)
}
func (m *RpcLog) XXX_Size() int {
	return m.Size()
}
func (m *RpcLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcLog.DiscardUnknown(m)
}

var xxx_messageInfo_RpcLog proto.InternalMessageInfo

type RpcLogSend struct {
}

func (m *RpcLogSend) Reset()         { *m = RpcLogSend{} }
func (m *RpcLogSend) String() string { return proto.CompactTextString(m) }
func (*RpcLogSend) ProtoMessage()    {}
func (*RpcLogSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 3, 0}
}
func (m *RpcLogSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcLogSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcLogSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcLogSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcLogSend.Merge(m, src)
}
func (m *RpcLogSend) XXX_Size() int {
	return m.Size()
}
func (m *RpcLogSend) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcLogSend.DiscardUnknown(m)
}

var xxx_messageInfo_RpcLogSend proto.InternalMessageInfo

type RpcLogSendRequest struct {
	Message string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Level   RpcLogSendRequestLevel `protobuf:"varint,2,opt,name=level,proto3,enum=anytype.RpcLogSendRequestLevel" json:"level,omitempty"`
}

func (m *RpcLogSendRequest) Reset()         { *m = RpcLogSendRequest{} }
func (m *RpcLogSendRequest) String() string { return proto.CompactTextString(m) }
func (*RpcLogSendRequest) ProtoMessage()    {}
func (*RpcLogSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 3, 0, 0}
}
func (m *RpcLogSendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcLogSendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcLogSendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcLogSendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcLogSendRequest.Merge(m, src)
}
func (m *RpcLogSendRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcLogSendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcLogSendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcLogSendRequest proto.InternalMessageInfo

func (m *RpcLogSendRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RpcLogSendRequest) GetLevel() RpcLogSendRequestLevel {
	if m != nil {
		return m.Level
	}
	return RpcLogSendRequest_DEBUG
}

type RpcLogSendResponse struct {
	Error *RpcLogSendResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RpcLogSendResponse) Reset()         { *m = RpcLogSendResponse{} }
func (m *RpcLogSendResponse) String() string { return proto.CompactTextString(m) }
func (*RpcLogSendResponse) ProtoMessage()    {}
func (*RpcLogSendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 3, 0, 1}
}
func (m *RpcLogSendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcLogSendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcLogSendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcLogSendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcLogSendResponse.Merge(m, src)
}
func (m *RpcLogSendResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcLogSendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcLogSendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcLogSendResponse proto.InternalMessageInfo

func (m *RpcLogSendResponse) GetError() *RpcLogSendResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RpcLogSendResponseError struct {
	Code        RpcLogSendResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcLogSendResponseErrorCode" json:"code,omitempty"`
	Description string                      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcLogSendResponseError) Reset()         { *m = RpcLogSendResponseError{} }
func (m *RpcLogSendResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcLogSendResponseError) ProtoMessage()    {}
func (*RpcLogSendResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 3, 0, 1, 0}
}
func (m *RpcLogSendResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcLogSendResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcLogSendResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcLogSendResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcLogSendResponseError.Merge(m, src)
}
func (m *RpcLogSendResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcLogSendResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcLogSendResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcLogSendResponseError proto.InternalMessageInfo

func (m *RpcLogSendResponseError) GetCode() RpcLogSendResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcLogSendResponseError_NULL
}

func (m *RpcLogSendResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
// Get info about a version of a middleware.
// Info is a string, that contains: BuildDate, GitCommit, GitBranch, GitState
type RpcVersion struct {
}

func (m *RpcVersion) Reset()         { *m = RpcVersion{} }
func (m *RpcVersion) String() string { return proto.CompactTextString(m) }
func (*RpcVersion) ProtoMessage()    {}
func (*RpcVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 4}
}
func (m *RpcVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcVersion.Merge(m, src)
}
func (m *RpcVersion) XXX_Size() int {
	return m.Size()
}
func (m *RpcVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcVersion.DiscardUnknown(m)
}

var xxx_messageInfo_RpcVersion proto.InternalMessageInfo

type RpcVersionGet struct {
}

func (m *RpcVersionGet) Reset()         { *m = RpcVersionGet{} }
func (m *RpcVersionGet) String() string { return proto.CompactTextString(m) }
func (*RpcVersionGet) ProtoMessage()    {}
func (*RpcVersionGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 4, 0}
}
func (m *RpcVersionGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcVersionGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcVersionGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcVersionGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcVersionGet.Merge(m, src)
}
func (m *RpcVersionGet) XXX_Size() int {
	return m.Size()
}
func (m *RpcVersionGet) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcVersionGet.DiscardUnknown(m)
}

var xxx_messageInfo_RpcVersionGet proto.InternalMessageInfo

type RpcVersionGetRequest struct {
}

func (m *RpcVersionGetRequest) Reset()         { *m = RpcVersionGetRequest{} }
func (m *RpcVersionGetRequest) String() string { return proto.CompactTextString(m) }
func (*RpcVersionGetRequest) ProtoMessage()    {}
func (*RpcVersionGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 4, 0, 0}
}
func (m *RpcVersionGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcVersionGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcVersionGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcVersionGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcVersionGetRequest.Merge(m, src)
}
func (m *RpcVersionGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcVersionGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcVersionGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcVersionGetRequest proto.InternalMessageInfo

type RpcVersionGetResponse struct {
	Error   *RpcVersionGetResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Version string                      `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *RpcVersionGetResponse) Reset()         { *m = RpcVersionGetResponse{} }
func (m *RpcVersionGetResponse) String() string { return proto.CompactTextString(m) }
func (*RpcVersionGetResponse) ProtoMessage()    {}
func (*RpcVersionGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 4, 0, 1}
}
func (m *RpcVersionGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcVersionGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcVersionGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcVersionGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcVersionGetResponse.Merge(m, src)
}
func (m *RpcVersionGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcVersionGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcVersionGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcVersionGetResponse proto.InternalMessageInfo

func (m *RpcVersionGetResponse) GetError() *RpcVersionGetResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RpcVersionGetResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type RpcVersionGetResponseError struct {
	Code        RpcVersionGetResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcVersionGetResponseErrorCode" json:"code,omitempty"`
	Description string                         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcVersionGetResponseError) Reset()         { *m = RpcVersionGetResponseError{} }
func (m *RpcVersionGetResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcVersionGetResponseError) ProtoMessage()    {}
func (*RpcVersionGetResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 4, 0, 1, 0}
}
func (m *RpcVersionGetResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcVersionGetResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcVersionGetResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcVersionGetResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcVersionGetResponseError.Merge(m, src)
}
func (m *RpcVersionGetResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcVersionGetResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcVersionGetResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcVersionGetResponseError proto.InternalMessageInfo

func (m *RpcVersionGetResponseError) GetCode() RpcVersionGetResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcVersionGetResponseError_NULL
}

func (m *RpcVersionGetResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
// Namespace, that agregates subtopics and actions to work with IPFS directly (get files, blobs, images, etc)
type RpcIpfs struct {
}

func (m *RpcIpfs) Reset()         { *m = RpcIpfs{} }
func (m *RpcIpfs) String() string { return proto.CompactTextString(m) }
func (*RpcIpfs) ProtoMessage()    {}
func (*RpcIpfs) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5}
}
func (m *RpcIpfs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfs.Merge(m, src)
}
func (m *RpcIpfs) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfs) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfs.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfs proto.InternalMessageInfo

type RpcIpfsFile struct {
}

func (m *RpcIpfsFile) Reset()         { *m = RpcIpfsFile{} }
func (m *RpcIpfsFile) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsFile) ProtoMessage()    {}
func (*RpcIpfsFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 0}
}
func (m *RpcIpfsFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsFile.Merge(m, src)
}
func (m *RpcIpfsFile) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsFile) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsFile.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsFile proto.InternalMessageInfo

type RpcIpfsFileGet struct {
}

func (m *RpcIpfsFileGet) Reset()         { *m = RpcIpfsFileGet{} }
func (m *RpcIpfsFileGet) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsFileGet) ProtoMessage()    {}
func (*RpcIpfsFileGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 0, 0}
}
func (m *RpcIpfsFileGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsFileGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsFileGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsFileGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsFileGet.Merge(m, src)
}
func (m *RpcIpfsFileGet) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsFileGet) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsFileGet.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsFileGet proto.InternalMessageInfo

type RpcIpfsFileGetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RpcIpfsFileGetRequest) Reset()         { *m = RpcIpfsFileGetRequest{} }
func (m *RpcIpfsFileGetRequest) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsFileGetRequest) ProtoMessage()    {}
func (*RpcIpfsFileGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 0, 0, 0}
}
func (m *RpcIpfsFileGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsFileGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsFileGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsFileGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsFileGetRequest.Merge(m, src)
}
func (m *RpcIpfsFileGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsFileGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsFileGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsFileGetRequest proto.InternalMessageInfo

func (m *RpcIpfsFileGetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RpcIpfsFileGetResponse struct {
	Error *RpcIpfsFileGetResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  []byte                       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Media string                       `protobuf:"bytes,3,opt,name=media,proto3" json:"media,omitempty"`
	Name  string                       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RpcIpfsFileGetResponse) Reset()         { *m = RpcIpfsFileGetResponse{} }
func (m *RpcIpfsFileGetResponse) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsFileGetResponse) ProtoMessage()    {}
func (*RpcIpfsFileGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 0, 0, 1}
}
func (m *RpcIpfsFileGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsFileGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsFileGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsFileGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsFileGetResponse.Merge(m, src)
}
func (m *RpcIpfsFileGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsFileGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsFileGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsFileGetResponse proto.InternalMessageInfo

func (m *RpcIpfsFileGetResponse) GetError() *RpcIpfsFileGetResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RpcIpfsFileGetResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RpcIpfsFileGetResponse) GetMedia() string {
	if m != nil {
		return m.Media
	}
	return ""
}

func (m *RpcIpfsFileGetResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RpcIpfsFileGetResponseError struct {
	Code        RpcIpfsFileGetResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcIpfsFileGetResponseErrorCode" json:"code,omitempty"`
	Description string                          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcIpfsFileGetResponseError) Reset()         { *m = RpcIpfsFileGetResponseError{} }
func (m *RpcIpfsFileGetResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsFileGetResponseError) ProtoMessage()    {}
func (*RpcIpfsFileGetResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 0, 0, 1, 0}
}
func (m *RpcIpfsFileGetResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsFileGetResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsFileGetResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsFileGetResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsFileGetResponseError.Merge(m, src)
}
func (m *RpcIpfsFileGetResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsFileGetResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsFileGetResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsFileGetResponseError proto.InternalMessageInfo

func (m *RpcIpfsFileGetResponseError) GetCode() RpcIpfsFileGetResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcIpfsFileGetResponseError_NULL
}

func (m *RpcIpfsFileGetResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RpcIpfsImage struct {
}

func (m *RpcIpfsImage) Reset()         { *m = RpcIpfsImage{} }
func (m *RpcIpfsImage) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsImage) ProtoMessage()    {}
func (*RpcIpfsImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1}
}
func (m *RpcIpfsImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsImage.Merge(m, src)
}
func (m *RpcIpfsImage) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsImage) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsImage.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsImage proto.InternalMessageInfo

type RpcIpfsImageGet struct {
}

func (m *RpcIpfsImageGet) Reset()         { *m = RpcIpfsImageGet{} }
func (m *RpcIpfsImageGet) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsImageGet) ProtoMessage()    {}
func (*RpcIpfsImageGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0}
}
func (m *RpcIpfsImageGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsImageGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsImageGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsImageGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsImageGet.Merge(m, src)
}
func (m *RpcIpfsImageGet) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsImageGet) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsImageGet.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsImageGet proto.InternalMessageInfo

type RpcIpfsImageGetBlob struct {
}

func (m *RpcIpfsImageGetBlob) Reset()         { *m = RpcIpfsImageGetBlob{} }
func (m *RpcIpfsImageGetBlob) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsImageGetBlob) ProtoMessage()    {}
func (*RpcIpfsImageGetBlob) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0, 0}
}
func (m *RpcIpfsImageGetBlob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsImageGetBlob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsImageGetBlob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsImageGetBlob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsImageGetBlob.Merge(m, src)
}
func (m *RpcIpfsImageGetBlob) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsImageGetBlob) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsImageGetBlob.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsImageGetBlob proto.InternalMessageInfo

type RpcIpfsImageGetBlobRequest struct {
	Id    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size_ model.ImageSize `protobuf:"varint,2,opt,name=size,proto3,enum=anytype.model.ImageSize" json:"size,omitempty"`
}

func (m *RpcIpfsImageGetBlobRequest) Reset()         { *m = RpcIpfsImageGetBlobRequest{} }
func (m *RpcIpfsImageGetBlobRequest) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsImageGetBlobRequest) ProtoMessage()    {}
func (*RpcIpfsImageGetBlobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0, 0, 0}
}
func (m *RpcIpfsImageGetBlobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsImageGetBlobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsImageGetBlobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsImageGetBlobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsImageGetBlobRequest.Merge(m, src)
}
func (m *RpcIpfsImageGetBlobRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsImageGetBlobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsImageGetBlobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsImageGetBlobRequest proto.InternalMessageInfo

func (m *RpcIpfsImageGetBlobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RpcIpfsImageGetBlobRequest) GetSize_() model.ImageSize {
	if m != nil {
		return m.Size_
	}
	return model.Image_Large
}

type RpcIpfsImageGetBlobResponse struct {
	Error *RpcIpfsImageGetBlobResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Blob  []byte                            `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (m *RpcIpfsImageGetBlobResponse) Reset()         { *m = RpcIpfsImageGetBlobResponse{} }
func (m *RpcIpfsImageGetBlobResponse) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsImageGetBlobResponse) ProtoMessage()    {}
func (*RpcIpfsImageGetBlobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0, 0, 1}
}
func (m *RpcIpfsImageGetBlobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsImageGetBlobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsImageGetBlobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsImageGetBlobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsImageGetBlobResponse.Merge(m, src)
}
func (m *RpcIpfsImageGetBlobResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsImageGetBlobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsImageGetBlobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsImageGetBlobResponse proto.InternalMessageInfo

func (m *RpcIpfsImageGetBlobResponse) GetError() *RpcIpfsImageGetBlobResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RpcIpfsImageGetBlobResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type RpcIpfsImageGetBlobResponseError struct {
	Code        RpcIpfsImageGetBlobResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcIpfsImageGetBlobResponseErrorCode" json:"code,omitempty"`
	Description string                               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcIpfsImageGetBlobResponseError) Reset()         { *m = RpcIpfsImageGetBlobResponseError{} }
func (m *RpcIpfsImageGetBlobResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsImageGetBlobResponseError) ProtoMessage()    {}
func (*RpcIpfsImageGetBlobResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0, 0, 1, 0}
}
func (m *RpcIpfsImageGetBlobResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsImageGetBlobResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsImageGetBlobResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsImageGetBlobResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsImageGetBlobResponseError.Merge(m, src)
}
func (m *RpcIpfsImageGetBlobResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsImageGetBlobResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsImageGetBlobResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsImageGetBlobResponseError proto.InternalMessageInfo

func (m *RpcIpfsImageGetBlobResponseError) GetCode() RpcIpfsImageGetBlobResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcIpfsImageGetBlobResponseError_NULL
}

func (m *RpcIpfsImageGetBlobResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RpcIpfsImageGetFile struct {
}

func (m *RpcIpfsImageGetFile) Reset()         { *m = RpcIpfsImageGetFile{} }
func (m *RpcIpfsImageGetFile) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsImageGetFile) ProtoMessage()    {}
func (*RpcIpfsImageGetFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0, 1}
}
func (m *RpcIpfsImageGetFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsImageGetFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsImageGetFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsImageGetFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsImageGetFile.Merge(m, src)
}
func (m *RpcIpfsImageGetFile) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsImageGetFile) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsImageGetFile.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsImageGetFile proto.InternalMessageInfo

type RpcIpfsImageGetFileRequest struct {
	Id    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size_ model.ImageSize `protobuf:"varint,2,opt,name=size,proto3,enum=anytype.model.ImageSize" json:"size,omitempty"`
}

func (m *RpcIpfsImageGetFileRequest) Reset()         { *m = RpcIpfsImageGetFileRequest{} }
func (m *RpcIpfsImageGetFileRequest) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsImageGetFileRequest) ProtoMessage()    {}
func (*RpcIpfsImageGetFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0, 1, 0}
}
func (m *RpcIpfsImageGetFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsImageGetFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsImageGetFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsImageGetFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsImageGetFileRequest.Merge(m, src)
}
func (m *RpcIpfsImageGetFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsImageGetFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsImageGetFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsImageGetFileRequest proto.InternalMessageInfo

func (m *RpcIpfsImageGetFileRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RpcIpfsImageGetFileRequest) GetSize_() model.ImageSize {
	if m != nil {
		return m.Size_
	}
	return model.Image_Large
}

type RpcIpfsImageGetFileResponse struct {
	Error     *RpcIpfsImageGetFileResponseError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	LocalPath string                            `protobuf:"bytes,2,opt,name=localPath,proto3" json:"localPath,omitempty"`
}

func (m *RpcIpfsImageGetFileResponse) Reset()         { *m = RpcIpfsImageGetFileResponse{} }
func (m *RpcIpfsImageGetFileResponse) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsImageGetFileResponse) ProtoMessage()    {}
func (*RpcIpfsImageGetFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0, 1, 1}
}
func (m *RpcIpfsImageGetFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsImageGetFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsImageGetFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsImageGetFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsImageGetFileResponse.Merge(m, src)
}
func (m *RpcIpfsImageGetFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsImageGetFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsImageGetFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsImageGetFileResponse proto.InternalMessageInfo

func (m *RpcIpfsImageGetFileResponse) GetError() *RpcIpfsImageGetFileResponseError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RpcIpfsImageGetFileResponse) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

type RpcIpfsImageGetFileResponseError struct {
	Code        RpcIpfsImageGetFileResponseErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.RpcIpfsImageGetFileResponseErrorCode" json:"code,omitempty"`
	Description string                               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RpcIpfsImageGetFileResponseError) Reset()         { *m = RpcIpfsImageGetFileResponseError{} }
func (m *RpcIpfsImageGetFileResponseError) String() string { return proto.CompactTextString(m) }
func (*RpcIpfsImageGetFileResponseError) ProtoMessage()    {}
func (*RpcIpfsImageGetFileResponseError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8261c968b2e6f45c, []int{0, 5, 1, 0, 1, 1, 0}
}
func (m *RpcIpfsImageGetFileResponseError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcIpfsImageGetFileResponseError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcIpfsImageGetFileResponseError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcIpfsImageGetFileResponseError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcIpfsImageGetFileResponseError.Merge(m, src)
}
func (m *RpcIpfsImageGetFileResponseError) XXX_Size() int {
	return m.Size()
}
func (m *RpcIpfsImageGetFileResponseError) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcIpfsImageGetFileResponseError.DiscardUnknown(m)
}

var xxx_messageInfo_RpcIpfsImageGetFileResponseError proto.InternalMessageInfo

func (m *RpcIpfsImageGetFileResponseError) GetCode() RpcIpfsImageGetFileResponseErrorCode {
	if m != nil {
		return m.Code
	}
	return RpcIpfsImageGetFileResponseError_NULL
}

func (m *RpcIpfsImageGetFileResponseError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterEnum("anytype.RpcBlockHistoryMoveResponseErrorCode", RpcBlockHistoryMoveResponseErrorCode_name, RpcBlockHistoryMoveResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcBlockOpenResponseErrorCode", RpcBlockOpenResponseErrorCode_name, RpcBlockOpenResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcBlockCreateResponseErrorCode", RpcBlockCreateResponseErrorCode_name, RpcBlockCreateResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcBlockUpdateResponseErrorCode", RpcBlockUpdateResponseErrorCode_name, RpcBlockUpdateResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcBlockCloseResponseErrorCode", RpcBlockCloseResponseErrorCode_name, RpcBlockCloseResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcBlockActionMarkSetResponseErrorCode", RpcBlockActionMarkSetResponseErrorCode_name, RpcBlockActionMarkSetResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcBlockActionMarksGetResponseErrorCode", RpcBlockActionMarksGetResponseErrorCode_name, RpcBlockActionMarksGetResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcBlockActionBlocksDropResponseErrorCode", RpcBlockActionBlocksDropResponseErrorCode_name, RpcBlockActionBlocksDropResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcBlockActionContentUploadResponseErrorCode", RpcBlockActionContentUploadResponseErrorCode_name, RpcBlockActionContentUploadResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcBlockActionContentDownloadResponseErrorCode", RpcBlockActionContentDownloadResponseErrorCode_name, RpcBlockActionContentDownloadResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcWalletCreateResponseErrorCode", RpcWalletCreateResponseErrorCode_name, RpcWalletCreateResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcWalletRecoverResponseErrorCode", RpcWalletRecoverResponseErrorCode_name, RpcWalletRecoverResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcAccountCreateResponseErrorCode", RpcAccountCreateResponseErrorCode_name, RpcAccountCreateResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcAccountRecoverResponseErrorCode", RpcAccountRecoverResponseErrorCode_name, RpcAccountRecoverResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcAccountSelectResponseErrorCode", RpcAccountSelectResponseErrorCode_name, RpcAccountSelectResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcLogSendRequestLevel", RpcLogSendRequestLevel_name, RpcLogSendRequestLevel_value)
	proto.RegisterEnum("anytype.RpcLogSendResponseErrorCode", RpcLogSendResponseErrorCode_name, RpcLogSendResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcVersionGetResponseErrorCode", RpcVersionGetResponseErrorCode_name, RpcVersionGetResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcIpfsFileGetResponseErrorCode", RpcIpfsFileGetResponseErrorCode_name, RpcIpfsFileGetResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcIpfsImageGetBlobResponseErrorCode", RpcIpfsImageGetBlobResponseErrorCode_name, RpcIpfsImageGetBlobResponseErrorCode_value)
	proto.RegisterEnum("anytype.RpcIpfsImageGetFileResponseErrorCode", RpcIpfsImageGetFileResponseErrorCode_name, RpcIpfsImageGetFileResponseErrorCode_value)
	proto.RegisterType((*Rpc)(nil), "anytype.Rpc")
	proto.RegisterType((*RpcBlock)(nil), "anytype.Rpc.Block")
	proto.RegisterType((*RpcBlockHistory)(nil), "anytype.Rpc.Block.History")
	proto.RegisterType((*RpcBlockHistoryMove)(nil), "anytype.Rpc.Block.History.Move")
	proto.RegisterType((*RpcBlockHistoryMoveRequest)(nil), "anytype.Rpc.Block.History.Move.Request")
	proto.RegisterType((*RpcBlockHistoryMoveResponse)(nil), "anytype.Rpc.Block.History.Move.Response")
	proto.RegisterType((*RpcBlockHistoryMoveResponseError)(nil), "anytype.Rpc.Block.History.Move.Response.Error")
	proto.RegisterType((*RpcBlockOpen)(nil), "anytype.Rpc.Block.Open")
	proto.RegisterType((*RpcBlockOpenRequest)(nil), "anytype.Rpc.Block.Open.Request")
	proto.RegisterType((*RpcBlockOpenResponse)(nil), "anytype.Rpc.Block.Open.Response")
	proto.RegisterType((*RpcBlockOpenResponseError)(nil), "anytype.Rpc.Block.Open.Response.Error")
	proto.RegisterType((*RpcBlockCreate)(nil), "anytype.Rpc.Block.Create")
	proto.RegisterType((*RpcBlockCreateRequest)(nil), "anytype.Rpc.Block.Create.Request")
	proto.RegisterType((*RpcBlockCreateResponse)(nil), "anytype.Rpc.Block.Create.Response")
	proto.RegisterType((*RpcBlockCreateResponseError)(nil), "anytype.Rpc.Block.Create.Response.Error")
	proto.RegisterType((*RpcBlockUpdate)(nil), "anytype.Rpc.Block.Update")
	proto.RegisterType((*RpcBlockUpdateRequest)(nil), "anytype.Rpc.Block.Update.Request")
	proto.RegisterType((*RpcBlockUpdateResponse)(nil), "anytype.Rpc.Block.Update.Response")
	proto.RegisterType((*RpcBlockUpdateResponseError)(nil), "anytype.Rpc.Block.Update.Response.Error")
	proto.RegisterType((*RpcBlockClose)(nil), "anytype.Rpc.Block.Close")
	proto.RegisterType((*RpcBlockCloseRequest)(nil), "anytype.Rpc.Block.Close.Request")
	proto.RegisterType((*RpcBlockCloseResponse)(nil), "anytype.Rpc.Block.Close.Response")
	proto.RegisterType((*RpcBlockCloseResponseError)(nil), "anytype.Rpc.Block.Close.Response.Error")
	proto.RegisterType((*RpcBlockAction)(nil), "anytype.Rpc.Block.Action")
	proto.RegisterType((*RpcBlockActionMarkSet)(nil), "anytype.Rpc.Block.Action.MarkSet")
	proto.RegisterType((*RpcBlockActionMarkSetRequest)(nil), "anytype.Rpc.Block.Action.MarkSet.Request")
	proto.RegisterType((*RpcBlockActionMarkSetResponse)(nil), "anytype.Rpc.Block.Action.MarkSet.Response")
	proto.RegisterType((*RpcBlockActionMarkSetResponseError)(nil), "anytype.Rpc.Block.Action.MarkSet.Response.Error")
	proto.RegisterType((*RpcBlockActionMarksGet)(nil), "anytype.Rpc.Block.Action.MarksGet")
	proto.RegisterType((*RpcBlockActionMarksGetRequest)(nil), "anytype.Rpc.Block.Action.MarksGet.Request")
	proto.RegisterType((*RpcBlockActionMarksGetResponse)(nil), "anytype.Rpc.Block.Action.MarksGet.Response")
	proto.RegisterType((*RpcBlockActionMarksGetResponseError)(nil), "anytype.Rpc.Block.Action.MarksGet.Response.Error")
	proto.RegisterType((*RpcBlockActionBlocksDrop)(nil), "anytype.Rpc.Block.Action.BlocksDrop")
	proto.RegisterType((*RpcBlockActionBlocksDropRequest)(nil), "anytype.Rpc.Block.Action.BlocksDrop.Request")
	proto.RegisterType((*RpcBlockActionBlocksDropResponse)(nil), "anytype.Rpc.Block.Action.BlocksDrop.Response")
	proto.RegisterType((*RpcBlockActionBlocksDropResponseError)(nil), "anytype.Rpc.Block.Action.BlocksDrop.Response.Error")
	proto.RegisterType((*RpcBlockActionContent)(nil), "anytype.Rpc.Block.Action.Content")
	proto.RegisterType((*RpcBlockActionContentUpload)(nil), "anytype.Rpc.Block.Action.Content.Upload")
	proto.RegisterType((*RpcBlockActionContentUploadRequest)(nil), "anytype.Rpc.Block.Action.Content.Upload.Request")
	proto.RegisterType((*RpcBlockActionContentUploadResponse)(nil), "anytype.Rpc.Block.Action.Content.Upload.Response")
	proto.RegisterType((*RpcBlockActionContentUploadResponseError)(nil), "anytype.Rpc.Block.Action.Content.Upload.Response.Error")
	proto.RegisterType((*RpcBlockActionContentDownload)(nil), "anytype.Rpc.Block.Action.Content.Download")
	proto.RegisterType((*RpcBlockActionContentDownloadRequest)(nil), "anytype.Rpc.Block.Action.Content.Download.Request")
	proto.RegisterType((*RpcBlockActionContentDownloadResponse)(nil), "anytype.Rpc.Block.Action.Content.Download.Response")
	proto.RegisterType((*RpcBlockActionContentDownloadResponseError)(nil), "anytype.Rpc.Block.Action.Content.Download.Response.Error")
	proto.RegisterType((*RpcWallet)(nil), "anytype.Rpc.Wallet")
	proto.RegisterType((*RpcWalletCreate)(nil), "anytype.Rpc.Wallet.Create")
	proto.RegisterType((*RpcWalletCreateRequest)(nil), "anytype.Rpc.Wallet.Create.Request")
	proto.RegisterType((*RpcWalletCreateResponse)(nil), "anytype.Rpc.Wallet.Create.Response")
	proto.RegisterType((*RpcWalletCreateResponseError)(nil), "anytype.Rpc.Wallet.Create.Response.Error")
	proto.RegisterType((*RpcWalletRecover)(nil), "anytype.Rpc.Wallet.Recover")
	proto.RegisterType((*RpcWalletRecoverRequest)(nil), "anytype.Rpc.Wallet.Recover.Request")
	proto.RegisterType((*RpcWalletRecoverResponse)(nil), "anytype.Rpc.Wallet.Recover.Response")
	proto.RegisterType((*RpcWalletRecoverResponseError)(nil), "anytype.Rpc.Wallet.Recover.Response.Error")
	proto.RegisterType((*RpcAccount)(nil), "anytype.Rpc.Account")
	proto.RegisterType((*RpcAccountCreate)(nil), "anytype.Rpc.Account.Create")
	proto.RegisterType((*RpcAccountCreateRequest)(nil), "anytype.Rpc.Account.Create.Request")
	proto.RegisterType((*RpcAccountCreateResponse)(nil), "anytype.Rpc.Account.Create.Response")
	proto.RegisterType((*RpcAccountCreateResponseError)(nil), "anytype.Rpc.Account.Create.Response.Error")
	proto.RegisterType((*RpcAccountRecover)(nil), "anytype.Rpc.Account.Recover")
	proto.RegisterType((*RpcAccountRecoverRequest)(nil), "anytype.Rpc.Account.Recover.Request")
	proto.RegisterType((*RpcAccountRecoverResponse)(nil), "anytype.Rpc.Account.Recover.Response")
	proto.RegisterType((*RpcAccountRecoverResponseError)(nil), "anytype.Rpc.Account.Recover.Response.Error")
	proto.RegisterType((*RpcAccountSelect)(nil), "anytype.Rpc.Account.Select")
	proto.RegisterType((*RpcAccountSelectRequest)(nil), "anytype.Rpc.Account.Select.Request")
	proto.RegisterType((*RpcAccountSelectResponse)(nil), "anytype.Rpc.Account.Select.Response")
	proto.RegisterType((*RpcAccountSelectResponseError)(nil), "anytype.Rpc.Account.Select.Response.Error")
	proto.RegisterType((*RpcLog)(nil), "anytype.Rpc.Log")
	proto.RegisterType((*RpcLogSend)(nil), "anytype.Rpc.Log.Send")
	proto.RegisterType((*RpcLogSendRequest)(nil), "anytype.Rpc.Log.Send.Request")
	proto.RegisterType((*RpcLogSendResponse)(nil), "anytype.Rpc.Log.Send.Response")
	proto.RegisterType((*RpcLogSendResponseError)(nil), "anytype.Rpc.Log.Send.Response.Error")
	proto.RegisterType((*RpcVersion)(nil), "anytype.Rpc.Version")
	proto.RegisterType((*RpcVersionGet)(nil), "anytype.Rpc.Version.Get")
	proto.RegisterType((*RpcVersionGetRequest)(nil), "anytype.Rpc.Version.Get.Request")
	proto.RegisterType((*RpcVersionGetResponse)(nil), "anytype.Rpc.Version.Get.Response")
	proto.RegisterType((*RpcVersionGetResponseError)(nil), "anytype.Rpc.Version.Get.Response.Error")
	proto.RegisterType((*RpcIpfs)(nil), "anytype.Rpc.Ipfs")
	proto.RegisterType((*RpcIpfsFile)(nil), "anytype.Rpc.Ipfs.File")
	proto.RegisterType((*RpcIpfsFileGet)(nil), "anytype.Rpc.Ipfs.File.Get")
	proto.RegisterType((*RpcIpfsFileGetRequest)(nil), "anytype.Rpc.Ipfs.File.Get.Request")
	proto.RegisterType((*RpcIpfsFileGetResponse)(nil), "anytype.Rpc.Ipfs.File.Get.Response")
	proto.RegisterType((*RpcIpfsFileGetResponseError)(nil), "anytype.Rpc.Ipfs.File.Get.Response.Error")
	proto.RegisterType((*RpcIpfsImage)(nil), "anytype.Rpc.Ipfs.Image")
	proto.RegisterType((*RpcIpfsImageGet)(nil), "anytype.Rpc.Ipfs.Image.Get")
	proto.RegisterType((*RpcIpfsImageGetBlob)(nil), "anytype.Rpc.Ipfs.Image.Get.Blob")
	proto.RegisterType((*RpcIpfsImageGetBlobRequest)(nil), "anytype.Rpc.Ipfs.Image.Get.Blob.Request")
	proto.RegisterType((*RpcIpfsImageGetBlobResponse)(nil), "anytype.Rpc.Ipfs.Image.Get.Blob.Response")
	proto.RegisterType((*RpcIpfsImageGetBlobResponseError)(nil), "anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error")
	proto.RegisterType((*RpcIpfsImageGetFile)(nil), "anytype.Rpc.Ipfs.Image.Get.File")
	proto.RegisterType((*RpcIpfsImageGetFileRequest)(nil), "anytype.Rpc.Ipfs.Image.Get.File.Request")
	proto.RegisterType((*RpcIpfsImageGetFileResponse)(nil), "anytype.Rpc.Ipfs.Image.Get.File.Response")
	proto.RegisterType((*RpcIpfsImageGetFileResponseError)(nil), "anytype.Rpc.Ipfs.Image.Get.File.Response.Error")
}

func init() { proto.RegisterFile("pb/protos/commands.proto", fileDescriptor_8261c968b2e6f45c) }

var fileDescriptor_8261c968b2e6f45c = []byte{
	// 2005 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x9a, 0x5f, 0x8c, 0x1b, 0x47,
	0x1d, 0xc7, 0xcf, 0xbb, 0xf6, 0xd9, 0x37, 0x97, 0xa4, 0xdb, 0x55, 0x28, 0xd7, 0x21, 0x5c, 0xa3,
	0x14, 0x4a, 0x7a, 0x6d, 0xf6, 0x42, 0x42, 0x29, 0x41, 0x4d, 0xd3, 0x3d, 0x7b, 0x7d, 0xe7, 0xd6,
	0xde, 0x3d, 0x8d, 0xd7, 0x17, 0xe0, 0x65, 0xb5, 0xb6, 0xe7, 0x7c, 0x4b, 0xd7, 0x1e, 0xb3, 0xbb,
	0x77, 0xe9, 0xf5, 0x0d, 0x21, 0x04, 0x52, 0x1f, 0xf8, 0x23, 0xf1, 0x42, 0x11, 0xf0, 0x48, 0x49,
	0xa1, 0xe5, 0x01, 0x15, 0x21, 0x10, 0x12, 0x20, 0x04, 0x48, 0x48, 0x05, 0x24, 0x04, 0x42, 0xa0,
	0x36, 0x79, 0x42, 0x85, 0x47, 0x84, 0x10, 0x2a, 0xa0, 0xd9, 0x7f, 0xde, 0xb9, 0x78, 0x1d, 0xaf,
	0x15, 0x13, 0xde, 0x3c, 0xb3, 0x33, 0xbf, 0xdf, 0x6f, 0x3e, 0xdf, 0xdf, 0xfc, 0x66, 0x77, 0xee,
	0xc0, 0xca, 0xb0, 0xbd, 0x3e, 0x74, 0x88, 0x47, 0xdc, 0xf5, 0x0e, 0xe9, 0xf7, 0xcd, 0x41, 0xd7,
	0x95, 0xfc, 0xb6, 0x58, 0x34, 0x07, 0x87, 0xde, 0xe1, 0x10, 0xc3, 0x67, 0x0e, 0xf0, 0xa0, 0x4b,
	0x9c, 0xf5, 0x9e, 0xe5, 0xed, 0xed, 0xb7, 0xa5, 0x0e, 0xe9, 0xaf, 0x87, 0x8f, 0x2c, 0xb2, 0xde,
	0x23, 0xe7, 0xc2, 0xc6, 0x39, 0xdb, 0x6a, 0x3b, 0xa6, 0x73, 0xb8, 0x3e, 0x6c, 0xaf, 0xf7, 0x49,
	0x17, 0xdb, 0x91, 0x5d, 0xbf, 0x11, 0x5a, 0x85, 0xef, 0x4c, 0xf8, 0xdb, 0x33, 0x07, 0x3d, 0x1c,
	0x3e, 0x38, 0xf3, 0x87, 0x2b, 0x80, 0x47, 0xc3, 0x0e, 0x7c, 0x69, 0x15, 0x14, 0x36, 0x6c, 0xd2,
	0x79, 0x16, 0x7e, 0x9a, 0x07, 0xc5, 0x2d, 0xcb, 0xf5, 0x88, 0x73, 0x08, 0xff, 0xc9, 0x81, 0x7c,
	0x83, 0x1c, 0x60, 0xd8, 0x01, 0x45, 0x84, 0x3f, 0xb1, 0x8f, 0x5d, 0x4f, 0x5c, 0x01, 0xc5, 0x36,
	0x1d, 0x58, 0xeb, 0xae, 0xe4, 0x4e, 0xe7, 0xce, 0x2e, 0xa1, 0xa8, 0x29, 0x9e, 0x06, 0xcb, 0x7d,
	0x72, 0x80, 0xab, 0xc4, 0xb9, 0x66, 0x3a, 0xdd, 0x15, 0xee, 0x74, 0xee, 0x6c, 0x09, 0x25, 0xbb,
	0xc4, 0x53, 0x60, 0xa9, 0x43, 0x06, 0x1e, 0x7e, 0xce, 0xab, 0x75, 0x57, 0x78, 0x7f, 0xf6, 0xa8,
	0x03, 0xbe, 0xc0, 0x81, 0x12, 0xc2, 0xee, 0x90, 0x0c, 0x5c, 0x2c, 0x56, 0x40, 0x01, 0x3b, 0x0e,
	0x71, 0x7c, 0x27, 0xcb, 0x17, 0x24, 0x29, 0x5c, 0xaf, 0x84, 0x86, 0x1d, 0xc9, 0x8f, 0x54, 0x0a,
	0xa3, 0x94, 0x68, 0x84, 0x52, 0x34, 0x51, 0x52, 0xe8, 0x2c, 0x14, 0x4c, 0x86, 0xdf, 0xcb, 0x81,
	0x82, 0xdf, 0x21, 0x6e, 0x82, 0x7c, 0x87, 0x74, 0xb1, 0x6f, 0xee, 0xc4, 0x85, 0x8b, 0xd9, 0xcc,
	0x49, 0x65, 0xd2, 0xc5, 0xc8, 0x37, 0x40, 0x57, 0xd9, 0xc5, 0x6e, 0xc7, 0xb1, 0x86, 0x9e, 0x45,
	0x06, 0xfe, 0x2a, 0x97, 0x50, 0xb2, 0xeb, 0x4c, 0x05, 0xe4, 0xe9, 0x78, 0xb1, 0x04, 0xf2, 0x6a,
	0xab, 0x5e, 0x17, 0x16, 0xc4, 0x7b, 0xc1, 0xf1, 0x96, 0xfa, 0x8c, 0xaa, 0x5d, 0x55, 0x0d, 0x05,
	0x21, 0x0d, 0x09, 0x39, 0xf1, 0x38, 0x58, 0xda, 0x90, 0x2b, 0x46, 0x4d, 0xdd, 0x6e, 0xe9, 0x02,
	0x27, 0x0a, 0xe0, 0x58, 0x59, 0x56, 0x0d, 0x55, 0xd3, 0x8d, 0x86, 0xb6, 0xa3, 0x08, 0x3c, 0xbc,
	0xce, 0x81, 0xbc, 0x36, 0xc4, 0x03, 0xf8, 0xf8, 0x88, 0xfd, 0x09, 0xc0, 0x59, 0x11, 0x76, 0xce,
	0x3a, 0xc2, 0x93, 0x3b, 0xca, 0xf3, 0x2f, 0xb9, 0x04, 0xcf, 0x27, 0x58, 0x9e, 0x0f, 0x8d, 0x01,
	0x40, 0xbd, 0xa5, 0x70, 0xfc, 0x6a, 0xcc, 0xf1, 0x0a, 0xc3, 0xf1, 0x91, 0xe9, 0xcc, 0x64, 0xe3,
	0x77, 0x21, 0x3b, 0x3f, 0xf8, 0x47, 0x1e, 0x2c, 0x96, 0x1d, 0x6c, 0x7a, 0x18, 0xfe, 0x2c, 0x37,
	0x02, 0xb6, 0x06, 0x0a, 0x7e, 0x76, 0x86, 0xab, 0x3e, 0x19, 0x87, 0xeb, 0xef, 0x8e, 0x20, 0x60,
	0x14, 0x0c, 0x11, 0x21, 0x28, 0x79, 0xa6, 0xd3, 0xc3, 0x23, 0x96, 0x71, 0x5b, 0xbc, 0x04, 0x4a,
	0x43, 0xe2, 0x5a, 0x7e, 0xc4, 0xbc, 0xbf, 0xf2, 0x77, 0x8f, 0x33, 0x25, 0x6d, 0x87, 0x83, 0x50,
	0x3c, 0x9c, 0xd5, 0x28, 0x7f, 0x44, 0x23, 0xea, 0x74, 0x68, 0x3a, 0x78, 0x40, 0x1f, 0x16, 0x02,
	0xa7, 0x51, 0x1b, 0x7e, 0x26, 0xb9, 0x1f, 0x9e, 0x64, 0xf5, 0x3b, 0x3b, 0x06, 0x7c, 0xb0, 0xfe,
	0xf1, 0x0a, 0x26, 0xb7, 0x2d, 0xc7, 0x6c, 0x5b, 0xf8, 0xf5, 0x58, 0x5b, 0x99, 0xd1, 0xf6, 0xdc,
	0xb4, 0x2e, 0xe6, 0xaf, 0xee, 0x1b, 0x1c, 0x58, 0x6c, 0x0d, 0xbb, 0x54, 0xdd, 0xdd, 0x91, 0xb8,
	0x97, 0x41, 0x31, 0x2c, 0x66, 0x21, 0x94, 0x07, 0xe3, 0x88, 0xcb, 0x7e, 0xbf, 0xd4, 0xd8, 0xb7,
	0x3d, 0x6b, 0x68, 0xe3, 0x20, 0x7a, 0xb7, 0x6e, 0xb9, 0x1e, 0x8a, 0xe6, 0xdc, 0x66, 0xf3, 0xfc,
	0x2d, 0x97, 0x0d, 0x7e, 0x10, 0x5e, 0xca, 0xf6, 0xc9, 0x82, 0x78, 0xac, 0xa1, 0xf9, 0x23, 0xfe,
	0x36, 0x07, 0x0a, 0x65, 0x9b, 0xb8, 0x78, 0xf6, 0x7a, 0xf3, 0x56, 0x12, 0xd9, 0x65, 0x16, 0xd9,
	0xfb, 0xc6, 0x25, 0x13, 0x75, 0x97, 0x42, 0xec, 0x6b, 0x31, 0xb1, 0xa7, 0x18, 0x62, 0x8f, 0x4e,
	0x69, 0x67, 0xfe, 0xc0, 0xfe, 0x71, 0x0f, 0x58, 0x94, 0x3b, 0x74, 0x3a, 0xfc, 0x01, 0x0f, 0x8a,
	0x0d, 0xd3, 0x79, 0xb6, 0x89, 0x3d, 0xf8, 0x6a, 0xa2, 0xfa, 0x30, 0xb8, 0x72, 0x63, 0xb6, 0x7e,
	0x6a, 0xbd, 0x59, 0x03, 0x05, 0x87, 0x66, 0xa9, 0x5f, 0x6c, 0x6e, 0xad, 0x5b, 0x88, 0x3e, 0x43,
	0xc1, 0x10, 0x5a, 0x91, 0xe9, 0x23, 0xbf, 0xb6, 0x24, 0x2b, 0x72, 0xb2, 0x2e, 0x95, 0xa9, 0xd7,
	0x81, 0x27, 0xe9, 0xf8, 0x39, 0x4f, 0xa2, 0xa1, 0x4a, 0xfa, 0xe1, 0x10, 0x23, 0x7f, 0x22, 0x7c,
	0x3b, 0xa9, 0x5b, 0x95, 0xd5, 0xed, 0xfc, 0x18, 0xde, 0xc1, 0xaa, 0xa5, 0x70, 0xc5, 0x29, 0x02,
	0x7e, 0x23, 0x16, 0xb0, 0xc6, 0x08, 0xf8, 0x58, 0x56, 0x83, 0xf3, 0x57, 0xf2, 0x6d, 0x0e, 0x94,
	0xa8, 0x6f, 0x77, 0x13, 0x7b, 0x90, 0xfc, 0x8f, 0xe5, 0x83, 0xff, 0x49, 0xd2, 0xdf, 0x64, 0xe9,
	0xbf, 0x7f, 0x32, 0x2c, 0x1a, 0x70, 0x0a, 0xfe, 0x97, 0x62, 0xfc, 0x4f, 0x33, 0xf8, 0x3f, 0x98,
	0xd9, 0xe2, 0xfc, 0xf9, 0xbf, 0xc2, 0x03, 0x10, 0x14, 0xe8, 0x8a, 0x43, 0x86, 0xf0, 0xcb, 0x77,
	0x64, 0x07, 0x41, 0x50, 0xf2, 0x0f, 0x38, 0xd7, 0x7f, 0xd3, 0xe4, 0xe9, 0xb3, 0xa8, 0xcd, 0x9c,
	0xe6, 0xf9, 0x4c, 0xa7, 0x39, 0xfc, 0x54, 0xf2, 0x4c, 0xae, 0xb1, 0x6a, 0x5d, 0x4c, 0x67, 0x3b,
	0x5a, 0x5e, 0x8a, 0x5e, 0xd7, 0x63, 0xbd, 0xea, 0x8c, 0x5e, 0x1f, 0x9a, 0xc1, 0xe6, 0xfc, 0x15,
	0xfb, 0x57, 0x01, 0x14, 0xc3, 0x92, 0x02, 0x5f, 0xe0, 0xe9, 0xd9, 0x6c, 0x13, 0xb3, 0x0b, 0x5d,
	0x46, 0x38, 0x9b, 0x74, 0x4c, 0x7b, 0xdb, 0xf4, 0xf6, 0x22, 0xe1, 0xe2, 0x0e, 0x51, 0x00, 0xfc,
	0xbe, 0x63, 0x87, 0xd1, 0xd0, 0x9f, 0x8c, 0x94, 0xfc, 0x11, 0x29, 0x27, 0xbe, 0x41, 0xb1, 0x5f,
	0x0d, 0x0d, 0x56, 0x91, 0xc7, 0xd3, 0xe9, 0x45, 0x15, 0x31, 0x08, 0x3d, 0x45, 0x95, 0x57, 0x62,
	0x55, 0xb6, 0x19, 0x55, 0x9e, 0x98, 0xd1, 0xee, 0xfc, 0x95, 0x79, 0x93, 0x03, 0xa5, 0x0a, 0xb9,
	0x36, 0xf0, 0xf5, 0x28, 0x8f, 0xf4, 0x48, 0xf2, 0xcd, 0x4d, 0xe2, 0x7b, 0xcb, 0xa9, 0xfe, 0xb9,
	0x24, 0x5f, 0x8d, 0xe5, 0x7b, 0xe9, 0xf6, 0x1c, 0xa2, 0x60, 0x52, 0x08, 0x7f, 0x27, 0x26, 0x8c,
	0x18, 0xc2, 0x4f, 0xce, 0x6c, 0x79, 0xfe, 0x8c, 0x7f, 0x55, 0x00, 0x8b, 0x57, 0x4d, 0xdb, 0xc6,
	0x1e, 0xfc, 0x33, 0x17, 0x7f, 0x76, 0xbc, 0x97, 0x81, 0xed, 0x10, 0xe2, 0x25, 0x72, 0x3f, 0x6e,
	0xc3, 0x97, 0x93, 0x38, 0xaf, 0xb0, 0x38, 0x1f, 0x66, 0x16, 0x1d, 0xb8, 0x98, 0xfc, 0x56, 0x0f,
	0x41, 0xa9, 0x3f, 0xc0, 0x7d, 0x32, 0xb0, 0x3a, 0x51, 0x05, 0x8c, 0xda, 0xf0, 0xc7, 0x31, 0xda,
	0x0d, 0x06, 0xad, 0x34, 0xb5, 0x97, 0x6c, 0x28, 0x9b, 0x33, 0x7c, 0xf6, 0x3e, 0x00, 0xde, 0x55,
	0x95, 0x6b, 0x75, 0xa5, 0x62, 0xe8, 0x9a, 0x51, 0x46, 0x8a, 0xac, 0x2b, 0x46, 0x5d, 0x2b, 0xcb,
	0x75, 0x03, 0x29, 0xdb, 0x9a, 0x80, 0x69, 0x3e, 0x17, 0x11, 0xee, 0x90, 0x03, 0xec, 0x40, 0x79,
	0x2a, 0xc2, 0x13, 0x99, 0x7c, 0x31, 0x49, 0xff, 0x29, 0x96, 0xfe, 0xda, 0x38, 0x2e, 0xa1, 0xef,
	0x94, 0xec, 0xfd, 0x49, 0x8c, 0xb8, 0xcc, 0x20, 0x5e, 0x9f, 0xde, 0xd4, 0xff, 0x01, 0xe3, 0x17,
	0x8f, 0x81, 0xa2, 0xdc, 0xe9, 0x90, 0xfd, 0x81, 0x07, 0x5f, 0xcd, 0xc7, 0x09, 0x7d, 0x6d, 0x84,
	0x5b, 0x04, 0xf9, 0x81, 0xd9, 0xc7, 0x21, 0x6a, 0xff, 0xb7, 0xb8, 0x06, 0xee, 0x31, 0x0f, 0x4c,
	0xcf, 0x74, 0xea, 0x71, 0x9d, 0xf7, 0x03, 0xde, 0x5a, 0x40, 0x47, 0x1f, 0x88, 0x67, 0xc0, 0x72,
	0xd0, 0x55, 0x26, 0x36, 0x71, 0x82, 0x02, 0xbf, 0xb5, 0x80, 0x92, 0x9d, 0x1b, 0x25, 0xb0, 0x18,
	0x34, 0xe1, 0xcb, 0xfc, 0xb4, 0x22, 0x85, 0x51, 0x4f, 0xde, 0x23, 0xe7, 0x41, 0xd1, 0x0c, 0xc6,
	0xf9, 0x01, 0x2e, 0x5f, 0xb8, 0xef, 0xc8, 0x61, 0x1f, 0x5a, 0x41, 0xd1, 0x30, 0x78, 0x9d, 0x9b,
	0x46, 0xd6, 0x89, 0xce, 0xb3, 0xc9, 0xfa, 0xfd, 0xdc, 0x0c, 0xba, 0x3e, 0x0a, 0xce, 0xca, 0xe5,
	0xb2, 0xd6, 0x52, 0xf5, 0x50, 0xd5, 0x8a, 0xb1, 0xd1, 0xd2, 0x8d, 0x91, 0xd6, 0x4d, 0x5d, 0x46,
	0xba, 0xa1, 0x6a, 0x15, 0x45, 0xa0, 0x72, 0x3d, 0x74, 0x9b, 0xd1, 0x8a, 0x6e, 0xa8, 0x72, 0x43,
	0x11, 0x76, 0xa7, 0xb0, 0xac, 0xe8, 0x86, 0xbc, 0x23, 0xeb, 0x32, 0x12, 0x7a, 0xf0, 0xa7, 0xfc,
	0x68, 0x8b, 0x2e, 0xc5, 0x39, 0x03, 0xbf, 0x95, 0x54, 0x51, 0x66, 0x55, 0x7c, 0x64, 0x2c, 0xc8,
	0xc9, 0x7b, 0xed, 0x4f, 0xb1, 0x28, 0x15, 0x46, 0x94, 0xf3, 0x19, 0x6c, 0x65, 0x53, 0xe5, 0xad,
	0x59, 0x54, 0x79, 0x07, 0xb8, 0x57, 0xd5, 0x8c, 0x10, 0x5f, 0xd3, 0xa8, 0x6a, 0x2d, 0xb5, 0x22,
	0x50, 0x6f, 0xa7, 0x54, 0x25, 0x80, 0x87, 0x94, 0xb2, 0xb6, 0xa3, 0x20, 0xe3, 0xaa, 0x5c, 0xaf,
	0x2b, 0xba, 0x51, 0xad, 0xa1, 0xa6, 0x2e, 0xec, 0xde, 0x6e, 0x9b, 0xf6, 0xc4, 0x07, 0xc1, 0x03,
	0xa3, 0xb6, 0xa1, 0x7c, 0xa4, 0xd6, 0xd4, 0x9b, 0xbe, 0x2e, 0x65, 0x0d, 0xa1, 0xd6, 0xb6, 0xae,
	0x54, 0x84, 0x3d, 0xf1, 0x3e, 0x20, 0x8e, 0xac, 0xa0, 0x96, 0x1a, 0xc8, 0x6f, 0x51, 0xff, 0xa1,
	0xbf, 0xc8, 0xbd, 0xaa, 0xe9, 0xc6, 0xb6, 0x82, 0xaa, 0x1a, 0x6a, 0x28, 0x15, 0xe1, 0xe3, 0xf0,
	0x4b, 0x79, 0xb0, 0xd8, 0xc4, 0x36, 0xee, 0x78, 0xf0, 0xb1, 0xf4, 0x1b, 0x80, 0x64, 0xe1, 0xe5,
	0x8e, 0x1c, 0x6d, 0xbf, 0xcd, 0xbc, 0x6f, 0x03, 0x7f, 0x77, 0x6c, 0xdf, 0xfe, 0x26, 0xd3, 0xbe,
	0x1d, 0xeb, 0x3c, 0x5b, 0x86, 0xbc, 0x99, 0x9b, 0x43, 0x3d, 0x9e, 0x46, 0xe8, 0xdd, 0x14, 0xa1,
	0x7b, 0xac, 0xf5, 0x6a, 0x4d, 0xad, 0x44, 0xb9, 0x68, 0xd4, 0xd4, 0xaa, 0x26, 0xec, 0x89, 0x12,
	0x58, 0x4b, 0x58, 0xa7, 0x59, 0x10, 0x7a, 0x90, 0xd5, 0x8a, 0xd1, 0x50, 0x95, 0x86, 0xa6, 0xd6,
	0xca, 0x7e, 0x7f, 0x53, 0xd1, 0x05, 0x0b, 0xfe, 0x88, 0x07, 0x7c, 0x9d, 0xf4, 0xe0, 0x6b, 0x3c,
	0xc8, 0x37, 0xf1, 0xa0, 0x0b, 0xbf, 0x99, 0x63, 0xfe, 0x18, 0xd0, 0xc7, 0xae, 0x6b, 0xf6, 0xa2,
	0xb3, 0x21, 0x6a, 0x8a, 0x97, 0x40, 0xc1, 0xc6, 0x07, 0x38, 0x78, 0xc9, 0x3f, 0x91, 0xb8, 0x9a,
	0xa3, 0x12, 0xd4, 0x49, 0x4f, 0xa2, 0xb6, 0xa4, 0xd0, 0x8e, 0x54, 0xa7, 0x43, 0x51, 0x30, 0xe3,
	0xcc, 0xd3, 0xa0, 0xe0, 0xb7, 0xc5, 0x25, 0x50, 0xa8, 0x28, 0x1b, 0xad, 0x4d, 0x61, 0x81, 0xfe,
	0x8c, 0x70, 0x2e, 0x81, 0x42, 0x55, 0xd6, 0xe5, 0xba, 0xc0, 0x51, 0xec, 0xfe, 0xaa, 0x78, 0xda,
	0xb9, 0x2d, 0xab, 0xb5, 0xb2, 0x90, 0x17, 0x97, 0x41, 0xf1, 0xaa, 0x8c, 0xd4, 0x9a, 0xba, 0x29,
	0x14, 0xe0, 0x27, 0x93, 0x07, 0xfe, 0x87, 0xd9, 0x9c, 0x7c, 0x4f, 0x5a, 0x4c, 0x93, 0xff, 0x92,
	0x70, 0x99, 0xc9, 0xad, 0x87, 0xa7, 0x31, 0x92, 0x2d, 0xab, 0xd4, 0x19, 0x92, 0xea, 0x38, 0x58,
	0xa2, 0x92, 0x45, 0xe5, 0x66, 0x19, 0x14, 0xf5, 0x5a, 0x43, 0xd1, 0x5a, 0xba, 0xb0, 0x0b, 0x7f,
	0xc7, 0x81, 0xe2, 0x0e, 0x76, 0x5c, 0xfa, 0xfd, 0xfa, 0x4b, 0x0e, 0xf0, 0x9b, 0xd8, 0x4b, 0x16,
	0xea, 0xd7, 0xb8, 0x69, 0xaf, 0xed, 0x42, 0x23, 0x52, 0xea, 0xb5, 0x03, 0xcd, 0x87, 0x83, 0x60,
	0x50, 0x74, 0xcb, 0x1c, 0x36, 0xe1, 0xaf, 0xa7, 0xba, 0xd0, 0x4b, 0xf7, 0x90, 0x0d, 0x61, 0x77,
	0x06, 0x84, 0x27, 0x81, 0xb0, 0xa3, 0xa0, 0x66, 0x4d, 0x53, 0x8d, 0x5a, 0xd3, 0x50, 0x1a, 0xdb,
	0xfa, 0x47, 0x05, 0x7e, 0x22, 0xd8, 0xaf, 0x2c, 0x81, 0x7c, 0x6d, 0xb8, 0xeb, 0xc2, 0xbf, 0x73,
	0x20, 0x5f, 0xb5, 0x6c, 0x0c, 0xff, 0x1a, 0xe2, 0xbd, 0x3f, 0xb5, 0x82, 0xc2, 0x5f, 0x4c, 0xfd,
	0x01, 0x40, 0x4d, 0x4b, 0xd4, 0xec, 0x04, 0xe0, 0x22, 0xc8, 0x77, 0x4d, 0xcf, 0xf4, 0x19, 0x1c,
	0x43, 0xfe, 0x6f, 0xf1, 0x24, 0x28, 0xf4, 0x71, 0xd7, 0x32, 0xc3, 0x0f, 0xe9, 0xa0, 0x11, 0xbf,
	0xc3, 0xe5, 0x47, 0xef, 0x70, 0xf0, 0x87, 0x53, 0x7d, 0x22, 0x4c, 0x8a, 0xe3, 0xee, 0x66, 0xf6,
	0x8b, 0x8b, 0xa0, 0x50, 0xeb, 0x9b, 0x3d, 0x0c, 0xbf, 0xb0, 0x18, 0x80, 0xff, 0x37, 0x07, 0xf2,
	0x1b, 0x36, 0x69, 0xc3, 0xad, 0xf4, 0x33, 0xec, 0x1c, 0xc8, 0xbb, 0xd6, 0xf3, 0x38, 0xac, 0x4c,
	0xf7, 0x1f, 0x39, 0x55, 0x7c, 0x7b, 0x52, 0xd3, 0x7a, 0x1e, 0x23, 0x7f, 0x18, 0x7d, 0x1b, 0x1c,
	0x09, 0xa6, 0xb0, 0x82, 0xad, 0xdf, 0x0a, 0x2a, 0x98, 0x4f, 0x49, 0xd1, 0x38, 0xd2, 0x65, 0x6b,
	0xdb, 0xa4, 0x1d, 0xc9, 0x46, 0x7f, 0x27, 0x3e, 0x26, 0xb6, 0x18, 0x31, 0x3e, 0x90, 0xd1, 0xc7,
	0xdd, 0x95, 0xe4, 0xb3, 0x7c, 0xb8, 0x15, 0xee, 0x9c, 0x00, 0xdf, 0x9d, 0x55, 0x00, 0x3f, 0x67,
	0xc7, 0x0b, 0xc0, 0xdc, 0x4f, 0x71, 0x47, 0xee, 0xa7, 0x66, 0x93, 0x62, 0x8c, 0xb7, 0xbb, 0x2a,
	0xc5, 0xc6, 0xa9, 0x9f, 0xdf, 0x58, 0xcd, 0xbd, 0x7e, 0x63, 0x35, 0xf7, 0xc6, 0x8d, 0xd5, 0xdc,
	0xe7, 0x6f, 0xae, 0x2e, 0xbc, 0x7e, 0x73, 0x75, 0xe1, 0xf7, 0x37, 0x57, 0x17, 0x3e, 0xc6, 0x0d,
	0xdb, 0xed, 0x45, 0xff, 0x1f, 0x00, 0x2e, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x62, 0x84,
	0x5e, 0x8b, 0x20, 0x00, 0x00,
}

func (m *Rpc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rpc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rpc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockHistoryMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockHistoryMove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockHistoryMove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockHistoryMoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockHistoryMoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockHistoryMoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MoveForward {
		i--
		if m.MoveForward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockHistoryMoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockHistoryMoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockHistoryMoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockHistoryMoveResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockHistoryMoveResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockHistoryMoveResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockOpen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockOpenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockOpenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockOpenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockOpenResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockOpenResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockOpenResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Position != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockCreateResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockCreateResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockCreateResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Changes != nil {
		{
			size, err := m.Changes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockUpdateResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockUpdateResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockUpdateResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockCloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockCloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockCloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockCloseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockCloseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockCloseResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockCloseResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockCloseResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionMarkSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionMarkSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionMarkSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionMarkSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionMarkSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionMarkSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionMarkSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionMarkSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionMarkSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionMarkSetResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionMarkSetResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionMarkSetResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionMarksGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionMarksGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionMarksGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionMarksGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionMarksGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionMarksGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionMarksGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionMarksGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionMarksGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionMarksGetResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionMarksGetResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionMarksGetResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionBlocksDrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionBlocksDrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionBlocksDrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionBlocksDropRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionBlocksDropRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionBlocksDropRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Position != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BlocksId) > 0 {
		for iNdEx := len(m.BlocksId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlocksId[iNdEx])
			copy(dAtA[i:], m.BlocksId[iNdEx])
			i = encodeVarintCommands(dAtA, i, uint64(len(m.BlocksId[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionBlocksDropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionBlocksDropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionBlocksDropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionBlocksDropResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionBlocksDropResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionBlocksDropResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionContentUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionContentUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionContentUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionContentUploadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionContentUploadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionContentUploadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LocalPath) > 0 {
		i -= len(m.LocalPath)
		copy(dAtA[i:], m.LocalPath)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.LocalPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionContentUploadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionContentUploadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionContentUploadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionContentUploadResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionContentUploadResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionContentUploadResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionContentDownload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionContentDownload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionContentDownload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionContentDownloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionContentDownloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionContentDownloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionContentDownloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionContentDownloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionContentDownloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcBlockActionContentDownloadResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBlockActionContentDownloadResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBlockActionContentDownloadResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcWallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcWallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcWalletCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcWalletCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcWalletCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcWalletCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcWalletCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcWalletCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RootPath) > 0 {
		i -= len(m.RootPath)
		copy(dAtA[i:], m.RootPath)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.RootPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcWalletCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcWalletCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcWalletCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcWalletCreateResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcWalletCreateResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcWalletCreateResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcWalletRecover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcWalletRecover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcWalletRecover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcWalletRecoverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcWalletRecoverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcWalletRecoverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RootPath) > 0 {
		i -= len(m.RootPath)
		copy(dAtA[i:], m.RootPath)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.RootPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcWalletRecoverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcWalletRecoverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcWalletRecoverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcWalletRecoverResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcWalletRecoverResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcWalletRecoverResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcAccountCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcAccountCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Avatar != nil {
		{
			size := m.Avatar.Size()
			i -= size
			if _, err := m.Avatar.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcAccountCreateRequestAvatarOfAvatarLocalPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountCreateRequestAvatarOfAvatarLocalPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AvatarLocalPath)
	copy(dAtA[i:], m.AvatarLocalPath)
	i = encodeVarintCommands(dAtA, i, uint64(len(m.AvatarLocalPath)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *RpcAccountCreateRequestAvatarOfAvatarColor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountCreateRequestAvatarOfAvatarColor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AvatarColor)
	copy(dAtA[i:], m.AvatarColor)
	i = encodeVarintCommands(dAtA, i, uint64(len(m.AvatarColor)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *RpcAccountCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcAccountCreateResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountCreateResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountCreateResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcAccountRecover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountRecover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountRecover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcAccountRecoverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountRecoverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountRecoverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcAccountRecoverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountRecoverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountRecoverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcAccountRecoverResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountRecoverResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountRecoverResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcAccountSelect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountSelect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountSelect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcAccountSelectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountSelectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountSelectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RootPath) > 0 {
		i -= len(m.RootPath)
		copy(dAtA[i:], m.RootPath)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.RootPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcAccountSelectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountSelectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountSelectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcAccountSelectResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcAccountSelectResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcAccountSelectResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcLogSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcLogSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcLogSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcLogSendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcLogSendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcLogSendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcLogSendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcLogSendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcLogSendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcLogSendResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcLogSendResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcLogSendResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcVersionGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcVersionGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcVersionGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcVersionGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcVersionGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcVersionGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcVersionGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcVersionGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcVersionGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcVersionGetResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcVersionGetResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcVersionGetResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcIpfs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcIpfsFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcIpfsFileGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsFileGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsFileGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcIpfsFileGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsFileGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsFileGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcIpfsFileGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsFileGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsFileGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Media) > 0 {
		i -= len(m.Media)
		copy(dAtA[i:], m.Media)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Media)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcIpfsFileGetResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsFileGetResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsFileGetResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcIpfsImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcIpfsImageGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsImageGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsImageGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcIpfsImageGetBlob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsImageGetBlob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsImageGetBlob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcIpfsImageGetBlobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsImageGetBlobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsImageGetBlobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcIpfsImageGetBlobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsImageGetBlobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsImageGetBlobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blob) > 0 {
		i -= len(m.Blob)
		copy(dAtA[i:], m.Blob)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Blob)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcIpfsImageGetBlobResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsImageGetBlobResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsImageGetBlobResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcIpfsImageGetFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsImageGetFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsImageGetFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RpcIpfsImageGetFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsImageGetFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsImageGetFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcIpfsImageGetFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsImageGetFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsImageGetFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalPath) > 0 {
		i -= len(m.LocalPath)
		copy(dAtA[i:], m.LocalPath)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.LocalPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcIpfsImageGetFileResponseError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcIpfsImageGetFileResponseError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcIpfsImageGetFileResponseError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommands(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommands(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Rpc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockHistoryMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockHistoryMoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.MoveForward {
		n += 2
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockHistoryMoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockHistoryMoveResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockOpenResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovCommands(uint64(m.Position))
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockCreateResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Changes != nil {
		l = m.Changes.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockUpdateResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockCloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockCloseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockCloseResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockActionMarkSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockActionMarkSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCommands(uint64(m.Type))
	}
	return n
}

func (m *RpcBlockActionMarkSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionMarkSetResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionMarksGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockActionMarksGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionMarksGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionMarksGetResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionBlocksDrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockActionBlocksDropRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if len(m.BlocksId) > 0 {
		for _, s := range m.BlocksId {
			l = len(s)
			n += 1 + l + sovCommands(uint64(l))
		}
	}
	if m.Position != 0 {
		n += 1 + sovCommands(uint64(m.Position))
	}
	return n
}

func (m *RpcBlockActionBlocksDropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionBlocksDropResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockActionContentUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockActionContentUploadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalPath)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionContentUploadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionContentUploadResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionContentDownload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcBlockActionContentDownloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionContentDownloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcBlockActionContentDownloadResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcWalletCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcWalletCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootPath)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcWalletCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcWalletCreateResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcWalletRecover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcWalletRecoverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootPath)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcWalletRecoverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcWalletRecoverResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcAccountCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcAccountCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Avatar != nil {
		n += m.Avatar.Size()
	}
	return n
}

func (m *RpcAccountCreateRequestAvatarOfAvatarLocalPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvatarLocalPath)
	n += 1 + l + sovCommands(uint64(l))
	return n
}
func (m *RpcAccountCreateRequestAvatarOfAvatarColor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvatarColor)
	n += 1 + l + sovCommands(uint64(l))
	return n
}
func (m *RpcAccountCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcAccountCreateResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcAccountRecover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcAccountRecoverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcAccountRecoverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcAccountRecoverResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcAccountSelect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcAccountSelectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.RootPath)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcAccountSelectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcAccountSelectResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcLogSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcLogSendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovCommands(uint64(m.Level))
	}
	return n
}

func (m *RpcLogSendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcLogSendResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcVersionGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcVersionGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcVersionGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcVersionGetResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcIpfs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcIpfsFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcIpfsFileGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcIpfsFileGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcIpfsFileGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcIpfsFileGetResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcIpfsImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcIpfsImageGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcIpfsImageGetBlob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcIpfsImageGetBlobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommands(uint64(m.Size_))
	}
	return n
}

func (m *RpcIpfsImageGetBlobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.Blob)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcIpfsImageGetBlobResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcIpfsImageGetFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RpcIpfsImageGetFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommands(uint64(m.Size_))
	}
	return n
}

func (m *RpcIpfsImageGetFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCommands(uint64(l))
	}
	l = len(m.LocalPath)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func (m *RpcIpfsImageGetFileResponseError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommands(uint64(l))
	}
	return n
}

func sovCommands(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommands(x uint64) (n int) {
	return sovCommands(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Rpc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rpc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rpc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: History: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: History: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockHistoryMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Move: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Move: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockHistoryMoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveForward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MoveForward = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockHistoryMoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcBlockHistoryMoveResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockHistoryMoveResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcBlockHistoryMoveResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockOpen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Open: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Open: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockOpenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockOpenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcBlockOpenResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockOpenResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcBlockOpenResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &model.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= model.BlockPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcBlockCreateResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockCreateResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcBlockCreateResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Changes == nil {
				m.Changes = &ChangeMultipleBlocksList{}
			}
			if err := m.Changes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcBlockUpdateResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockUpdateResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcBlockUpdateResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Close: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Close: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockCloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockCloseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcBlockCloseResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockCloseResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcBlockCloseResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionMarkSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionMarkSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &model.Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= model.BlockContentTextMarkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionMarkSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcBlockActionMarkSetResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionMarkSetResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcBlockActionMarkSetResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionMarksGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarksGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarksGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionMarksGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &model.Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionMarksGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcBlockActionMarksGetResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionMarksGetResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcBlockActionMarksGetResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionBlocksDrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlocksDrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlocksDrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionBlocksDropRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlocksId = append(m.BlocksId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= model.BlockPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionBlocksDropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcBlockActionBlocksDropResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionBlocksDropResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcBlockActionBlocksDropResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionContentUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Upload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Upload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionContentUploadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionContentUploadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcBlockActionContentUploadResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionContentUploadResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcBlockActionContentUploadResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionContentDownload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Download: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Download: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionContentDownloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionContentDownloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcBlockActionContentDownloadResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBlockActionContentDownloadResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcBlockActionContentDownloadResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcWalletCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcWalletCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcWalletCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcWalletCreateResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcWalletCreateResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcWalletCreateResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcWalletRecover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcWalletRecoverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcWalletRecoverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcWalletRecoverResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcWalletRecoverResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcWalletRecoverResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarLocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = &RpcAccountCreateRequestAvatarOfAvatarLocalPath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = &RpcAccountCreateRequestAvatarOfAvatarColor{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcAccountCreateResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &model.Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountCreateResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcAccountCreateResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountRecover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountRecoverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountRecoverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcAccountRecoverResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountRecoverResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcAccountRecoverResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountSelect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Select: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Select: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountSelectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountSelectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcAccountSelectResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &model.Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcAccountSelectResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcAccountSelectResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcLogSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Send: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Send: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcLogSendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= RpcLogSendRequestLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcLogSendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcLogSendResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcLogSendResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcLogSendResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcVersionGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcVersionGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcVersionGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcVersionGetResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcVersionGetResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcVersionGetResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ipfs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ipfs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsFileGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsFileGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsFileGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcIpfsFileGetResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsFileGetResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcIpfsFileGetResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsImageGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsImageGetBlob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsImageGetBlobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= model.ImageSize(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsImageGetBlobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcIpfsImageGetBlobResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blob = append(m.Blob[:0], dAtA[iNdEx:postIndex]...)
			if m.Blob == nil {
				m.Blob = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsImageGetBlobResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcIpfsImageGetBlobResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsImageGetFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsImageGetFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= model.ImageSize(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsImageGetFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RpcIpfsImageGetFileResponseError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcIpfsImageGetFileResponseError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RpcIpfsImageGetFileResponseErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommands(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommands
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommands
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommands
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommands
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommands
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommands        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommands          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommands = fmt.Errorf("proto: unexpected end of group")
)
