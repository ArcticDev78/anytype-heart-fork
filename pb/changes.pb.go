// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: changes.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Change struct {
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0}
}
func (m *Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return m.Size()
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

type ChangeBlock struct {
}

func (m *ChangeBlock) Reset()         { *m = ChangeBlock{} }
func (m *ChangeBlock) String() string { return proto.CompactTextString(m) }
func (*ChangeBlock) ProtoMessage()    {}
func (*ChangeBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0}
}
func (m *ChangeBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlock.Merge(m, src)
}
func (m *ChangeBlock) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlock proto.InternalMessageInfo

type ChangeBlockHeader struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockHeaderChangeOfId
	//	*ChangeBlockHeaderChangeOfType
	//	*ChangeBlockHeaderChangeOfName
	//	*ChangeBlockHeaderChangeOfIcon
	//	*ChangeBlockHeaderChangeOfPermissions
	Change isChangeBlockHeaderChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockHeader) Reset()         { *m = ChangeBlockHeader{} }
func (m *ChangeBlockHeader) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockHeader) ProtoMessage()    {}
func (*ChangeBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 0}
}
func (m *ChangeBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockHeader.Merge(m, src)
}
func (m *ChangeBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockHeader proto.InternalMessageInfo

type isChangeBlockHeaderChange interface {
	isChangeBlockHeaderChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockHeaderChangeOfId struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}
type ChangeBlockHeaderChangeOfType struct {
	Type ModelBlockHeaderType `protobuf:"varint,2,opt,name=type,proto3,enum=anytype.ModelBlockHeaderType,oneof" json:"type,omitempty"`
}
type ChangeBlockHeaderChangeOfName struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
}
type ChangeBlockHeaderChangeOfIcon struct {
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
}
type ChangeBlockHeaderChangeOfPermissions struct {
	Permissions *ModelBlockHeaderPermissions `protobuf:"bytes,5,opt,name=permissions,proto3,oneof" json:"permissions,omitempty"`
}

func (*ChangeBlockHeaderChangeOfId) isChangeBlockHeaderChange()          {}
func (*ChangeBlockHeaderChangeOfType) isChangeBlockHeaderChange()        {}
func (*ChangeBlockHeaderChangeOfName) isChangeBlockHeaderChange()        {}
func (*ChangeBlockHeaderChangeOfIcon) isChangeBlockHeaderChange()        {}
func (*ChangeBlockHeaderChangeOfPermissions) isChangeBlockHeaderChange() {}

func (m *ChangeBlockHeader) GetChange() isChangeBlockHeaderChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockHeader) GetId() string {
	if x, ok := m.GetChange().(*ChangeBlockHeaderChangeOfId); ok {
		return x.Id
	}
	return ""
}

func (m *ChangeBlockHeader) GetType() ModelBlockHeaderType {
	if x, ok := m.GetChange().(*ChangeBlockHeaderChangeOfType); ok {
		return x.Type
	}
	return ModelBlockHeader_DASHBOARD
}

func (m *ChangeBlockHeader) GetName() string {
	if x, ok := m.GetChange().(*ChangeBlockHeaderChangeOfName); ok {
		return x.Name
	}
	return ""
}

func (m *ChangeBlockHeader) GetIcon() string {
	if x, ok := m.GetChange().(*ChangeBlockHeaderChangeOfIcon); ok {
		return x.Icon
	}
	return ""
}

func (m *ChangeBlockHeader) GetPermissions() *ModelBlockHeaderPermissions {
	if x, ok := m.GetChange().(*ChangeBlockHeaderChangeOfPermissions); ok {
		return x.Permissions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockHeader) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockHeaderChangeOfId)(nil),
		(*ChangeBlockHeaderChangeOfType)(nil),
		(*ChangeBlockHeaderChangeOfName)(nil),
		(*ChangeBlockHeaderChangeOfIcon)(nil),
		(*ChangeBlockHeaderChangeOfPermissions)(nil),
	}
}

type ChangeBlockChildren struct {
	Children []string `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (m *ChangeBlockChildren) Reset()         { *m = ChangeBlockChildren{} }
func (m *ChangeBlockChildren) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockChildren) ProtoMessage()    {}
func (*ChangeBlockChildren) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 1}
}
func (m *ChangeBlockChildren) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockChildren) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockChildren.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockChildren) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockChildren.Merge(m, src)
}
func (m *ChangeBlockChildren) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockChildren) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockChildren.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockChildren proto.InternalMessageInfo

func (m *ChangeBlockChildren) GetChildren() []string {
	if m != nil {
		return m.Children
	}
	return nil
}

type ChangeBlockContent struct {
}

func (m *ChangeBlockContent) Reset()         { *m = ChangeBlockContent{} }
func (m *ChangeBlockContent) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContent) ProtoMessage()    {}
func (*ChangeBlockContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2}
}
func (m *ChangeBlockContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContent.Merge(m, src)
}
func (m *ChangeBlockContent) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContent.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContent proto.InternalMessageInfo

type ChangeBlockContentPage struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockContentPageChangeOfStyle
	//	*ChangeBlockContentPageChangeOfBlock
	Change isChangeBlockContentPageChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockContentPage) Reset()         { *m = ChangeBlockContentPage{} }
func (m *ChangeBlockContentPage) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContentPage) ProtoMessage()    {}
func (*ChangeBlockContentPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2, 0}
}
func (m *ChangeBlockContentPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContentPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContentPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContentPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContentPage.Merge(m, src)
}
func (m *ChangeBlockContentPage) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContentPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContentPage.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContentPage proto.InternalMessageInfo

type isChangeBlockContentPageChange interface {
	isChangeBlockContentPageChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockContentPageChangeOfStyle struct {
	Style ModelBlockContentPageStyle `protobuf:"varint,1,opt,name=style,proto3,enum=anytype.ModelBlockContentPageStyle,oneof" json:"style,omitempty"`
}
type ChangeBlockContentPageChangeOfBlock struct {
	Block *ModelBlock `protobuf:"bytes,2,opt,name=block,proto3,oneof" json:"block,omitempty"`
}

func (*ChangeBlockContentPageChangeOfStyle) isChangeBlockContentPageChange() {}
func (*ChangeBlockContentPageChangeOfBlock) isChangeBlockContentPageChange() {}

func (m *ChangeBlockContentPage) GetChange() isChangeBlockContentPageChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockContentPage) GetStyle() ModelBlockContentPageStyle {
	if x, ok := m.GetChange().(*ChangeBlockContentPageChangeOfStyle); ok {
		return x.Style
	}
	return ModelBlockContentPage_EMPTY
}

func (m *ChangeBlockContentPage) GetBlock() *ModelBlock {
	if x, ok := m.GetChange().(*ChangeBlockContentPageChangeOfBlock); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockContentPage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockContentPageChangeOfStyle)(nil),
		(*ChangeBlockContentPageChangeOfBlock)(nil),
	}
}

type ChangeBlockContentDashboard struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockContentDashboardChangeOfStyle
	//	*ChangeBlockContentDashboardChangeOfHeader
	Change isChangeBlockContentDashboardChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockContentDashboard) Reset()         { *m = ChangeBlockContentDashboard{} }
func (m *ChangeBlockContentDashboard) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContentDashboard) ProtoMessage()    {}
func (*ChangeBlockContentDashboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2, 1}
}
func (m *ChangeBlockContentDashboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContentDashboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContentDashboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContentDashboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContentDashboard.Merge(m, src)
}
func (m *ChangeBlockContentDashboard) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContentDashboard) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContentDashboard.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContentDashboard proto.InternalMessageInfo

type isChangeBlockContentDashboardChange interface {
	isChangeBlockContentDashboardChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockContentDashboardChangeOfStyle struct {
	Style ModelBlockContentDashboardStyle `protobuf:"varint,1,opt,name=style,proto3,enum=anytype.ModelBlockContentDashboardStyle,oneof" json:"style,omitempty"`
}
type ChangeBlockContentDashboardChangeOfHeader struct {
	Header *ModelBlockHeader `protobuf:"bytes,2,opt,name=header,proto3,oneof" json:"header,omitempty"`
}

func (*ChangeBlockContentDashboardChangeOfStyle) isChangeBlockContentDashboardChange()  {}
func (*ChangeBlockContentDashboardChangeOfHeader) isChangeBlockContentDashboardChange() {}

func (m *ChangeBlockContentDashboard) GetChange() isChangeBlockContentDashboardChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockContentDashboard) GetStyle() ModelBlockContentDashboardStyle {
	if x, ok := m.GetChange().(*ChangeBlockContentDashboardChangeOfStyle); ok {
		return x.Style
	}
	return ModelBlockContentDashboard_MAIN_SCREEN
}

func (m *ChangeBlockContentDashboard) GetHeader() *ModelBlockHeader {
	if x, ok := m.GetChange().(*ChangeBlockContentDashboardChangeOfHeader); ok {
		return x.Header
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockContentDashboard) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockContentDashboardChangeOfStyle)(nil),
		(*ChangeBlockContentDashboardChangeOfHeader)(nil),
	}
}

type ChangeBlockContentMedia struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockContentMediaChangeOfLink
	//	*ChangeBlockContentMediaChangeOfState
	Change isChangeBlockContentMediaChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockContentMedia) Reset()         { *m = ChangeBlockContentMedia{} }
func (m *ChangeBlockContentMedia) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContentMedia) ProtoMessage()    {}
func (*ChangeBlockContentMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2, 2}
}
func (m *ChangeBlockContentMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContentMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContentMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContentMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContentMedia.Merge(m, src)
}
func (m *ChangeBlockContentMedia) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContentMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContentMedia.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContentMedia proto.InternalMessageInfo

type isChangeBlockContentMediaChange interface {
	isChangeBlockContentMediaChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockContentMediaChangeOfLink struct {
	Link string `protobuf:"bytes,1,opt,name=link,proto3,oneof" json:"link,omitempty"`
}
type ChangeBlockContentMediaChangeOfState struct {
	State ModelBlockContentMediaState `protobuf:"varint,2,opt,name=state,proto3,enum=anytype.ModelBlockContentMediaState,oneof" json:"state,omitempty"`
}

func (*ChangeBlockContentMediaChangeOfLink) isChangeBlockContentMediaChange()  {}
func (*ChangeBlockContentMediaChangeOfState) isChangeBlockContentMediaChange() {}

func (m *ChangeBlockContentMedia) GetChange() isChangeBlockContentMediaChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockContentMedia) GetLink() string {
	if x, ok := m.GetChange().(*ChangeBlockContentMediaChangeOfLink); ok {
		return x.Link
	}
	return ""
}

func (m *ChangeBlockContentMedia) GetState() ModelBlockContentMediaState {
	if x, ok := m.GetChange().(*ChangeBlockContentMediaChangeOfState); ok {
		return x.State
	}
	return ModelBlockContentMedia_EMPTY
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockContentMedia) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockContentMediaChangeOfLink)(nil),
		(*ChangeBlockContentMediaChangeOfState)(nil),
	}
}

type ChangeBlockContentText struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockContentTextChangeOfText
	//	*ChangeBlockContentTextChangeOfStyle
	//	*ChangeBlockContentTextChangeOfMarks
	//	*ChangeBlockContentTextChangeOfToggleable
	//	*ChangeBlockContentTextChangeOfMarkerType
	//	*ChangeBlockContentTextChangeOfCheckable
	//	*ChangeBlockContentTextChangeOfChecked
	Change isChangeBlockContentTextChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockContentText) Reset()         { *m = ChangeBlockContentText{} }
func (m *ChangeBlockContentText) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContentText) ProtoMessage()    {}
func (*ChangeBlockContentText) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2, 3}
}
func (m *ChangeBlockContentText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContentText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContentText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContentText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContentText.Merge(m, src)
}
func (m *ChangeBlockContentText) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContentText) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContentText.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContentText proto.InternalMessageInfo

type isChangeBlockContentTextChange interface {
	isChangeBlockContentTextChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockContentTextChangeOfText struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type ChangeBlockContentTextChangeOfStyle struct {
	Style ModelBlockContentTextStyle `protobuf:"varint,2,opt,name=style,proto3,enum=anytype.ModelBlockContentTextStyle,oneof" json:"style,omitempty"`
}
type ChangeBlockContentTextChangeOfMarks struct {
	Marks *ModelBlockContentTextMarks `protobuf:"bytes,3,opt,name=marks,proto3,oneof" json:"marks,omitempty"`
}
type ChangeBlockContentTextChangeOfToggleable struct {
	Toggleable bool `protobuf:"varint,4,opt,name=toggleable,proto3,oneof" json:"toggleable,omitempty"`
}
type ChangeBlockContentTextChangeOfMarkerType struct {
	MarkerType ModelBlockContentTextMarkerType `protobuf:"varint,5,opt,name=markerType,proto3,enum=anytype.ModelBlockContentTextMarkerType,oneof" json:"markerType,omitempty"`
}
type ChangeBlockContentTextChangeOfCheckable struct {
	Checkable bool `protobuf:"varint,6,opt,name=checkable,proto3,oneof" json:"checkable,omitempty"`
}
type ChangeBlockContentTextChangeOfChecked struct {
	Checked bool `protobuf:"varint,7,opt,name=checked,proto3,oneof" json:"checked,omitempty"`
}

func (*ChangeBlockContentTextChangeOfText) isChangeBlockContentTextChange()       {}
func (*ChangeBlockContentTextChangeOfStyle) isChangeBlockContentTextChange()      {}
func (*ChangeBlockContentTextChangeOfMarks) isChangeBlockContentTextChange()      {}
func (*ChangeBlockContentTextChangeOfToggleable) isChangeBlockContentTextChange() {}
func (*ChangeBlockContentTextChangeOfMarkerType) isChangeBlockContentTextChange() {}
func (*ChangeBlockContentTextChangeOfCheckable) isChangeBlockContentTextChange()  {}
func (*ChangeBlockContentTextChangeOfChecked) isChangeBlockContentTextChange()    {}

func (m *ChangeBlockContentText) GetChange() isChangeBlockContentTextChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockContentText) GetText() string {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfText); ok {
		return x.Text
	}
	return ""
}

func (m *ChangeBlockContentText) GetStyle() ModelBlockContentTextStyle {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfStyle); ok {
		return x.Style
	}
	return ModelBlockContentText_p
}

func (m *ChangeBlockContentText) GetMarks() *ModelBlockContentTextMarks {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfMarks); ok {
		return x.Marks
	}
	return nil
}

func (m *ChangeBlockContentText) GetToggleable() bool {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfToggleable); ok {
		return x.Toggleable
	}
	return false
}

func (m *ChangeBlockContentText) GetMarkerType() ModelBlockContentTextMarkerType {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfMarkerType); ok {
		return x.MarkerType
	}
	return ModelBlockContentText_none
}

func (m *ChangeBlockContentText) GetCheckable() bool {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfCheckable); ok {
		return x.Checkable
	}
	return false
}

func (m *ChangeBlockContentText) GetChecked() bool {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfChecked); ok {
		return x.Checked
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockContentText) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockContentTextChangeOfText)(nil),
		(*ChangeBlockContentTextChangeOfStyle)(nil),
		(*ChangeBlockContentTextChangeOfMarks)(nil),
		(*ChangeBlockContentTextChangeOfToggleable)(nil),
		(*ChangeBlockContentTextChangeOfMarkerType)(nil),
		(*ChangeBlockContentTextChangeOfCheckable)(nil),
		(*ChangeBlockContentTextChangeOfChecked)(nil),
	}
}

type BlocksListSingleChange struct {
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Change:
	//	*BlocksListSingleChangeChangeOfText
	//	*BlocksListSingleChangeChangeOfBlockHeader
	//	*BlocksListSingleChangeChangeOfBlockChildren
	//	*BlocksListSingleChangeChangeOfPage
	//	*BlocksListSingleChangeChangeOfDashboard
	//	*BlocksListSingleChangeChangeOfMedia
	Change isBlocksListSingleChangeChange `protobuf_oneof:"change"`
}

func (m *BlocksListSingleChange) Reset()         { *m = BlocksListSingleChange{} }
func (m *BlocksListSingleChange) String() string { return proto.CompactTextString(m) }
func (*BlocksListSingleChange) ProtoMessage()    {}
func (*BlocksListSingleChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{1}
}
func (m *BlocksListSingleChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlocksListSingleChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlocksListSingleChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlocksListSingleChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlocksListSingleChange.Merge(m, src)
}
func (m *BlocksListSingleChange) XXX_Size() int {
	return m.Size()
}
func (m *BlocksListSingleChange) XXX_DiscardUnknown() {
	xxx_messageInfo_BlocksListSingleChange.DiscardUnknown(m)
}

var xxx_messageInfo_BlocksListSingleChange proto.InternalMessageInfo

type isBlocksListSingleChangeChange interface {
	isBlocksListSingleChangeChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BlocksListSingleChangeChangeOfText struct {
	Text *ChangeBlockContentText `protobuf:"bytes,2,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type BlocksListSingleChangeChangeOfBlockHeader struct {
	BlockHeader *ChangeBlockHeader `protobuf:"bytes,3,opt,name=blockHeader,proto3,oneof" json:"blockHeader,omitempty"`
}
type BlocksListSingleChangeChangeOfBlockChildren struct {
	BlockChildren *ChangeBlockChildren `protobuf:"bytes,4,opt,name=blockChildren,proto3,oneof" json:"blockChildren,omitempty"`
}
type BlocksListSingleChangeChangeOfPage struct {
	Page *ChangeBlockContentPage `protobuf:"bytes,5,opt,name=page,proto3,oneof" json:"page,omitempty"`
}
type BlocksListSingleChangeChangeOfDashboard struct {
	Dashboard *ChangeBlockContentDashboard `protobuf:"bytes,6,opt,name=dashboard,proto3,oneof" json:"dashboard,omitempty"`
}
type BlocksListSingleChangeChangeOfMedia struct {
	Media *ChangeBlockContentMedia `protobuf:"bytes,7,opt,name=media,proto3,oneof" json:"media,omitempty"`
}

func (*BlocksListSingleChangeChangeOfText) isBlocksListSingleChangeChange()          {}
func (*BlocksListSingleChangeChangeOfBlockHeader) isBlocksListSingleChangeChange()   {}
func (*BlocksListSingleChangeChangeOfBlockChildren) isBlocksListSingleChangeChange() {}
func (*BlocksListSingleChangeChangeOfPage) isBlocksListSingleChangeChange()          {}
func (*BlocksListSingleChangeChangeOfDashboard) isBlocksListSingleChangeChange()     {}
func (*BlocksListSingleChangeChangeOfMedia) isBlocksListSingleChangeChange()         {}

func (m *BlocksListSingleChange) GetChange() isBlocksListSingleChangeChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *BlocksListSingleChange) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BlocksListSingleChange) GetText() *ChangeBlockContentText {
	if x, ok := m.GetChange().(*BlocksListSingleChangeChangeOfText); ok {
		return x.Text
	}
	return nil
}

func (m *BlocksListSingleChange) GetBlockHeader() *ChangeBlockHeader {
	if x, ok := m.GetChange().(*BlocksListSingleChangeChangeOfBlockHeader); ok {
		return x.BlockHeader
	}
	return nil
}

func (m *BlocksListSingleChange) GetBlockChildren() *ChangeBlockChildren {
	if x, ok := m.GetChange().(*BlocksListSingleChangeChangeOfBlockChildren); ok {
		return x.BlockChildren
	}
	return nil
}

func (m *BlocksListSingleChange) GetPage() *ChangeBlockContentPage {
	if x, ok := m.GetChange().(*BlocksListSingleChangeChangeOfPage); ok {
		return x.Page
	}
	return nil
}

func (m *BlocksListSingleChange) GetDashboard() *ChangeBlockContentDashboard {
	if x, ok := m.GetChange().(*BlocksListSingleChangeChangeOfDashboard); ok {
		return x.Dashboard
	}
	return nil
}

func (m *BlocksListSingleChange) GetMedia() *ChangeBlockContentMedia {
	if x, ok := m.GetChange().(*BlocksListSingleChangeChangeOfMedia); ok {
		return x.Media
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BlocksListSingleChange) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BlocksListSingleChangeChangeOfText)(nil),
		(*BlocksListSingleChangeChangeOfBlockHeader)(nil),
		(*BlocksListSingleChangeChangeOfBlockChildren)(nil),
		(*BlocksListSingleChangeChangeOfPage)(nil),
		(*BlocksListSingleChangeChangeOfDashboard)(nil),
		(*BlocksListSingleChangeChangeOfMedia)(nil),
	}
}

type BlockChanges struct {
	Changes []*BlocksListSingleChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (m *BlockChanges) Reset()         { *m = BlockChanges{} }
func (m *BlockChanges) String() string { return proto.CompactTextString(m) }
func (*BlockChanges) ProtoMessage()    {}
func (*BlockChanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{2}
}
func (m *BlockChanges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockChanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockChanges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockChanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockChanges.Merge(m, src)
}
func (m *BlockChanges) XXX_Size() int {
	return m.Size()
}
func (m *BlockChanges) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockChanges.DiscardUnknown(m)
}

var xxx_messageInfo_BlockChanges proto.InternalMessageInfo

func (m *BlockChanges) GetChanges() []*BlocksListSingleChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

func init() {
	proto.RegisterType((*Change)(nil), "anytype.Change")
	proto.RegisterType((*ChangeBlock)(nil), "anytype.Change.Block")
	proto.RegisterType((*ChangeBlockHeader)(nil), "anytype.Change.Block.Header")
	proto.RegisterType((*ChangeBlockChildren)(nil), "anytype.Change.Block.Children")
	proto.RegisterType((*ChangeBlockContent)(nil), "anytype.Change.Block.Content")
	proto.RegisterType((*ChangeBlockContentPage)(nil), "anytype.Change.Block.Content.Page")
	proto.RegisterType((*ChangeBlockContentDashboard)(nil), "anytype.Change.Block.Content.Dashboard")
	proto.RegisterType((*ChangeBlockContentMedia)(nil), "anytype.Change.Block.Content.Media")
	proto.RegisterType((*ChangeBlockContentText)(nil), "anytype.Change.Block.Content.Text")
	proto.RegisterType((*BlocksListSingleChange)(nil), "anytype.BlocksListSingleChange")
	proto.RegisterType((*BlockChanges)(nil), "anytype.BlockChanges")
}

func init() { proto.RegisterFile("changes.proto", fileDescriptor_b16a38c6509bd894) }

var fileDescriptor_b16a38c6509bd894 = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x3d, 0x6f, 0xd3, 0x50,
	0x14, 0xb5, 0xd3, 0x38, 0x1f, 0xd7, 0x6d, 0x85, 0x9e, 0x2a, 0x64, 0x99, 0xca, 0x44, 0x45, 0x82,
	0x0c, 0x95, 0x87, 0x20, 0x10, 0x88, 0xa1, 0x55, 0x5a, 0x81, 0x11, 0x14, 0x55, 0x6e, 0x27, 0xb6,
	0x97, 0xf8, 0x29, 0xb1, 0xe2, 0xd8, 0x91, 0xfd, 0x86, 0x66, 0xe2, 0x2f, 0x20, 0x7e, 0x0c, 0xbf,
	0x81, 0xb1, 0x0b, 0x88, 0x11, 0x35, 0x33, 0x3b, 0x23, 0xba, 0xd7, 0x2f, 0xb6, 0x5b, 0xa5, 0x69,
	0x37, 0xdf, 0x97, 0x73, 0xce, 0x3d, 0xef, 0x7e, 0xbc, 0xc0, 0xd6, 0x70, 0xcc, 0xe3, 0x91, 0xc8,
	0xdc, 0x59, 0x9a, 0xc8, 0x84, 0x35, 0x79, 0x3c, 0x97, 0xf3, 0x99, 0xb0, 0x37, 0xa7, 0x49, 0x20,
	0x22, 0x75, 0xbc, 0xf7, 0xaf, 0x09, 0x8d, 0x23, 0x02, 0xda, 0x7f, 0x9b, 0x60, 0xf4, 0xa3, 0x64,
	0x38, 0xb1, 0x7f, 0xea, 0xd0, 0xf0, 0x04, 0x0f, 0x44, 0xca, 0x1e, 0x40, 0x2d, 0x0c, 0x2c, 0xbd,
	0xa3, 0x77, 0xdb, 0x9e, 0xe6, 0xd7, 0xc2, 0x80, 0xbd, 0x84, 0x3a, 0xea, 0x58, 0xb5, 0x8e, 0xde,
	0xdd, 0xee, 0x75, 0x5c, 0xa5, 0xeb, 0x9e, 0xa0, 0xac, 0x4b, 0x02, 0x6e, 0x4e, 0x76, 0xcf, 0xe7,
	0x33, 0xe1, 0x69, 0x3e, 0xe1, 0xd9, 0x0e, 0xd4, 0x63, 0x3e, 0x15, 0xd6, 0x86, 0xd2, 0xa2, 0x08,
	0x4f, 0xc3, 0x61, 0x12, 0x5b, 0xf5, 0xe5, 0x29, 0x46, 0xec, 0x03, 0x98, 0x33, 0x91, 0x4e, 0xc3,
	0x2c, 0x0b, 0x93, 0x38, 0xb3, 0x8c, 0x8e, 0xde, 0x35, 0x7b, 0xcf, 0xd6, 0xa5, 0x3a, 0x2d, 0xe1,
	0x9e, 0xe6, 0x57, 0xd9, 0xfd, 0x16, 0x34, 0xf2, 0x52, 0xd8, 0x4f, 0xa1, 0x75, 0x34, 0x0e, 0xa3,
	0x20, 0x15, 0x31, 0xb3, 0xa1, 0x35, 0x54, 0xdf, 0x96, 0xde, 0xd9, 0xe8, 0xb6, 0xfd, 0x22, 0xb6,
	0x17, 0x06, 0x34, 0x8f, 0x92, 0x58, 0x8a, 0x58, 0xda, 0x5f, 0xa0, 0x7e, 0xca, 0x47, 0x82, 0x1d,
	0x80, 0x91, 0xc9, 0x79, 0x24, 0xa8, 0x16, 0xdb, 0xb7, 0x98, 0x51, 0x24, 0x17, 0x19, 0xee, 0x19,
	0xc2, 0x3d, 0xcd, 0xcf, 0x79, 0x6c, 0x1f, 0x8c, 0x01, 0x82, 0xa8, 0x70, 0x66, 0x6f, 0x67, 0x95,
	0x00, 0xa2, 0x09, 0x54, 0x31, 0xfd, 0x4d, 0x87, 0xf6, 0x31, 0xcf, 0xc6, 0x83, 0x84, 0xa7, 0x01,
	0x3b, 0xbe, 0x6e, 0x63, 0x7f, 0xad, 0x8d, 0x82, 0x76, 0xd3, 0xcb, 0x0b, 0x68, 0x8c, 0xa9, 0x6e,
	0xca, 0xcc, 0xa3, 0x35, 0xa5, 0xf5, 0x34, 0x5f, 0x81, 0x2b, 0xa6, 0x42, 0x30, 0x4e, 0x44, 0x10,
	0x72, 0xec, 0x5f, 0x14, 0xc6, 0x93, 0x62, 0x42, 0x28, 0x62, 0x87, 0xe8, 0x92, 0xcb, 0xe5, 0x90,
	0x74, 0xd7, 0xba, 0x24, 0x21, 0xf7, 0x0c, 0xf1, 0xb9, 0x43, 0x2e, 0x45, 0x25, 0xd5, 0xaf, 0x1a,
	0xd4, 0xcf, 0xc5, 0x85, 0xc4, 0x54, 0x52, 0x5c, 0xc8, 0x32, 0x15, 0x46, 0x65, 0x5f, 0x6a, 0xf7,
	0xe8, 0x0b, 0xea, 0xdc, 0xac, 0xc5, 0x01, 0x18, 0x53, 0x9e, 0x4e, 0x32, 0x1a, 0x4c, 0xf3, 0x3e,
	0x02, 0x27, 0x08, 0x47, 0x01, 0xe2, 0xb1, 0x0e, 0x80, 0x4c, 0x46, 0xa3, 0x48, 0xf0, 0x41, 0x24,
	0x68, 0x90, 0x5b, 0x9e, 0xe6, 0x57, 0xce, 0xd8, 0x27, 0x00, 0x84, 0x8a, 0x14, 0x17, 0x82, 0xa6,
	0xf9, 0xae, 0xce, 0x15, 0x79, 0x72, 0x0e, 0xea, 0x95, 0x0a, 0xcc, 0x81, 0xf6, 0x70, 0x2c, 0x86,
	0x13, 0x4a, 0xd8, 0x50, 0x09, 0xcb, 0x23, 0x66, 0x43, 0x93, 0x02, 0x11, 0x58, 0x4d, 0xf5, 0xeb,
	0xf2, 0xa0, 0x2c, 0xec, 0xde, 0xf7, 0x0d, 0x78, 0x48, 0x59, 0xb3, 0x8f, 0x61, 0x26, 0xcf, 0xc2,
	0x78, 0x14, 0x89, 0xfc, 0x29, 0x60, 0xdb, 0x6a, 0xeb, 0x71, 0x2d, 0x70, 0xe7, 0x5f, 0xa9, 0xd2,
	0xe7, 0xd3, 0xb2, 0x57, 0x58, 0xcf, 0xe1, 0x2b, 0xbc, 0x17, 0xed, 0x39, 0x04, 0x93, 0x06, 0x3a,
	0x9f, 0x25, 0x55, 0xe3, 0xdd, 0xd5, 0x02, 0xc5, 0xbc, 0x55, 0x29, 0xec, 0x2d, 0x6c, 0x51, 0xb8,
	0xdc, 0x5c, 0xaa, 0xb0, 0xd9, 0x73, 0x6e, 0x31, 0xa1, 0x50, 0x9e, 0xe6, 0x5f, 0xa7, 0xe1, 0x1d,
	0x66, 0x7c, 0x24, 0xd4, 0x63, 0x72, 0xc7, 0x1d, 0x70, 0x81, 0xf1, 0x0e, 0xc8, 0x60, 0xef, 0xa0,
	0x1d, 0x2c, 0x37, 0x89, 0xca, 0x5d, 0x9d, 0x92, 0x95, 0xf4, 0x62, 0xf1, 0xb0, 0x2f, 0x05, 0x97,
	0xbd, 0x01, 0x63, 0x8a, 0xc3, 0x4e, 0x5d, 0x31, 0x7b, 0x4f, 0xd6, 0x8b, 0xd0, 0x5e, 0xd0, 0x98,
	0xe1, 0x47, 0xa5, 0x71, 0xef, 0x61, 0xb3, 0x9f, 0x5f, 0x8d, 0x1e, 0x78, 0xf6, 0x1a, 0xdb, 0x4d,
	0x9f, 0xd4, 0x32, 0xb3, 0xf7, 0xb8, 0x10, 0x5e, 0xdd, 0x5f, 0x7f, 0x89, 0xef, 0xef, 0xfe, 0xb8,
	0x72, 0xf4, 0xcb, 0x2b, 0x47, 0xff, 0x73, 0xe5, 0xe8, 0x5f, 0x17, 0x8e, 0x76, 0xb9, 0x70, 0xb4,
	0xdf, 0x0b, 0x47, 0xfb, 0x5c, 0x9b, 0x0d, 0x06, 0x0d, 0xfa, 0x8f, 0x78, 0xfe, 0x3f, 0x00, 0x00,
	0xff, 0xff, 0x47, 0xbe, 0x47, 0xc0, 0x4b, 0x06, 0x00, 0x00,
}

func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChangeBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChangeBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockHeaderChangeOfId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockHeaderChangeOfId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Id)
	copy(dAtA[i:], m.Id)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Id)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ChangeBlockHeaderChangeOfType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockHeaderChangeOfType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ChangeBlockHeaderChangeOfName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockHeaderChangeOfName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ChangeBlockHeaderChangeOfIcon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockHeaderChangeOfIcon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Icon)
	copy(dAtA[i:], m.Icon)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Icon)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *ChangeBlockHeaderChangeOfPermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockHeaderChangeOfPermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockChildren) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockChildren) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockChildren) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Children[iNdEx])
			copy(dAtA[i:], m.Children[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.Children[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContentPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentPageChangeOfStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentPageChangeOfStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Style))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentPageChangeOfBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentPageChangeOfBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentDashboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContentDashboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentDashboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentDashboardChangeOfStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentDashboardChangeOfStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Style))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentDashboardChangeOfHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentDashboardChangeOfHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContentMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentMediaChangeOfLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentMediaChangeOfLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Link)
	copy(dAtA[i:], m.Link)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Link)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentMediaChangeOfState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentMediaChangeOfState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContentText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentTextChangeOfText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Style))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfMarks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfMarks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Marks != nil {
		{
			size, err := m.Marks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfToggleable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfToggleable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Toggleable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfMarkerType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfMarkerType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.MarkerType))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfCheckable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfCheckable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Checkable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfChecked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfChecked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Checked {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlocksListSingleChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlocksListSingleChangeChangeOfText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChangeChangeOfText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChangeChangeOfBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChangeChangeOfBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChangeChangeOfBlockChildren) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChangeChangeOfBlockChildren) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockChildren != nil {
		{
			size, err := m.BlockChildren.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChangeChangeOfPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChangeChangeOfPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChangeChangeOfDashboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChangeChangeOfDashboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Dashboard != nil {
		{
			size, err := m.Dashboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChangeChangeOfMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChangeChangeOfMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Media != nil {
		{
			size, err := m.Media.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *BlockChanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockChanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockChanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChanges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChanges(dAtA []byte, offset int, v uint64) int {
	offset -= sovChanges(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChangeBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChangeBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockHeaderChangeOfId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *ChangeBlockHeaderChangeOfType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Type))
	return n
}
func (m *ChangeBlockHeaderChangeOfName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *ChangeBlockHeaderChangeOfIcon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Icon)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *ChangeBlockHeaderChangeOfPermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockChildren) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Children) > 0 {
		for _, s := range m.Children {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func (m *ChangeBlockContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChangeBlockContentPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockContentPageChangeOfStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Style))
	return n
}
func (m *ChangeBlockContentPageChangeOfBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockContentDashboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockContentDashboardChangeOfStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Style))
	return n
}
func (m *ChangeBlockContentDashboardChangeOfHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockContentMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockContentMediaChangeOfLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *ChangeBlockContentMediaChangeOfState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.State))
	return n
}
func (m *ChangeBlockContentText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockContentTextChangeOfText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *ChangeBlockContentTextChangeOfStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Style))
	return n
}
func (m *ChangeBlockContentTextChangeOfMarks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Marks != nil {
		l = m.Marks.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockContentTextChangeOfToggleable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ChangeBlockContentTextChangeOfMarkerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.MarkerType))
	return n
}
func (m *ChangeBlockContentTextChangeOfCheckable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ChangeBlockContentTextChangeOfChecked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BlocksListSingleChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *BlocksListSingleChangeChangeOfText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlocksListSingleChangeChangeOfBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlocksListSingleChangeChangeOfBlockChildren) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockChildren != nil {
		l = m.BlockChildren.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlocksListSingleChangeChangeOfPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlocksListSingleChangeChangeOfDashboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dashboard != nil {
		l = m.Dashboard.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlocksListSingleChangeChangeOfMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlockChanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func sovChanges(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChanges(x uint64) (n int) {
	return sovChanges(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &ChangeBlockHeaderChangeOfId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v ModelBlockHeaderType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockHeaderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockHeaderChangeOfType{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &ChangeBlockHeaderChangeOfName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &ChangeBlockHeaderChangeOfIcon{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModelBlockHeaderPermissions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeBlockHeaderChangeOfPermissions{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockChildren) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Children: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Children: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContentPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v ModelBlockContentPageStyle
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentPageStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentPageChangeOfStyle{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModelBlock{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeBlockContentPageChangeOfBlock{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContentDashboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dashboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dashboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v ModelBlockContentDashboardStyle
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentDashboardStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentDashboardChangeOfStyle{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModelBlockHeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeBlockContentDashboardChangeOfHeader{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContentMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Media: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Media: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &ChangeBlockContentMediaChangeOfLink{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v ModelBlockContentMediaState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentMediaState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentMediaChangeOfState{v}
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContentText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Text: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Text: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &ChangeBlockContentTextChangeOfText{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v ModelBlockContentTextStyle
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentTextStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentTextChangeOfStyle{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModelBlockContentTextMarks{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeBlockContentTextChangeOfMarks{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toggleable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Change = &ChangeBlockContentTextChangeOfToggleable{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerType", wireType)
			}
			var v ModelBlockContentTextMarkerType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentTextMarkerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentTextChangeOfMarkerType{v}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Change = &ChangeBlockContentTextChangeOfCheckable{b}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Change = &ChangeBlockContentTextChangeOfChecked{b}
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlocksListSingleChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlocksListSingleChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlocksListSingleChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockContentText{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChangeChangeOfText{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockHeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChangeChangeOfBlockHeader{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockChildren", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockChildren{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChangeChangeOfBlockChildren{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockContentPage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChangeChangeOfPage{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dashboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockContentDashboard{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChangeChangeOfDashboard{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockContentMedia{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChangeChangeOfMedia{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockChanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockChanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockChanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, &BlocksListSingleChange{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChanges(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChanges
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChanges
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChanges
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChanges        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChanges          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChanges = fmt.Errorf("proto: unexpected end of group")
)
