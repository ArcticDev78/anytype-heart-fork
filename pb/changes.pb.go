// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/protos/changes.proto

package pb

import (
	fmt "fmt"
	model "github.com/anytypeio/go-anytype-library/pb/model"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Changes contains group of blocks, that have only changed fields
type Changes struct {
	Changes []*ChangesBlock `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	Author  *model.Account  `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
}

func (m *Changes) Reset()         { *m = Changes{} }
func (m *Changes) String() string { return proto.CompactTextString(m) }
func (*Changes) ProtoMessage()    {}
func (*Changes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0}
}
func (m *Changes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Changes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Changes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Changes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Changes.Merge(m, src)
}
func (m *Changes) XXX_Size() int {
	return m.Size()
}
func (m *Changes) XXX_DiscardUnknown() {
	xxx_messageInfo_Changes.DiscardUnknown(m)
}

var xxx_messageInfo_Changes proto.InternalMessageInfo

func (m *Changes) GetChanges() []*ChangesBlock {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *Changes) GetAuthor() *model.Account {
	if m != nil {
		return m.Author
	}
	return nil
}

//
// Changes.Block contains only changed fields of a block
type ChangesBlock struct {
	Id          string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields      *types.Struct            `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	Permissions *model.BlockPermissions  `protobuf:"bytes,3,opt,name=permissions,proto3" json:"permissions,omitempty"`
	ChildrenIds *ChangesBlockChildrenIds `protobuf:"bytes,4,opt,name=childrenIds,proto3" json:"childrenIds,omitempty"`
	IsArchived  bool                     `protobuf:"varint,5,opt,name=isArchived,proto3" json:"isArchived,omitempty"`
}

func (m *ChangesBlock) Reset()         { *m = ChangesBlock{} }
func (m *ChangesBlock) String() string { return proto.CompactTextString(m) }
func (*ChangesBlock) ProtoMessage()    {}
func (*ChangesBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 0}
}
func (m *ChangesBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangesBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangesBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangesBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangesBlock.Merge(m, src)
}
func (m *ChangesBlock) XXX_Size() int {
	return m.Size()
}
func (m *ChangesBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangesBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ChangesBlock proto.InternalMessageInfo

func (m *ChangesBlock) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChangesBlock) GetFields() *types.Struct {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ChangesBlock) GetPermissions() *model.BlockPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *ChangesBlock) GetChildrenIds() *ChangesBlockChildrenIds {
	if m != nil {
		return m.ChildrenIds
	}
	return nil
}

func (m *ChangesBlock) GetIsArchived() bool {
	if m != nil {
		return m.IsArchived
	}
	return false
}

type ChangesBlockChildrenIds struct {
	ChildrenIds []string `protobuf:"bytes,1,rep,name=childrenIds,proto3" json:"childrenIds,omitempty"`
}

func (m *ChangesBlockChildrenIds) Reset()         { *m = ChangesBlockChildrenIds{} }
func (m *ChangesBlockChildrenIds) String() string { return proto.CompactTextString(m) }
func (*ChangesBlockChildrenIds) ProtoMessage()    {}
func (*ChangesBlockChildrenIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 0, 0}
}
func (m *ChangesBlockChildrenIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangesBlockChildrenIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangesBlockChildrenIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangesBlockChildrenIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangesBlockChildrenIds.Merge(m, src)
}
func (m *ChangesBlockChildrenIds) XXX_Size() int {
	return m.Size()
}
func (m *ChangesBlockChildrenIds) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangesBlockChildrenIds.DiscardUnknown(m)
}

var xxx_messageInfo_ChangesBlockChildrenIds proto.InternalMessageInfo

func (m *ChangesBlockChildrenIds) GetChildrenIds() []string {
	if m != nil {
		return m.ChildrenIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Changes)(nil), "anytype.Changes")
	proto.RegisterType((*ChangesBlock)(nil), "anytype.Changes.Block")
	proto.RegisterType((*ChangesBlockChildrenIds)(nil), "anytype.Changes.Block.ChildrenIds")
}

func init() { proto.RegisterFile("pb/protos/changes.proto", fileDescriptor_2b02bba284ea1e46) }

var fileDescriptor_2b02bba284ea1e46 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4e, 0xc2, 0x30,
	0x1c, 0xc7, 0xe9, 0x10, 0x90, 0x2e, 0xf1, 0xd0, 0x83, 0x2c, 0x0b, 0x59, 0x16, 0x4e, 0x5c, 0x68,
	0x8d, 0x3e, 0x01, 0xe0, 0xc5, 0x78, 0x31, 0xf3, 0xe6, 0x6d, 0x6b, 0xcb, 0xd6, 0x38, 0xd6, 0xa5,
	0xdd, 0x48, 0x78, 0x0b, 0x7d, 0x06, 0x5f, 0xc6, 0x23, 0x47, 0x8f, 0x06, 0x5e, 0xc4, 0xd8, 0x95,
	0x30, 0x8c, 0xc7, 0x5f, 0x7f, 0xdf, 0x3f, 0x9f, 0xfe, 0xe0, 0xa8, 0x4c, 0x48, 0xa9, 0x64, 0x25,
	0x35, 0xa1, 0x59, 0x5c, 0xa4, 0x5c, 0x63, 0x33, 0xa2, 0x41, 0x5c, 0x6c, 0xab, 0x6d, 0xc9, 0xfd,
	0xc7, 0x0d, 0x2f, 0x98, 0x54, 0x24, 0x15, 0x55, 0x56, 0x27, 0x98, 0xca, 0x35, 0xb1, 0x2b, 0x21,
	0x49, 0x2a, 0x67, 0x76, 0x98, 0xe5, 0x22, 0x51, 0xb1, 0xda, 0x92, 0x32, 0x21, 0x6b, 0xc9, 0x78,
	0x7e, 0x8c, 0x35, 0x83, 0x4d, 0xf5, 0xc7, 0xa9, 0x94, 0x69, 0xce, 0x9b, 0x5d, 0x52, 0xaf, 0x88,
	0xae, 0x54, 0x4d, 0xab, 0x66, 0x3b, 0x79, 0xef, 0xc2, 0xc1, 0xb2, 0xa1, 0x40, 0x37, 0x70, 0x60,
	0x81, 0x3c, 0x10, 0x76, 0xa7, 0xee, 0xed, 0x35, 0xb6, 0x4d, 0xd8, 0x4a, 0xf0, 0x22, 0x97, 0xf4,
	0x35, 0x3a, 0xca, 0x10, 0x86, 0xfd, 0xb8, 0xae, 0x32, 0xa9, 0x3c, 0x27, 0x04, 0x67, 0x06, 0x83,
	0x80, 0xe7, 0x94, 0xca, 0xba, 0xa8, 0x22, 0xab, 0xf2, 0x3f, 0x1c, 0xd8, 0x33, 0x11, 0xe8, 0x0a,
	0x3a, 0x82, 0x79, 0x20, 0x04, 0xd3, 0x61, 0xe4, 0x08, 0x86, 0x08, 0xec, 0xaf, 0x04, 0xcf, 0x99,
	0xb6, 0x49, 0x23, 0xdc, 0x60, 0xe3, 0x23, 0x36, 0x7e, 0x36, 0xd8, 0x91, 0x95, 0xa1, 0x05, 0x74,
	0x4b, 0xae, 0xd6, 0x42, 0x6b, 0x21, 0x0b, 0xed, 0x75, 0x8d, 0x2b, 0xfc, 0xd3, 0x6f, 0xba, 0xf0,
	0xd3, 0x49, 0x17, 0xb5, 0x4d, 0xe8, 0x1e, 0xba, 0x34, 0x13, 0x39, 0x53, 0xbc, 0x78, 0x60, 0xda,
	0xbb, 0x30, 0x19, 0x93, 0xff, 0x3f, 0x8d, 0x97, 0x27, 0x65, 0xd4, 0xb6, 0xa1, 0x00, 0x42, 0xa1,
	0xe7, 0x8a, 0x66, 0x62, 0xc3, 0x99, 0xd7, 0x0b, 0xc1, 0xf4, 0x32, 0x6a, 0xbd, 0xf8, 0x04, 0xba,
	0x2d, 0x2f, 0x0a, 0xcf, 0x4b, 0x7f, 0x2f, 0x3d, 0x3c, 0x0b, 0x5c, 0x8c, 0x3f, 0xf7, 0x01, 0xd8,
	0xed, 0x03, 0xf0, 0xbd, 0x0f, 0xc0, 0xdb, 0x21, 0xe8, 0xec, 0x0e, 0x41, 0xe7, 0xeb, 0x10, 0x74,
	0x5e, 0x9c, 0x32, 0x49, 0xfa, 0xe6, 0x22, 0x77, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xef, 0x18,
	0xcf, 0x80, 0x47, 0x02, 0x00, 0x00,
}

func (m *Changes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Changes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Changes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChanges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangesBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangesBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangesBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsArchived {
		i--
		if m.IsArchived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ChildrenIds != nil {
		{
			size, err := m.ChildrenIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Fields != nil {
		{
			size, err := m.Fields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintChanges(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangesBlockChildrenIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangesBlockChildrenIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangesBlockChildrenIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChildrenIds) > 0 {
		for iNdEx := len(m.ChildrenIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChildrenIds[iNdEx])
			copy(dAtA[i:], m.ChildrenIds[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.ChildrenIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChanges(dAtA []byte, offset int, v uint64) int {
	offset -= sovChanges(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Changes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}

func (m *ChangesBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChanges(uint64(l))
	}
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	if m.ChildrenIds != nil {
		l = m.ChildrenIds.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	if m.IsArchived {
		n += 2
	}
	return n
}

func (m *ChangesBlockChildrenIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChildrenIds) > 0 {
		for _, s := range m.ChildrenIds {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func sovChanges(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChanges(x uint64) (n int) {
	return sovChanges(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Changes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Changes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Changes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, &ChangesBlock{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &model.Account{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangesBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.Struct{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &model.BlockPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChildrenIds == nil {
				m.ChildrenIds = &ChangesBlockChildrenIds{}
			}
			if err := m.ChildrenIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsArchived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsArchived = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangesBlockChildrenIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildrenIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildrenIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildrenIds = append(m.ChildrenIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChanges(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChanges
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChanges
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChanges
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChanges        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChanges          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChanges = fmt.Errorf("proto: unexpected end of group")
)
