// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: changes.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Change contains single block change or list of block changes.
type Change struct {
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0}
}
func (m *Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return m.Size()
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

//
// Change.Block contains only one, single change for one block.
type ChangeBlock struct {
}

func (m *ChangeBlock) Reset()         { *m = ChangeBlock{} }
func (m *ChangeBlock) String() string { return proto.CompactTextString(m) }
func (*ChangeBlock) ProtoMessage()    {}
func (*ChangeBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0}
}
func (m *ChangeBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlock.Merge(m, src)
}
func (m *ChangeBlock) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlock proto.InternalMessageInfo

type ChangeBlockFields struct {
	Fields *types.Struct `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (m *ChangeBlockFields) Reset()         { *m = ChangeBlockFields{} }
func (m *ChangeBlockFields) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockFields) ProtoMessage()    {}
func (*ChangeBlockFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 0}
}
func (m *ChangeBlockFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockFields.Merge(m, src)
}
func (m *ChangeBlockFields) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockFields) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockFields.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockFields proto.InternalMessageInfo

func (m *ChangeBlockFields) GetFields() *types.Struct {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ChangeBlockPermissions struct {
	Permissions *ModelBlockPermissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *ChangeBlockPermissions) Reset()         { *m = ChangeBlockPermissions{} }
func (m *ChangeBlockPermissions) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockPermissions) ProtoMessage()    {}
func (*ChangeBlockPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 1}
}
func (m *ChangeBlockPermissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockPermissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockPermissions.Merge(m, src)
}
func (m *ChangeBlockPermissions) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockPermissions proto.InternalMessageInfo

func (m *ChangeBlockPermissions) GetPermissions() *ModelBlockPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type ChangeBlockChildrenIds struct {
	ChildrenIds []string `protobuf:"bytes,1,rep,name=childrenIds,proto3" json:"childrenIds,omitempty"`
}

func (m *ChangeBlockChildrenIds) Reset()         { *m = ChangeBlockChildrenIds{} }
func (m *ChangeBlockChildrenIds) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockChildrenIds) ProtoMessage()    {}
func (*ChangeBlockChildrenIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2}
}
func (m *ChangeBlockChildrenIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockChildrenIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockChildrenIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockChildrenIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockChildrenIds.Merge(m, src)
}
func (m *ChangeBlockChildrenIds) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockChildrenIds) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockChildrenIds.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockChildrenIds proto.InternalMessageInfo

func (m *ChangeBlockChildrenIds) GetChildrenIds() []string {
	if m != nil {
		return m.ChildrenIds
	}
	return nil
}

type ChangeBlockContent struct {
}

func (m *ChangeBlockContent) Reset()         { *m = ChangeBlockContent{} }
func (m *ChangeBlockContent) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContent) ProtoMessage()    {}
func (*ChangeBlockContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 3}
}
func (m *ChangeBlockContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContent.Merge(m, src)
}
func (m *ChangeBlockContent) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContent.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContent proto.InternalMessageInfo

type ChangeBlockContentPage struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockContentPageChangeOfStyle
	//	*ChangeBlockContentPageChangeOfBlock
	Change isChangeBlockContentPageChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockContentPage) Reset()         { *m = ChangeBlockContentPage{} }
func (m *ChangeBlockContentPage) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContentPage) ProtoMessage()    {}
func (*ChangeBlockContentPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 3, 0}
}
func (m *ChangeBlockContentPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContentPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContentPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContentPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContentPage.Merge(m, src)
}
func (m *ChangeBlockContentPage) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContentPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContentPage.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContentPage proto.InternalMessageInfo

type isChangeBlockContentPageChange interface {
	isChangeBlockContentPageChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockContentPageChangeOfStyle struct {
	Style ModelBlockContentPageStyle `protobuf:"varint,1,opt,name=style,proto3,enum=anytype.ModelBlockContentPageStyle,oneof" json:"style,omitempty"`
}
type ChangeBlockContentPageChangeOfBlock struct {
	Block *ModelBlock `protobuf:"bytes,2,opt,name=block,proto3,oneof" json:"block,omitempty"`
}

func (*ChangeBlockContentPageChangeOfStyle) isChangeBlockContentPageChange() {}
func (*ChangeBlockContentPageChangeOfBlock) isChangeBlockContentPageChange() {}

func (m *ChangeBlockContentPage) GetChange() isChangeBlockContentPageChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockContentPage) GetStyle() ModelBlockContentPageStyle {
	if x, ok := m.GetChange().(*ChangeBlockContentPageChangeOfStyle); ok {
		return x.Style
	}
	return ModelBlockContentPage_EMPTY
}

func (m *ChangeBlockContentPage) GetBlock() *ModelBlock {
	if x, ok := m.GetChange().(*ChangeBlockContentPageChangeOfBlock); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockContentPage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockContentPageChangeOfStyle)(nil),
		(*ChangeBlockContentPageChangeOfBlock)(nil),
	}
}

type ChangeBlockContentDashboard struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockContentDashboardChangeOfStyle
	//	*ChangeBlockContentDashboardChangeOfBlock
	Change isChangeBlockContentDashboardChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockContentDashboard) Reset()         { *m = ChangeBlockContentDashboard{} }
func (m *ChangeBlockContentDashboard) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContentDashboard) ProtoMessage()    {}
func (*ChangeBlockContentDashboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 3, 1}
}
func (m *ChangeBlockContentDashboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContentDashboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContentDashboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContentDashboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContentDashboard.Merge(m, src)
}
func (m *ChangeBlockContentDashboard) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContentDashboard) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContentDashboard.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContentDashboard proto.InternalMessageInfo

type isChangeBlockContentDashboardChange interface {
	isChangeBlockContentDashboardChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockContentDashboardChangeOfStyle struct {
	Style ModelBlockContentDashboardStyle `protobuf:"varint,1,opt,name=style,proto3,enum=anytype.ModelBlockContentDashboardStyle,oneof" json:"style,omitempty"`
}
type ChangeBlockContentDashboardChangeOfBlock struct {
	Block *ModelBlock `protobuf:"bytes,2,opt,name=block,proto3,oneof" json:"block,omitempty"`
}

func (*ChangeBlockContentDashboardChangeOfStyle) isChangeBlockContentDashboardChange() {}
func (*ChangeBlockContentDashboardChangeOfBlock) isChangeBlockContentDashboardChange() {}

func (m *ChangeBlockContentDashboard) GetChange() isChangeBlockContentDashboardChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockContentDashboard) GetStyle() ModelBlockContentDashboardStyle {
	if x, ok := m.GetChange().(*ChangeBlockContentDashboardChangeOfStyle); ok {
		return x.Style
	}
	return ModelBlockContentDashboard_MAIN_SCREEN
}

func (m *ChangeBlockContentDashboard) GetBlock() *ModelBlock {
	if x, ok := m.GetChange().(*ChangeBlockContentDashboardChangeOfBlock); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockContentDashboard) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockContentDashboardChangeOfStyle)(nil),
		(*ChangeBlockContentDashboardChangeOfBlock)(nil),
	}
}

type ChangeBlockContentFile struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockContentFileChangeOfContent
	//	*ChangeBlockContentFileChangeOfState
	//	*ChangeBlockContentFileChangeOfPreview
	Change isChangeBlockContentFileChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockContentFile) Reset()         { *m = ChangeBlockContentFile{} }
func (m *ChangeBlockContentFile) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContentFile) ProtoMessage()    {}
func (*ChangeBlockContentFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 3, 2}
}
func (m *ChangeBlockContentFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContentFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContentFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContentFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContentFile.Merge(m, src)
}
func (m *ChangeBlockContentFile) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContentFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContentFile.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContentFile proto.InternalMessageInfo

type isChangeBlockContentFileChange interface {
	isChangeBlockContentFileChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockContentFileChangeOfContent struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3,oneof" json:"content,omitempty"`
}
type ChangeBlockContentFileChangeOfState struct {
	State ModelBlockContentFileState `protobuf:"varint,2,opt,name=state,proto3,enum=anytype.ModelBlockContentFileState,oneof" json:"state,omitempty"`
}
type ChangeBlockContentFileChangeOfPreview struct {
	Preview *ModelBlockContentFilePreview `protobuf:"bytes,3,opt,name=preview,proto3,oneof" json:"preview,omitempty"`
}

func (*ChangeBlockContentFileChangeOfContent) isChangeBlockContentFileChange() {}
func (*ChangeBlockContentFileChangeOfState) isChangeBlockContentFileChange()   {}
func (*ChangeBlockContentFileChangeOfPreview) isChangeBlockContentFileChange() {}

func (m *ChangeBlockContentFile) GetChange() isChangeBlockContentFileChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockContentFile) GetContent() string {
	if x, ok := m.GetChange().(*ChangeBlockContentFileChangeOfContent); ok {
		return x.Content
	}
	return ""
}

func (m *ChangeBlockContentFile) GetState() ModelBlockContentFileState {
	if x, ok := m.GetChange().(*ChangeBlockContentFileChangeOfState); ok {
		return x.State
	}
	return ModelBlockContentFile_EMPTY
}

func (m *ChangeBlockContentFile) GetPreview() *ModelBlockContentFilePreview {
	if x, ok := m.GetChange().(*ChangeBlockContentFileChangeOfPreview); ok {
		return x.Preview
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockContentFile) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockContentFileChangeOfContent)(nil),
		(*ChangeBlockContentFileChangeOfState)(nil),
		(*ChangeBlockContentFileChangeOfPreview)(nil),
	}
}

type ChangeBlockContentImage struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockContentImageChangeOfContent
	//	*ChangeBlockContentImageChangeOfState
	//	*ChangeBlockContentImageChangeOfPreview
	Change isChangeBlockContentImageChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockContentImage) Reset()         { *m = ChangeBlockContentImage{} }
func (m *ChangeBlockContentImage) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContentImage) ProtoMessage()    {}
func (*ChangeBlockContentImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 3, 3}
}
func (m *ChangeBlockContentImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContentImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContentImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContentImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContentImage.Merge(m, src)
}
func (m *ChangeBlockContentImage) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContentImage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContentImage.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContentImage proto.InternalMessageInfo

type isChangeBlockContentImageChange interface {
	isChangeBlockContentImageChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockContentImageChangeOfContent struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3,oneof" json:"content,omitempty"`
}
type ChangeBlockContentImageChangeOfState struct {
	State ModelBlockContentImageState `protobuf:"varint,2,opt,name=state,proto3,enum=anytype.ModelBlockContentImageState,oneof" json:"state,omitempty"`
}
type ChangeBlockContentImageChangeOfPreview struct {
	Preview *ModelBlockContentImagePreview `protobuf:"bytes,3,opt,name=preview,proto3,oneof" json:"preview,omitempty"`
}

func (*ChangeBlockContentImageChangeOfContent) isChangeBlockContentImageChange() {}
func (*ChangeBlockContentImageChangeOfState) isChangeBlockContentImageChange()   {}
func (*ChangeBlockContentImageChangeOfPreview) isChangeBlockContentImageChange() {}

func (m *ChangeBlockContentImage) GetChange() isChangeBlockContentImageChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockContentImage) GetContent() string {
	if x, ok := m.GetChange().(*ChangeBlockContentImageChangeOfContent); ok {
		return x.Content
	}
	return ""
}

func (m *ChangeBlockContentImage) GetState() ModelBlockContentImageState {
	if x, ok := m.GetChange().(*ChangeBlockContentImageChangeOfState); ok {
		return x.State
	}
	return ModelBlockContentImage_EMPTY
}

func (m *ChangeBlockContentImage) GetPreview() *ModelBlockContentImagePreview {
	if x, ok := m.GetChange().(*ChangeBlockContentImageChangeOfPreview); ok {
		return x.Preview
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockContentImage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockContentImageChangeOfContent)(nil),
		(*ChangeBlockContentImageChangeOfState)(nil),
		(*ChangeBlockContentImageChangeOfPreview)(nil),
	}
}

type ChangeBlockContentVideo struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockContentVideoChangeOfContent
	//	*ChangeBlockContentVideoChangeOfState
	//	*ChangeBlockContentVideoChangeOfPreview
	Change isChangeBlockContentVideoChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockContentVideo) Reset()         { *m = ChangeBlockContentVideo{} }
func (m *ChangeBlockContentVideo) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContentVideo) ProtoMessage()    {}
func (*ChangeBlockContentVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 3, 4}
}
func (m *ChangeBlockContentVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContentVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContentVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContentVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContentVideo.Merge(m, src)
}
func (m *ChangeBlockContentVideo) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContentVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContentVideo.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContentVideo proto.InternalMessageInfo

type isChangeBlockContentVideoChange interface {
	isChangeBlockContentVideoChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockContentVideoChangeOfContent struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3,oneof" json:"content,omitempty"`
}
type ChangeBlockContentVideoChangeOfState struct {
	State ModelBlockContentVideoState `protobuf:"varint,2,opt,name=state,proto3,enum=anytype.ModelBlockContentVideoState,oneof" json:"state,omitempty"`
}
type ChangeBlockContentVideoChangeOfPreview struct {
	Preview *ModelBlockContentVideoPreview `protobuf:"bytes,3,opt,name=preview,proto3,oneof" json:"preview,omitempty"`
}

func (*ChangeBlockContentVideoChangeOfContent) isChangeBlockContentVideoChange() {}
func (*ChangeBlockContentVideoChangeOfState) isChangeBlockContentVideoChange()   {}
func (*ChangeBlockContentVideoChangeOfPreview) isChangeBlockContentVideoChange() {}

func (m *ChangeBlockContentVideo) GetChange() isChangeBlockContentVideoChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockContentVideo) GetContent() string {
	if x, ok := m.GetChange().(*ChangeBlockContentVideoChangeOfContent); ok {
		return x.Content
	}
	return ""
}

func (m *ChangeBlockContentVideo) GetState() ModelBlockContentVideoState {
	if x, ok := m.GetChange().(*ChangeBlockContentVideoChangeOfState); ok {
		return x.State
	}
	return ModelBlockContentVideo_EMPTY
}

func (m *ChangeBlockContentVideo) GetPreview() *ModelBlockContentVideoPreview {
	if x, ok := m.GetChange().(*ChangeBlockContentVideoChangeOfPreview); ok {
		return x.Preview
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockContentVideo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockContentVideoChangeOfContent)(nil),
		(*ChangeBlockContentVideoChangeOfState)(nil),
		(*ChangeBlockContentVideoChangeOfPreview)(nil),
	}
}

type ChangeBlockContentText struct {
	// Types that are valid to be assigned to Change:
	//	*ChangeBlockContentTextChangeOfText
	//	*ChangeBlockContentTextChangeOfStyle
	//	*ChangeBlockContentTextChangeOfMarks
	//	*ChangeBlockContentTextChangeOfToggleable
	//	*ChangeBlockContentTextChangeOfMarkerType
	//	*ChangeBlockContentTextChangeOfCheckable
	//	*ChangeBlockContentTextChangeOfChecked
	Change isChangeBlockContentTextChange `protobuf_oneof:"change"`
}

func (m *ChangeBlockContentText) Reset()         { *m = ChangeBlockContentText{} }
func (m *ChangeBlockContentText) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockContentText) ProtoMessage()    {}
func (*ChangeBlockContentText) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 3, 5}
}
func (m *ChangeBlockContentText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockContentText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockContentText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockContentText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockContentText.Merge(m, src)
}
func (m *ChangeBlockContentText) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockContentText) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockContentText.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockContentText proto.InternalMessageInfo

type isChangeBlockContentTextChange interface {
	isChangeBlockContentTextChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeBlockContentTextChangeOfText struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type ChangeBlockContentTextChangeOfStyle struct {
	Style ModelBlockContentTextStyle `protobuf:"varint,2,opt,name=style,proto3,enum=anytype.ModelBlockContentTextStyle,oneof" json:"style,omitempty"`
}
type ChangeBlockContentTextChangeOfMarks struct {
	Marks *ModelBlockContentTextMarks `protobuf:"bytes,3,opt,name=marks,proto3,oneof" json:"marks,omitempty"`
}
type ChangeBlockContentTextChangeOfToggleable struct {
	Toggleable bool `protobuf:"varint,4,opt,name=toggleable,proto3,oneof" json:"toggleable,omitempty"`
}
type ChangeBlockContentTextChangeOfMarkerType struct {
	MarkerType ModelBlockContentTextMarkerType `protobuf:"varint,5,opt,name=markerType,proto3,enum=anytype.ModelBlockContentTextMarkerType,oneof" json:"markerType,omitempty"`
}
type ChangeBlockContentTextChangeOfCheckable struct {
	Checkable bool `protobuf:"varint,6,opt,name=checkable,proto3,oneof" json:"checkable,omitempty"`
}
type ChangeBlockContentTextChangeOfChecked struct {
	Checked bool `protobuf:"varint,7,opt,name=checked,proto3,oneof" json:"checked,omitempty"`
}

func (*ChangeBlockContentTextChangeOfText) isChangeBlockContentTextChange()       {}
func (*ChangeBlockContentTextChangeOfStyle) isChangeBlockContentTextChange()      {}
func (*ChangeBlockContentTextChangeOfMarks) isChangeBlockContentTextChange()      {}
func (*ChangeBlockContentTextChangeOfToggleable) isChangeBlockContentTextChange() {}
func (*ChangeBlockContentTextChangeOfMarkerType) isChangeBlockContentTextChange() {}
func (*ChangeBlockContentTextChangeOfCheckable) isChangeBlockContentTextChange()  {}
func (*ChangeBlockContentTextChangeOfChecked) isChangeBlockContentTextChange()    {}

func (m *ChangeBlockContentText) GetChange() isChangeBlockContentTextChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeBlockContentText) GetText() string {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfText); ok {
		return x.Text
	}
	return ""
}

func (m *ChangeBlockContentText) GetStyle() ModelBlockContentTextStyle {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfStyle); ok {
		return x.Style
	}
	return ModelBlockContentText_p
}

func (m *ChangeBlockContentText) GetMarks() *ModelBlockContentTextMarks {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfMarks); ok {
		return x.Marks
	}
	return nil
}

func (m *ChangeBlockContentText) GetToggleable() bool {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfToggleable); ok {
		return x.Toggleable
	}
	return false
}

func (m *ChangeBlockContentText) GetMarkerType() ModelBlockContentTextMarkerType {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfMarkerType); ok {
		return x.MarkerType
	}
	return ModelBlockContentText_none
}

func (m *ChangeBlockContentText) GetCheckable() bool {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfCheckable); ok {
		return x.Checkable
	}
	return false
}

func (m *ChangeBlockContentText) GetChecked() bool {
	if x, ok := m.GetChange().(*ChangeBlockContentTextChangeOfChecked); ok {
		return x.Checked
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeBlockContentText) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeBlockContentTextChangeOfText)(nil),
		(*ChangeBlockContentTextChangeOfStyle)(nil),
		(*ChangeBlockContentTextChangeOfMarks)(nil),
		(*ChangeBlockContentTextChangeOfToggleable)(nil),
		(*ChangeBlockContentTextChangeOfMarkerType)(nil),
		(*ChangeBlockContentTextChangeOfCheckable)(nil),
		(*ChangeBlockContentTextChangeOfChecked)(nil),
	}
}

//
// Change.Single contains only one, single change, but for a list of blocks.
type ChangeSingle struct {
}

func (m *ChangeSingle) Reset()         { *m = ChangeSingle{} }
func (m *ChangeSingle) String() string { return proto.CompactTextString(m) }
func (*ChangeSingle) ProtoMessage()    {}
func (*ChangeSingle) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 1}
}
func (m *ChangeSingle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeSingle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeSingle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeSingle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeSingle.Merge(m, src)
}
func (m *ChangeSingle) XXX_Size() int {
	return m.Size()
}
func (m *ChangeSingle) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeSingle.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeSingle proto.InternalMessageInfo

type ChangeSingleBlocksList struct {
	Id     []string      `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	Author *ModelAccount `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	// Types that are valid to be assigned to Change:
	//	*ChangeSingleBlocksListChangeOfText
	//	*ChangeSingleBlocksListChangeOfFields
	//	*ChangeSingleBlocksListChangeOfPremissions
	//	*ChangeSingleBlocksListChangeOfChildrenIds
	//	*ChangeSingleBlocksListChangeOfPage
	//	*ChangeSingleBlocksListChangeOfDashboard
	//	*ChangeSingleBlocksListChangeOfVideo
	//	*ChangeSingleBlocksListChangeOfImage
	//	*ChangeSingleBlocksListChangeOfFile
	Change isChangeSingleBlocksListChange `protobuf_oneof:"change"`
}

func (m *ChangeSingleBlocksList) Reset()         { *m = ChangeSingleBlocksList{} }
func (m *ChangeSingleBlocksList) String() string { return proto.CompactTextString(m) }
func (*ChangeSingleBlocksList) ProtoMessage()    {}
func (*ChangeSingleBlocksList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 1, 0}
}
func (m *ChangeSingleBlocksList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeSingleBlocksList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeSingleBlocksList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeSingleBlocksList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeSingleBlocksList.Merge(m, src)
}
func (m *ChangeSingleBlocksList) XXX_Size() int {
	return m.Size()
}
func (m *ChangeSingleBlocksList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeSingleBlocksList.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeSingleBlocksList proto.InternalMessageInfo

type isChangeSingleBlocksListChange interface {
	isChangeSingleBlocksListChange()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeSingleBlocksListChangeOfText struct {
	Text *ChangeBlockContentText `protobuf:"bytes,3,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type ChangeSingleBlocksListChangeOfFields struct {
	Fields *ChangeBlockFields `protobuf:"bytes,4,opt,name=fields,proto3,oneof" json:"fields,omitempty"`
}
type ChangeSingleBlocksListChangeOfPremissions struct {
	Premissions *ChangeBlockPermissions `protobuf:"bytes,5,opt,name=premissions,proto3,oneof" json:"premissions,omitempty"`
}
type ChangeSingleBlocksListChangeOfChildrenIds struct {
	ChildrenIds *ChangeBlockChildrenIds `protobuf:"bytes,6,opt,name=childrenIds,proto3,oneof" json:"childrenIds,omitempty"`
}
type ChangeSingleBlocksListChangeOfPage struct {
	Page *ChangeBlockContentPage `protobuf:"bytes,7,opt,name=page,proto3,oneof" json:"page,omitempty"`
}
type ChangeSingleBlocksListChangeOfDashboard struct {
	Dashboard *ChangeBlockContentDashboard `protobuf:"bytes,8,opt,name=dashboard,proto3,oneof" json:"dashboard,omitempty"`
}
type ChangeSingleBlocksListChangeOfVideo struct {
	Video *ChangeBlockContentVideo `protobuf:"bytes,9,opt,name=video,proto3,oneof" json:"video,omitempty"`
}
type ChangeSingleBlocksListChangeOfImage struct {
	Image *ChangeBlockContentImage `protobuf:"bytes,10,opt,name=image,proto3,oneof" json:"image,omitempty"`
}
type ChangeSingleBlocksListChangeOfFile struct {
	File *ChangeBlockContentFile `protobuf:"bytes,11,opt,name=file,proto3,oneof" json:"file,omitempty"`
}

func (*ChangeSingleBlocksListChangeOfText) isChangeSingleBlocksListChange()        {}
func (*ChangeSingleBlocksListChangeOfFields) isChangeSingleBlocksListChange()      {}
func (*ChangeSingleBlocksListChangeOfPremissions) isChangeSingleBlocksListChange() {}
func (*ChangeSingleBlocksListChangeOfChildrenIds) isChangeSingleBlocksListChange() {}
func (*ChangeSingleBlocksListChangeOfPage) isChangeSingleBlocksListChange()        {}
func (*ChangeSingleBlocksListChangeOfDashboard) isChangeSingleBlocksListChange()   {}
func (*ChangeSingleBlocksListChangeOfVideo) isChangeSingleBlocksListChange()       {}
func (*ChangeSingleBlocksListChangeOfImage) isChangeSingleBlocksListChange()       {}
func (*ChangeSingleBlocksListChangeOfFile) isChangeSingleBlocksListChange()        {}

func (m *ChangeSingleBlocksList) GetChange() isChangeSingleBlocksListChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetAuthor() *ModelAccount {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetText() *ChangeBlockContentText {
	if x, ok := m.GetChange().(*ChangeSingleBlocksListChangeOfText); ok {
		return x.Text
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetFields() *ChangeBlockFields {
	if x, ok := m.GetChange().(*ChangeSingleBlocksListChangeOfFields); ok {
		return x.Fields
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetPremissions() *ChangeBlockPermissions {
	if x, ok := m.GetChange().(*ChangeSingleBlocksListChangeOfPremissions); ok {
		return x.Premissions
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetChildrenIds() *ChangeBlockChildrenIds {
	if x, ok := m.GetChange().(*ChangeSingleBlocksListChangeOfChildrenIds); ok {
		return x.ChildrenIds
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetPage() *ChangeBlockContentPage {
	if x, ok := m.GetChange().(*ChangeSingleBlocksListChangeOfPage); ok {
		return x.Page
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetDashboard() *ChangeBlockContentDashboard {
	if x, ok := m.GetChange().(*ChangeSingleBlocksListChangeOfDashboard); ok {
		return x.Dashboard
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetVideo() *ChangeBlockContentVideo {
	if x, ok := m.GetChange().(*ChangeSingleBlocksListChangeOfVideo); ok {
		return x.Video
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetImage() *ChangeBlockContentImage {
	if x, ok := m.GetChange().(*ChangeSingleBlocksListChangeOfImage); ok {
		return x.Image
	}
	return nil
}

func (m *ChangeSingleBlocksList) GetFile() *ChangeBlockContentFile {
	if x, ok := m.GetChange().(*ChangeSingleBlocksListChangeOfFile); ok {
		return x.File
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeSingleBlocksList) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeSingleBlocksListChangeOfText)(nil),
		(*ChangeSingleBlocksListChangeOfFields)(nil),
		(*ChangeSingleBlocksListChangeOfPremissions)(nil),
		(*ChangeSingleBlocksListChangeOfChildrenIds)(nil),
		(*ChangeSingleBlocksListChangeOfPage)(nil),
		(*ChangeSingleBlocksListChangeOfDashboard)(nil),
		(*ChangeSingleBlocksListChangeOfVideo)(nil),
		(*ChangeSingleBlocksListChangeOfImage)(nil),
		(*ChangeSingleBlocksListChangeOfFile)(nil),
	}
}

//
// Change.Multiple contains array of changes, for a list of blocks each.
type ChangeMultiple struct {
}

func (m *ChangeMultiple) Reset()         { *m = ChangeMultiple{} }
func (m *ChangeMultiple) String() string { return proto.CompactTextString(m) }
func (*ChangeMultiple) ProtoMessage()    {}
func (*ChangeMultiple) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 2}
}
func (m *ChangeMultiple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeMultiple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeMultiple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeMultiple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeMultiple.Merge(m, src)
}
func (m *ChangeMultiple) XXX_Size() int {
	return m.Size()
}
func (m *ChangeMultiple) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeMultiple.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeMultiple proto.InternalMessageInfo

type ChangeMultipleBlocksList struct {
	Author  *ModelAccount             `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Changes []*ChangeSingleBlocksList `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (m *ChangeMultipleBlocksList) Reset()         { *m = ChangeMultipleBlocksList{} }
func (m *ChangeMultipleBlocksList) String() string { return proto.CompactTextString(m) }
func (*ChangeMultipleBlocksList) ProtoMessage()    {}
func (*ChangeMultipleBlocksList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 2, 0}
}
func (m *ChangeMultipleBlocksList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeMultipleBlocksList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeMultipleBlocksList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeMultipleBlocksList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeMultipleBlocksList.Merge(m, src)
}
func (m *ChangeMultipleBlocksList) XXX_Size() int {
	return m.Size()
}
func (m *ChangeMultipleBlocksList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeMultipleBlocksList.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeMultipleBlocksList proto.InternalMessageInfo

func (m *ChangeMultipleBlocksList) GetAuthor() *ModelAccount {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *ChangeMultipleBlocksList) GetChanges() []*ChangeSingleBlocksList {
	if m != nil {
		return m.Changes
	}
	return nil
}

func init() {
	proto.RegisterType((*Change)(nil), "anytype.Change")
	proto.RegisterType((*ChangeBlock)(nil), "anytype.Change.Block")
	proto.RegisterType((*ChangeBlockFields)(nil), "anytype.Change.Block.Fields")
	proto.RegisterType((*ChangeBlockPermissions)(nil), "anytype.Change.Block.Permissions")
	proto.RegisterType((*ChangeBlockChildrenIds)(nil), "anytype.Change.Block.ChildrenIds")
	proto.RegisterType((*ChangeBlockContent)(nil), "anytype.Change.Block.Content")
	proto.RegisterType((*ChangeBlockContentPage)(nil), "anytype.Change.Block.Content.Page")
	proto.RegisterType((*ChangeBlockContentDashboard)(nil), "anytype.Change.Block.Content.Dashboard")
	proto.RegisterType((*ChangeBlockContentFile)(nil), "anytype.Change.Block.Content.File")
	proto.RegisterType((*ChangeBlockContentImage)(nil), "anytype.Change.Block.Content.Image")
	proto.RegisterType((*ChangeBlockContentVideo)(nil), "anytype.Change.Block.Content.Video")
	proto.RegisterType((*ChangeBlockContentText)(nil), "anytype.Change.Block.Content.Text")
	proto.RegisterType((*ChangeSingle)(nil), "anytype.Change.Single")
	proto.RegisterType((*ChangeSingleBlocksList)(nil), "anytype.Change.Single.BlocksList")
	proto.RegisterType((*ChangeMultiple)(nil), "anytype.Change.Multiple")
	proto.RegisterType((*ChangeMultipleBlocksList)(nil), "anytype.Change.Multiple.BlocksList")
}

func init() { proto.RegisterFile("changes.proto", fileDescriptor_b16a38c6509bd894) }

var fileDescriptor_b16a38c6509bd894 = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xb5, 0xd3, 0xd8, 0x49, 0x26, 0xbf, 0x5f, 0x25, 0x56, 0x15, 0x58, 0x56, 0x15, 0x85, 0x72,
	0x20, 0xa0, 0xca, 0x91, 0x8a, 0x84, 0x40, 0x3d, 0x14, 0xd2, 0x3f, 0xa4, 0x12, 0x45, 0xc5, 0xa9,
	0x38, 0x70, 0x73, 0xec, 0xad, 0x63, 0xd5, 0xb1, 0x2d, 0x7b, 0x53, 0x9a, 0x13, 0x27, 0x0e, 0x1c,
	0x90, 0xe0, 0x86, 0xf8, 0x1c, 0x48, 0x7c, 0x05, 0x8e, 0x3d, 0x21, 0x8e, 0xa8, 0xf9, 0x22, 0x68,
	0xd6, 0x8e, 0xed, 0x46, 0x51, 0x62, 0x89, 0xde, 0xbc, 0xeb, 0x79, 0x6f, 0xde, 0xec, 0xce, 0x3c,
	0x1b, 0xfe, 0x37, 0x07, 0x86, 0x67, 0xd3, 0x48, 0x0b, 0x42, 0x9f, 0xf9, 0xa4, 0x62, 0x78, 0x63,
	0x36, 0x0e, 0xa8, 0xfa, 0xdf, 0xd0, 0xb7, 0xa8, 0x9b, 0x6c, 0xab, 0xeb, 0xb6, 0xef, 0xdb, 0x2e,
	0x6d, 0xf3, 0x55, 0x7f, 0x74, 0xda, 0x8e, 0x58, 0x38, 0x32, 0x59, 0xfc, 0x76, 0xe3, 0xcb, 0x2d,
	0x90, 0x77, 0x39, 0x8d, 0x3a, 0x01, 0x90, 0x3a, 0xae, 0x6f, 0x9e, 0xa9, 0x4f, 0x41, 0x3e, 0x70,
	0xa8, 0x6b, 0x45, 0xa4, 0x0d, 0xf2, 0x29, 0x7f, 0x52, 0xc4, 0xa6, 0xd8, 0xaa, 0x6f, 0xdd, 0xd1,
	0x62, 0x36, 0x6d, 0xca, 0xa6, 0xf5, 0x38, 0x9b, 0x9e, 0x84, 0xa9, 0xaf, 0xa1, 0x7e, 0x4c, 0xc3,
	0xa1, 0x13, 0x45, 0x8e, 0xef, 0x45, 0xa4, 0x03, 0xf5, 0x20, 0x5b, 0x26, 0x24, 0x4d, 0x2d, 0x51,
	0xaa, 0x1d, 0xa1, 0x50, 0x8d, 0x27, 0xd5, 0x72, 0x30, 0x3d, 0x0f, 0x52, 0xdb, 0x50, 0xdf, 0x1d,
	0x38, 0xae, 0x15, 0x52, 0xef, 0xd0, 0x8a, 0x48, 0x13, 0xea, 0x66, 0xb6, 0x54, 0xc4, 0xe6, 0x4a,
	0xab, 0xa6, 0xe7, 0xb7, 0xd4, 0x6f, 0x35, 0xa8, 0xec, 0xfa, 0x1e, 0xa3, 0x1e, 0x53, 0xdf, 0x43,
	0xf9, 0xd8, 0xb0, 0x29, 0xd9, 0x01, 0x29, 0x62, 0x63, 0x97, 0x72, 0x09, 0xab, 0x5b, 0xf7, 0xe7,
	0x4a, 0x48, 0x40, 0x1a, 0x22, 0xb4, 0x1e, 0x86, 0x77, 0x05, 0x3d, 0xc6, 0x91, 0x4d, 0x90, 0xfa,
	0x18, 0xa4, 0x94, 0x78, 0x0d, 0x6b, 0xf3, 0x08, 0x30, 0x9a, 0x07, 0x75, 0xaa, 0x20, 0xc7, 0x97,
	0xa3, 0x7e, 0x14, 0xa1, 0xb6, 0x67, 0x44, 0x83, 0xbe, 0x6f, 0x84, 0x16, 0xd9, 0xbb, 0x2e, 0x63,
	0x73, 0xa1, 0x8c, 0x14, 0x76, 0x53, 0x5a, 0xbe, 0x8b, 0x50, 0x3e, 0x70, 0x5c, 0x4a, 0x54, 0xa8,
	0x98, 0x71, 0x12, 0x2e, 0xa4, 0xd6, 0x15, 0xf4, 0xe9, 0x46, 0x7c, 0x52, 0x06, 0xa3, 0x9c, 0x7c,
	0xd9, 0x49, 0x21, 0x9b, 0xd6, 0xc3, 0xf0, 0x58, 0x9d, 0xc1, 0x28, 0xd9, 0x87, 0x4a, 0x10, 0xd2,
	0x73, 0x87, 0xbe, 0x53, 0x56, 0xb8, 0xbe, 0x07, 0xcb, 0x29, 0x8e, 0x63, 0x00, 0xea, 0x48, 0xb0,
	0x39, 0xd9, 0x3f, 0x44, 0x90, 0x0e, 0x87, 0x78, 0x8b, 0x8b, 0x74, 0x3f, 0xbb, 0xae, 0xbb, 0xb5,
	0x30, 0x29, 0xa7, 0x9b, 0x15, 0x7e, 0x30, 0x2b, 0xfc, 0x61, 0x01, 0x8e, 0xa5, 0xca, 0xdf, 0x38,
	0x16, 0xf5, 0x6f, 0x4e, 0x39, 0xa7, 0xfb, 0x47, 0xe5, 0x31, 0xc7, 0x42, 0xe5, 0xbf, 0x4a, 0x50,
	0x3e, 0xa1, 0x17, 0x8c, 0xac, 0x41, 0x99, 0xd1, 0x8b, 0x4c, 0x35, 0x5f, 0x65, 0xe3, 0x54, 0xa4,
	0x49, 0x90, 0x67, 0xb6, 0x85, 0x77, 0x40, 0x1a, 0x1a, 0xe1, 0x59, 0x94, 0xe8, 0x2d, 0x40, 0x70,
	0x84, 0xe1, 0x48, 0xc0, 0x71, 0xa4, 0x09, 0xc0, 0x7c, 0xdb, 0x76, 0xa9, 0xd1, 0x77, 0xa9, 0x52,
	0x6e, 0x8a, 0xad, 0x6a, 0x57, 0xd0, 0x73, 0x7b, 0xe4, 0x15, 0x00, 0x86, 0xd2, 0xf0, 0x64, 0x1c,
	0x50, 0x45, 0x2a, 0x30, 0x70, 0x69, 0x9e, 0x18, 0x83, 0x7c, 0x19, 0x03, 0x69, 0x40, 0xcd, 0x1c,
	0x50, 0xf3, 0x8c, 0x27, 0x94, 0x93, 0x84, 0xd9, 0x16, 0xbf, 0x62, 0x5c, 0x50, 0x4b, 0xa9, 0x24,
	0x6f, 0xa7, 0x1b, 0xb9, 0x83, 0xfd, 0x2a, 0x81, 0xdc, 0x73, 0x3c, 0xdb, 0xa5, 0xea, 0x27, 0x09,
	0x80, 0x0b, 0x88, 0x5e, 0x3a, 0x11, 0x23, 0xab, 0x50, 0x72, 0xac, 0xc4, 0xcf, 0x4a, 0x8e, 0x45,
	0x34, 0x90, 0x8d, 0x11, 0x1b, 0xf8, 0x61, 0x32, 0xe6, 0xb7, 0x67, 0xb4, 0x3f, 0x37, 0x4d, 0x7f,
	0xe4, 0x31, 0x3d, 0x89, 0x22, 0x4f, 0x92, 0x9b, 0x8a, 0x4f, 0x74, 0x23, 0x8d, 0x8e, 0xed, 0x7d,
	0x4e, 0xa9, 0xe9, 0x6d, 0x3e, 0x4e, 0x5d, 0xbe, 0xcc, 0xb1, 0xeb, 0xf3, 0xb1, 0xf1, 0x37, 0xa1,
	0x2b, 0x4c, 0xcd, 0x9e, 0xec, 0x43, 0x3d, 0x08, 0x69, 0xea, 0xee, 0x12, 0x07, 0xdf, 0x9d, 0x0f,
	0xce, 0xd9, 0x7b, 0x57, 0xd0, 0xf3, 0x38, 0xa4, 0xc9, 0x3b, 0xba, 0xbc, 0x88, 0x26, 0xf7, 0x25,
	0x40, 0x9a, 0x1c, 0x0e, 0xeb, 0x0f, 0x0c, 0x9b, 0xf2, 0xc3, 0x5f, 0x5a, 0x3f, 0x5a, 0x3c, 0xd6,
	0x8f, 0x08, 0xf2, 0x02, 0x6a, 0xd6, 0xd4, 0x6b, 0x95, 0xea, 0x4c, 0x43, 0xce, 0x85, 0xa7, 0xd6,
	0x8c, 0x2d, 0x90, 0x62, 0xc9, 0x36, 0x48, 0xe7, 0x38, 0x5b, 0x4a, 0x8d, 0x93, 0xdc, 0x5b, 0x4c,
	0xc2, 0xc7, 0x10, 0x3b, 0x9a, 0x63, 0x10, 0xec, 0xa0, 0xa5, 0x28, 0x50, 0x04, 0xcc, 0xdd, 0x07,
	0xc1, 0x1c, 0x83, 0xc5, 0x9f, 0x3a, 0x2e, 0x55, 0xea, 0x45, 0x8a, 0x47, 0xcb, 0xc5, 0xe2, 0x11,
	0x91, 0x6b, 0xcd, 0x0f, 0x22, 0x54, 0x8f, 0x46, 0x2e, 0x73, 0x02, 0x97, 0xaa, 0xe3, 0x6b, 0xbd,
	0x99, 0xf5, 0xa2, 0x58, 0xa8, 0x17, 0xb7, 0x71, 0x16, 0xf8, 0xcf, 0x89, 0x52, 0x6a, 0xae, 0xcc,
	0xbb, 0xce, 0x78, 0x06, 0xb4, 0x2c, 0x87, 0x3e, 0x45, 0x74, 0xd6, 0x7f, 0x5e, 0x35, 0xc4, 0xcb,
	0xab, 0x86, 0xf8, 0xe7, 0xaa, 0x21, 0x7e, 0x9e, 0x34, 0x84, 0xcb, 0x49, 0x43, 0xf8, 0x3d, 0x69,
	0x08, 0x6f, 0x4b, 0x41, 0xbf, 0x2f, 0xf3, 0x5f, 0x8f, 0x47, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x2a, 0xbc, 0x54, 0xfd, 0xfe, 0x08, 0x00, 0x00,
}

func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChangeBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChangeBlockFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fields != nil {
		{
			size, err := m.Fields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockPermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockPermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockChildrenIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockChildrenIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockChildrenIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChildrenIds) > 0 {
		for iNdEx := len(m.ChildrenIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChildrenIds[iNdEx])
			copy(dAtA[i:], m.ChildrenIds[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.ChildrenIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContentPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentPageChangeOfStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentPageChangeOfStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Style))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentPageChangeOfBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentPageChangeOfBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentDashboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContentDashboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentDashboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentDashboardChangeOfStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentDashboardChangeOfStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Style))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentDashboardChangeOfBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentDashboardChangeOfBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContentFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentFileChangeOfContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentFileChangeOfContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Content)
	copy(dAtA[i:], m.Content)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Content)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentFileChangeOfState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentFileChangeOfState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentFileChangeOfPreview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentFileChangeOfPreview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Preview != nil {
		{
			size, err := m.Preview.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContentImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentImageChangeOfContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentImageChangeOfContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Content)
	copy(dAtA[i:], m.Content)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Content)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentImageChangeOfState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentImageChangeOfState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentImageChangeOfPreview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentImageChangeOfPreview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Preview != nil {
		{
			size, err := m.Preview.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContentVideo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentVideo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentVideoChangeOfContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentVideoChangeOfContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Content)
	copy(dAtA[i:], m.Content)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Content)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentVideoChangeOfState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentVideoChangeOfState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentVideoChangeOfPreview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentVideoChangeOfPreview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Preview != nil {
		{
			size, err := m.Preview.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockContentText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockContentTextChangeOfText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Style))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfMarks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfMarks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Marks != nil {
		{
			size, err := m.Marks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfToggleable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfToggleable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Toggleable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfMarkerType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfMarkerType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.MarkerType))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfCheckable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfCheckable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Checkable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *ChangeBlockContentTextChangeOfChecked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockContentTextChangeOfChecked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Checked {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *ChangeSingle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeSingle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChangeSingleBlocksList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeSingleBlocksList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingleBlocksList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeSingleBlocksListChangeOfText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingleBlocksListChangeOfText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeSingleBlocksListChangeOfFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingleBlocksListChangeOfFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fields != nil {
		{
			size, err := m.Fields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ChangeSingleBlocksListChangeOfPremissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingleBlocksListChangeOfPremissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Premissions != nil {
		{
			size, err := m.Premissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeSingleBlocksListChangeOfChildrenIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingleBlocksListChangeOfChildrenIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildrenIds != nil {
		{
			size, err := m.ChildrenIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ChangeSingleBlocksListChangeOfPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingleBlocksListChangeOfPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeSingleBlocksListChangeOfDashboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingleBlocksListChangeOfDashboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Dashboard != nil {
		{
			size, err := m.Dashboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ChangeSingleBlocksListChangeOfVideo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingleBlocksListChangeOfVideo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Video != nil {
		{
			size, err := m.Video.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeSingleBlocksListChangeOfImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingleBlocksListChangeOfImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ChangeSingleBlocksListChangeOfFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSingleBlocksListChangeOfFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeMultiple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeMultiple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeMultiple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChangeMultipleBlocksList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeMultipleBlocksList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeMultipleBlocksList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChanges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChanges(dAtA []byte, offset int, v uint64) int {
	offset -= sovChanges(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChangeBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChangeBlockFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}

func (m *ChangeBlockPermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}

func (m *ChangeBlockChildrenIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChildrenIds) > 0 {
		for _, s := range m.ChildrenIds {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func (m *ChangeBlockContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChangeBlockContentPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockContentPageChangeOfStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Style))
	return n
}
func (m *ChangeBlockContentPageChangeOfBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockContentDashboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockContentDashboardChangeOfStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Style))
	return n
}
func (m *ChangeBlockContentDashboardChangeOfBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockContentFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockContentFileChangeOfContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *ChangeBlockContentFileChangeOfState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.State))
	return n
}
func (m *ChangeBlockContentFileChangeOfPreview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Preview != nil {
		l = m.Preview.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockContentImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockContentImageChangeOfContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *ChangeBlockContentImageChangeOfState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.State))
	return n
}
func (m *ChangeBlockContentImageChangeOfPreview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Preview != nil {
		l = m.Preview.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockContentVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockContentVideoChangeOfContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *ChangeBlockContentVideoChangeOfState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.State))
	return n
}
func (m *ChangeBlockContentVideoChangeOfPreview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Preview != nil {
		l = m.Preview.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockContentText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeBlockContentTextChangeOfText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *ChangeBlockContentTextChangeOfStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Style))
	return n
}
func (m *ChangeBlockContentTextChangeOfMarks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Marks != nil {
		l = m.Marks.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockContentTextChangeOfToggleable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ChangeBlockContentTextChangeOfMarkerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.MarkerType))
	return n
}
func (m *ChangeBlockContentTextChangeOfCheckable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ChangeBlockContentTextChangeOfChecked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ChangeSingle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChangeSingleBlocksList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *ChangeSingleBlocksListChangeOfText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeSingleBlocksListChangeOfFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeSingleBlocksListChangeOfPremissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Premissions != nil {
		l = m.Premissions.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeSingleBlocksListChangeOfChildrenIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildrenIds != nil {
		l = m.ChildrenIds.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeSingleBlocksListChangeOfPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeSingleBlocksListChangeOfDashboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dashboard != nil {
		l = m.Dashboard.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeSingleBlocksListChangeOfVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeSingleBlocksListChangeOfImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeSingleBlocksListChangeOfFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeMultiple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChangeMultipleBlocksList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func sovChanges(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChanges(x uint64) (n int) {
	return sovChanges(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &types.Struct{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &ModelBlockPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockChildrenIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildrenIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildrenIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildrenIds = append(m.ChildrenIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContentPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v ModelBlockContentPageStyle
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentPageStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentPageChangeOfStyle{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModelBlock{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeBlockContentPageChangeOfBlock{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContentDashboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dashboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dashboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v ModelBlockContentDashboardStyle
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentDashboardStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentDashboardChangeOfStyle{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModelBlock{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeBlockContentDashboardChangeOfBlock{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContentFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &ChangeBlockContentFileChangeOfContent{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v ModelBlockContentFileState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentFileState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentFileChangeOfState{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModelBlockContentFilePreview{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeBlockContentFileChangeOfPreview{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContentImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &ChangeBlockContentImageChangeOfContent{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v ModelBlockContentImageState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentImageState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentImageChangeOfState{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModelBlockContentImagePreview{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeBlockContentImageChangeOfPreview{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContentVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Video: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Video: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &ChangeBlockContentVideoChangeOfContent{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v ModelBlockContentVideoState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentVideoState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentVideoChangeOfState{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModelBlockContentVideoPreview{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeBlockContentVideoChangeOfPreview{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockContentText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Text: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Text: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &ChangeBlockContentTextChangeOfText{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v ModelBlockContentTextStyle
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentTextStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentTextChangeOfStyle{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModelBlockContentTextMarks{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeBlockContentTextChangeOfMarks{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toggleable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Change = &ChangeBlockContentTextChangeOfToggleable{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerType", wireType)
			}
			var v ModelBlockContentTextMarkerType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ModelBlockContentTextMarkerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &ChangeBlockContentTextChangeOfMarkerType{v}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Change = &ChangeBlockContentTextChangeOfCheckable{b}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Change = &ChangeBlockContentTextChangeOfChecked{b}
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeSingle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Single: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Single: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeSingleBlocksList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlocksList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlocksList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &ModelAccount{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockContentText{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeSingleBlocksListChangeOfText{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockFields{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeSingleBlocksListChangeOfFields{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockPermissions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeSingleBlocksListChangeOfPremissions{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockChildrenIds{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeSingleBlocksListChangeOfChildrenIds{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockContentPage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeSingleBlocksListChangeOfPage{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dashboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockContentDashboard{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeSingleBlocksListChangeOfDashboard{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockContentVideo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeSingleBlocksListChangeOfVideo{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockContentImage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeSingleBlocksListChangeOfImage{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockContentFile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &ChangeSingleBlocksListChangeOfFile{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeMultiple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Multiple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Multiple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeMultipleBlocksList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlocksList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlocksList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &ModelAccount{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, &ChangeSingleBlocksList{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChanges(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChanges
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChanges
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChanges
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChanges        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChanges          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChanges = fmt.Errorf("proto: unexpected end of group")
)
