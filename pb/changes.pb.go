// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/protos/changes.proto

package pb

import (
	fmt "fmt"
	model "github.com/anytypeio/go-anytype-library/pb/model"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// the element of change tree used to store and internal apply smartBlock history
type Change struct {
	// ids of previous changes
	PreviousIds []string `protobuf:"bytes,1,rep,name=previous_ids,json=previousIds,proto3" json:"previous_ids,omitempty"`
	// id of the last snapshot
	LastSnapshotId string `protobuf:"bytes,2,opt,name=last_snapshot_id,json=lastSnapshotId,proto3" json:"last_snapshot_id,omitempty"`
	// ids of the last changes with details content
	PreviousDetailsIds []string `protobuf:"bytes,5,rep,name=previous_details_ids,json=previousDetailsIds,proto3" json:"previous_details_ids,omitempty"`
	// set of actions to apply
	Content []*ChangeContent `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
	// snapshot - when not null, the content will ignoring
	Snapshot *ChangeSnapshot `protobuf:"bytes,4,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0}
}
func (m *Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return m.Size()
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

func (m *Change) GetPreviousIds() []string {
	if m != nil {
		return m.PreviousIds
	}
	return nil
}

func (m *Change) GetLastSnapshotId() string {
	if m != nil {
		return m.LastSnapshotId
	}
	return ""
}

func (m *Change) GetPreviousDetailsIds() []string {
	if m != nil {
		return m.PreviousDetailsIds
	}
	return nil
}

func (m *Change) GetContent() []*ChangeContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Change) GetSnapshot() *ChangeSnapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type ChangeSnapshot struct {
	// logId -> lastChangeId
	LogHeads map[string]string `protobuf:"bytes,1,rep,name=logHeads,proto3" json:"logHeads,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// snapshot data
	Data *model.SmartBlockSnapshotBase `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ChangeSnapshot) Reset()         { *m = ChangeSnapshot{} }
func (m *ChangeSnapshot) String() string { return proto.CompactTextString(m) }
func (*ChangeSnapshot) ProtoMessage()    {}
func (*ChangeSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 0}
}
func (m *ChangeSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeSnapshot.Merge(m, src)
}
func (m *ChangeSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *ChangeSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeSnapshot proto.InternalMessageInfo

func (m *ChangeSnapshot) GetLogHeads() map[string]string {
	if m != nil {
		return m.LogHeads
	}
	return nil
}

func (m *ChangeSnapshot) GetData() *model.SmartBlockSnapshotBase {
	if m != nil {
		return m.Data
	}
	return nil
}

type ChangeContent struct {
	// Types that are valid to be assigned to Value:
	//	*ChangeContentValueOfBlockCreate
	//	*ChangeContentValueOfBlockUpdate
	//	*ChangeContentValueOfBlockRemove
	//	*ChangeContentValueOfBlockMove
	//	*ChangeContentValueOfBlockDuplicate
	//	*ChangeContentValueOfDetailsSet
	//	*ChangeContentValueOfDetailsUnset
	Value IsChangeContentValue `protobuf_oneof:"value"`
}

func (m *ChangeContent) Reset()         { *m = ChangeContent{} }
func (m *ChangeContent) String() string { return proto.CompactTextString(m) }
func (*ChangeContent) ProtoMessage()    {}
func (*ChangeContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 1}
}
func (m *ChangeContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeContent.Merge(m, src)
}
func (m *ChangeContent) XXX_Size() int {
	return m.Size()
}
func (m *ChangeContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeContent.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeContent proto.InternalMessageInfo

type IsChangeContentValue interface {
	IsChangeContentValue()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeContentValueOfBlockCreate struct {
	BlockCreate *ChangeBlockCreate `protobuf:"bytes,1,opt,name=blockCreate,proto3,oneof" json:"blockCreate,omitempty"`
}
type ChangeContentValueOfBlockUpdate struct {
	BlockUpdate *ChangeBlockUpdate `protobuf:"bytes,2,opt,name=blockUpdate,proto3,oneof" json:"blockUpdate,omitempty"`
}
type ChangeContentValueOfBlockRemove struct {
	BlockRemove *ChangeBlockRemove `protobuf:"bytes,3,opt,name=blockRemove,proto3,oneof" json:"blockRemove,omitempty"`
}
type ChangeContentValueOfBlockMove struct {
	BlockMove *ChangeBlockMove `protobuf:"bytes,4,opt,name=blockMove,proto3,oneof" json:"blockMove,omitempty"`
}
type ChangeContentValueOfBlockDuplicate struct {
	BlockDuplicate *ChangeBlockDuplicate `protobuf:"bytes,5,opt,name=blockDuplicate,proto3,oneof" json:"blockDuplicate,omitempty"`
}
type ChangeContentValueOfDetailsSet struct {
	DetailsSet *ChangeDetailsSet `protobuf:"bytes,100,opt,name=detailsSet,proto3,oneof" json:"detailsSet,omitempty"`
}
type ChangeContentValueOfDetailsUnset struct {
	DetailsUnset *ChangeDetailsUnset `protobuf:"bytes,101,opt,name=detailsUnset,proto3,oneof" json:"detailsUnset,omitempty"`
}

func (*ChangeContentValueOfBlockCreate) IsChangeContentValue()    {}
func (*ChangeContentValueOfBlockUpdate) IsChangeContentValue()    {}
func (*ChangeContentValueOfBlockRemove) IsChangeContentValue()    {}
func (*ChangeContentValueOfBlockMove) IsChangeContentValue()      {}
func (*ChangeContentValueOfBlockDuplicate) IsChangeContentValue() {}
func (*ChangeContentValueOfDetailsSet) IsChangeContentValue()     {}
func (*ChangeContentValueOfDetailsUnset) IsChangeContentValue()   {}

func (m *ChangeContent) GetValue() IsChangeContentValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ChangeContent) GetBlockCreate() *ChangeBlockCreate {
	if x, ok := m.GetValue().(*ChangeContentValueOfBlockCreate); ok {
		return x.BlockCreate
	}
	return nil
}

func (m *ChangeContent) GetBlockUpdate() *ChangeBlockUpdate {
	if x, ok := m.GetValue().(*ChangeContentValueOfBlockUpdate); ok {
		return x.BlockUpdate
	}
	return nil
}

func (m *ChangeContent) GetBlockRemove() *ChangeBlockRemove {
	if x, ok := m.GetValue().(*ChangeContentValueOfBlockRemove); ok {
		return x.BlockRemove
	}
	return nil
}

func (m *ChangeContent) GetBlockMove() *ChangeBlockMove {
	if x, ok := m.GetValue().(*ChangeContentValueOfBlockMove); ok {
		return x.BlockMove
	}
	return nil
}

func (m *ChangeContent) GetBlockDuplicate() *ChangeBlockDuplicate {
	if x, ok := m.GetValue().(*ChangeContentValueOfBlockDuplicate); ok {
		return x.BlockDuplicate
	}
	return nil
}

func (m *ChangeContent) GetDetailsSet() *ChangeDetailsSet {
	if x, ok := m.GetValue().(*ChangeContentValueOfDetailsSet); ok {
		return x.DetailsSet
	}
	return nil
}

func (m *ChangeContent) GetDetailsUnset() *ChangeDetailsUnset {
	if x, ok := m.GetValue().(*ChangeContentValueOfDetailsUnset); ok {
		return x.DetailsUnset
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeContent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeContentValueOfBlockCreate)(nil),
		(*ChangeContentValueOfBlockUpdate)(nil),
		(*ChangeContentValueOfBlockRemove)(nil),
		(*ChangeContentValueOfBlockMove)(nil),
		(*ChangeContentValueOfBlockDuplicate)(nil),
		(*ChangeContentValueOfDetailsSet)(nil),
		(*ChangeContentValueOfDetailsUnset)(nil),
	}
}

type ChangeBlockCreate struct {
	TargetId string              `protobuf:"bytes,1,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Position model.BlockPosition `protobuf:"varint,2,opt,name=position,proto3,enum=anytype.model.BlockPosition" json:"position,omitempty"`
	Blocks   []*model.Block      `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *ChangeBlockCreate) Reset()         { *m = ChangeBlockCreate{} }
func (m *ChangeBlockCreate) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockCreate) ProtoMessage()    {}
func (*ChangeBlockCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 2}
}
func (m *ChangeBlockCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockCreate.Merge(m, src)
}
func (m *ChangeBlockCreate) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockCreate proto.InternalMessageInfo

func (m *ChangeBlockCreate) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *ChangeBlockCreate) GetPosition() model.BlockPosition {
	if m != nil {
		return m.Position
	}
	return model.Block_None
}

func (m *ChangeBlockCreate) GetBlocks() []*model.Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type ChangeBlockUpdate struct {
	Events []*EventMessage `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *ChangeBlockUpdate) Reset()         { *m = ChangeBlockUpdate{} }
func (m *ChangeBlockUpdate) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockUpdate) ProtoMessage()    {}
func (*ChangeBlockUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 3}
}
func (m *ChangeBlockUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockUpdate.Merge(m, src)
}
func (m *ChangeBlockUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockUpdate proto.InternalMessageInfo

func (m *ChangeBlockUpdate) GetEvents() []*EventMessage {
	if m != nil {
		return m.Events
	}
	return nil
}

type ChangeBlockRemove struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *ChangeBlockRemove) Reset()         { *m = ChangeBlockRemove{} }
func (m *ChangeBlockRemove) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockRemove) ProtoMessage()    {}
func (*ChangeBlockRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 4}
}
func (m *ChangeBlockRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockRemove.Merge(m, src)
}
func (m *ChangeBlockRemove) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockRemove.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockRemove proto.InternalMessageInfo

func (m *ChangeBlockRemove) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ChangeBlockMove struct {
	TargetId string              `protobuf:"bytes,1,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Position model.BlockPosition `protobuf:"varint,2,opt,name=position,proto3,enum=anytype.model.BlockPosition" json:"position,omitempty"`
	Ids      []string            `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *ChangeBlockMove) Reset()         { *m = ChangeBlockMove{} }
func (m *ChangeBlockMove) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockMove) ProtoMessage()    {}
func (*ChangeBlockMove) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 5}
}
func (m *ChangeBlockMove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockMove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockMove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockMove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockMove.Merge(m, src)
}
func (m *ChangeBlockMove) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockMove) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockMove.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockMove proto.InternalMessageInfo

func (m *ChangeBlockMove) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *ChangeBlockMove) GetPosition() model.BlockPosition {
	if m != nil {
		return m.Position
	}
	return model.Block_None
}

func (m *ChangeBlockMove) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ChangeBlockDuplicate struct {
	TargetId string              `protobuf:"bytes,1,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Position model.BlockPosition `protobuf:"varint,2,opt,name=position,proto3,enum=anytype.model.BlockPosition" json:"position,omitempty"`
	Ids      []string            `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *ChangeBlockDuplicate) Reset()         { *m = ChangeBlockDuplicate{} }
func (m *ChangeBlockDuplicate) String() string { return proto.CompactTextString(m) }
func (*ChangeBlockDuplicate) ProtoMessage()    {}
func (*ChangeBlockDuplicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 6}
}
func (m *ChangeBlockDuplicate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeBlockDuplicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeBlockDuplicate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeBlockDuplicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeBlockDuplicate.Merge(m, src)
}
func (m *ChangeBlockDuplicate) XXX_Size() int {
	return m.Size()
}
func (m *ChangeBlockDuplicate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeBlockDuplicate.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeBlockDuplicate proto.InternalMessageInfo

func (m *ChangeBlockDuplicate) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *ChangeBlockDuplicate) GetPosition() model.BlockPosition {
	if m != nil {
		return m.Position
	}
	return model.Block_None
}

func (m *ChangeBlockDuplicate) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ChangeDetailsSet struct {
	Key   string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *types.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ChangeDetailsSet) Reset()         { *m = ChangeDetailsSet{} }
func (m *ChangeDetailsSet) String() string { return proto.CompactTextString(m) }
func (*ChangeDetailsSet) ProtoMessage()    {}
func (*ChangeDetailsSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 7}
}
func (m *ChangeDetailsSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeDetailsSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeDetailsSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeDetailsSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeDetailsSet.Merge(m, src)
}
func (m *ChangeDetailsSet) XXX_Size() int {
	return m.Size()
}
func (m *ChangeDetailsSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeDetailsSet.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeDetailsSet proto.InternalMessageInfo

func (m *ChangeDetailsSet) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ChangeDetailsSet) GetValue() *types.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type ChangeDetailsUnset struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *ChangeDetailsUnset) Reset()         { *m = ChangeDetailsUnset{} }
func (m *ChangeDetailsUnset) String() string { return proto.CompactTextString(m) }
func (*ChangeDetailsUnset) ProtoMessage()    {}
func (*ChangeDetailsUnset) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b02bba284ea1e46, []int{0, 8}
}
func (m *ChangeDetailsUnset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeDetailsUnset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeDetailsUnset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeDetailsUnset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeDetailsUnset.Merge(m, src)
}
func (m *ChangeDetailsUnset) XXX_Size() int {
	return m.Size()
}
func (m *ChangeDetailsUnset) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeDetailsUnset.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeDetailsUnset proto.InternalMessageInfo

func (m *ChangeDetailsUnset) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*Change)(nil), "anytype.Change")
	proto.RegisterType((*ChangeSnapshot)(nil), "anytype.Change.Snapshot")
	proto.RegisterMapType((map[string]string)(nil), "anytype.Change.Snapshot.LogHeadsEntry")
	proto.RegisterType((*ChangeContent)(nil), "anytype.Change.Content")
	proto.RegisterType((*ChangeBlockCreate)(nil), "anytype.Change.BlockCreate")
	proto.RegisterType((*ChangeBlockUpdate)(nil), "anytype.Change.BlockUpdate")
	proto.RegisterType((*ChangeBlockRemove)(nil), "anytype.Change.BlockRemove")
	proto.RegisterType((*ChangeBlockMove)(nil), "anytype.Change.BlockMove")
	proto.RegisterType((*ChangeBlockDuplicate)(nil), "anytype.Change.BlockDuplicate")
	proto.RegisterType((*ChangeDetailsSet)(nil), "anytype.Change.DetailsSet")
	proto.RegisterType((*ChangeDetailsUnset)(nil), "anytype.Change.DetailsUnset")
}

func init() { proto.RegisterFile("pb/protos/changes.proto", fileDescriptor_2b02bba284ea1e46) }

var fileDescriptor_2b02bba284ea1e46 = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xe3, 0x36, 0x1f, 0xe3, 0x12, 0x55, 0xab, 0xaa, 0x35, 0xa6, 0x84, 0x80, 0x04, 0xca,
	0xa1, 0xb5, 0x21, 0x70, 0xa0, 0x7c, 0x08, 0xc9, 0x6d, 0xa5, 0x54, 0xb4, 0x12, 0x72, 0x55, 0x0e,
	0x5c, 0xaa, 0x75, 0xbc, 0xb8, 0x56, 0x1d, 0xaf, 0xe5, 0xdd, 0x44, 0xca, 0xbf, 0x40, 0xfc, 0x28,
	0xc4, 0xb1, 0x47, 0x0e, 0x1c, 0x50, 0x7b, 0xe7, 0x37, 0x20, 0xef, 0xae, 0x9d, 0x34, 0xa4, 0xbd,
	0xc1, 0xcd, 0x6f, 0xe6, 0xbd, 0xb7, 0xb3, 0x33, 0xe3, 0x85, 0x8d, 0xd4, 0x77, 0xd2, 0x8c, 0x72,
	0xca, 0x9c, 0xc1, 0x19, 0x4e, 0x42, 0xc2, 0x6c, 0x01, 0x51, 0x1d, 0x27, 0x13, 0x3e, 0x49, 0x89,
	0xf5, 0x7e, 0x4c, 0x92, 0x80, 0x66, 0x4e, 0x18, 0xf1, 0xb3, 0x91, 0x6f, 0x0f, 0xe8, 0xd0, 0x51,
	0xa9, 0x88, 0x3a, 0x21, 0xdd, 0x56, 0x60, 0x3b, 0x8e, 0xfc, 0x0c, 0x67, 0x13, 0x27, 0xf5, 0x9d,
	0x21, 0x0d, 0x48, 0x5c, 0xd8, 0x0a, 0xa0, 0x5c, 0xad, 0xf5, 0xe9, 0x71, 0x64, 0x4c, 0x12, 0x5e,
	0xc4, 0x37, 0x43, 0x4a, 0xc3, 0x98, 0xc8, 0x9c, 0x3f, 0xfa, 0xec, 0x30, 0x9e, 0x8d, 0x06, 0x5c,
	0x66, 0x1f, 0xfd, 0x36, 0xa0, 0xb6, 0x2b, 0xaa, 0x43, 0x0f, 0x61, 0x25, 0xcd, 0xc8, 0x38, 0xa2,
	0x23, 0x76, 0x1a, 0x05, 0xcc, 0xd4, 0x3a, 0x7a, 0xb7, 0xe9, 0x19, 0x45, 0xec, 0x20, 0x60, 0xa8,
	0x0b, 0xab, 0x31, 0x66, 0xfc, 0x94, 0x25, 0x38, 0x65, 0x67, 0x94, 0x9f, 0x46, 0x81, 0x59, 0xed,
	0x68, 0xdd, 0xa6, 0xd7, 0xca, 0xe3, 0xc7, 0x2a, 0x7c, 0x10, 0xa0, 0xa7, 0xb0, 0x56, 0x9a, 0x05,
	0x84, 0xe3, 0x28, 0x96, 0xa6, 0xcb, 0xc2, 0x14, 0x15, 0xb9, 0x3d, 0x99, 0xca, 0xbd, 0x9f, 0x41,
	0x7d, 0x40, 0x13, 0x4e, 0x12, 0x6e, 0xea, 0x1d, 0xbd, 0x6b, 0xf4, 0x36, 0x6c, 0x75, 0x7f, 0x5b,
	0x16, 0x68, 0xef, 0xca, 0xb4, 0x57, 0xf0, 0xd0, 0x0b, 0x68, 0x14, 0x95, 0x98, 0x4b, 0x1d, 0xad,
	0x6b, 0xf4, 0xcc, 0x79, 0x4d, 0x51, 0x92, 0x57, 0x32, 0xad, 0x6f, 0x1a, 0x34, 0x8a, 0x30, 0x72,
	0xa1, 0x11, 0xd3, 0xb0, 0x4f, 0xb0, 0xba, 0xb0, 0xd1, 0x7b, 0x72, 0x93, 0x85, 0x7d, 0xa8, 0x88,
	0xfb, 0x09, 0xcf, 0x26, 0x5e, 0xa9, 0x43, 0x3b, 0xb0, 0x14, 0x60, 0x8e, 0x45, 0x27, 0x8c, 0xde,
	0xe3, 0x52, 0x2f, 0xc6, 0x63, 0x1f, 0x0f, 0x71, 0xc6, 0xdd, 0x98, 0x0e, 0xce, 0x0b, 0x23, 0x17,
	0x33, 0xe2, 0x09, 0x89, 0xf5, 0x1a, 0xee, 0x5c, 0x73, 0x45, 0xab, 0xa0, 0x9f, 0x93, 0x89, 0xa9,
	0x89, 0xa6, 0xe6, 0x9f, 0x68, 0x0d, 0x96, 0xc7, 0x38, 0x1e, 0x11, 0xd5, 0x68, 0x09, 0x5e, 0x55,
	0x5f, 0x6a, 0xd6, 0x4f, 0x1d, 0xea, 0xaa, 0x27, 0xe8, 0x1d, 0x18, 0x7e, 0x7e, 0xc6, 0x6e, 0x46,
	0x30, 0x27, 0x42, 0x6f, 0xf4, 0xee, 0xcd, 0x5f, 0xc5, 0x9d, 0x52, 0xfa, 0x15, 0x6f, 0x56, 0x51,
	0x1a, 0x9c, 0xa4, 0x41, 0x6e, 0x50, 0xbd, 0xc5, 0x40, 0x52, 0x4a, 0x03, 0x09, 0x4b, 0x03, 0x8f,
	0x0c, 0xe9, 0x98, 0x98, 0xfa, 0x2d, 0x06, 0x92, 0x52, 0x1a, 0x48, 0x88, 0x76, 0xa0, 0x29, 0xe0,
	0x51, 0x2e, 0x97, 0xe3, 0xbc, 0xbb, 0x50, 0x7e, 0x24, 0xc5, 0x53, 0x36, 0xea, 0x43, 0x4b, 0x80,
	0xbd, 0x51, 0x1a, 0x47, 0x83, 0xbc, 0xfe, 0x65, 0xa1, 0x6f, 0x2f, 0xd4, 0x97, 0xac, 0x7e, 0xc5,
	0x9b, 0xd3, 0xa1, 0x37, 0x00, 0x6a, 0x5d, 0x8f, 0x09, 0x37, 0x03, 0xe1, 0x62, 0xcd, 0xbb, 0xec,
	0x95, 0x8c, 0x7e, 0xc5, 0x9b, 0xe1, 0x23, 0x17, 0x56, 0x14, 0x3a, 0x49, 0x18, 0xe1, 0x26, 0x11,
	0xfa, 0xcd, 0x1b, 0xf4, 0x82, 0xd3, 0xaf, 0x78, 0xd7, 0x34, 0x6e, 0x5d, 0xcd, 0xdb, 0xfa, 0xaa,
	0x81, 0x31, 0x33, 0x30, 0x64, 0x41, 0x83, 0xe3, 0x2c, 0x24, 0xfc, 0x20, 0x50, 0xfb, 0x51, 0x62,
	0xb4, 0x03, 0x8d, 0x94, 0xb2, 0x88, 0x47, 0x34, 0x11, 0xa3, 0x6b, 0xf5, 0xee, 0xcf, 0xad, 0xa1,
	0x70, 0xb2, 0x3f, 0x28, 0x92, 0x57, 0xd2, 0xd1, 0x16, 0xd4, 0x44, 0x0f, 0x98, 0xfa, 0xed, 0xd6,
	0x16, 0x09, 0x3d, 0xc5, 0xb1, 0xde, 0xaa, 0x9a, 0xd4, 0xd0, 0x6d, 0xa8, 0xc9, 0xc7, 0xc6, 0xac,
	0x0a, 0xf1, 0x7a, 0x29, 0xde, 0xcf, 0xc3, 0xf6, 0x11, 0x61, 0x0c, 0x87, 0xc4, 0x53, 0x2c, 0xeb,
	0x81, 0x92, 0xab, 0x91, 0xaf, 0x82, 0x3e, 0x7d, 0x69, 0xf2, 0x4f, 0x8b, 0x43, 0xb3, 0x9c, 0xf1,
	0xbf, 0xba, 0xb1, 0x3a, 0x55, 0x9f, 0x9e, 0x3a, 0x81, 0xd6, 0xf5, 0xcd, 0xf8, 0x7f, 0x47, 0x1f,
	0x02, 0x4c, 0xd7, 0x69, 0xc1, 0xef, 0xbf, 0x35, 0xfb, 0xfb, 0xe7, 0x0d, 0x96, 0xcf, 0xb9, 0x5d,
	0x3c, 0xe7, 0xf6, 0xc7, 0x3c, 0xab, 0x9e, 0x05, 0xab, 0x03, 0x2b, 0xb3, 0xcb, 0xf5, 0xb7, 0x9f,
	0xbb, 0xf9, 0xfd, 0xb2, 0xad, 0x5d, 0x5c, 0xb6, 0xb5, 0x5f, 0x97, 0x6d, 0xed, 0xcb, 0x55, 0xbb,
	0x72, 0x71, 0xd5, 0xae, 0xfc, 0xb8, 0x6a, 0x57, 0x3e, 0x55, 0x53, 0xdf, 0xaf, 0x09, 0xdb, 0xe7,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x6d, 0x9b, 0xf9, 0xbc, 0x06, 0x00, 0x00,
}

func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreviousDetailsIds) > 0 {
		for iNdEx := len(m.PreviousDetailsIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreviousDetailsIds[iNdEx])
			copy(dAtA[i:], m.PreviousDetailsIds[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.PreviousDetailsIds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Content) > 0 {
		for iNdEx := len(m.Content) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Content[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChanges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LastSnapshotId) > 0 {
		i -= len(m.LastSnapshotId)
		copy(dAtA[i:], m.LastSnapshotId)
		i = encodeVarintChanges(dAtA, i, uint64(len(m.LastSnapshotId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PreviousIds) > 0 {
		for iNdEx := len(m.PreviousIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreviousIds[iNdEx])
			copy(dAtA[i:], m.PreviousIds[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.PreviousIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LogHeads) > 0 {
		for k := range m.LogHeads {
			v := m.LogHeads[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintChanges(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintChanges(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintChanges(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeContentValueOfBlockCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeContentValueOfBlockCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockCreate != nil {
		{
			size, err := m.BlockCreate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ChangeContentValueOfBlockUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeContentValueOfBlockUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockUpdate != nil {
		{
			size, err := m.BlockUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ChangeContentValueOfBlockRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeContentValueOfBlockRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockRemove != nil {
		{
			size, err := m.BlockRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeContentValueOfBlockMove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeContentValueOfBlockMove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockMove != nil {
		{
			size, err := m.BlockMove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ChangeContentValueOfBlockDuplicate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeContentValueOfBlockDuplicate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockDuplicate != nil {
		{
			size, err := m.BlockDuplicate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ChangeContentValueOfDetailsSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeContentValueOfDetailsSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetailsSet != nil {
		{
			size, err := m.DetailsSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ChangeContentValueOfDetailsUnset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeContentValueOfDetailsUnset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetailsUnset != nil {
		{
			size, err := m.DetailsUnset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ChangeBlockCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChanges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Position != 0 {
		i = encodeVarintChanges(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintChanges(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChanges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockMove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockMove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Position != 0 {
		i = encodeVarintChanges(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintChanges(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeBlockDuplicate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBlockDuplicate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeBlockDuplicate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Position != 0 {
		i = encodeVarintChanges(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintChanges(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeDetailsSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeDetailsSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeDetailsSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintChanges(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeDetailsUnset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeDetailsUnset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeDetailsUnset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintChanges(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChanges(dAtA []byte, offset int, v uint64) int {
	offset -= sovChanges(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PreviousIds) > 0 {
		for _, s := range m.PreviousIds {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	l = len(m.LastSnapshotId)
	if l > 0 {
		n += 1 + l + sovChanges(uint64(l))
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	if len(m.PreviousDetailsIds) > 0 {
		for _, s := range m.PreviousDetailsIds {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func (m *ChangeSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LogHeads) > 0 {
		for k, v := range m.LogHeads {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovChanges(uint64(len(k))) + 1 + len(v) + sovChanges(uint64(len(v)))
			n += mapEntrySize + 1 + sovChanges(uint64(mapEntrySize))
		}
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}

func (m *ChangeContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *ChangeContentValueOfBlockCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockCreate != nil {
		l = m.BlockCreate.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeContentValueOfBlockUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockUpdate != nil {
		l = m.BlockUpdate.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeContentValueOfBlockRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockRemove != nil {
		l = m.BlockRemove.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeContentValueOfBlockMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockMove != nil {
		l = m.BlockMove.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeContentValueOfBlockDuplicate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockDuplicate != nil {
		l = m.BlockDuplicate.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeContentValueOfDetailsSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetailsSet != nil {
		l = m.DetailsSet.Size()
		n += 2 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeContentValueOfDetailsUnset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetailsUnset != nil {
		l = m.DetailsUnset.Size()
		n += 2 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *ChangeBlockCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovChanges(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovChanges(uint64(m.Position))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func (m *ChangeBlockUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func (m *ChangeBlockRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func (m *ChangeBlockMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovChanges(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovChanges(uint64(m.Position))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func (m *ChangeBlockDuplicate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovChanges(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovChanges(uint64(m.Position))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func (m *ChangeDetailsSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovChanges(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}

func (m *ChangeDetailsUnset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}

func sovChanges(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChanges(x uint64) (n int) {
	return sovChanges(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousIds = append(m.PreviousIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSnapshotId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSnapshotId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &ChangeContent{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &ChangeSnapshot{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousDetailsIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousDetailsIds = append(m.PreviousDetailsIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogHeads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogHeads == nil {
				m.LogHeads = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanges
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanges
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChanges
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthChanges
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanges
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthChanges
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthChanges
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChanges(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthChanges
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LogHeads[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &model.SmartBlockSnapshotBase{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCreate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockCreate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ChangeContentValueOfBlockCreate{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ChangeContentValueOfBlockUpdate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ChangeContentValueOfBlockRemove{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockMove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockMove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ChangeContentValueOfBlockMove{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDuplicate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeBlockDuplicate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ChangeContentValueOfBlockDuplicate{v}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailsSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeDetailsSet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ChangeContentValueOfDetailsSet{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailsUnset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeDetailsUnset{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ChangeContentValueOfDetailsUnset{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= model.BlockPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &model.Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &EventMessage{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= model.BlockPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBlockDuplicate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockDuplicate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockDuplicate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= model.BlockPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeDetailsSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetailsSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetailsSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &types.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeDetailsUnset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetailsUnset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetailsUnset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChanges(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChanges
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChanges
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChanges
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChanges        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChanges          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChanges = fmt.Errorf("proto: unexpected end of group")
)
