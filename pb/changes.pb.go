// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: changes.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Change struct {
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0}
}
func (m *Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return m.Size()
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

type Change_Block struct {
}

func (m *Change_Block) Reset()         { *m = Change_Block{} }
func (m *Change_Block) String() string { return proto.CompactTextString(m) }
func (*Change_Block) ProtoMessage()    {}
func (*Change_Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0}
}
func (m *Change_Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change_Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change_Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change_Block.Merge(m, src)
}
func (m *Change_Block) XXX_Size() int {
	return m.Size()
}
func (m *Change_Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Change_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Change_Block proto.InternalMessageInfo

type Change_Block_Header struct {
	// Types that are valid to be assigned to Change:
	//	*Change_Block_Header_Id
	//	*Change_Block_Header_Type
	//	*Change_Block_Header_Name
	//	*Change_Block_Header_Icon
	//	*Change_Block_Header_Permissions
	Change isChange_Block_Header_Change `protobuf_oneof:"change"`
}

func (m *Change_Block_Header) Reset()         { *m = Change_Block_Header{} }
func (m *Change_Block_Header) String() string { return proto.CompactTextString(m) }
func (*Change_Block_Header) ProtoMessage()    {}
func (*Change_Block_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 0}
}
func (m *Change_Block_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change_Block_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change_Block_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change_Block_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change_Block_Header.Merge(m, src)
}
func (m *Change_Block_Header) XXX_Size() int {
	return m.Size()
}
func (m *Change_Block_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Change_Block_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Change_Block_Header proto.InternalMessageInfo

type isChange_Block_Header_Change interface {
	isChange_Block_Header_Change()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Change_Block_Header_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}
type Change_Block_Header_Type struct {
	Type Model_Block_Header_Type `protobuf:"varint,2,opt,name=type,proto3,enum=anytype.Model_Block_Header_Type,oneof" json:"type,omitempty"`
}
type Change_Block_Header_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
}
type Change_Block_Header_Icon struct {
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
}
type Change_Block_Header_Permissions struct {
	Permissions *Model_Block_Header_Permissions `protobuf:"bytes,5,opt,name=permissions,proto3,oneof" json:"permissions,omitempty"`
}

func (*Change_Block_Header_Id) isChange_Block_Header_Change()          {}
func (*Change_Block_Header_Type) isChange_Block_Header_Change()        {}
func (*Change_Block_Header_Name) isChange_Block_Header_Change()        {}
func (*Change_Block_Header_Icon) isChange_Block_Header_Change()        {}
func (*Change_Block_Header_Permissions) isChange_Block_Header_Change() {}

func (m *Change_Block_Header) GetChange() isChange_Block_Header_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *Change_Block_Header) GetId() string {
	if x, ok := m.GetChange().(*Change_Block_Header_Id); ok {
		return x.Id
	}
	return ""
}

func (m *Change_Block_Header) GetType() Model_Block_Header_Type {
	if x, ok := m.GetChange().(*Change_Block_Header_Type); ok {
		return x.Type
	}
	return Model_Block_Header_DASHBOARD
}

func (m *Change_Block_Header) GetName() string {
	if x, ok := m.GetChange().(*Change_Block_Header_Name); ok {
		return x.Name
	}
	return ""
}

func (m *Change_Block_Header) GetIcon() string {
	if x, ok := m.GetChange().(*Change_Block_Header_Icon); ok {
		return x.Icon
	}
	return ""
}

func (m *Change_Block_Header) GetPermissions() *Model_Block_Header_Permissions {
	if x, ok := m.GetChange().(*Change_Block_Header_Permissions); ok {
		return x.Permissions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Change_Block_Header) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Change_Block_Header_Id)(nil),
		(*Change_Block_Header_Type)(nil),
		(*Change_Block_Header_Name)(nil),
		(*Change_Block_Header_Icon)(nil),
		(*Change_Block_Header_Permissions)(nil),
	}
}

type Change_Block_Children struct {
	Children []string `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (m *Change_Block_Children) Reset()         { *m = Change_Block_Children{} }
func (m *Change_Block_Children) String() string { return proto.CompactTextString(m) }
func (*Change_Block_Children) ProtoMessage()    {}
func (*Change_Block_Children) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 1}
}
func (m *Change_Block_Children) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change_Block_Children) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change_Block_Children.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change_Block_Children) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change_Block_Children.Merge(m, src)
}
func (m *Change_Block_Children) XXX_Size() int {
	return m.Size()
}
func (m *Change_Block_Children) XXX_DiscardUnknown() {
	xxx_messageInfo_Change_Block_Children.DiscardUnknown(m)
}

var xxx_messageInfo_Change_Block_Children proto.InternalMessageInfo

func (m *Change_Block_Children) GetChildren() []string {
	if m != nil {
		return m.Children
	}
	return nil
}

type Change_Block_Content struct {
}

func (m *Change_Block_Content) Reset()         { *m = Change_Block_Content{} }
func (m *Change_Block_Content) String() string { return proto.CompactTextString(m) }
func (*Change_Block_Content) ProtoMessage()    {}
func (*Change_Block_Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2}
}
func (m *Change_Block_Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change_Block_Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change_Block_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change_Block_Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change_Block_Content.Merge(m, src)
}
func (m *Change_Block_Content) XXX_Size() int {
	return m.Size()
}
func (m *Change_Block_Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Change_Block_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Change_Block_Content proto.InternalMessageInfo

type Change_Block_Content_Page struct {
	// Types that are valid to be assigned to Change:
	//	*Change_Block_Content_Page_Style
	//	*Change_Block_Content_Page_Block
	Change isChange_Block_Content_Page_Change `protobuf_oneof:"change"`
}

func (m *Change_Block_Content_Page) Reset()         { *m = Change_Block_Content_Page{} }
func (m *Change_Block_Content_Page) String() string { return proto.CompactTextString(m) }
func (*Change_Block_Content_Page) ProtoMessage()    {}
func (*Change_Block_Content_Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2, 0}
}
func (m *Change_Block_Content_Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change_Block_Content_Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change_Block_Content_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change_Block_Content_Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change_Block_Content_Page.Merge(m, src)
}
func (m *Change_Block_Content_Page) XXX_Size() int {
	return m.Size()
}
func (m *Change_Block_Content_Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Change_Block_Content_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Change_Block_Content_Page proto.InternalMessageInfo

type isChange_Block_Content_Page_Change interface {
	isChange_Block_Content_Page_Change()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Change_Block_Content_Page_Style struct {
	Style Model_Block_Content_Page_Style `protobuf:"varint,1,opt,name=style,proto3,enum=anytype.Model_Block_Content_Page_Style,oneof" json:"style,omitempty"`
}
type Change_Block_Content_Page_Block struct {
	Block *Model_Block `protobuf:"bytes,2,opt,name=block,proto3,oneof" json:"block,omitempty"`
}

func (*Change_Block_Content_Page_Style) isChange_Block_Content_Page_Change() {}
func (*Change_Block_Content_Page_Block) isChange_Block_Content_Page_Change() {}

func (m *Change_Block_Content_Page) GetChange() isChange_Block_Content_Page_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *Change_Block_Content_Page) GetStyle() Model_Block_Content_Page_Style {
	if x, ok := m.GetChange().(*Change_Block_Content_Page_Style); ok {
		return x.Style
	}
	return Model_Block_Content_Page_EMPTY
}

func (m *Change_Block_Content_Page) GetBlock() *Model_Block {
	if x, ok := m.GetChange().(*Change_Block_Content_Page_Block); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Change_Block_Content_Page) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Change_Block_Content_Page_Style)(nil),
		(*Change_Block_Content_Page_Block)(nil),
	}
}

type Change_Block_Content_Dashboard struct {
	// Types that are valid to be assigned to Change:
	//	*Change_Block_Content_Dashboard_Style
	//	*Change_Block_Content_Dashboard_Header
	Change isChange_Block_Content_Dashboard_Change `protobuf_oneof:"change"`
}

func (m *Change_Block_Content_Dashboard) Reset()         { *m = Change_Block_Content_Dashboard{} }
func (m *Change_Block_Content_Dashboard) String() string { return proto.CompactTextString(m) }
func (*Change_Block_Content_Dashboard) ProtoMessage()    {}
func (*Change_Block_Content_Dashboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2, 1}
}
func (m *Change_Block_Content_Dashboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change_Block_Content_Dashboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change_Block_Content_Dashboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change_Block_Content_Dashboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change_Block_Content_Dashboard.Merge(m, src)
}
func (m *Change_Block_Content_Dashboard) XXX_Size() int {
	return m.Size()
}
func (m *Change_Block_Content_Dashboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Change_Block_Content_Dashboard.DiscardUnknown(m)
}

var xxx_messageInfo_Change_Block_Content_Dashboard proto.InternalMessageInfo

type isChange_Block_Content_Dashboard_Change interface {
	isChange_Block_Content_Dashboard_Change()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Change_Block_Content_Dashboard_Style struct {
	Style Model_Block_Content_Dashboard_Style `protobuf:"varint,1,opt,name=style,proto3,enum=anytype.Model_Block_Content_Dashboard_Style,oneof" json:"style,omitempty"`
}
type Change_Block_Content_Dashboard_Header struct {
	Header *Model_Block_Header `protobuf:"bytes,2,opt,name=header,proto3,oneof" json:"header,omitempty"`
}

func (*Change_Block_Content_Dashboard_Style) isChange_Block_Content_Dashboard_Change()  {}
func (*Change_Block_Content_Dashboard_Header) isChange_Block_Content_Dashboard_Change() {}

func (m *Change_Block_Content_Dashboard) GetChange() isChange_Block_Content_Dashboard_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *Change_Block_Content_Dashboard) GetStyle() Model_Block_Content_Dashboard_Style {
	if x, ok := m.GetChange().(*Change_Block_Content_Dashboard_Style); ok {
		return x.Style
	}
	return Model_Block_Content_Dashboard_MAIN_SCREEN
}

func (m *Change_Block_Content_Dashboard) GetHeader() *Model_Block_Header {
	if x, ok := m.GetChange().(*Change_Block_Content_Dashboard_Header); ok {
		return x.Header
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Change_Block_Content_Dashboard) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Change_Block_Content_Dashboard_Style)(nil),
		(*Change_Block_Content_Dashboard_Header)(nil),
	}
}

type Change_Block_Content_Media struct {
	// Types that are valid to be assigned to Change:
	//	*Change_Block_Content_Media_Link
	//	*Change_Block_Content_Media_State
	Change isChange_Block_Content_Media_Change `protobuf_oneof:"change"`
}

func (m *Change_Block_Content_Media) Reset()         { *m = Change_Block_Content_Media{} }
func (m *Change_Block_Content_Media) String() string { return proto.CompactTextString(m) }
func (*Change_Block_Content_Media) ProtoMessage()    {}
func (*Change_Block_Content_Media) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2, 2}
}
func (m *Change_Block_Content_Media) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change_Block_Content_Media) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change_Block_Content_Media.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change_Block_Content_Media) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change_Block_Content_Media.Merge(m, src)
}
func (m *Change_Block_Content_Media) XXX_Size() int {
	return m.Size()
}
func (m *Change_Block_Content_Media) XXX_DiscardUnknown() {
	xxx_messageInfo_Change_Block_Content_Media.DiscardUnknown(m)
}

var xxx_messageInfo_Change_Block_Content_Media proto.InternalMessageInfo

type isChange_Block_Content_Media_Change interface {
	isChange_Block_Content_Media_Change()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Change_Block_Content_Media_Link struct {
	Link string `protobuf:"bytes,1,opt,name=link,proto3,oneof" json:"link,omitempty"`
}
type Change_Block_Content_Media_State struct {
	State Model_Block_Content_Media_State `protobuf:"varint,2,opt,name=state,proto3,enum=anytype.Model_Block_Content_Media_State,oneof" json:"state,omitempty"`
}

func (*Change_Block_Content_Media_Link) isChange_Block_Content_Media_Change()  {}
func (*Change_Block_Content_Media_State) isChange_Block_Content_Media_Change() {}

func (m *Change_Block_Content_Media) GetChange() isChange_Block_Content_Media_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *Change_Block_Content_Media) GetLink() string {
	if x, ok := m.GetChange().(*Change_Block_Content_Media_Link); ok {
		return x.Link
	}
	return ""
}

func (m *Change_Block_Content_Media) GetState() Model_Block_Content_Media_State {
	if x, ok := m.GetChange().(*Change_Block_Content_Media_State); ok {
		return x.State
	}
	return Model_Block_Content_Media_EMPTY
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Change_Block_Content_Media) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Change_Block_Content_Media_Link)(nil),
		(*Change_Block_Content_Media_State)(nil),
	}
}

type Change_Block_Content_Text struct {
	// Types that are valid to be assigned to Change:
	//	*Change_Block_Content_Text_Text
	//	*Change_Block_Content_Text_Style
	//	*Change_Block_Content_Text_Marks
	//	*Change_Block_Content_Text_Toggleable
	//	*Change_Block_Content_Text_MarkerType
	//	*Change_Block_Content_Text_Checkable
	//	*Change_Block_Content_Text_Checked
	Change isChange_Block_Content_Text_Change `protobuf_oneof:"change"`
}

func (m *Change_Block_Content_Text) Reset()         { *m = Change_Block_Content_Text{} }
func (m *Change_Block_Content_Text) String() string { return proto.CompactTextString(m) }
func (*Change_Block_Content_Text) ProtoMessage()    {}
func (*Change_Block_Content_Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{0, 0, 2, 3}
}
func (m *Change_Block_Content_Text) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change_Block_Content_Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change_Block_Content_Text.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change_Block_Content_Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change_Block_Content_Text.Merge(m, src)
}
func (m *Change_Block_Content_Text) XXX_Size() int {
	return m.Size()
}
func (m *Change_Block_Content_Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Change_Block_Content_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Change_Block_Content_Text proto.InternalMessageInfo

type isChange_Block_Content_Text_Change interface {
	isChange_Block_Content_Text_Change()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Change_Block_Content_Text_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type Change_Block_Content_Text_Style struct {
	Style Model_Block_Content_Text_Style `protobuf:"varint,2,opt,name=style,proto3,enum=anytype.Model_Block_Content_Text_Style,oneof" json:"style,omitempty"`
}
type Change_Block_Content_Text_Marks struct {
	Marks *Model_Block_Content_Text_Marks `protobuf:"bytes,3,opt,name=marks,proto3,oneof" json:"marks,omitempty"`
}
type Change_Block_Content_Text_Toggleable struct {
	Toggleable bool `protobuf:"varint,4,opt,name=toggleable,proto3,oneof" json:"toggleable,omitempty"`
}
type Change_Block_Content_Text_MarkerType struct {
	MarkerType Model_Block_Content_Text_MarkerType `protobuf:"varint,5,opt,name=markerType,proto3,enum=anytype.Model_Block_Content_Text_MarkerType,oneof" json:"markerType,omitempty"`
}
type Change_Block_Content_Text_Checkable struct {
	Checkable bool `protobuf:"varint,6,opt,name=checkable,proto3,oneof" json:"checkable,omitempty"`
}
type Change_Block_Content_Text_Checked struct {
	Checked bool `protobuf:"varint,7,opt,name=checked,proto3,oneof" json:"checked,omitempty"`
}

func (*Change_Block_Content_Text_Text) isChange_Block_Content_Text_Change()       {}
func (*Change_Block_Content_Text_Style) isChange_Block_Content_Text_Change()      {}
func (*Change_Block_Content_Text_Marks) isChange_Block_Content_Text_Change()      {}
func (*Change_Block_Content_Text_Toggleable) isChange_Block_Content_Text_Change() {}
func (*Change_Block_Content_Text_MarkerType) isChange_Block_Content_Text_Change() {}
func (*Change_Block_Content_Text_Checkable) isChange_Block_Content_Text_Change()  {}
func (*Change_Block_Content_Text_Checked) isChange_Block_Content_Text_Change()    {}

func (m *Change_Block_Content_Text) GetChange() isChange_Block_Content_Text_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *Change_Block_Content_Text) GetText() string {
	if x, ok := m.GetChange().(*Change_Block_Content_Text_Text); ok {
		return x.Text
	}
	return ""
}

func (m *Change_Block_Content_Text) GetStyle() Model_Block_Content_Text_Style {
	if x, ok := m.GetChange().(*Change_Block_Content_Text_Style); ok {
		return x.Style
	}
	return Model_Block_Content_Text_p
}

func (m *Change_Block_Content_Text) GetMarks() *Model_Block_Content_Text_Marks {
	if x, ok := m.GetChange().(*Change_Block_Content_Text_Marks); ok {
		return x.Marks
	}
	return nil
}

func (m *Change_Block_Content_Text) GetToggleable() bool {
	if x, ok := m.GetChange().(*Change_Block_Content_Text_Toggleable); ok {
		return x.Toggleable
	}
	return false
}

func (m *Change_Block_Content_Text) GetMarkerType() Model_Block_Content_Text_MarkerType {
	if x, ok := m.GetChange().(*Change_Block_Content_Text_MarkerType); ok {
		return x.MarkerType
	}
	return Model_Block_Content_Text_none
}

func (m *Change_Block_Content_Text) GetCheckable() bool {
	if x, ok := m.GetChange().(*Change_Block_Content_Text_Checkable); ok {
		return x.Checkable
	}
	return false
}

func (m *Change_Block_Content_Text) GetChecked() bool {
	if x, ok := m.GetChange().(*Change_Block_Content_Text_Checked); ok {
		return x.Checked
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Change_Block_Content_Text) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Change_Block_Content_Text_Text)(nil),
		(*Change_Block_Content_Text_Style)(nil),
		(*Change_Block_Content_Text_Marks)(nil),
		(*Change_Block_Content_Text_Toggleable)(nil),
		(*Change_Block_Content_Text_MarkerType)(nil),
		(*Change_Block_Content_Text_Checkable)(nil),
		(*Change_Block_Content_Text_Checked)(nil),
	}
}

type BlocksListSingleChange struct {
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Change:
	//	*BlocksListSingleChange_Text
	//	*BlocksListSingleChange_BlockHeader
	//	*BlocksListSingleChange_BlockChildren
	//	*BlocksListSingleChange_Page
	//	*BlocksListSingleChange_Dashboard
	//	*BlocksListSingleChange_Media
	Change isBlocksListSingleChange_Change `protobuf_oneof:"change"`
}

func (m *BlocksListSingleChange) Reset()         { *m = BlocksListSingleChange{} }
func (m *BlocksListSingleChange) String() string { return proto.CompactTextString(m) }
func (*BlocksListSingleChange) ProtoMessage()    {}
func (*BlocksListSingleChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{1}
}
func (m *BlocksListSingleChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlocksListSingleChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlocksListSingleChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlocksListSingleChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlocksListSingleChange.Merge(m, src)
}
func (m *BlocksListSingleChange) XXX_Size() int {
	return m.Size()
}
func (m *BlocksListSingleChange) XXX_DiscardUnknown() {
	xxx_messageInfo_BlocksListSingleChange.DiscardUnknown(m)
}

var xxx_messageInfo_BlocksListSingleChange proto.InternalMessageInfo

type isBlocksListSingleChange_Change interface {
	isBlocksListSingleChange_Change()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BlocksListSingleChange_Text struct {
	Text *Change_Block_Content_Text `protobuf:"bytes,2,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type BlocksListSingleChange_BlockHeader struct {
	BlockHeader *Change_Block_Header `protobuf:"bytes,3,opt,name=blockHeader,proto3,oneof" json:"blockHeader,omitempty"`
}
type BlocksListSingleChange_BlockChildren struct {
	BlockChildren *Change_Block_Children `protobuf:"bytes,4,opt,name=blockChildren,proto3,oneof" json:"blockChildren,omitempty"`
}
type BlocksListSingleChange_Page struct {
	Page *Change_Block_Content_Page `protobuf:"bytes,5,opt,name=page,proto3,oneof" json:"page,omitempty"`
}
type BlocksListSingleChange_Dashboard struct {
	Dashboard *Change_Block_Content_Dashboard `protobuf:"bytes,6,opt,name=dashboard,proto3,oneof" json:"dashboard,omitempty"`
}
type BlocksListSingleChange_Media struct {
	Media *Change_Block_Content_Media `protobuf:"bytes,7,opt,name=media,proto3,oneof" json:"media,omitempty"`
}

func (*BlocksListSingleChange_Text) isBlocksListSingleChange_Change()          {}
func (*BlocksListSingleChange_BlockHeader) isBlocksListSingleChange_Change()   {}
func (*BlocksListSingleChange_BlockChildren) isBlocksListSingleChange_Change() {}
func (*BlocksListSingleChange_Page) isBlocksListSingleChange_Change()          {}
func (*BlocksListSingleChange_Dashboard) isBlocksListSingleChange_Change()     {}
func (*BlocksListSingleChange_Media) isBlocksListSingleChange_Change()         {}

func (m *BlocksListSingleChange) GetChange() isBlocksListSingleChange_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *BlocksListSingleChange) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BlocksListSingleChange) GetText() *Change_Block_Content_Text {
	if x, ok := m.GetChange().(*BlocksListSingleChange_Text); ok {
		return x.Text
	}
	return nil
}

func (m *BlocksListSingleChange) GetBlockHeader() *Change_Block_Header {
	if x, ok := m.GetChange().(*BlocksListSingleChange_BlockHeader); ok {
		return x.BlockHeader
	}
	return nil
}

func (m *BlocksListSingleChange) GetBlockChildren() *Change_Block_Children {
	if x, ok := m.GetChange().(*BlocksListSingleChange_BlockChildren); ok {
		return x.BlockChildren
	}
	return nil
}

func (m *BlocksListSingleChange) GetPage() *Change_Block_Content_Page {
	if x, ok := m.GetChange().(*BlocksListSingleChange_Page); ok {
		return x.Page
	}
	return nil
}

func (m *BlocksListSingleChange) GetDashboard() *Change_Block_Content_Dashboard {
	if x, ok := m.GetChange().(*BlocksListSingleChange_Dashboard); ok {
		return x.Dashboard
	}
	return nil
}

func (m *BlocksListSingleChange) GetMedia() *Change_Block_Content_Media {
	if x, ok := m.GetChange().(*BlocksListSingleChange_Media); ok {
		return x.Media
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BlocksListSingleChange) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BlocksListSingleChange_Text)(nil),
		(*BlocksListSingleChange_BlockHeader)(nil),
		(*BlocksListSingleChange_BlockChildren)(nil),
		(*BlocksListSingleChange_Page)(nil),
		(*BlocksListSingleChange_Dashboard)(nil),
		(*BlocksListSingleChange_Media)(nil),
	}
}

type BlockChanges struct {
	Changes []*BlocksListSingleChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (m *BlockChanges) Reset()         { *m = BlockChanges{} }
func (m *BlockChanges) String() string { return proto.CompactTextString(m) }
func (*BlockChanges) ProtoMessage()    {}
func (*BlockChanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_b16a38c6509bd894, []int{2}
}
func (m *BlockChanges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockChanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockChanges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockChanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockChanges.Merge(m, src)
}
func (m *BlockChanges) XXX_Size() int {
	return m.Size()
}
func (m *BlockChanges) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockChanges.DiscardUnknown(m)
}

var xxx_messageInfo_BlockChanges proto.InternalMessageInfo

func (m *BlockChanges) GetChanges() []*BlocksListSingleChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

func init() {
	proto.RegisterType((*Change)(nil), "anytype.Change")
	proto.RegisterType((*Change_Block)(nil), "anytype.Change.Block")
	proto.RegisterType((*Change_Block_Header)(nil), "anytype.Change.Block.Header")
	proto.RegisterType((*Change_Block_Children)(nil), "anytype.Change.Block.Children")
	proto.RegisterType((*Change_Block_Content)(nil), "anytype.Change.Block.Content")
	proto.RegisterType((*Change_Block_Content_Page)(nil), "anytype.Change.Block.Content.Page")
	proto.RegisterType((*Change_Block_Content_Dashboard)(nil), "anytype.Change.Block.Content.Dashboard")
	proto.RegisterType((*Change_Block_Content_Media)(nil), "anytype.Change.Block.Content.Media")
	proto.RegisterType((*Change_Block_Content_Text)(nil), "anytype.Change.Block.Content.Text")
	proto.RegisterType((*BlocksListSingleChange)(nil), "anytype.BlocksListSingleChange")
	proto.RegisterType((*BlockChanges)(nil), "anytype.BlockChanges")
}

func init() { proto.RegisterFile("changes.proto", fileDescriptor_b16a38c6509bd894) }

var fileDescriptor_b16a38c6509bd894 = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x3d, 0x6f, 0xd3, 0x50,
	0x14, 0xb5, 0xd3, 0x38, 0x1f, 0xd7, 0x6d, 0x85, 0x9e, 0x2a, 0x64, 0x99, 0xca, 0x44, 0x45, 0x82,
	0x0c, 0x95, 0x87, 0x20, 0x10, 0x88, 0xa1, 0x55, 0x5a, 0x81, 0x11, 0x14, 0x55, 0x6e, 0x27, 0xb6,
	0x97, 0xf8, 0x29, 0xb1, 0xe2, 0xd8, 0x91, 0xfd, 0x86, 0x66, 0xe2, 0x2f, 0x20, 0x7e, 0x0c, 0xbf,
	0x81, 0xb1, 0x0b, 0x88, 0x11, 0x35, 0x33, 0x3b, 0x23, 0xba, 0xd7, 0x2f, 0xb6, 0x5b, 0xa5, 0x69,
	0x37, 0xdf, 0x97, 0x73, 0xce, 0x3d, 0xef, 0x7e, 0xbc, 0xc0, 0xd6, 0x70, 0xcc, 0xe3, 0x91, 0xc8,
	0xdc, 0x59, 0x9a, 0xc8, 0x84, 0x35, 0x79, 0x3c, 0x97, 0xf3, 0x99, 0xb0, 0x37, 0xa7, 0x49, 0x20,
	0x22, 0x75, 0xbc, 0xf7, 0xaf, 0x09, 0x8d, 0x23, 0x02, 0xda, 0x7f, 0x9b, 0x60, 0xf4, 0xa3, 0x64,
	0x38, 0xb1, 0x7f, 0xea, 0xd0, 0xf0, 0x04, 0x0f, 0x44, 0xca, 0x1e, 0x40, 0x2d, 0x0c, 0x2c, 0xbd,
	0xa3, 0x77, 0xdb, 0x9e, 0xe6, 0xd7, 0xc2, 0x80, 0xbd, 0x84, 0x3a, 0xea, 0x58, 0xb5, 0x8e, 0xde,
	0xdd, 0xee, 0x75, 0x5c, 0xa5, 0xeb, 0x9e, 0xa0, 0xac, 0x4b, 0x02, 0x6e, 0x4e, 0x76, 0xcf, 0xe7,
	0x33, 0xe1, 0x69, 0x3e, 0xe1, 0xd9, 0x0e, 0xd4, 0x63, 0x3e, 0x15, 0xd6, 0x86, 0xd2, 0xa2, 0x08,
	0x4f, 0xc3, 0x61, 0x12, 0x5b, 0xf5, 0xe5, 0x29, 0x46, 0xec, 0x03, 0x98, 0x33, 0x91, 0x4e, 0xc3,
	0x2c, 0x0b, 0x93, 0x38, 0xb3, 0x8c, 0x8e, 0xde, 0x35, 0x7b, 0xcf, 0xd6, 0xa5, 0x3a, 0x2d, 0xe1,
	0x9e, 0xe6, 0x57, 0xd9, 0xfd, 0x16, 0x34, 0xf2, 0x52, 0xd8, 0x4f, 0xa1, 0x75, 0x34, 0x0e, 0xa3,
	0x20, 0x15, 0x31, 0xb3, 0xa1, 0x35, 0x54, 0xdf, 0x96, 0xde, 0xd9, 0xe8, 0xb6, 0xfd, 0x22, 0xb6,
	0x17, 0x06, 0x34, 0x8f, 0x92, 0x58, 0x8a, 0x58, 0xda, 0x5f, 0xa0, 0x7e, 0xca, 0x47, 0x82, 0x1d,
	0x80, 0x91, 0xc9, 0x79, 0x24, 0xa8, 0x16, 0xdb, 0xb7, 0x98, 0x51, 0x24, 0x17, 0x19, 0xee, 0x19,
	0xc2, 0x3d, 0xcd, 0xcf, 0x79, 0x6c, 0x1f, 0x8c, 0x01, 0x82, 0xa8, 0x70, 0x66, 0x6f, 0x67, 0x95,
	0x00, 0xa2, 0x09, 0x54, 0x31, 0xfd, 0x4d, 0x87, 0xf6, 0x31, 0xcf, 0xc6, 0x83, 0x84, 0xa7, 0x01,
	0x3b, 0xbe, 0x6e, 0x63, 0x7f, 0xad, 0x8d, 0x82, 0x76, 0xd3, 0xcb, 0x0b, 0x68, 0x8c, 0xa9, 0x6e,
	0xca, 0xcc, 0xa3, 0x35, 0xa5, 0xf5, 0x34, 0x5f, 0x81, 0x2b, 0xa6, 0x42, 0x30, 0x4e, 0x44, 0x10,
	0x72, 0xec, 0x5f, 0x14, 0xc6, 0x93, 0x62, 0x42, 0x28, 0x62, 0x87, 0xe8, 0x92, 0xcb, 0xe5, 0x90,
	0x74, 0xd7, 0xba, 0x24, 0x21, 0xf7, 0x0c, 0xf1, 0xb9, 0x43, 0x2e, 0x45, 0x25, 0xd5, 0xaf, 0x1a,
	0xd4, 0xcf, 0xc5, 0x85, 0xc4, 0x54, 0x52, 0x5c, 0xc8, 0x32, 0x15, 0x46, 0x65, 0x5f, 0x6a, 0xf7,
	0xe8, 0x0b, 0xea, 0xdc, 0xac, 0xc5, 0x01, 0x18, 0x53, 0x9e, 0x4e, 0x32, 0x1a, 0x4c, 0xf3, 0x3e,
	0x02, 0x27, 0x08, 0x47, 0x01, 0xe2, 0xb1, 0x0e, 0x80, 0x4c, 0x46, 0xa3, 0x48, 0xf0, 0x41, 0x24,
	0x68, 0x90, 0x5b, 0x9e, 0xe6, 0x57, 0xce, 0xd8, 0x27, 0x00, 0x84, 0x8a, 0x14, 0x17, 0x82, 0xa6,
	0xf9, 0xae, 0xce, 0x15, 0x79, 0x72, 0x0e, 0xea, 0x95, 0x0a, 0xcc, 0x81, 0xf6, 0x70, 0x2c, 0x86,
	0x13, 0x4a, 0xd8, 0x50, 0x09, 0xcb, 0x23, 0x66, 0x43, 0x93, 0x02, 0x11, 0x58, 0x4d, 0xf5, 0xeb,
	0xf2, 0xa0, 0x2c, 0xec, 0xde, 0xf7, 0x0d, 0x78, 0x48, 0x59, 0xb3, 0x8f, 0x61, 0x26, 0xcf, 0xc2,
	0x78, 0x14, 0x89, 0xfc, 0x29, 0x60, 0xdb, 0x6a, 0xeb, 0x71, 0x2d, 0x70, 0xe7, 0x5f, 0xa9, 0xd2,
	0xe7, 0xd3, 0xb2, 0x57, 0x58, 0xcf, 0xe1, 0x2b, 0xbc, 0x17, 0xed, 0x39, 0x04, 0x93, 0x06, 0x3a,
	0x9f, 0x25, 0x55, 0xe3, 0xdd, 0xd5, 0x02, 0xc5, 0xbc, 0x55, 0x29, 0xec, 0x2d, 0x6c, 0x51, 0xb8,
	0xdc, 0x5c, 0xaa, 0xb0, 0xd9, 0x73, 0x6e, 0x31, 0xa1, 0x50, 0x9e, 0xe6, 0x5f, 0xa7, 0xe1, 0x1d,
	0x66, 0x7c, 0x24, 0xd4, 0x63, 0x72, 0xc7, 0x1d, 0x70, 0x81, 0xf1, 0x0e, 0xc8, 0x60, 0xef, 0xa0,
	0x1d, 0x2c, 0x37, 0x89, 0xca, 0x5d, 0x9d, 0x92, 0x95, 0xf4, 0x62, 0xf1, 0xb0, 0x2f, 0x05, 0x97,
	0xbd, 0x01, 0x63, 0x8a, 0xc3, 0x4e, 0x5d, 0x31, 0x7b, 0x4f, 0xd6, 0x8b, 0xd0, 0x5e, 0xd0, 0x98,
	0xe1, 0x47, 0xa5, 0x71, 0xef, 0x61, 0xb3, 0x9f, 0x5f, 0x8d, 0x1e, 0x78, 0xf6, 0x1a, 0xdb, 0x4d,
	0x9f, 0xd4, 0x32, 0xb3, 0xf7, 0xb8, 0x10, 0x5e, 0xdd, 0x5f, 0x7f, 0x89, 0xef, 0xef, 0xfe, 0xb8,
	0x72, 0xf4, 0xcb, 0x2b, 0x47, 0xff, 0x73, 0xe5, 0xe8, 0x5f, 0x17, 0x8e, 0x76, 0xb9, 0x70, 0xb4,
	0xdf, 0x0b, 0x47, 0xfb, 0x5c, 0x9b, 0x0d, 0x06, 0x0d, 0xfa, 0x8f, 0x78, 0xfe, 0x3f, 0x00, 0x00,
	0xff, 0xff, 0x47, 0xbe, 0x47, 0xc0, 0x4b, 0x06, 0x00, 0x00,
}

func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Change_Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Change_Block_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change_Block_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Change_Block_Header_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Header_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Id)
	copy(dAtA[i:], m.Id)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Id)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Change_Block_Header_Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Header_Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *Change_Block_Header_Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Header_Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Change_Block_Header_Icon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Header_Icon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Icon)
	copy(dAtA[i:], m.Icon)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Icon)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *Change_Block_Header_Permissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Header_Permissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Change_Block_Children) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change_Block_Children) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Children) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Children[iNdEx])
			copy(dAtA[i:], m.Children[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.Children[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Change_Block_Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change_Block_Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Change_Block_Content_Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change_Block_Content_Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Change_Block_Content_Page_Style) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Page_Style) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Style))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Page_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Page_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Dashboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change_Block_Content_Dashboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Dashboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Change_Block_Content_Dashboard_Style) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Dashboard_Style) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Style))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Dashboard_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Dashboard_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Media) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change_Block_Content_Media) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Media) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Change_Block_Content_Media_Link) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Media_Link) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Link)
	copy(dAtA[i:], m.Link)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Link)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Media_State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Media_State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Text) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change_Block_Content_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Change_Block_Content_Text_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Text_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintChanges(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Text_Style) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Text_Style) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.Style))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Text_Marks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Text_Marks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Marks != nil {
		{
			size, err := m.Marks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Text_Toggleable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Text_Toggleable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Toggleable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Text_MarkerType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Text_MarkerType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChanges(dAtA, i, uint64(m.MarkerType))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Text_Checkable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Text_Checkable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Checkable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *Change_Block_Content_Text_Checked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change_Block_Content_Text_Checked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Checked {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlocksListSingleChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintChanges(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlocksListSingleChange_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChange_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChange_BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChange_BlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChange_BlockChildren) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChange_BlockChildren) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockChildren != nil {
		{
			size, err := m.BlockChildren.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChange_Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChange_Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChange_Dashboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChange_Dashboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Dashboard != nil {
		{
			size, err := m.Dashboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *BlocksListSingleChange_Media) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlocksListSingleChange_Media) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Media != nil {
		{
			size, err := m.Media.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *BlockChanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockChanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockChanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChanges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChanges(dAtA []byte, offset int, v uint64) int {
	offset -= sovChanges(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Change_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Change_Block_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *Change_Block_Header_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *Change_Block_Header_Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Type))
	return n
}
func (m *Change_Block_Header_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *Change_Block_Header_Icon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Icon)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *Change_Block_Header_Permissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *Change_Block_Children) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Children) > 0 {
		for _, s := range m.Children {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func (m *Change_Block_Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Change_Block_Content_Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *Change_Block_Content_Page_Style) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Style))
	return n
}
func (m *Change_Block_Content_Page_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *Change_Block_Content_Dashboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *Change_Block_Content_Dashboard_Style) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Style))
	return n
}
func (m *Change_Block_Content_Dashboard_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *Change_Block_Content_Media) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *Change_Block_Content_Media_Link) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *Change_Block_Content_Media_State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.State))
	return n
}
func (m *Change_Block_Content_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *Change_Block_Content_Text_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovChanges(uint64(l))
	return n
}
func (m *Change_Block_Content_Text_Style) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.Style))
	return n
}
func (m *Change_Block_Content_Text_Marks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Marks != nil {
		l = m.Marks.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *Change_Block_Content_Text_Toggleable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Change_Block_Content_Text_MarkerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChanges(uint64(m.MarkerType))
	return n
}
func (m *Change_Block_Content_Text_Checkable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Change_Block_Content_Text_Checked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BlocksListSingleChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			l = len(s)
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	if m.Change != nil {
		n += m.Change.Size()
	}
	return n
}

func (m *BlocksListSingleChange_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlocksListSingleChange_BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlocksListSingleChange_BlockChildren) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockChildren != nil {
		l = m.BlockChildren.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlocksListSingleChange_Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlocksListSingleChange_Dashboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dashboard != nil {
		l = m.Dashboard.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlocksListSingleChange_Media) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovChanges(uint64(l))
	}
	return n
}
func (m *BlockChanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovChanges(uint64(l))
		}
	}
	return n
}

func sovChanges(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChanges(x uint64) (n int) {
	return sovChanges(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change_Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change_Block_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &Change_Block_Header_Id{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v Model_Block_Header_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Model_Block_Header_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &Change_Block_Header_Type{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &Change_Block_Header_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &Change_Block_Header_Icon{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Model_Block_Header_Permissions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &Change_Block_Header_Permissions{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change_Block_Children) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Children: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Children: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change_Block_Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change_Block_Content_Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v Model_Block_Content_Page_Style
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Model_Block_Content_Page_Style(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &Change_Block_Content_Page_Style{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Model_Block{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &Change_Block_Content_Page_Block{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change_Block_Content_Dashboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dashboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dashboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v Model_Block_Content_Dashboard_Style
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Model_Block_Content_Dashboard_Style(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &Change_Block_Content_Dashboard_Style{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Model_Block_Header{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &Change_Block_Content_Dashboard_Header{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change_Block_Content_Media) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Media: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Media: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &Change_Block_Content_Media_Link{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v Model_Block_Content_Media_State
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Model_Block_Content_Media_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &Change_Block_Content_Media_State{v}
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change_Block_Content_Text) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Text: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Text: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = &Change_Block_Content_Text_Text{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v Model_Block_Content_Text_Style
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Model_Block_Content_Text_Style(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &Change_Block_Content_Text_Style{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Model_Block_Content_Text_Marks{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &Change_Block_Content_Text_Marks{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toggleable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Change = &Change_Block_Content_Text_Toggleable{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerType", wireType)
			}
			var v Model_Block_Content_Text_MarkerType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Model_Block_Content_Text_MarkerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = &Change_Block_Content_Text_MarkerType{v}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Change = &Change_Block_Content_Text_Checkable{b}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Change = &Change_Block_Content_Text_Checked{b}
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlocksListSingleChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlocksListSingleChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlocksListSingleChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Change_Block_Content_Text{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChange_Text{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Change_Block_Header{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChange_BlockHeader{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockChildren", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Change_Block_Children{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChange_BlockChildren{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Change_Block_Content_Page{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChange_Page{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dashboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Change_Block_Content_Dashboard{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChange_Dashboard{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Change_Block_Content_Media{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &BlocksListSingleChange_Media{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockChanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockChanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockChanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, &BlocksListSingleChange{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChanges(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChanges
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChanges
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChanges
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChanges
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChanges        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChanges          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChanges = fmt.Errorf("proto: unexpected end of group")
)
