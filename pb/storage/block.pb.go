// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/storage/protos/block.proto

package storage

import (
	fmt "fmt"
	model "github.com/anytypeio/go-anytype-library/pb/model"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BlockWithMeta struct {
	Block      *model.Block            `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	BlockById  map[string]*model.Block `protobuf:"bytes,2,rep,name=blockById,proto3" json:"blockById,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KeysByHash map[string]*FileKeys    `protobuf:"bytes,3,rep,name=keysByHash,proto3" json:"keysByHash,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BlockWithMeta) Reset()         { *m = BlockWithMeta{} }
func (m *BlockWithMeta) String() string { return proto.CompactTextString(m) }
func (*BlockWithMeta) ProtoMessage()    {}
func (*BlockWithMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_922fa7b2983033eb, []int{0}
}
func (m *BlockWithMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockWithMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockWithMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockWithMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockWithMeta.Merge(m, src)
}
func (m *BlockWithMeta) XXX_Size() int {
	return m.Size()
}
func (m *BlockWithMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockWithMeta.DiscardUnknown(m)
}

var xxx_messageInfo_BlockWithMeta proto.InternalMessageInfo

func (m *BlockWithMeta) GetBlock() *model.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockWithMeta) GetBlockById() map[string]*model.Block {
	if m != nil {
		return m.BlockById
	}
	return nil
}

func (m *BlockWithMeta) GetKeysByHash() map[string]*FileKeys {
	if m != nil {
		return m.KeysByHash
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockWithMeta)(nil), "anytype.storage.BlockWithMeta")
	proto.RegisterMapType((map[string]*model.Block)(nil), "anytype.storage.BlockWithMeta.BlockByIdEntry")
	proto.RegisterMapType((map[string]*FileKeys)(nil), "anytype.storage.BlockWithMeta.KeysByHashEntry")
}

func init() { proto.RegisterFile("pb/storage/protos/block.proto", fileDescriptor_922fa7b2983033eb) }

var fileDescriptor_922fa7b2983033eb = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4b, 0xfb, 0x30,
	0x18, 0xc6, 0x97, 0x95, 0xff, 0x1f, 0x96, 0xa1, 0x93, 0xe2, 0xa1, 0x0e, 0x0d, 0xc3, 0xd3, 0x10,
	0x96, 0xc0, 0xbc, 0x88, 0xc7, 0x82, 0xa2, 0x4c, 0x3d, 0xf4, 0xa2, 0x78, 0x4b, 0xb6, 0xb8, 0x85,
	0x66, 0x4b, 0x69, 0x33, 0x21, 0x5f, 0xc0, 0xb3, 0x1f, 0xcb, 0xe3, 0x8e, 0x1e, 0xa5, 0xfd, 0x22,
	0xd2, 0xb4, 0x73, 0x6b, 0x15, 0xbd, 0xe5, 0xe1, 0x7d, 0xde, 0xdf, 0x93, 0x87, 0x17, 0x1e, 0x45,
	0x8c, 0x24, 0x5a, 0xc5, 0x74, 0xca, 0x49, 0x14, 0x2b, 0xad, 0x12, 0xc2, 0xa4, 0x1a, 0x87, 0xd8,
	0x0a, 0xb7, 0x43, 0x17, 0x46, 0x9b, 0x88, 0xe3, 0xd2, 0xd3, 0x3d, 0x8c, 0x18, 0x99, 0xab, 0x09,
	0x97, 0x6b, 0xb7, 0x15, 0x49, 0x61, 0xb7, 0xd3, 0x1a, 0xed, 0x49, 0x48, 0x5e, 0x4c, 0x8f, 0x5f,
	0x1c, 0xb8, 0xe3, 0xe7, 0xf0, 0x7b, 0xa1, 0x67, 0xb7, 0x5c, 0x53, 0xf7, 0x04, 0xfe, 0xb3, 0x69,
	0x1e, 0xe8, 0x81, 0x7e, 0x7b, 0xb8, 0x8f, 0xd7, 0x71, 0x96, 0x8a, 0xad, 0x39, 0x28, 0x2c, 0xee,
	0x08, 0xb6, 0xec, 0xc3, 0x37, 0xd7, 0x13, 0xaf, 0xd9, 0x73, 0xfa, 0xed, 0xe1, 0x00, 0xd7, 0xbe,
	0x87, 0x2b, 0xf8, 0x42, 0xe5, 0xfe, 0x8b, 0x85, 0x8e, 0x4d, 0xb0, 0xd9, 0x77, 0xef, 0x20, 0x0c,
	0xb9, 0x49, 0x7c, 0x73, 0x45, 0x93, 0x99, 0xe7, 0x58, 0x1a, 0xfe, 0x83, 0x36, 0xfa, 0x5a, 0x28,
	0x70, 0x5b, 0x84, 0x6e, 0x00, 0x77, 0xab, 0x61, 0xee, 0x1e, 0x74, 0x42, 0x6e, 0x6c, 0xb1, 0x56,
	0x90, 0x3f, 0xf3, 0xb2, 0xcf, 0x54, 0x2e, 0xb9, 0xd7, 0xfc, 0xad, 0xac, 0xb5, 0x9c, 0x37, 0xcf,
	0x40, 0xf7, 0x01, 0x76, 0x6a, 0x91, 0x3f, 0x40, 0x49, 0x15, 0x7a, 0xf0, 0xad, 0xc3, 0xa5, 0x90,
	0x3c, 0xc7, 0x6c, 0x91, 0xfd, 0x9b, 0xb7, 0x14, 0x81, 0x55, 0x8a, 0xc0, 0x47, 0x8a, 0xc0, 0x6b,
	0x86, 0x1a, 0xab, 0x0c, 0x35, 0xde, 0x33, 0xd4, 0x78, 0x1c, 0x4e, 0x85, 0x9e, 0x2d, 0x19, 0x1e,
	0xab, 0x39, 0x29, 0x49, 0x42, 0x91, 0xa9, 0x1a, 0x94, 0x62, 0x20, 0x05, 0x8b, 0x69, 0x6c, 0xc8,
	0xe6, 0xd0, 0xec, 0xbf, 0xbd, 0xee, 0xe9, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x85, 0xc4,
	0xec, 0x4b, 0x02, 0x00, 0x00,
}

func (m *BlockWithMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockWithMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockWithMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeysByHash) > 0 {
		for k := range m.KeysByHash {
			v := m.KeysByHash[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBlock(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BlockById) > 0 {
		for k := range m.BlockById {
			v := m.BlockById[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBlock(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockWithMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.BlockById) > 0 {
		for k, v := range m.BlockById {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBlock(uint64(mapEntrySize))
		}
	}
	if len(m.KeysByHash) > 0 {
		for k, v := range m.KeysByHash {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBlock(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlock(x uint64) (n int) {
	return sovBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockWithMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockWithMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockWithMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &model.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockById", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockById == nil {
				m.BlockById = make(map[string]*model.Block)
			}
			var mapkey string
			var mapvalue *model.Block
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &model.Block{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BlockById[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysByHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeysByHash == nil {
				m.KeysByHash = make(map[string]*FileKeys)
			}
			var mapkey string
			var mapvalue *FileKeys
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FileKeys{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.KeysByHash[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlock = fmt.Errorf("proto: unexpected end of group")
)
