// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block-commands.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BlockHistoryMoveResponse_Error_Code int32

const (
	BlockHistoryMoveResponse_Error_NULL          BlockHistoryMoveResponse_Error_Code = 0
	BlockHistoryMoveResponse_Error_UNKNOWN_ERROR BlockHistoryMoveResponse_Error_Code = 1
	BlockHistoryMoveResponse_Error_BAD_INPUT     BlockHistoryMoveResponse_Error_Code = 2
	BlockHistoryMoveResponse_Error_CAN_NOT_MOVE  BlockHistoryMoveResponse_Error_Code = 3
)

var BlockHistoryMoveResponse_Error_Code_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
	3: "CAN_NOT_MOVE",
}

var BlockHistoryMoveResponse_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"CAN_NOT_MOVE":  3,
}

func (x BlockHistoryMoveResponse_Error_Code) String() string {
	return proto.EnumName(BlockHistoryMoveResponse_Error_Code_name, int32(x))
}

func (BlockHistoryMoveResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{1, 0, 0}
}

type BlockOpenResponse_Error_Code int32

const (
	BlockOpenResponse_Error_NULL          BlockOpenResponse_Error_Code = 0
	BlockOpenResponse_Error_UNKNOWN_ERROR BlockOpenResponse_Error_Code = 1
	BlockOpenResponse_Error_BAD_INPUT     BlockOpenResponse_Error_Code = 2
)

var BlockOpenResponse_Error_Code_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var BlockOpenResponse_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x BlockOpenResponse_Error_Code) String() string {
	return proto.EnumName(BlockOpenResponse_Error_Code_name, int32(x))
}

func (BlockOpenResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{3, 0, 0}
}

type BlockCreateResponse_Error_Code int32

const (
	BlockCreateResponse_Error_NULL          BlockCreateResponse_Error_Code = 0
	BlockCreateResponse_Error_UNKNOWN_ERROR BlockCreateResponse_Error_Code = 1
	BlockCreateResponse_Error_BAD_INPUT     BlockCreateResponse_Error_Code = 2
)

var BlockCreateResponse_Error_Code_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var BlockCreateResponse_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x BlockCreateResponse_Error_Code) String() string {
	return proto.EnumName(BlockCreateResponse_Error_Code_name, int32(x))
}

func (BlockCreateResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{5, 0, 0}
}

type BlockUpdateResponse_Error_Code int32

const (
	BlockUpdateResponse_Error_NULL          BlockUpdateResponse_Error_Code = 0
	BlockUpdateResponse_Error_UNKNOWN_ERROR BlockUpdateResponse_Error_Code = 1
	BlockUpdateResponse_Error_BAD_INPUT     BlockUpdateResponse_Error_Code = 2
)

var BlockUpdateResponse_Error_Code_name = map[int32]string{
	0: "NULL",
	1: "UNKNOWN_ERROR",
	2: "BAD_INPUT",
}

var BlockUpdateResponse_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
}

func (x BlockUpdateResponse_Error_Code) String() string {
	return proto.EnumName(BlockUpdateResponse_Error_Code_name, int32(x))
}

func (BlockUpdateResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{7, 0, 0}
}

type BlockHistoryMoveRequest struct {
	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ContextBlockId string `protobuf:"bytes,2,opt,name=contextBlockId,proto3" json:"contextBlockId,omitempty"`
	MoveForward    bool   `protobuf:"varint,3,opt,name=moveForward,proto3" json:"moveForward,omitempty"`
}

func (m *BlockHistoryMoveRequest) Reset()         { *m = BlockHistoryMoveRequest{} }
func (m *BlockHistoryMoveRequest) String() string { return proto.CompactTextString(m) }
func (*BlockHistoryMoveRequest) ProtoMessage()    {}
func (*BlockHistoryMoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{0}
}
func (m *BlockHistoryMoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHistoryMoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHistoryMoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHistoryMoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHistoryMoveRequest.Merge(m, src)
}
func (m *BlockHistoryMoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockHistoryMoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHistoryMoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHistoryMoveRequest proto.InternalMessageInfo

func (m *BlockHistoryMoveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BlockHistoryMoveRequest) GetContextBlockId() string {
	if m != nil {
		return m.ContextBlockId
	}
	return ""
}

func (m *BlockHistoryMoveRequest) GetMoveForward() bool {
	if m != nil {
		return m.MoveForward
	}
	return false
}

type BlockHistoryMoveResponse struct {
	Error *BlockHistoryMoveResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *BlockHistoryMoveResponse) Reset()         { *m = BlockHistoryMoveResponse{} }
func (m *BlockHistoryMoveResponse) String() string { return proto.CompactTextString(m) }
func (*BlockHistoryMoveResponse) ProtoMessage()    {}
func (*BlockHistoryMoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{1}
}
func (m *BlockHistoryMoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHistoryMoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHistoryMoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHistoryMoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHistoryMoveResponse.Merge(m, src)
}
func (m *BlockHistoryMoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockHistoryMoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHistoryMoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHistoryMoveResponse proto.InternalMessageInfo

func (m *BlockHistoryMoveResponse) GetError() *BlockHistoryMoveResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type BlockHistoryMoveResponse_Error struct {
	Code        BlockHistoryMoveResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.BlockHistoryMoveResponse_Error_Code" json:"code,omitempty"`
	Description string                              `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *BlockHistoryMoveResponse_Error) Reset()         { *m = BlockHistoryMoveResponse_Error{} }
func (m *BlockHistoryMoveResponse_Error) String() string { return proto.CompactTextString(m) }
func (*BlockHistoryMoveResponse_Error) ProtoMessage()    {}
func (*BlockHistoryMoveResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{1, 0}
}
func (m *BlockHistoryMoveResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHistoryMoveResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHistoryMoveResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHistoryMoveResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHistoryMoveResponse_Error.Merge(m, src)
}
func (m *BlockHistoryMoveResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *BlockHistoryMoveResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHistoryMoveResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHistoryMoveResponse_Error proto.InternalMessageInfo

func (m *BlockHistoryMoveResponse_Error) GetCode() BlockHistoryMoveResponse_Error_Code {
	if m != nil {
		return m.Code
	}
	return BlockHistoryMoveResponse_Error_NULL
}

func (m *BlockHistoryMoveResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type BlockOpenRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BlockOpenRequest) Reset()         { *m = BlockOpenRequest{} }
func (m *BlockOpenRequest) String() string { return proto.CompactTextString(m) }
func (*BlockOpenRequest) ProtoMessage()    {}
func (*BlockOpenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{2}
}
func (m *BlockOpenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockOpenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockOpenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockOpenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockOpenRequest.Merge(m, src)
}
func (m *BlockOpenRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockOpenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockOpenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockOpenRequest proto.InternalMessageInfo

func (m *BlockOpenRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BlockOpenResponse struct {
	Error       *BlockOpenResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	BlockHeader *Block_Header            `protobuf:"bytes,2,opt,name=blockHeader,proto3" json:"blockHeader,omitempty"`
}

func (m *BlockOpenResponse) Reset()         { *m = BlockOpenResponse{} }
func (m *BlockOpenResponse) String() string { return proto.CompactTextString(m) }
func (*BlockOpenResponse) ProtoMessage()    {}
func (*BlockOpenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{3}
}
func (m *BlockOpenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockOpenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockOpenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockOpenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockOpenResponse.Merge(m, src)
}
func (m *BlockOpenResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockOpenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockOpenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockOpenResponse proto.InternalMessageInfo

func (m *BlockOpenResponse) GetError() *BlockOpenResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *BlockOpenResponse) GetBlockHeader() *Block_Header {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

type BlockOpenResponse_Error struct {
	Code        BlockOpenResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.BlockOpenResponse_Error_Code" json:"code,omitempty"`
	Description string                       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *BlockOpenResponse_Error) Reset()         { *m = BlockOpenResponse_Error{} }
func (m *BlockOpenResponse_Error) String() string { return proto.CompactTextString(m) }
func (*BlockOpenResponse_Error) ProtoMessage()    {}
func (*BlockOpenResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{3, 0}
}
func (m *BlockOpenResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockOpenResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockOpenResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockOpenResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockOpenResponse_Error.Merge(m, src)
}
func (m *BlockOpenResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *BlockOpenResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockOpenResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_BlockOpenResponse_Error proto.InternalMessageInfo

func (m *BlockOpenResponse_Error) GetCode() BlockOpenResponse_Error_Code {
	if m != nil {
		return m.Code
	}
	return BlockOpenResponse_Error_NULL
}

func (m *BlockOpenResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type BlockCreateRequest struct {
	Type           Block_Header_Type `protobuf:"varint,1,opt,name=type,proto3,enum=anytype.Block_Header_Type" json:"type,omitempty"`
	ContextBlockId string            `protobuf:"bytes,2,opt,name=contextBlockId,proto3" json:"contextBlockId,omitempty"`
}

func (m *BlockCreateRequest) Reset()         { *m = BlockCreateRequest{} }
func (m *BlockCreateRequest) String() string { return proto.CompactTextString(m) }
func (*BlockCreateRequest) ProtoMessage()    {}
func (*BlockCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{4}
}
func (m *BlockCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockCreateRequest.Merge(m, src)
}
func (m *BlockCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockCreateRequest proto.InternalMessageInfo

func (m *BlockCreateRequest) GetType() Block_Header_Type {
	if m != nil {
		return m.Type
	}
	return Block_Header_DASHBOARD
}

func (m *BlockCreateRequest) GetContextBlockId() string {
	if m != nil {
		return m.ContextBlockId
	}
	return ""
}

type BlockCreateResponse struct {
	Error *BlockCreateResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *BlockCreateResponse) Reset()         { *m = BlockCreateResponse{} }
func (m *BlockCreateResponse) String() string { return proto.CompactTextString(m) }
func (*BlockCreateResponse) ProtoMessage()    {}
func (*BlockCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{5}
}
func (m *BlockCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockCreateResponse.Merge(m, src)
}
func (m *BlockCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockCreateResponse proto.InternalMessageInfo

func (m *BlockCreateResponse) GetError() *BlockCreateResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type BlockCreateResponse_Error struct {
	Code        BlockCreateResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.BlockCreateResponse_Error_Code" json:"code,omitempty"`
	Description string                         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *BlockCreateResponse_Error) Reset()         { *m = BlockCreateResponse_Error{} }
func (m *BlockCreateResponse_Error) String() string { return proto.CompactTextString(m) }
func (*BlockCreateResponse_Error) ProtoMessage()    {}
func (*BlockCreateResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{5, 0}
}
func (m *BlockCreateResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockCreateResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockCreateResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockCreateResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockCreateResponse_Error.Merge(m, src)
}
func (m *BlockCreateResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *BlockCreateResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockCreateResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_BlockCreateResponse_Error proto.InternalMessageInfo

func (m *BlockCreateResponse_Error) GetCode() BlockCreateResponse_Error_Code {
	if m != nil {
		return m.Code
	}
	return BlockCreateResponse_Error_NULL
}

func (m *BlockCreateResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type BlockUpdateRequest struct {
	Changes *BlockChanges `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (m *BlockUpdateRequest) Reset()         { *m = BlockUpdateRequest{} }
func (m *BlockUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*BlockUpdateRequest) ProtoMessage()    {}
func (*BlockUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{6}
}
func (m *BlockUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockUpdateRequest.Merge(m, src)
}
func (m *BlockUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockUpdateRequest proto.InternalMessageInfo

func (m *BlockUpdateRequest) GetChanges() *BlockChanges {
	if m != nil {
		return m.Changes
	}
	return nil
}

type BlockUpdateResponse struct {
	Error *BlockUpdateResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *BlockUpdateResponse) Reset()         { *m = BlockUpdateResponse{} }
func (m *BlockUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*BlockUpdateResponse) ProtoMessage()    {}
func (*BlockUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{7}
}
func (m *BlockUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockUpdateResponse.Merge(m, src)
}
func (m *BlockUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockUpdateResponse proto.InternalMessageInfo

func (m *BlockUpdateResponse) GetError() *BlockUpdateResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type BlockUpdateResponse_Error struct {
	Code        BlockUpdateResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.BlockUpdateResponse_Error_Code" json:"code,omitempty"`
	Description string                         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *BlockUpdateResponse_Error) Reset()         { *m = BlockUpdateResponse_Error{} }
func (m *BlockUpdateResponse_Error) String() string { return proto.CompactTextString(m) }
func (*BlockUpdateResponse_Error) ProtoMessage()    {}
func (*BlockUpdateResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d3ea291059030c, []int{7, 0}
}
func (m *BlockUpdateResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockUpdateResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockUpdateResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockUpdateResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockUpdateResponse_Error.Merge(m, src)
}
func (m *BlockUpdateResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *BlockUpdateResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockUpdateResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_BlockUpdateResponse_Error proto.InternalMessageInfo

func (m *BlockUpdateResponse_Error) GetCode() BlockUpdateResponse_Error_Code {
	if m != nil {
		return m.Code
	}
	return BlockUpdateResponse_Error_NULL
}

func (m *BlockUpdateResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterEnum("anytype.BlockHistoryMoveResponse_Error_Code", BlockHistoryMoveResponse_Error_Code_name, BlockHistoryMoveResponse_Error_Code_value)
	proto.RegisterEnum("anytype.BlockOpenResponse_Error_Code", BlockOpenResponse_Error_Code_name, BlockOpenResponse_Error_Code_value)
	proto.RegisterEnum("anytype.BlockCreateResponse_Error_Code", BlockCreateResponse_Error_Code_name, BlockCreateResponse_Error_Code_value)
	proto.RegisterEnum("anytype.BlockUpdateResponse_Error_Code", BlockUpdateResponse_Error_Code_name, BlockUpdateResponse_Error_Code_value)
	proto.RegisterType((*BlockHistoryMoveRequest)(nil), "anytype.BlockHistoryMoveRequest")
	proto.RegisterType((*BlockHistoryMoveResponse)(nil), "anytype.BlockHistoryMoveResponse")
	proto.RegisterType((*BlockHistoryMoveResponse_Error)(nil), "anytype.BlockHistoryMoveResponse.Error")
	proto.RegisterType((*BlockOpenRequest)(nil), "anytype.BlockOpenRequest")
	proto.RegisterType((*BlockOpenResponse)(nil), "anytype.BlockOpenResponse")
	proto.RegisterType((*BlockOpenResponse_Error)(nil), "anytype.BlockOpenResponse.Error")
	proto.RegisterType((*BlockCreateRequest)(nil), "anytype.BlockCreateRequest")
	proto.RegisterType((*BlockCreateResponse)(nil), "anytype.BlockCreateResponse")
	proto.RegisterType((*BlockCreateResponse_Error)(nil), "anytype.BlockCreateResponse.Error")
	proto.RegisterType((*BlockUpdateRequest)(nil), "anytype.BlockUpdateRequest")
	proto.RegisterType((*BlockUpdateResponse)(nil), "anytype.BlockUpdateResponse")
	proto.RegisterType((*BlockUpdateResponse_Error)(nil), "anytype.BlockUpdateResponse.Error")
}

func init() { proto.RegisterFile("block-commands.proto", fileDescriptor_45d3ea291059030c) }

var fileDescriptor_45d3ea291059030c = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x4d, 0x6b, 0x13, 0x41,
	0x18, 0xc7, 0xb3, 0xdb, 0xd4, 0xb6, 0x4f, 0x6c, 0xd8, 0x4e, 0x15, 0x43, 0x90, 0x25, 0x0c, 0x68,
	0x7b, 0xd0, 0x15, 0x22, 0xf8, 0x82, 0x08, 0x36, 0x69, 0xa4, 0xc5, 0x76, 0x57, 0x86, 0x44, 0xc1,
	0x4b, 0xd8, 0x64, 0x06, 0x5d, 0x6c, 0x76, 0xd6, 0xd9, 0xb1, 0x9a, 0x0f, 0x21, 0x78, 0x14, 0x2f,
	0x7e, 0x06, 0xbf, 0x85, 0xc7, 0x1e, 0x3d, 0x4a, 0x72, 0xf5, 0x43, 0xc8, 0x4e, 0x26, 0x71, 0xa7,
	0xb6, 0x34, 0x15, 0x7a, 0x7d, 0x9e, 0xff, 0xf3, 0xf2, 0xff, 0xcd, 0xc3, 0xc0, 0x95, 0xde, 0x01,
	0xef, 0xbf, 0xbd, 0xdd, 0xe7, 0x83, 0x41, 0x18, 0xd3, 0xd4, 0x4b, 0x04, 0x97, 0x1c, 0x2d, 0x85,
	0xf1, 0x50, 0x0e, 0x13, 0x56, 0x5d, 0x9f, 0xa6, 0x63, 0xc9, 0x62, 0x39, 0xc9, 0xce, 0x82, 0x6f,
	0xc2, 0xf8, 0x35, 0xd3, 0x25, 0x38, 0x85, 0x6b, 0x8d, 0x2c, 0xbc, 0x13, 0xa5, 0x92, 0x8b, 0xe1,
	0x3e, 0x3f, 0x64, 0x84, 0xbd, 0x7b, 0xcf, 0x52, 0x89, 0xca, 0x60, 0x47, 0xb4, 0x62, 0xd5, 0xac,
	0xcd, 0x15, 0x62, 0x47, 0x14, 0xdd, 0x84, 0xb2, 0x6a, 0xf8, 0x51, 0xaa, 0x8a, 0x5d, 0x5a, 0xb1,
	0x55, 0xee, 0x58, 0x14, 0xd5, 0xa0, 0x34, 0xe0, 0x87, 0xec, 0x29, 0x17, 0x1f, 0x42, 0x41, 0x2b,
	0x0b, 0x35, 0x6b, 0x73, 0x99, 0xe4, 0x43, 0xf8, 0x93, 0x0d, 0x95, 0x7f, 0xa7, 0xa6, 0x09, 0x8f,
	0x53, 0x86, 0x1e, 0xc3, 0x22, 0x13, 0x82, 0x0b, 0x35, 0xb9, 0x54, 0xdf, 0xf0, 0xb4, 0x29, 0xef,
	0xb4, 0x0a, 0xaf, 0x95, 0xc9, 0xc9, 0xa4, 0xaa, 0xfa, 0xdd, 0x82, 0x45, 0x15, 0x40, 0x4f, 0xa0,
	0xd8, 0xe7, 0x94, 0xa9, 0x3e, 0xe5, 0xfa, 0xad, 0x39, 0xfb, 0x78, 0x4d, 0x4e, 0x19, 0x51, 0x95,
	0x99, 0x13, 0xca, 0xd2, 0xbe, 0x88, 0x12, 0x19, 0xf1, 0x58, 0xdb, 0xcd, 0x87, 0xf0, 0x36, 0x14,
	0x33, 0x3d, 0x5a, 0x86, 0xa2, 0xdf, 0xd9, 0xdb, 0x73, 0x0a, 0x68, 0x0d, 0x56, 0x3b, 0xfe, 0x33,
	0x3f, 0x78, 0xe9, 0x77, 0x5b, 0x84, 0x04, 0xc4, 0xb1, 0xd0, 0x2a, 0xac, 0x34, 0xb6, 0xb6, 0xbb,
	0xbb, 0xfe, 0xf3, 0x4e, 0xdb, 0xb1, 0x91, 0x03, 0x97, 0x9b, 0x5b, 0x7e, 0xd7, 0x0f, 0xda, 0xdd,
	0xfd, 0xe0, 0x45, 0xcb, 0x59, 0xc0, 0x18, 0x1c, 0xb5, 0x54, 0x90, 0xb0, 0xf8, 0x14, 0xfa, 0xf8,
	0x9b, 0x0d, 0x6b, 0x39, 0x91, 0x86, 0x75, 0xcf, 0x84, 0x55, 0x33, 0x4d, 0xe6, 0xa5, 0x06, 0x25,
	0x74, 0x1f, 0x4a, 0xea, 0x1a, 0x76, 0x58, 0x48, 0x99, 0x50, 0xce, 0x4a, 0xf5, 0xab, 0x66, 0xb5,
	0x37, 0x49, 0x92, 0xbc, 0xb2, 0xfa, 0x65, 0x86, 0xf7, 0xa1, 0x81, 0xf7, 0xc6, 0x59, 0x93, 0xcf,
	0xc7, 0xb5, 0x7e, 0x7e, 0xae, 0xf8, 0x00, 0x90, 0x9a, 0xdd, 0x14, 0x2c, 0x94, 0xb3, 0x2b, 0xf6,
	0xa0, 0x98, 0xad, 0xa5, 0xd7, 0xac, 0x9e, 0x68, 0xd1, 0x6b, 0x0f, 0x13, 0x46, 0x94, 0x6e, 0xde,
	0x2b, 0xc7, 0xbf, 0x2d, 0x58, 0x37, 0xc6, 0xe9, 0x17, 0x79, 0x60, 0xbe, 0x08, 0x36, 0x07, 0x9a,
	0x62, 0xf3, 0x72, 0xbf, 0xce, 0xd0, 0x3e, 0x32, 0xd0, 0x6e, 0x9c, 0xdd, 0xe2, 0xe2, 0xe1, 0xb6,
	0x34, 0xdc, 0x4e, 0x42, 0x73, 0x70, 0xef, 0xc0, 0x92, 0xfe, 0x4e, 0xb4, 0xdd, 0x63, 0x27, 0xd4,
	0x9c, 0x24, 0xc9, 0x54, 0xf5, 0x97, 0xda, 0xb4, 0xcf, 0x5c, 0xd4, 0x4c, 0xf1, 0x7f, 0x51, 0x3b,
	0xa9, 0xc5, 0x85, 0x53, 0x6b, 0x5c, 0xff, 0x31, 0x72, 0xad, 0xa3, 0x91, 0x6b, 0xfd, 0x1a, 0xb9,
	0xd6, 0xe7, 0xb1, 0x5b, 0x38, 0x1a, 0xbb, 0x85, 0x9f, 0x63, 0xb7, 0xf0, 0xca, 0x4e, 0x7a, 0xbd,
	0x4b, 0xea, 0x0b, 0xbe, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x87, 0x20, 0x42, 0x60, 0xcd, 0x05,
	0x00, 0x00,
}

func (m *BlockHistoryMoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHistoryMoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHistoryMoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MoveForward {
		i--
		if m.MoveForward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContextBlockId) > 0 {
		i -= len(m.ContextBlockId)
		copy(dAtA[i:], m.ContextBlockId)
		i = encodeVarintBlockCommands(dAtA, i, uint64(len(m.ContextBlockId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBlockCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockHistoryMoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHistoryMoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHistoryMoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlockCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockHistoryMoveResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHistoryMoveResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHistoryMoveResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBlockCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBlockCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockOpenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBlockCommands(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockOpenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockOpenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlockCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlockCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockOpenResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockOpenResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockOpenResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBlockCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBlockCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextBlockId) > 0 {
		i -= len(m.ContextBlockId)
		copy(dAtA[i:], m.ContextBlockId)
		i = encodeVarintBlockCommands(dAtA, i, uint64(len(m.ContextBlockId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintBlockCommands(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlockCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockCreateResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockCreateResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockCreateResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBlockCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBlockCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Changes != nil {
		{
			size, err := m.Changes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlockCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlockCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockUpdateResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockUpdateResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockUpdateResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBlockCommands(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBlockCommands(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlockCommands(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlockCommands(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockHistoryMoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	l = len(m.ContextBlockId)
	if l > 0 {
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	if m.MoveForward {
		n += 2
	}
	return n
}

func (m *BlockHistoryMoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func (m *BlockHistoryMoveResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBlockCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func (m *BlockOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func (m *BlockOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func (m *BlockOpenResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBlockCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func (m *BlockCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBlockCommands(uint64(m.Type))
	}
	l = len(m.ContextBlockId)
	if l > 0 {
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func (m *BlockCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func (m *BlockCreateResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBlockCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func (m *BlockUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Changes != nil {
		l = m.Changes.Size()
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func (m *BlockUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func (m *BlockUpdateResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBlockCommands(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBlockCommands(uint64(l))
	}
	return n
}

func sovBlockCommands(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlockCommands(x uint64) (n int) {
	return sovBlockCommands(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockHistoryMoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHistoryMoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHistoryMoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextBlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextBlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveForward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MoveForward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHistoryMoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHistoryMoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHistoryMoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &BlockHistoryMoveResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHistoryMoveResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= BlockHistoryMoveResponse_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockOpenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockOpenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockOpenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockOpenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockOpenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockOpenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &BlockOpenResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &Block_Header{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockOpenResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= BlockOpenResponse_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Block_Header_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextBlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextBlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &BlockCreateResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockCreateResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= BlockCreateResponse_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Changes == nil {
				m.Changes = &BlockChanges{}
			}
			if err := m.Changes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &BlockUpdateResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockUpdateResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= BlockUpdateResponse_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockCommands(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockCommands
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockCommands
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlockCommands
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlockCommands
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlockCommands
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlockCommands        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockCommands          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlockCommands = fmt.Errorf("proto: unexpected end of group")
)
