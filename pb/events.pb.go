// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	// Types that are valid to be assigned to Message:
	//	*Event_AccountShow
	//	*Event_BlockShow
	//	*Event_BlockUpdate
	//	*Event_BlockCreate
	//	*Event_UserBlockTextRange
	//	*Event_UserBlockJoin
	//	*Event_UserBlockLeft
	//	*Event_UserBlockSelectRange
	//	*Event_FilesUpload
	Message isEventMessage `protobuf_oneof:"message"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEventMessage interface {
	isEventMessage()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_AccountShow struct {
	AccountShow *Event_Account_Show `protobuf:"bytes,1,opt,name=accountShow,proto3,oneof" json:"accountShow,omitempty"`
}
type Event_BlockShow struct {
	BlockShow *Event_Block_Show `protobuf:"bytes,2,opt,name=blockShow,proto3,oneof" json:"blockShow,omitempty"`
}
type Event_BlockUpdate struct {
	BlockUpdate *Event_Block_Update `protobuf:"bytes,3,opt,name=blockUpdate,proto3,oneof" json:"blockUpdate,omitempty"`
}
type Event_BlockCreate struct {
	BlockCreate *Event_Block_Create `protobuf:"bytes,4,opt,name=blockCreate,proto3,oneof" json:"blockCreate,omitempty"`
}
type Event_UserBlockTextRange struct {
	UserBlockTextRange *Event_User_Block_TextRange `protobuf:"bytes,5,opt,name=userBlockTextRange,proto3,oneof" json:"userBlockTextRange,omitempty"`
}
type Event_UserBlockJoin struct {
	UserBlockJoin *Event_User_Block_Join `protobuf:"bytes,6,opt,name=userBlockJoin,proto3,oneof" json:"userBlockJoin,omitempty"`
}
type Event_UserBlockLeft struct {
	UserBlockLeft *Event_User_Block_Left `protobuf:"bytes,7,opt,name=userBlockLeft,proto3,oneof" json:"userBlockLeft,omitempty"`
}
type Event_UserBlockSelectRange struct {
	UserBlockSelectRange *Event_User_Block_SelectRange `protobuf:"bytes,8,opt,name=userBlockSelectRange,proto3,oneof" json:"userBlockSelectRange,omitempty"`
}
type Event_FilesUpload struct {
	FilesUpload *Event_Block_FilesUpload `protobuf:"bytes,9,opt,name=filesUpload,proto3,oneof" json:"filesUpload,omitempty"`
}

func (*Event_AccountShow) isEventMessage()          {}
func (*Event_BlockShow) isEventMessage()            {}
func (*Event_BlockUpdate) isEventMessage()          {}
func (*Event_BlockCreate) isEventMessage()          {}
func (*Event_UserBlockTextRange) isEventMessage()   {}
func (*Event_UserBlockJoin) isEventMessage()        {}
func (*Event_UserBlockLeft) isEventMessage()        {}
func (*Event_UserBlockSelectRange) isEventMessage() {}
func (*Event_FilesUpload) isEventMessage()          {}

func (m *Event) GetMessage() isEventMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Event) GetAccountShow() *Event_Account_Show {
	if x, ok := m.GetMessage().(*Event_AccountShow); ok {
		return x.AccountShow
	}
	return nil
}

func (m *Event) GetBlockShow() *Event_Block_Show {
	if x, ok := m.GetMessage().(*Event_BlockShow); ok {
		return x.BlockShow
	}
	return nil
}

func (m *Event) GetBlockUpdate() *Event_Block_Update {
	if x, ok := m.GetMessage().(*Event_BlockUpdate); ok {
		return x.BlockUpdate
	}
	return nil
}

func (m *Event) GetBlockCreate() *Event_Block_Create {
	if x, ok := m.GetMessage().(*Event_BlockCreate); ok {
		return x.BlockCreate
	}
	return nil
}

func (m *Event) GetUserBlockTextRange() *Event_User_Block_TextRange {
	if x, ok := m.GetMessage().(*Event_UserBlockTextRange); ok {
		return x.UserBlockTextRange
	}
	return nil
}

func (m *Event) GetUserBlockJoin() *Event_User_Block_Join {
	if x, ok := m.GetMessage().(*Event_UserBlockJoin); ok {
		return x.UserBlockJoin
	}
	return nil
}

func (m *Event) GetUserBlockLeft() *Event_User_Block_Left {
	if x, ok := m.GetMessage().(*Event_UserBlockLeft); ok {
		return x.UserBlockLeft
	}
	return nil
}

func (m *Event) GetUserBlockSelectRange() *Event_User_Block_SelectRange {
	if x, ok := m.GetMessage().(*Event_UserBlockSelectRange); ok {
		return x.UserBlockSelectRange
	}
	return nil
}

func (m *Event) GetFilesUpload() *Event_Block_FilesUpload {
	if x, ok := m.GetMessage().(*Event_FilesUpload); ok {
		return x.FilesUpload
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_AccountShow)(nil),
		(*Event_BlockShow)(nil),
		(*Event_BlockUpdate)(nil),
		(*Event_BlockCreate)(nil),
		(*Event_UserBlockTextRange)(nil),
		(*Event_UserBlockJoin)(nil),
		(*Event_UserBlockLeft)(nil),
		(*Event_UserBlockSelectRange)(nil),
		(*Event_FilesUpload)(nil),
	}
}

type Event_Account struct {
}

func (m *Event_Account) Reset()         { *m = Event_Account{} }
func (m *Event_Account) String() string { return proto.CompactTextString(m) }
func (*Event_Account) ProtoMessage()    {}
func (*Event_Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 0}
}
func (m *Event_Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Account.Merge(m, src)
}
func (m *Event_Account) XXX_Size() int {
	return m.Size()
}
func (m *Event_Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Account proto.InternalMessageInfo

//*
// Message, that will be sent to the front on each account found after an AccountRecoverRequest
type Event_Account_Show struct {
	Index   int64          `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Account *Model_Account `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *Event_Account_Show) Reset()         { *m = Event_Account_Show{} }
func (m *Event_Account_Show) String() string { return proto.CompactTextString(m) }
func (*Event_Account_Show) ProtoMessage()    {}
func (*Event_Account_Show) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 0, 0}
}
func (m *Event_Account_Show) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Account_Show) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Account_Show.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_Account_Show) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Account_Show.Merge(m, src)
}
func (m *Event_Account_Show) XXX_Size() int {
	return m.Size()
}
func (m *Event_Account_Show) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Account_Show.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Account_Show proto.InternalMessageInfo

func (m *Event_Account_Show) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Event_Account_Show) GetAccount() *Model_Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type Event_Block struct {
}

func (m *Event_Block) Reset()         { *m = Event_Block{} }
func (m *Event_Block) String() string { return proto.CompactTextString(m) }
func (*Event_Block) ProtoMessage()    {}
func (*Event_Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 1}
}
func (m *Event_Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Block.Merge(m, src)
}
func (m *Event_Block) XXX_Size() int {
	return m.Size()
}
func (m *Event_Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Block proto.InternalMessageInfo

type Event_Block_Show struct {
	Block *Model_Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *Event_Block_Show) Reset()         { *m = Event_Block_Show{} }
func (m *Event_Block_Show) String() string { return proto.CompactTextString(m) }
func (*Event_Block_Show) ProtoMessage()    {}
func (*Event_Block_Show) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 1, 0}
}
func (m *Event_Block_Show) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Block_Show) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Block_Show.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_Block_Show) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Block_Show.Merge(m, src)
}
func (m *Event_Block_Show) XXX_Size() int {
	return m.Size()
}
func (m *Event_Block_Show) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Block_Show.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Block_Show proto.InternalMessageInfo

func (m *Event_Block_Show) GetBlock() *Model_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type Event_Block_Update struct {
	Changes *BlockChanges `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (m *Event_Block_Update) Reset()         { *m = Event_Block_Update{} }
func (m *Event_Block_Update) String() string { return proto.CompactTextString(m) }
func (*Event_Block_Update) ProtoMessage()    {}
func (*Event_Block_Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 1, 1}
}
func (m *Event_Block_Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Block_Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Block_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_Block_Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Block_Update.Merge(m, src)
}
func (m *Event_Block_Update) XXX_Size() int {
	return m.Size()
}
func (m *Event_Block_Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Block_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Block_Update proto.InternalMessageInfo

func (m *Event_Block_Update) GetChanges() *BlockChanges {
	if m != nil {
		return m.Changes
	}
	return nil
}

type Event_Block_Create struct {
	Block *Model_Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *Event_Block_Create) Reset()         { *m = Event_Block_Create{} }
func (m *Event_Block_Create) String() string { return proto.CompactTextString(m) }
func (*Event_Block_Create) ProtoMessage()    {}
func (*Event_Block_Create) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 1, 2}
}
func (m *Event_Block_Create) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Block_Create) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Block_Create.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_Block_Create) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Block_Create.Merge(m, src)
}
func (m *Event_Block_Create) XXX_Size() int {
	return m.Size()
}
func (m *Event_Block_Create) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Block_Create.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Block_Create proto.InternalMessageInfo

func (m *Event_Block_Create) GetBlock() *Model_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

//*
// Middleware to front end event message, that will be sent on one of this scenarios:
// Precondition: user A opened a block
// 1. User A drops a set of files/pictures/videos
// 2. User A creates a MediaBlock and drops a single media, that corresponds to its type.
type Event_Block_FilesUpload struct {
	FilePath []string `protobuf:"bytes,1,rep,name=filePath,proto3" json:"filePath,omitempty"`
	BlockId  string   `protobuf:"bytes,2,opt,name=blockId,proto3" json:"blockId,omitempty"`
}

func (m *Event_Block_FilesUpload) Reset()         { *m = Event_Block_FilesUpload{} }
func (m *Event_Block_FilesUpload) String() string { return proto.CompactTextString(m) }
func (*Event_Block_FilesUpload) ProtoMessage()    {}
func (*Event_Block_FilesUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 1, 3}
}
func (m *Event_Block_FilesUpload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Block_FilesUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Block_FilesUpload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_Block_FilesUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Block_FilesUpload.Merge(m, src)
}
func (m *Event_Block_FilesUpload) XXX_Size() int {
	return m.Size()
}
func (m *Event_Block_FilesUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Block_FilesUpload.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Block_FilesUpload proto.InternalMessageInfo

func (m *Event_Block_FilesUpload) GetFilePath() []string {
	if m != nil {
		return m.FilePath
	}
	return nil
}

func (m *Event_Block_FilesUpload) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

type Event_User struct {
}

func (m *Event_User) Reset()         { *m = Event_User{} }
func (m *Event_User) String() string { return proto.CompactTextString(m) }
func (*Event_User) ProtoMessage()    {}
func (*Event_User) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 2}
}
func (m *Event_User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_User.Merge(m, src)
}
func (m *Event_User) XXX_Size() int {
	return m.Size()
}
func (m *Event_User) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_User.DiscardUnknown(m)
}

var xxx_messageInfo_Event_User proto.InternalMessageInfo

type Event_User_Block struct {
}

func (m *Event_User_Block) Reset()         { *m = Event_User_Block{} }
func (m *Event_User_Block) String() string { return proto.CompactTextString(m) }
func (*Event_User_Block) ProtoMessage()    {}
func (*Event_User_Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 2, 0}
}
func (m *Event_User_Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_User_Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_User_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_User_Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_User_Block.Merge(m, src)
}
func (m *Event_User_Block) XXX_Size() int {
	return m.Size()
}
func (m *Event_User_Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_User_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Event_User_Block proto.InternalMessageInfo

//*
//  Middleware to front end event message, that will be sent in this scenario:
// Precondition: user A opened a block
// 1. User B opens the same block
// 2. User A receives a message about p.1
type Event_User_Block_Join struct {
	Account *Event_Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *Event_User_Block_Join) Reset()         { *m = Event_User_Block_Join{} }
func (m *Event_User_Block_Join) String() string { return proto.CompactTextString(m) }
func (*Event_User_Block_Join) ProtoMessage()    {}
func (*Event_User_Block_Join) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 2, 0, 0}
}
func (m *Event_User_Block_Join) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_User_Block_Join) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_User_Block_Join.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_User_Block_Join) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_User_Block_Join.Merge(m, src)
}
func (m *Event_User_Block_Join) XXX_Size() int {
	return m.Size()
}
func (m *Event_User_Block_Join) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_User_Block_Join.DiscardUnknown(m)
}

var xxx_messageInfo_Event_User_Block_Join proto.InternalMessageInfo

func (m *Event_User_Block_Join) GetAccount() *Event_Account {
	if m != nil {
		return m.Account
	}
	return nil
}

//*
//  Middleware to front end event message, that will be sent in this scenario:
// Precondition: user A and user B opened the same block
// 1. User B closes the block
// 2. User A receives a message about p.1
type Event_User_Block_Left struct {
	Account *Event_Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *Event_User_Block_Left) Reset()         { *m = Event_User_Block_Left{} }
func (m *Event_User_Block_Left) String() string { return proto.CompactTextString(m) }
func (*Event_User_Block_Left) ProtoMessage()    {}
func (*Event_User_Block_Left) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 2, 0, 1}
}
func (m *Event_User_Block_Left) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_User_Block_Left) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_User_Block_Left.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_User_Block_Left) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_User_Block_Left.Merge(m, src)
}
func (m *Event_User_Block_Left) XXX_Size() int {
	return m.Size()
}
func (m *Event_User_Block_Left) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_User_Block_Left.DiscardUnknown(m)
}

var xxx_messageInfo_Event_User_Block_Left proto.InternalMessageInfo

func (m *Event_User_Block_Left) GetAccount() *Event_Account {
	if m != nil {
		return m.Account
	}
	return nil
}

//*
// Middleware to front end event message, that will be sent in this scenario:
// Precondition: user A and user B opened the same block
// 1. User B sets cursor or selects a text region into a text block
// 2. User A receives a message about p.1
type Event_User_Block_TextRange struct {
	Account *Event_Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	BlockId string         `protobuf:"bytes,2,opt,name=blockId,proto3" json:"blockId,omitempty"`
	Range   *Model_Range   `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
}

func (m *Event_User_Block_TextRange) Reset()         { *m = Event_User_Block_TextRange{} }
func (m *Event_User_Block_TextRange) String() string { return proto.CompactTextString(m) }
func (*Event_User_Block_TextRange) ProtoMessage()    {}
func (*Event_User_Block_TextRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 2, 0, 2}
}
func (m *Event_User_Block_TextRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_User_Block_TextRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_User_Block_TextRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_User_Block_TextRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_User_Block_TextRange.Merge(m, src)
}
func (m *Event_User_Block_TextRange) XXX_Size() int {
	return m.Size()
}
func (m *Event_User_Block_TextRange) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_User_Block_TextRange.DiscardUnknown(m)
}

var xxx_messageInfo_Event_User_Block_TextRange proto.InternalMessageInfo

func (m *Event_User_Block_TextRange) GetAccount() *Event_Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *Event_User_Block_TextRange) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

func (m *Event_User_Block_TextRange) GetRange() *Model_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

//*
// Middleware to front end event message, that will be sent in this scenario:
// Precondition: user A and user B opened the same block
// 1. User B selects some inner blocks
// 2. User A receives a message about p.1
type Event_User_Block_SelectRange struct {
	Account       *Event_Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	BlockIdsArray []string       `protobuf:"bytes,2,rep,name=blockIdsArray,proto3" json:"blockIdsArray,omitempty"`
}

func (m *Event_User_Block_SelectRange) Reset()         { *m = Event_User_Block_SelectRange{} }
func (m *Event_User_Block_SelectRange) String() string { return proto.CompactTextString(m) }
func (*Event_User_Block_SelectRange) ProtoMessage()    {}
func (*Event_User_Block_SelectRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 2, 0, 3}
}
func (m *Event_User_Block_SelectRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_User_Block_SelectRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_User_Block_SelectRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_User_Block_SelectRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_User_Block_SelectRange.Merge(m, src)
}
func (m *Event_User_Block_SelectRange) XXX_Size() int {
	return m.Size()
}
func (m *Event_User_Block_SelectRange) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_User_Block_SelectRange.DiscardUnknown(m)
}

var xxx_messageInfo_Event_User_Block_SelectRange proto.InternalMessageInfo

func (m *Event_User_Block_SelectRange) GetAccount() *Event_Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *Event_User_Block_SelectRange) GetBlockIdsArray() []string {
	if m != nil {
		return m.BlockIdsArray
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "anytype.Event")
	proto.RegisterType((*Event_Account)(nil), "anytype.Event.Account")
	proto.RegisterType((*Event_Account_Show)(nil), "anytype.Event.Account.Show")
	proto.RegisterType((*Event_Block)(nil), "anytype.Event.Block")
	proto.RegisterType((*Event_Block_Show)(nil), "anytype.Event.Block.Show")
	proto.RegisterType((*Event_Block_Update)(nil), "anytype.Event.Block.Update")
	proto.RegisterType((*Event_Block_Create)(nil), "anytype.Event.Block.Create")
	proto.RegisterType((*Event_Block_FilesUpload)(nil), "anytype.Event.Block.FilesUpload")
	proto.RegisterType((*Event_User)(nil), "anytype.Event.User")
	proto.RegisterType((*Event_User_Block)(nil), "anytype.Event.User.Block")
	proto.RegisterType((*Event_User_Block_Join)(nil), "anytype.Event.User.Block.Join")
	proto.RegisterType((*Event_User_Block_Left)(nil), "anytype.Event.User.Block.Left")
	proto.RegisterType((*Event_User_Block_TextRange)(nil), "anytype.Event.User.Block.TextRange")
	proto.RegisterType((*Event_User_Block_SelectRange)(nil), "anytype.Event.User.Block.SelectRange")
}

func init() { proto.RegisterFile("events.proto", fileDescriptor_8f22242cb04491f9) }

var fileDescriptor_8f22242cb04491f9 = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xed, 0xfc, 0x73, 0x3d, 0x6e, 0x2e, 0xab, 0x80, 0xcc, 0x82, 0xac, 0x88, 0x3f, 0x52,
	0xc5, 0xc1, 0xa0, 0xc2, 0xa1, 0x3d, 0xa1, 0x26, 0x50, 0x05, 0x04, 0x08, 0x6d, 0xc9, 0x01, 0x38,
	0x39, 0xf6, 0xb6, 0x89, 0x70, 0x6d, 0xcb, 0x76, 0xa1, 0x39, 0xf3, 0x02, 0x3c, 0x16, 0xc7, 0x1e,
	0xb9, 0x20, 0xa1, 0xe4, 0xc2, 0xb5, 0x6f, 0x80, 0x76, 0xbc, 0x76, 0xec, 0xc8, 0x01, 0xe5, 0x38,
	0xe3, 0xef, 0xfb, 0x4d, 0x76, 0xf6, 0xdb, 0xc0, 0x2e, 0xff, 0xc2, 0x83, 0x34, 0xb1, 0xa3, 0x38,
	0x4c, 0x43, 0xa2, 0x39, 0xc1, 0x3c, 0x9d, 0x47, 0x9c, 0xee, 0x9e, 0x87, 0x1e, 0xf7, 0x65, 0x9b,
	0x76, 0xdd, 0xa9, 0x13, 0x9c, 0x71, 0x59, 0xde, 0xfd, 0x05, 0xd0, 0x7e, 0x21, 0x6c, 0xe4, 0x19,
	0x18, 0x8e, 0xeb, 0x86, 0x17, 0x41, 0x7a, 0x32, 0x0d, 0xbf, 0x9a, 0x6a, 0x5f, 0xdd, 0x33, 0xf6,
	0x6f, 0xdb, 0x92, 0x62, 0xa3, 0xc8, 0x3e, 0xca, 0x14, 0xb6, 0x90, 0x8c, 0x14, 0x56, 0x76, 0x90,
	0x43, 0xd0, 0x27, 0x7e, 0xe8, 0x7e, 0x46, 0x7b, 0x03, 0xed, 0xb7, 0xd6, 0xec, 0x03, 0xf1, 0x3d,
	0x37, 0xaf, 0xd4, 0x62, 0x36, 0x16, 0xe3, 0xc8, 0x73, 0x52, 0x6e, 0x36, 0x6b, 0x67, 0x67, 0xe6,
	0x4c, 0x22, 0x66, 0x97, 0x1c, 0x05, 0x60, 0x18, 0x73, 0x01, 0x68, 0xfd, 0x03, 0x90, 0x49, 0x0a,
	0x40, 0x56, 0x92, 0x31, 0x90, 0x8b, 0x84, 0xc7, 0x28, 0x79, 0xcf, 0x2f, 0x53, 0x26, 0x96, 0x64,
	0xb6, 0x91, 0x73, 0x6f, 0x8d, 0x33, 0x4e, 0x78, 0x2c, 0x61, 0x85, 0x74, 0xa4, 0xb0, 0x1a, 0x00,
	0x39, 0x86, 0x6e, 0xd1, 0x7d, 0x15, 0xce, 0x02, 0xb3, 0x83, 0x44, 0x6b, 0x33, 0x51, 0xa8, 0x46,
	0x0a, 0xab, 0xda, 0x2a, 0x9c, 0xd7, 0xfc, 0x34, 0x35, 0xb5, 0xff, 0x71, 0x84, 0xaa, 0xc2, 0x11,
	0x0d, 0xf2, 0x09, 0x7a, 0x45, 0xe3, 0x84, 0xfb, 0xdc, 0x95, 0x07, 0xdd, 0x41, 0xdc, 0x83, 0xcd,
	0xb8, 0x92, 0x78, 0xa4, 0xb0, 0x5a, 0x08, 0x79, 0x0e, 0xc6, 0xe9, 0xcc, 0xe7, 0xc9, 0x38, 0xf2,
	0x43, 0xc7, 0x33, 0x75, 0x64, 0xf6, 0x6b, 0x2f, 0xe1, 0x78, 0xa5, 0x13, 0x37, 0x51, 0xb2, 0xd1,
	0x0f, 0xa0, 0xc9, 0x94, 0xd1, 0xb7, 0xd0, 0xc2, 0x78, 0xf4, 0xa0, 0x3d, 0x0b, 0x3c, 0x7e, 0x89,
	0xa1, 0x6c, 0xb2, 0xac, 0x20, 0x8f, 0x41, 0x93, 0xf1, 0x93, 0x69, 0xbb, 0x59, 0x8c, 0x7a, 0x23,
	0x12, 0x9f, 0x87, 0x95, 0xe5, 0x32, 0x7a, 0xad, 0x42, 0x1b, 0xe7, 0xd3, 0x7d, 0x49, 0x7e, 0x08,
	0x6d, 0x4c, 0x81, 0x8c, 0x7b, 0x6f, 0x8d, 0x80, 0x62, 0x96, 0x49, 0xe8, 0x21, 0x74, 0x64, 0xda,
	0x1e, 0x81, 0x26, 0x5f, 0x91, 0xf4, 0xdd, 0x28, 0x7c, 0xe8, 0x18, 0x66, 0x1f, 0x59, 0xae, 0xa2,
	0x4f, 0xa1, 0x23, 0x73, 0xb6, 0xcd, 0xc0, 0x21, 0x18, 0xa5, 0x3d, 0x11, 0x0a, 0x3b, 0x62, 0x4f,
	0xef, 0x9c, 0x74, 0x6a, 0xaa, 0xfd, 0xe6, 0x9e, 0xce, 0x8a, 0x9a, 0x98, 0xa0, 0xa1, 0xe7, 0xa5,
	0x87, 0xbb, 0xd0, 0x59, 0x5e, 0xd2, 0xeb, 0x06, 0xb4, 0xc4, 0x3d, 0xd2, 0x3f, 0x8d, 0xfc, 0xf0,
	0x07, 0xd0, 0xc2, 0x50, 0x95, 0x16, 0xa8, 0xae, 0x2d, 0xb0, 0xf2, 0xda, 0x57, 0x0b, 0x3c, 0x80,
	0x16, 0xc6, 0x68, 0x7b, 0xe7, 0x37, 0x15, 0xf4, 0xd5, 0xb3, 0xd8, 0xda, 0xbf, 0xf9, 0x80, 0x62,
	0xa3, 0x31, 0x66, 0xb8, 0x59, 0xbb, 0x51, 0x1c, 0xc8, 0x32, 0x09, 0xe5, 0x60, 0x94, 0x03, 0xbb,
	0xfd, 0xcf, 0xb8, 0x0f, 0x5d, 0x39, 0x37, 0x39, 0x8a, 0x63, 0x67, 0x6e, 0x36, 0xf0, 0x22, 0xaa,
	0xcd, 0x81, 0x0e, 0xda, 0x39, 0x4f, 0x12, 0xe7, 0x8c, 0x0f, 0xee, 0xfc, 0x58, 0x58, 0xea, 0xd5,
	0xc2, 0x52, 0x7f, 0x2f, 0x2c, 0xf5, 0xfb, 0xd2, 0x52, 0xae, 0x96, 0x96, 0xf2, 0x73, 0x69, 0x29,
	0x1f, 0x1b, 0xd1, 0x64, 0xd2, 0xc1, 0x3f, 0xe1, 0x27, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xad,
	0x8b, 0xe3, 0x03, 0xba, 0x05, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event_AccountShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_AccountShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountShow != nil {
		{
			size, err := m.AccountShow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Event_BlockShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_BlockShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockShow != nil {
		{
			size, err := m.BlockShow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Event_BlockUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_BlockUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockUpdate != nil {
		{
			size, err := m.BlockUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Event_BlockCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_BlockCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockCreate != nil {
		{
			size, err := m.BlockCreate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Event_UserBlockTextRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_UserBlockTextRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserBlockTextRange != nil {
		{
			size, err := m.UserBlockTextRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Event_UserBlockJoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_UserBlockJoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserBlockJoin != nil {
		{
			size, err := m.UserBlockJoin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Event_UserBlockLeft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_UserBlockLeft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserBlockLeft != nil {
		{
			size, err := m.UserBlockLeft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Event_UserBlockSelectRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_UserBlockSelectRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserBlockSelectRange != nil {
		{
			size, err := m.UserBlockSelectRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Event_FilesUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_FilesUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FilesUpload != nil {
		{
			size, err := m.FilesUpload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Event_Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Event_Account_Show) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Account_Show) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Account_Show) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Event_Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Event_Block_Show) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Block_Show) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Block_Show) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_Block_Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Block_Update) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Block_Update) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Changes != nil {
		{
			size, err := m.Changes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_Block_Create) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Block_Create) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Block_Create) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_Block_FilesUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Block_FilesUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Block_FilesUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FilePath) > 0 {
		for iNdEx := len(m.FilePath) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FilePath[iNdEx])
			copy(dAtA[i:], m.FilePath[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.FilePath[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event_User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Event_User_Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_User_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_User_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Event_User_Block_Join) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_User_Block_Join) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_User_Block_Join) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_User_Block_Left) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_User_Block_Left) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_User_Block_Left) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_User_Block_TextRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_User_Block_TextRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_User_Block_TextRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_User_Block_SelectRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_User_Block_SelectRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_User_Block_SelectRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockIdsArray) > 0 {
		for iNdEx := len(m.BlockIdsArray) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockIdsArray[iNdEx])
			copy(dAtA[i:], m.BlockIdsArray[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.BlockIdsArray[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *Event_AccountShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountShow != nil {
		l = m.AccountShow.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_BlockShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockShow != nil {
		l = m.BlockShow.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_BlockUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockUpdate != nil {
		l = m.BlockUpdate.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_BlockCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockCreate != nil {
		l = m.BlockCreate.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_UserBlockTextRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserBlockTextRange != nil {
		l = m.UserBlockTextRange.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_UserBlockJoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserBlockJoin != nil {
		l = m.UserBlockJoin.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_UserBlockLeft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserBlockLeft != nil {
		l = m.UserBlockLeft.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_UserBlockSelectRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserBlockSelectRange != nil {
		l = m.UserBlockSelectRange.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_FilesUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilesUpload != nil {
		l = m.FilesUpload.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Event_Account_Show) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovEvents(uint64(m.Index))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *Event_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Event_Block_Show) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *Event_Block_Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Changes != nil {
		l = m.Changes.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *Event_Block_Create) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *Event_Block_FilesUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FilePath) > 0 {
		for _, s := range m.FilePath {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *Event_User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Event_User_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Event_User_Block_Join) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *Event_User_Block_Left) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *Event_User_Block_TextRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *Event_User_Block_SelectRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.BlockIdsArray) > 0 {
		for _, s := range m.BlockIdsArray {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountShow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Account_Show{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_AccountShow{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockShow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Block_Show{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_BlockShow{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Block_Update{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_BlockUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCreate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Block_Create{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_BlockCreate{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBlockTextRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_User_Block_TextRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_UserBlockTextRange{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBlockJoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_User_Block_Join{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_UserBlockJoin{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBlockLeft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_User_Block_Left{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_UserBlockLeft{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBlockSelectRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_User_Block_SelectRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_UserBlockSelectRange{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilesUpload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Block_FilesUpload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_FilesUpload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Account_Show) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Show: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Show: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Model_Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Block_Show) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Show: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Show: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &Model_Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Block_Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Changes == nil {
				m.Changes = &BlockChanges{}
			}
			if err := m.Changes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Block_Create) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &Model_Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Block_FilesUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilesUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilesUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = append(m.FilePath, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_User_Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_User_Block_Join) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Join: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Join: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Event_Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_User_Block_Left) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Left: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Left: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Event_Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_User_Block_TextRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Event_Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &Model_Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_User_Block_SelectRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Event_Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIdsArray", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockIdsArray = append(m.BlockIdsArray, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
