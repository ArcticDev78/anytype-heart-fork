// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: file.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImageSize int32

const (
	ImageSize_LARGE ImageSize = 0
	ImageSize_SMALL ImageSize = 1
	ImageSize_THUMB ImageSize = 2
)

var ImageSize_name = map[int32]string{
	0: "LARGE",
	1: "SMALL",
	2: "THUMB",
}

var ImageSize_value = map[string]int32{
	"LARGE": 0,
	"SMALL": 1,
	"THUMB": 2,
}

func (x ImageSize) String() string {
	return proto.EnumName(ImageSize_name, int32(x))
}

func (ImageSize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{0}
}

type VideoSize int32

const (
	VideoSize_SD_360p   VideoSize = 0
	VideoSize_SD_480p   VideoSize = 1
	VideoSize_HD_720p   VideoSize = 2
	VideoSize_HD_1080p  VideoSize = 3
	VideoSize_UHD_1440p VideoSize = 4
	VideoSize_UHD_2160p VideoSize = 5
)

var VideoSize_name = map[int32]string{
	0: "SD_360p",
	1: "SD_480p",
	2: "HD_720p",
	3: "HD_1080p",
	4: "UHD_1440p",
	5: "UHD_2160p",
}

var VideoSize_value = map[string]int32{
	"SD_360p":   0,
	"SD_480p":   1,
	"HD_720p":   2,
	"HD_1080p":  3,
	"UHD_1440p": 4,
	"UHD_2160p": 5,
}

func (x VideoSize) String() string {
	return proto.EnumName(VideoSize_name, int32(x))
}

func (VideoSize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{1}
}

type IpfsGetFileResponse_Error_Code int32

const (
	IpfsGetFileResponse_Error_NULL          IpfsGetFileResponse_Error_Code = 0
	IpfsGetFileResponse_Error_UNKNOWN_ERROR IpfsGetFileResponse_Error_Code = 1
	IpfsGetFileResponse_Error_BAD_INPUT     IpfsGetFileResponse_Error_Code = 2
	IpfsGetFileResponse_Error_NOT_FOUND     IpfsGetFileResponse_Error_Code = 101
	IpfsGetFileResponse_Error_TIMEOUT       IpfsGetFileResponse_Error_Code = 102
)

var IpfsGetFileResponse_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var IpfsGetFileResponse_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x IpfsGetFileResponse_Error_Code) String() string {
	return proto.EnumName(IpfsGetFileResponse_Error_Code_name, int32(x))
}

func (IpfsGetFileResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{3, 0, 0}
}

type ImageGetBlobResponse_Error_Code int32

const (
	ImageGetBlobResponse_Error_NULL          ImageGetBlobResponse_Error_Code = 0
	ImageGetBlobResponse_Error_UNKNOWN_ERROR ImageGetBlobResponse_Error_Code = 1
	ImageGetBlobResponse_Error_BAD_INPUT     ImageGetBlobResponse_Error_Code = 2
	ImageGetBlobResponse_Error_NOT_FOUND     ImageGetBlobResponse_Error_Code = 101
	ImageGetBlobResponse_Error_TIMEOUT       ImageGetBlobResponse_Error_Code = 102
)

var ImageGetBlobResponse_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var ImageGetBlobResponse_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x ImageGetBlobResponse_Error_Code) String() string {
	return proto.EnumName(ImageGetBlobResponse_Error_Code_name, int32(x))
}

func (ImageGetBlobResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{5, 0, 0}
}

type ImageGetFileResponse_Error_Code int32

const (
	ImageGetFileResponse_Error_NULL          ImageGetFileResponse_Error_Code = 0
	ImageGetFileResponse_Error_UNKNOWN_ERROR ImageGetFileResponse_Error_Code = 1
	ImageGetFileResponse_Error_BAD_INPUT     ImageGetFileResponse_Error_Code = 2
	ImageGetFileResponse_Error_NOT_FOUND     ImageGetFileResponse_Error_Code = 101
	ImageGetFileResponse_Error_TIMEOUT       ImageGetFileResponse_Error_Code = 102
)

var ImageGetFileResponse_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var ImageGetFileResponse_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x ImageGetFileResponse_Error_Code) String() string {
	return proto.EnumName(ImageGetFileResponse_Error_Code_name, int32(x))
}

func (ImageGetFileResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{7, 0, 0}
}

type Image struct {
	Id    string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sizes []ImageSize `protobuf:"varint,2,rep,packed,name=sizes,proto3,enum=anytype.ImageSize" json:"sizes,omitempty"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{0}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return m.Size()
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Image) GetSizes() []ImageSize {
	if m != nil {
		return m.Sizes
	}
	return nil
}

type Video struct {
	Id    string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sizes []VideoSize `protobuf:"varint,2,rep,packed,name=sizes,proto3,enum=anytype.VideoSize" json:"sizes,omitempty"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{1}
}
func (m *Video) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Video.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(m, src)
}
func (m *Video) XXX_Size() int {
	return m.Size()
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

func (m *Video) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Video) GetSizes() []VideoSize {
	if m != nil {
		return m.Sizes
	}
	return nil
}

type IpfsGetFileRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *IpfsGetFileRequest) Reset()         { *m = IpfsGetFileRequest{} }
func (m *IpfsGetFileRequest) String() string { return proto.CompactTextString(m) }
func (*IpfsGetFileRequest) ProtoMessage()    {}
func (*IpfsGetFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{2}
}
func (m *IpfsGetFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpfsGetFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IpfsGetFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IpfsGetFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpfsGetFileRequest.Merge(m, src)
}
func (m *IpfsGetFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *IpfsGetFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IpfsGetFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IpfsGetFileRequest proto.InternalMessageInfo

func (m *IpfsGetFileRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type IpfsGetFileResponse struct {
	Error *IpfsGetFileResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  []byte                     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Media string                     `protobuf:"bytes,3,opt,name=media,proto3" json:"media,omitempty"`
	Name  string                     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *IpfsGetFileResponse) Reset()         { *m = IpfsGetFileResponse{} }
func (m *IpfsGetFileResponse) String() string { return proto.CompactTextString(m) }
func (*IpfsGetFileResponse) ProtoMessage()    {}
func (*IpfsGetFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{3}
}
func (m *IpfsGetFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpfsGetFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IpfsGetFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IpfsGetFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpfsGetFileResponse.Merge(m, src)
}
func (m *IpfsGetFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *IpfsGetFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IpfsGetFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IpfsGetFileResponse proto.InternalMessageInfo

func (m *IpfsGetFileResponse) GetError() *IpfsGetFileResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *IpfsGetFileResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *IpfsGetFileResponse) GetMedia() string {
	if m != nil {
		return m.Media
	}
	return ""
}

func (m *IpfsGetFileResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type IpfsGetFileResponse_Error struct {
	Code        IpfsGetFileResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.IpfsGetFileResponse_Error_Code" json:"code,omitempty"`
	Description string                         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *IpfsGetFileResponse_Error) Reset()         { *m = IpfsGetFileResponse_Error{} }
func (m *IpfsGetFileResponse_Error) String() string { return proto.CompactTextString(m) }
func (*IpfsGetFileResponse_Error) ProtoMessage()    {}
func (*IpfsGetFileResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{3, 0}
}
func (m *IpfsGetFileResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpfsGetFileResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IpfsGetFileResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IpfsGetFileResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpfsGetFileResponse_Error.Merge(m, src)
}
func (m *IpfsGetFileResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *IpfsGetFileResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_IpfsGetFileResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_IpfsGetFileResponse_Error proto.InternalMessageInfo

func (m *IpfsGetFileResponse_Error) GetCode() IpfsGetFileResponse_Error_Code {
	if m != nil {
		return m.Code
	}
	return IpfsGetFileResponse_Error_NULL
}

func (m *IpfsGetFileResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ImageGetBlobRequest struct {
	Id    string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size_ ImageSize `protobuf:"varint,2,opt,name=size,proto3,enum=anytype.ImageSize" json:"size,omitempty"`
}

func (m *ImageGetBlobRequest) Reset()         { *m = ImageGetBlobRequest{} }
func (m *ImageGetBlobRequest) String() string { return proto.CompactTextString(m) }
func (*ImageGetBlobRequest) ProtoMessage()    {}
func (*ImageGetBlobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{4}
}
func (m *ImageGetBlobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageGetBlobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageGetBlobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageGetBlobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageGetBlobRequest.Merge(m, src)
}
func (m *ImageGetBlobRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageGetBlobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageGetBlobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageGetBlobRequest proto.InternalMessageInfo

func (m *ImageGetBlobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageGetBlobRequest) GetSize_() ImageSize {
	if m != nil {
		return m.Size_
	}
	return ImageSize_LARGE
}

type ImageGetBlobResponse struct {
	Error *ImageGetBlobResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Blob  []byte                      `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (m *ImageGetBlobResponse) Reset()         { *m = ImageGetBlobResponse{} }
func (m *ImageGetBlobResponse) String() string { return proto.CompactTextString(m) }
func (*ImageGetBlobResponse) ProtoMessage()    {}
func (*ImageGetBlobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{5}
}
func (m *ImageGetBlobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageGetBlobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageGetBlobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageGetBlobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageGetBlobResponse.Merge(m, src)
}
func (m *ImageGetBlobResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageGetBlobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageGetBlobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageGetBlobResponse proto.InternalMessageInfo

func (m *ImageGetBlobResponse) GetError() *ImageGetBlobResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ImageGetBlobResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type ImageGetBlobResponse_Error struct {
	Code        ImageGetBlobResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.ImageGetBlobResponse_Error_Code" json:"code,omitempty"`
	Description string                          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ImageGetBlobResponse_Error) Reset()         { *m = ImageGetBlobResponse_Error{} }
func (m *ImageGetBlobResponse_Error) String() string { return proto.CompactTextString(m) }
func (*ImageGetBlobResponse_Error) ProtoMessage()    {}
func (*ImageGetBlobResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{5, 0}
}
func (m *ImageGetBlobResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageGetBlobResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageGetBlobResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageGetBlobResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageGetBlobResponse_Error.Merge(m, src)
}
func (m *ImageGetBlobResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *ImageGetBlobResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageGetBlobResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_ImageGetBlobResponse_Error proto.InternalMessageInfo

func (m *ImageGetBlobResponse_Error) GetCode() ImageGetBlobResponse_Error_Code {
	if m != nil {
		return m.Code
	}
	return ImageGetBlobResponse_Error_NULL
}

func (m *ImageGetBlobResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ImageGetFileRequest struct {
	Id    string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size_ ImageSize `protobuf:"varint,2,opt,name=size,proto3,enum=anytype.ImageSize" json:"size,omitempty"`
}

func (m *ImageGetFileRequest) Reset()         { *m = ImageGetFileRequest{} }
func (m *ImageGetFileRequest) String() string { return proto.CompactTextString(m) }
func (*ImageGetFileRequest) ProtoMessage()    {}
func (*ImageGetFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{6}
}
func (m *ImageGetFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageGetFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageGetFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageGetFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageGetFileRequest.Merge(m, src)
}
func (m *ImageGetFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageGetFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageGetFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageGetFileRequest proto.InternalMessageInfo

func (m *ImageGetFileRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageGetFileRequest) GetSize_() ImageSize {
	if m != nil {
		return m.Size_
	}
	return ImageSize_LARGE
}

type ImageGetFileResponse struct {
	Error     *ImageGetFileResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	LocalPath string                      `protobuf:"bytes,2,opt,name=localPath,proto3" json:"localPath,omitempty"`
}

func (m *ImageGetFileResponse) Reset()         { *m = ImageGetFileResponse{} }
func (m *ImageGetFileResponse) String() string { return proto.CompactTextString(m) }
func (*ImageGetFileResponse) ProtoMessage()    {}
func (*ImageGetFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{7}
}
func (m *ImageGetFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageGetFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageGetFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageGetFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageGetFileResponse.Merge(m, src)
}
func (m *ImageGetFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageGetFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageGetFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageGetFileResponse proto.InternalMessageInfo

func (m *ImageGetFileResponse) GetError() *ImageGetFileResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ImageGetFileResponse) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

type ImageGetFileResponse_Error struct {
	Code        ImageGetFileResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.ImageGetFileResponse_Error_Code" json:"code,omitempty"`
	Description string                          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ImageGetFileResponse_Error) Reset()         { *m = ImageGetFileResponse_Error{} }
func (m *ImageGetFileResponse_Error) String() string { return proto.CompactTextString(m) }
func (*ImageGetFileResponse_Error) ProtoMessage()    {}
func (*ImageGetFileResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{7, 0}
}
func (m *ImageGetFileResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageGetFileResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageGetFileResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageGetFileResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageGetFileResponse_Error.Merge(m, src)
}
func (m *ImageGetFileResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *ImageGetFileResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageGetFileResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_ImageGetFileResponse_Error proto.InternalMessageInfo

func (m *ImageGetFileResponse_Error) GetCode() ImageGetFileResponse_Error_Code {
	if m != nil {
		return m.Code
	}
	return ImageGetFileResponse_Error_NULL
}

func (m *ImageGetFileResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterEnum("anytype.ImageSize", ImageSize_name, ImageSize_value)
	proto.RegisterEnum("anytype.VideoSize", VideoSize_name, VideoSize_value)
	proto.RegisterEnum("anytype.IpfsGetFileResponse_Error_Code", IpfsGetFileResponse_Error_Code_name, IpfsGetFileResponse_Error_Code_value)
	proto.RegisterEnum("anytype.ImageGetBlobResponse_Error_Code", ImageGetBlobResponse_Error_Code_name, ImageGetBlobResponse_Error_Code_value)
	proto.RegisterEnum("anytype.ImageGetFileResponse_Error_Code", ImageGetFileResponse_Error_Code_name, ImageGetFileResponse_Error_Code_value)
	proto.RegisterType((*Image)(nil), "anytype.Image")
	proto.RegisterType((*Video)(nil), "anytype.Video")
	proto.RegisterType((*IpfsGetFileRequest)(nil), "anytype.IpfsGetFileRequest")
	proto.RegisterType((*IpfsGetFileResponse)(nil), "anytype.IpfsGetFileResponse")
	proto.RegisterType((*IpfsGetFileResponse_Error)(nil), "anytype.IpfsGetFileResponse.Error")
	proto.RegisterType((*ImageGetBlobRequest)(nil), "anytype.ImageGetBlobRequest")
	proto.RegisterType((*ImageGetBlobResponse)(nil), "anytype.ImageGetBlobResponse")
	proto.RegisterType((*ImageGetBlobResponse_Error)(nil), "anytype.ImageGetBlobResponse.Error")
	proto.RegisterType((*ImageGetFileRequest)(nil), "anytype.ImageGetFileRequest")
	proto.RegisterType((*ImageGetFileResponse)(nil), "anytype.ImageGetFileResponse")
	proto.RegisterType((*ImageGetFileResponse_Error)(nil), "anytype.ImageGetFileResponse.Error")
}

func init() { proto.RegisterFile("file.proto", fileDescriptor_9188e3b7e55e1162) }

var fileDescriptor_9188e3b7e55e1162 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x51, 0x6f, 0xd2, 0x50,
	0x18, 0x6d, 0x4b, 0xeb, 0xd6, 0x8f, 0x8d, 0x5c, 0xef, 0xf6, 0x40, 0x96, 0xa5, 0x21, 0xd5, 0x28,
	0x59, 0x0c, 0x61, 0x8c, 0xe8, 0x8c, 0xbe, 0x80, 0x30, 0x20, 0x42, 0x59, 0x0a, 0xd5, 0xc4, 0x07,
	0x9b, 0x42, 0x2f, 0xda, 0xa4, 0x70, 0x2b, 0xad, 0x0f, 0xdb, 0xaf, 0xf0, 0x1f, 0xf8, 0xec, 0x1f,
	0xd0, 0x7f, 0x60, 0x7c, 0xdc, 0xa3, 0x8f, 0x06, 0xfe, 0x88, 0xb9, 0x17, 0xc6, 0xe8, 0xe6, 0x1c,
	0x7b, 0xdb, 0xdb, 0x77, 0x6e, 0xcf, 0x3d, 0x3d, 0x39, 0xe7, 0xde, 0x0b, 0x30, 0xf0, 0x7c, 0x92,
	0x0b, 0xc6, 0x34, 0xa2, 0x78, 0xcd, 0x19, 0x9d, 0x44, 0x27, 0x01, 0xd1, 0x4b, 0xa0, 0x34, 0x86,
	0xce, 0x07, 0x82, 0x53, 0x20, 0x79, 0x6e, 0x5a, 0xcc, 0x88, 0x59, 0xd5, 0x94, 0x3c, 0x17, 0x67,
	0x41, 0x09, 0xbd, 0x53, 0x12, 0xa6, 0xa5, 0x4c, 0x22, 0x9b, 0x2a, 0xe0, 0xdc, 0x7c, 0x47, 0x8e,
	0xd3, 0x3b, 0xde, 0x29, 0x31, 0x67, 0x04, 0x26, 0xf1, 0xc6, 0x73, 0x09, 0x5d, 0x5d, 0x82, 0xd3,
	0x97, 0x25, 0x1e, 0x02, 0x6e, 0x04, 0x83, 0xb0, 0x46, 0xa2, 0x23, 0xcf, 0x27, 0x26, 0xf9, 0xf4,
	0x99, 0x84, 0xd1, 0x65, 0x3d, 0xfd, 0xa7, 0x04, 0x5b, 0x31, 0x5a, 0x18, 0xd0, 0x51, 0x48, 0xf0,
	0x21, 0x28, 0x64, 0x3c, 0xa6, 0x63, 0x4e, 0x4d, 0x16, 0xf4, 0x0b, 0xab, 0x57, 0xc9, 0xb9, 0x2a,
	0x63, 0x9a, 0xb3, 0x0d, 0x18, 0x83, 0xec, 0x3a, 0x91, 0x93, 0x96, 0x32, 0x62, 0x76, 0xc3, 0xe4,
	0x33, 0xde, 0x06, 0x65, 0x48, 0x5c, 0xcf, 0x49, 0x27, 0xf8, 0x8f, 0x67, 0x80, 0x31, 0x47, 0xce,
	0x90, 0xa4, 0x65, 0xbe, 0xc8, 0xe7, 0x9d, 0xef, 0x22, 0x28, 0x5c, 0x0e, 0xbf, 0x00, 0xb9, 0x4f,
	0x5d, 0xc2, 0x0d, 0xa4, 0x0a, 0x8f, 0x6f, 0x36, 0x90, 0x7b, 0x45, 0x5d, 0x62, 0xf2, 0x4d, 0x38,
	0x03, 0x49, 0x97, 0x84, 0xfd, 0xb1, 0x17, 0x44, 0x1e, 0x1d, 0x71, 0x2f, 0xaa, 0xb9, 0xbc, 0xa4,
	0x1b, 0x20, 0x33, 0x3e, 0x5e, 0x07, 0xd9, 0xb0, 0x9a, 0x4d, 0x24, 0xe0, 0xfb, 0xb0, 0x69, 0x19,
	0xaf, 0x8d, 0xf6, 0x5b, 0xc3, 0xae, 0x9a, 0x66, 0xdb, 0x44, 0x22, 0xde, 0x04, 0xb5, 0x5c, 0xaa,
	0xd8, 0x0d, 0xe3, 0xd8, 0xea, 0x22, 0x89, 0x41, 0xa3, 0xdd, 0xb5, 0x8f, 0xda, 0x96, 0x51, 0x41,
	0x04, 0x27, 0x61, 0xad, 0xdb, 0x68, 0x55, 0xdb, 0x56, 0x17, 0x0d, 0xf4, 0x16, 0x6c, 0xf1, 0x16,
	0x6b, 0x24, 0x2a, 0xfb, 0xb4, 0x77, 0x4d, 0xde, 0xf8, 0x11, 0xc8, 0xac, 0x1e, 0xee, 0xe8, 0xdf,
	0x27, 0x80, 0x7f, 0xd7, 0xbf, 0x4a, 0xb0, 0x1d, 0xd7, 0x9b, 0x17, 0xf3, 0x3c, 0x5e, 0xcc, 0x83,
	0xb8, 0xc2, 0x25, 0xf6, 0x95, 0x66, 0x7a, 0x3e, 0xed, 0x9d, 0x37, 0xc3, 0xe6, 0x9d, 0x1f, 0x8b,
	0xbc, 0x5f, 0xc6, 0xf2, 0xce, 0xae, 0xa0, 0x7b, 0x67, 0x02, 0xff, 0xcf, 0x01, 0x5f, 0x39, 0xf0,
	0x6f, 0x4b, 0x81, 0xc7, 0x6e, 0xc2, 0x8d, 0x81, 0x5f, 0x7f, 0x15, 0x76, 0x41, 0xf5, 0x69, 0xdf,
	0xf1, 0x8f, 0x9d, 0xe8, 0xe3, 0x3c, 0x92, 0x8b, 0x85, 0x5b, 0x44, 0x7f, 0xc7, 0xce, 0xfa, 0xde,
	0x13, 0x50, 0x17, 0xf1, 0x61, 0x15, 0x94, 0x66, 0xc9, 0xac, 0x55, 0x91, 0xc0, 0xc6, 0x4e, 0xab,
	0xd4, 0x6c, 0x22, 0x91, 0x8d, 0xdd, 0xba, 0xd5, 0x2a, 0x23, 0x69, 0xef, 0x3d, 0xa8, 0x8b, 0xc7,
	0x89, 0xe9, 0x74, 0x2a, 0xf6, 0xc1, 0xd3, 0x7c, 0x80, 0x84, 0x39, 0x28, 0x1e, 0xe6, 0x03, 0x24,
	0x32, 0x50, 0xaf, 0xd8, 0xcf, 0x0a, 0xf9, 0x00, 0x49, 0x78, 0x03, 0xd6, 0xeb, 0x15, 0x7b, 0x3f,
	0xcf, 0x3e, 0x25, 0x98, 0x17, 0x8b, 0xc1, 0x62, 0x31, 0x1f, 0x20, 0xf9, 0x1c, 0x16, 0xf6, 0x99,
	0x8a, 0x52, 0xde, 0xfd, 0x35, 0xd1, 0xc4, 0xb3, 0x89, 0x26, 0xfe, 0x99, 0x68, 0xe2, 0x97, 0xa9,
	0x26, 0x9c, 0x4d, 0x35, 0xe1, 0xf7, 0x54, 0x13, 0xde, 0x49, 0x41, 0xaf, 0x77, 0x8f, 0x3f, 0xce,
	0x07, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x6d, 0x0c, 0x55, 0xaa, 0x05, 0x00, 0x00,
}

func (m *Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sizes) > 0 {
		dAtA2 := make([]byte, len(m.Sizes)*10)
		var j1 int
		for _, num := range m.Sizes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintFile(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Video) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Video) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Video) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sizes) > 0 {
		dAtA4 := make([]byte, len(m.Sizes)*10)
		var j3 int
		for _, num := range m.Sizes {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintFile(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IpfsGetFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpfsGetFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpfsGetFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IpfsGetFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpfsGetFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpfsGetFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Media) > 0 {
		i -= len(m.Media)
		copy(dAtA[i:], m.Media)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Media)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IpfsGetFileResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpfsGetFileResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpfsGetFileResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImageGetBlobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageGetBlobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageGetBlobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageGetBlobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageGetBlobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageGetBlobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blob) > 0 {
		i -= len(m.Blob)
		copy(dAtA[i:], m.Blob)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Blob)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageGetBlobResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageGetBlobResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageGetBlobResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImageGetFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageGetFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageGetFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageGetFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageGetFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageGetFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalPath) > 0 {
		i -= len(m.LocalPath)
		copy(dAtA[i:], m.LocalPath)
		i = encodeVarintFile(dAtA, i, uint64(len(m.LocalPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageGetFileResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageGetFileResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageGetFileResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFile(dAtA []byte, offset int, v uint64) int {
	offset -= sovFile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	if len(m.Sizes) > 0 {
		l = 0
		for _, e := range m.Sizes {
			l += sovFile(uint64(e))
		}
		n += 1 + sovFile(uint64(l)) + l
	}
	return n
}

func (m *Video) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	if len(m.Sizes) > 0 {
		l = 0
		for _, e := range m.Sizes {
			l += sovFile(uint64(e))
		}
		n += 1 + sovFile(uint64(l)) + l
	}
	return n
}

func (m *IpfsGetFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *IpfsGetFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFile(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *IpfsGetFileResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFile(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *ImageGetBlobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovFile(uint64(m.Size_))
	}
	return n
}

func (m *ImageGetBlobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFile(uint64(l))
	}
	l = len(m.Blob)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *ImageGetBlobResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFile(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *ImageGetFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovFile(uint64(m.Size_))
	}
	return n
}

func (m *ImageGetFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFile(uint64(l))
	}
	l = len(m.LocalPath)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *ImageGetFileResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFile(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func sovFile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFile(x uint64) (n int) {
	return sovFile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v ImageSize
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFile
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ImageSize(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sizes = append(m.Sizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFile
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFile
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFile
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Sizes) == 0 {
					m.Sizes = make([]ImageSize, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ImageSize
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFile
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ImageSize(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sizes = append(m.Sizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sizes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Video) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Video: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Video: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v VideoSize
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFile
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= VideoSize(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sizes = append(m.Sizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFile
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFile
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFile
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Sizes) == 0 {
					m.Sizes = make([]VideoSize, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v VideoSize
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFile
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= VideoSize(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sizes = append(m.Sizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sizes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpfsGetFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpfsGetFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpfsGetFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpfsGetFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpfsGetFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpfsGetFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &IpfsGetFileResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpfsGetFileResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= IpfsGetFileResponse_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageGetBlobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageGetBlobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageGetBlobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= ImageSize(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageGetBlobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageGetBlobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageGetBlobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &ImageGetBlobResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blob = append(m.Blob[:0], dAtA[iNdEx:postIndex]...)
			if m.Blob == nil {
				m.Blob = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageGetBlobResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ImageGetBlobResponse_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageGetFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageGetFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageGetFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= ImageSize(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageGetFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageGetFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageGetFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &ImageGetFileResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageGetFileResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ImageGetFileResponse_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFile = fmt.Errorf("proto: unexpected end of group")
)
