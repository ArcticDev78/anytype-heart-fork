// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: misc.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VersionGetResponse_Error_Code int32

const (
	VersionGetResponse_Error_NULL             VersionGetResponse_Error_Code = 0
	VersionGetResponse_Error_UNKNOWN_ERROR    VersionGetResponse_Error_Code = 1
	VersionGetResponse_Error_BAD_INPUT        VersionGetResponse_Error_Code = 2
	VersionGetResponse_Error_VERSION_IS_EMPTY VersionGetResponse_Error_Code = 3
	VersionGetResponse_Error_NOT_FOUND        VersionGetResponse_Error_Code = 101
	VersionGetResponse_Error_TIMEOUT          VersionGetResponse_Error_Code = 102
)

var VersionGetResponse_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	3:   "VERSION_IS_EMPTY",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var VersionGetResponse_Error_Code_value = map[string]int32{
	"NULL":             0,
	"UNKNOWN_ERROR":    1,
	"BAD_INPUT":        2,
	"VERSION_IS_EMPTY": 3,
	"NOT_FOUND":        101,
	"TIMEOUT":          102,
}

func (x VersionGetResponse_Error_Code) String() string {
	return proto.EnumName(VersionGetResponse_Error_Code_name, int32(x))
}

func (VersionGetResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d3ba2f07ad357c5, []int{1, 0, 0}
}

type LogSendRequest_Level int32

const (
	LogSendRequest_DEBUG   LogSendRequest_Level = 0
	LogSendRequest_ERROR   LogSendRequest_Level = 1
	LogSendRequest_FATAL   LogSendRequest_Level = 2
	LogSendRequest_INFO    LogSendRequest_Level = 3
	LogSendRequest_PANIC   LogSendRequest_Level = 4
	LogSendRequest_WARNING LogSendRequest_Level = 5
)

var LogSendRequest_Level_name = map[int32]string{
	0: "DEBUG",
	1: "ERROR",
	2: "FATAL",
	3: "INFO",
	4: "PANIC",
	5: "WARNING",
}

var LogSendRequest_Level_value = map[string]int32{
	"DEBUG":   0,
	"ERROR":   1,
	"FATAL":   2,
	"INFO":    3,
	"PANIC":   4,
	"WARNING": 5,
}

func (x LogSendRequest_Level) String() string {
	return proto.EnumName(LogSendRequest_Level_name, int32(x))
}

func (LogSendRequest_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d3ba2f07ad357c5, []int{2, 0}
}

type LogSendResponse_Error_Code int32

const (
	LogSendResponse_Error_NULL          LogSendResponse_Error_Code = 0
	LogSendResponse_Error_UNKNOWN_ERROR LogSendResponse_Error_Code = 1
	LogSendResponse_Error_BAD_INPUT     LogSendResponse_Error_Code = 2
	LogSendResponse_Error_NOT_FOUND     LogSendResponse_Error_Code = 101
	LogSendResponse_Error_TIMEOUT       LogSendResponse_Error_Code = 102
)

var LogSendResponse_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "NOT_FOUND",
	102: "TIMEOUT",
}

var LogSendResponse_Error_Code_value = map[string]int32{
	"NULL":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_INPUT":     2,
	"NOT_FOUND":     101,
	"TIMEOUT":       102,
}

func (x LogSendResponse_Error_Code) String() string {
	return proto.EnumName(LogSendResponse_Error_Code_name, int32(x))
}

func (LogSendResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d3ba2f07ad357c5, []int{3, 0, 0}
}

type VersionGetRequest struct {
}

func (m *VersionGetRequest) Reset()         { *m = VersionGetRequest{} }
func (m *VersionGetRequest) String() string { return proto.CompactTextString(m) }
func (*VersionGetRequest) ProtoMessage()    {}
func (*VersionGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d3ba2f07ad357c5, []int{0}
}
func (m *VersionGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionGetRequest.Merge(m, src)
}
func (m *VersionGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *VersionGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionGetRequest proto.InternalMessageInfo

type VersionGetResponse struct {
	Error   *VersionGetResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Version string                    `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *VersionGetResponse) Reset()         { *m = VersionGetResponse{} }
func (m *VersionGetResponse) String() string { return proto.CompactTextString(m) }
func (*VersionGetResponse) ProtoMessage()    {}
func (*VersionGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d3ba2f07ad357c5, []int{1}
}
func (m *VersionGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionGetResponse.Merge(m, src)
}
func (m *VersionGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *VersionGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionGetResponse proto.InternalMessageInfo

func (m *VersionGetResponse) GetError() *VersionGetResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *VersionGetResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type VersionGetResponse_Error struct {
	Code        VersionGetResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.VersionGetResponse_Error_Code" json:"code,omitempty"`
	Description string                        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *VersionGetResponse_Error) Reset()         { *m = VersionGetResponse_Error{} }
func (m *VersionGetResponse_Error) String() string { return proto.CompactTextString(m) }
func (*VersionGetResponse_Error) ProtoMessage()    {}
func (*VersionGetResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d3ba2f07ad357c5, []int{1, 0}
}
func (m *VersionGetResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionGetResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionGetResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionGetResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionGetResponse_Error.Merge(m, src)
}
func (m *VersionGetResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *VersionGetResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionGetResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_VersionGetResponse_Error proto.InternalMessageInfo

func (m *VersionGetResponse_Error) GetCode() VersionGetResponse_Error_Code {
	if m != nil {
		return m.Code
	}
	return VersionGetResponse_Error_NULL
}

func (m *VersionGetResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type LogSendRequest struct {
	Message string               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Level   LogSendRequest_Level `protobuf:"varint,2,opt,name=level,proto3,enum=anytype.LogSendRequest_Level" json:"level,omitempty"`
}

func (m *LogSendRequest) Reset()         { *m = LogSendRequest{} }
func (m *LogSendRequest) String() string { return proto.CompactTextString(m) }
func (*LogSendRequest) ProtoMessage()    {}
func (*LogSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d3ba2f07ad357c5, []int{2}
}
func (m *LogSendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogSendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogSendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogSendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogSendRequest.Merge(m, src)
}
func (m *LogSendRequest) XXX_Size() int {
	return m.Size()
}
func (m *LogSendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogSendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogSendRequest proto.InternalMessageInfo

func (m *LogSendRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LogSendRequest) GetLevel() LogSendRequest_Level {
	if m != nil {
		return m.Level
	}
	return LogSendRequest_DEBUG
}

type LogSendResponse struct {
	Error *LogSendResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *LogSendResponse) Reset()         { *m = LogSendResponse{} }
func (m *LogSendResponse) String() string { return proto.CompactTextString(m) }
func (*LogSendResponse) ProtoMessage()    {}
func (*LogSendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d3ba2f07ad357c5, []int{3}
}
func (m *LogSendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogSendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogSendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogSendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogSendResponse.Merge(m, src)
}
func (m *LogSendResponse) XXX_Size() int {
	return m.Size()
}
func (m *LogSendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogSendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogSendResponse proto.InternalMessageInfo

func (m *LogSendResponse) GetError() *LogSendResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type LogSendResponse_Error struct {
	Code        LogSendResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.LogSendResponse_Error_Code" json:"code,omitempty"`
	Description string                     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *LogSendResponse_Error) Reset()         { *m = LogSendResponse_Error{} }
func (m *LogSendResponse_Error) String() string { return proto.CompactTextString(m) }
func (*LogSendResponse_Error) ProtoMessage()    {}
func (*LogSendResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d3ba2f07ad357c5, []int{3, 0}
}
func (m *LogSendResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogSendResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogSendResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogSendResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogSendResponse_Error.Merge(m, src)
}
func (m *LogSendResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *LogSendResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_LogSendResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_LogSendResponse_Error proto.InternalMessageInfo

func (m *LogSendResponse_Error) GetCode() LogSendResponse_Error_Code {
	if m != nil {
		return m.Code
	}
	return LogSendResponse_Error_NULL
}

func (m *LogSendResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterEnum("anytype.VersionGetResponse_Error_Code", VersionGetResponse_Error_Code_name, VersionGetResponse_Error_Code_value)
	proto.RegisterEnum("anytype.LogSendRequest_Level", LogSendRequest_Level_name, LogSendRequest_Level_value)
	proto.RegisterEnum("anytype.LogSendResponse_Error_Code", LogSendResponse_Error_Code_name, LogSendResponse_Error_Code_value)
	proto.RegisterType((*VersionGetRequest)(nil), "anytype.VersionGetRequest")
	proto.RegisterType((*VersionGetResponse)(nil), "anytype.VersionGetResponse")
	proto.RegisterType((*VersionGetResponse_Error)(nil), "anytype.VersionGetResponse.Error")
	proto.RegisterType((*LogSendRequest)(nil), "anytype.LogSendRequest")
	proto.RegisterType((*LogSendResponse)(nil), "anytype.LogSendResponse")
	proto.RegisterType((*LogSendResponse_Error)(nil), "anytype.LogSendResponse.Error")
}

func init() { proto.RegisterFile("misc.proto", fileDescriptor_2d3ba2f07ad357c5) }

var fileDescriptor_2d3ba2f07ad357c5 = []byte{
	// 452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0xac, 0xa1, 0xe4, 0x55, 0x2b, 0x9e, 0xe1, 0x50, 0x4d, 0x10, 0x95, 0x20, 0xa1,
	0x9d, 0x72, 0xe8, 0x90, 0x26, 0x71, 0x4b, 0xd7, 0xb4, 0x0a, 0x64, 0x4e, 0xe5, 0x26, 0x9b, 0xe0,
	0x12, 0x6d, 0x8d, 0x99, 0x2a, 0x6d, 0x75, 0x88, 0xc3, 0xa4, 0x7d, 0x0b, 0xbe, 0x07, 0x37, 0x24,
	0xbe, 0x03, 0x12, 0x97, 0x1d, 0x39, 0xa2, 0xf6, 0x6b, 0x70, 0x40, 0x4e, 0xda, 0xb2, 0x6a, 0xa8,
	0x08, 0x6e, 0x79, 0x4f, 0x3f, 0x3f, 0xbf, 0x7f, 0x7e, 0x32, 0xc0, 0xe5, 0x44, 0x8e, 0x9d, 0x2c,
	0x17, 0x85, 0x20, 0xf5, 0xd3, 0xe9, 0x75, 0x71, 0x9d, 0x71, 0xfb, 0x21, 0xec, 0x1c, 0xf3, 0x5c,
	0x4e, 0xc4, 0x74, 0xc0, 0x0b, 0xc6, 0xdf, 0x7f, 0xe0, 0xb2, 0xb0, 0xbf, 0xe8, 0x40, 0x6e, 0x77,
	0x65, 0x26, 0xa6, 0x92, 0x93, 0x03, 0x30, 0x78, 0x9e, 0x8b, 0xbc, 0x85, 0xda, 0x68, 0xaf, 0xd1,
	0x79, 0xea, 0x2c, 0x86, 0x38, 0x77, 0x59, 0xc7, 0x53, 0x20, 0xab, 0x78, 0xd2, 0x82, 0xfa, 0x55,
	0x85, 0xb4, 0xf4, 0x36, 0xda, 0x33, 0xd9, 0xb2, 0xdc, 0xfd, 0x86, 0xc0, 0x28, 0x51, 0xf2, 0x12,
	0x6a, 0x63, 0x91, 0xf2, 0x72, 0x76, 0xb3, 0xf3, 0xfc, 0xaf, 0xb3, 0x9d, 0x43, 0x91, 0x72, 0x56,
	0x9e, 0x21, 0x6d, 0x68, 0xa4, 0x5c, 0x8e, 0xf3, 0x49, 0x56, 0xfc, 0xbe, 0xe3, 0x76, 0xcb, 0x4e,
	0xa1, 0xa6, 0x78, 0x72, 0x1f, 0x6a, 0x34, 0x0e, 0x02, 0xac, 0x91, 0x1d, 0xd8, 0x8e, 0xe9, 0x6b,
	0x1a, 0x9e, 0xd0, 0xc4, 0x63, 0x2c, 0x64, 0x18, 0x91, 0x6d, 0x30, 0xbb, 0x6e, 0x2f, 0xf1, 0xe9,
	0x30, 0x8e, 0xb0, 0x4e, 0x1e, 0x01, 0x3e, 0xf6, 0xd8, 0xc8, 0x0f, 0x69, 0xe2, 0x8f, 0x12, 0xef,
	0x68, 0x18, 0xbd, 0xc1, 0x5b, 0x0a, 0xa2, 0x61, 0x94, 0xf4, 0xc3, 0x98, 0xf6, 0x30, 0x27, 0x0d,
	0xa8, 0x47, 0xfe, 0x91, 0x17, 0xc6, 0x11, 0x7e, 0x67, 0x7f, 0x42, 0xd0, 0x0c, 0xc4, 0xf9, 0x88,
	0x4f, 0xd3, 0xc5, 0xaf, 0x54, 0xd1, 0x2f, 0xb9, 0x94, 0xa7, 0xe7, 0x55, 0x32, 0x93, 0x2d, 0x4b,
	0xb2, 0x0f, 0xc6, 0x05, 0xbf, 0xe2, 0x17, 0xe5, 0xba, 0xcd, 0xce, 0x93, 0x55, 0xe2, 0xf5, 0x09,
	0x4e, 0xa0, 0x20, 0x56, 0xb1, 0xf6, 0x2b, 0x30, 0xca, 0x9a, 0x98, 0x60, 0xf4, 0xbc, 0x6e, 0x3c,
	0xc0, 0x9a, 0xfa, 0x5c, 0x26, 0x30, 0xc1, 0xe8, 0xbb, 0x91, 0x1b, 0x60, 0x5d, 0x25, 0xf5, 0x69,
	0x3f, 0xc4, 0x5b, 0xaa, 0x39, 0x74, 0xa9, 0x7f, 0x88, 0x6b, 0x6a, 0xdb, 0x13, 0x97, 0x51, 0x9f,
	0x0e, 0xb0, 0x61, 0xff, 0x44, 0xf0, 0x60, 0x75, 0xd7, 0x42, 0xf1, 0x8b, 0x75, 0xc5, 0xd6, 0xdd,
	0xa5, 0xfe, 0xe0, 0x77, 0xf7, 0xf3, 0xca, 0xe2, 0xc1, 0x9a, 0xc5, 0x67, 0x9b, 0x8f, 0xff, 0x9b,
	0x42, 0xfa, 0x1f, 0x0a, 0x37, 0xc8, 0xea, 0x3e, 0xfe, 0x3a, 0xb3, 0xd0, 0xcd, 0xcc, 0x42, 0x3f,
	0x66, 0x16, 0xfa, 0x38, 0xb7, 0xb4, 0x9b, 0xb9, 0xa5, 0x7d, 0x9f, 0x5b, 0xda, 0x5b, 0x3d, 0x3b,
	0x3b, 0xbb, 0x57, 0xbe, 0x93, 0xfd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x39, 0x57, 0x42, 0x0b,
	0x35, 0x03, 0x00, 0x00,
}

func (m *VersionGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VersionGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMisc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VersionGetResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionGetResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionGetResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogSendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogSendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogSendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogSendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMisc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogSendResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSendResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogSendResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMisc(dAtA []byte, offset int, v uint64) int {
	offset -= sovMisc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VersionGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VersionGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *VersionGetResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMisc(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *LogSendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovMisc(uint64(m.Level))
	}
	return n
}

func (m *LogSendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *LogSendResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMisc(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func sovMisc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMisc(x uint64) (n int) {
	return sovMisc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VersionGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMisc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &VersionGetResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMisc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionGetResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= VersionGetResponse_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMisc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogSendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMisc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LogSendRequest_Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogSendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogSendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogSendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMisc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &LogSendResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogSendResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= LogSendResponse_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMisc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMisc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMisc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMisc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMisc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMisc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMisc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMisc = fmt.Errorf("proto: unexpected end of group")
)
