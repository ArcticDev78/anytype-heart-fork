// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: module.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ModuleType int32

const (
	ModuleType_DASHBOARD ModuleType = 0
	ModuleType_PAGE      ModuleType = 1
	ModuleType_ARCHIVE   ModuleType = 2
)

var ModuleType_name = map[int32]string{
	0: "DASHBOARD",
	1: "PAGE",
	2: "ARCHIVE",
}

var ModuleType_value = map[string]int32{
	"DASHBOARD": 0,
	"PAGE":      1,
	"ARCHIVE":   2,
}

func (x ModuleType) String() string {
	return proto.EnumName(ModuleType_name, int32(x))
}

func (ModuleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{0}
}

type ModuleOpenResponse_Error_Code int32

const (
	ModuleOpenResponse_Error_NULL          ModuleOpenResponse_Error_Code = 0
	ModuleOpenResponse_Error_UNKNOWN_ERROR ModuleOpenResponse_Error_Code = 1
	ModuleOpenResponse_Error_BAD_INPUT     ModuleOpenResponse_Error_Code = 2
	// ...
	ModuleOpenResponse_Error_MODULE_NOT_FOUND ModuleOpenResponse_Error_Code = 101
)

var ModuleOpenResponse_Error_Code_name = map[int32]string{
	0:   "NULL",
	1:   "UNKNOWN_ERROR",
	2:   "BAD_INPUT",
	101: "MODULE_NOT_FOUND",
}

var ModuleOpenResponse_Error_Code_value = map[string]int32{
	"NULL":             0,
	"UNKNOWN_ERROR":    1,
	"BAD_INPUT":        2,
	"MODULE_NOT_FOUND": 101,
}

func (x ModuleOpenResponse_Error_Code) String() string {
	return proto.EnumName(ModuleOpenResponse_Error_Code_name, int32(x))
}

func (ModuleOpenResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{3, 0, 0}
}

type ModuleHeader struct {
	Id   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type ModuleType `protobuf:"varint,2,opt,name=type,proto3,enum=anytype.ModuleType" json:"type,omitempty"`
	Name string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon string     `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (m *ModuleHeader) Reset()         { *m = ModuleHeader{} }
func (m *ModuleHeader) String() string { return proto.CompactTextString(m) }
func (*ModuleHeader) ProtoMessage()    {}
func (*ModuleHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{0}
}
func (m *ModuleHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleHeader.Merge(m, src)
}
func (m *ModuleHeader) XXX_Size() int {
	return m.Size()
}
func (m *ModuleHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleHeader proto.InternalMessageInfo

func (m *ModuleHeader) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ModuleHeader) GetType() ModuleType {
	if m != nil {
		return m.Type
	}
	return ModuleType_DASHBOARD
}

func (m *ModuleHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModuleHeader) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type Modules struct {
	Modules []*ModuleHeader `protobuf:"bytes,1,rep,name=Modules,proto3" json:"Modules,omitempty"`
}

func (m *Modules) Reset()         { *m = Modules{} }
func (m *Modules) String() string { return proto.CompactTextString(m) }
func (*Modules) ProtoMessage()    {}
func (*Modules) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{1}
}
func (m *Modules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Modules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Modules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Modules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Modules.Merge(m, src)
}
func (m *Modules) XXX_Size() int {
	return m.Size()
}
func (m *Modules) XXX_DiscardUnknown() {
	xxx_messageInfo_Modules.DiscardUnknown(m)
}

var xxx_messageInfo_Modules proto.InternalMessageInfo

func (m *Modules) GetModules() []*ModuleHeader {
	if m != nil {
		return m.Modules
	}
	return nil
}

type ModuleOpenRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ModuleOpenRequest) Reset()         { *m = ModuleOpenRequest{} }
func (m *ModuleOpenRequest) String() string { return proto.CompactTextString(m) }
func (*ModuleOpenRequest) ProtoMessage()    {}
func (*ModuleOpenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{2}
}
func (m *ModuleOpenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleOpenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleOpenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleOpenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleOpenRequest.Merge(m, src)
}
func (m *ModuleOpenRequest) XXX_Size() int {
	return m.Size()
}
func (m *ModuleOpenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleOpenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleOpenRequest proto.InternalMessageInfo

func (m *ModuleOpenRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ModuleOpenResponse struct {
	Error *ModuleOpenResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ModuleOpenResponse) Reset()         { *m = ModuleOpenResponse{} }
func (m *ModuleOpenResponse) String() string { return proto.CompactTextString(m) }
func (*ModuleOpenResponse) ProtoMessage()    {}
func (*ModuleOpenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{3}
}
func (m *ModuleOpenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleOpenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleOpenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleOpenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleOpenResponse.Merge(m, src)
}
func (m *ModuleOpenResponse) XXX_Size() int {
	return m.Size()
}
func (m *ModuleOpenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleOpenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleOpenResponse proto.InternalMessageInfo

func (m *ModuleOpenResponse) GetError() *ModuleOpenResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ModuleOpenResponse_Error struct {
	Code        ModuleOpenResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=anytype.ModuleOpenResponse_Error_Code" json:"code,omitempty"`
	Description string                        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ModuleOpenResponse_Error) Reset()         { *m = ModuleOpenResponse_Error{} }
func (m *ModuleOpenResponse_Error) String() string { return proto.CompactTextString(m) }
func (*ModuleOpenResponse_Error) ProtoMessage()    {}
func (*ModuleOpenResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{3, 0}
}
func (m *ModuleOpenResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleOpenResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleOpenResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleOpenResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleOpenResponse_Error.Merge(m, src)
}
func (m *ModuleOpenResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *ModuleOpenResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleOpenResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleOpenResponse_Error proto.InternalMessageInfo

func (m *ModuleOpenResponse_Error) GetCode() ModuleOpenResponse_Error_Code {
	if m != nil {
		return m.Code
	}
	return ModuleOpenResponse_Error_NULL
}

func (m *ModuleOpenResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterEnum("anytype.ModuleType", ModuleType_name, ModuleType_value)
	proto.RegisterEnum("anytype.ModuleOpenResponse_Error_Code", ModuleOpenResponse_Error_Code_name, ModuleOpenResponse_Error_Code_value)
	proto.RegisterType((*ModuleHeader)(nil), "anytype.ModuleHeader")
	proto.RegisterType((*Modules)(nil), "anytype.Modules")
	proto.RegisterType((*ModuleOpenRequest)(nil), "anytype.ModuleOpenRequest")
	proto.RegisterType((*ModuleOpenResponse)(nil), "anytype.ModuleOpenResponse")
	proto.RegisterType((*ModuleOpenResponse_Error)(nil), "anytype.ModuleOpenResponse.Error")
}

func init() { proto.RegisterFile("module.proto", fileDescriptor_ae7704718fb7daeb) }

var fileDescriptor_ae7704718fb7daeb = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0xae, 0xd2, 0x40,
	0x18, 0x85, 0x3b, 0xa5, 0x88, 0xfc, 0x05, 0x32, 0x8c, 0x9a, 0x34, 0xc6, 0x34, 0xb5, 0x26, 0x4a,
	0x5c, 0xd4, 0xa4, 0x2e, 0x4c, 0xd8, 0x15, 0x5a, 0x2d, 0x11, 0x5a, 0x32, 0x52, 0x4d, 0xdc, 0x34,
	0x40, 0x67, 0xd1, 0x44, 0x3a, 0xb5, 0x2d, 0x0b, 0xde, 0xc2, 0x37, 0xf1, 0x35, 0x5c, 0xb2, 0x74,
	0x69, 0xe0, 0x41, 0x34, 0x9d, 0x7a, 0xef, 0x25, 0x6c, 0xee, 0xee, 0xe4, 0xcc, 0x77, 0xce, 0xfc,
	0x99, 0xf9, 0xa1, 0xb7, 0xe3, 0xc9, 0xfe, 0x1b, 0xb3, 0xf2, 0x82, 0x57, 0x9c, 0x74, 0xd6, 0xd9,
	0xa1, 0x3a, 0xe4, 0xcc, 0xe4, 0xd0, 0x5b, 0x88, 0x03, 0x9f, 0xad, 0x13, 0x56, 0x90, 0x01, 0xc8,
	0x69, 0xa2, 0x21, 0x03, 0x8d, 0xba, 0x54, 0x4e, 0x13, 0xf2, 0x0a, 0x94, 0x9a, 0xd3, 0x64, 0x03,
	0x8d, 0x06, 0xf6, 0x23, 0xeb, 0x7f, 0xce, 0x6a, 0x42, 0xab, 0x43, 0xce, 0xa8, 0x00, 0x08, 0x01,
	0x25, 0x5b, 0xef, 0x98, 0xd6, 0x12, 0x51, 0xa1, 0x6b, 0x2f, 0xdd, 0xf2, 0x4c, 0x53, 0x1a, 0xaf,
	0xd6, 0xe6, 0x18, 0x3a, 0x4d, 0xb6, 0x24, 0x6f, 0x6e, 0xa5, 0x86, 0x8c, 0xd6, 0x48, 0xb5, 0x9f,
	0x5c, 0xd5, 0x37, 0x33, 0xd1, 0x1b, 0xca, 0x7c, 0x01, 0xc3, 0x46, 0x86, 0x39, 0xcb, 0x28, 0xfb,
	0xbe, 0x67, 0x65, 0x75, 0x3d, 0xb1, 0xf9, 0x17, 0x01, 0xb9, 0xa4, 0xca, 0x9c, 0x67, 0x25, 0x23,
	0xef, 0xa0, 0xcd, 0x8a, 0x82, 0x17, 0x82, 0x54, 0xed, 0xe7, 0x57, 0x57, 0x5d, 0xb2, 0x96, 0x57,
	0x83, 0xb4, 0xe1, 0x9f, 0xfe, 0x44, 0xd0, 0x16, 0x06, 0x19, 0x83, 0xb2, 0xe5, 0x09, 0x13, 0x0d,
	0x03, 0xfb, 0xe5, 0xbd, 0x0d, 0xd6, 0x94, 0x27, 0x8c, 0x8a, 0x0c, 0x31, 0x40, 0x4d, 0x58, 0xb9,
	0x2d, 0xd2, 0xbc, 0x4a, 0x79, 0x26, 0x9e, 0xb3, 0x4b, 0x2f, 0x2d, 0xd3, 0x07, 0xa5, 0xe6, 0xc9,
	0x43, 0x50, 0x82, 0x68, 0x3e, 0xc7, 0x12, 0x19, 0x42, 0x3f, 0x0a, 0x3e, 0x06, 0xe1, 0x97, 0x20,
	0xf6, 0x28, 0x0d, 0x29, 0x46, 0xa4, 0x0f, 0xdd, 0x89, 0xe3, 0xc6, 0xb3, 0x60, 0x19, 0xad, 0xb0,
	0x4c, 0x1e, 0x03, 0x5e, 0x84, 0x6e, 0x34, 0xf7, 0xe2, 0x20, 0x5c, 0xc5, 0xef, 0xc3, 0x28, 0x70,
	0x31, 0x7b, 0x6d, 0x03, 0xdc, 0x7d, 0x4f, 0x1d, 0x71, 0x9d, 0x4f, 0xfe, 0x24, 0x74, 0xa8, 0x8b,
	0xa5, 0xba, 0x7e, 0xe9, 0x7c, 0xf0, 0x30, 0x22, 0x2a, 0x74, 0x1c, 0x3a, 0xf5, 0x67, 0x9f, 0x3d,
	0x2c, 0x4f, 0x9e, 0xfd, 0x3a, 0xe9, 0xe8, 0x78, 0xd2, 0xd1, 0x9f, 0x93, 0x8e, 0x7e, 0x9c, 0x75,
	0xe9, 0x78, 0xd6, 0xa5, 0xdf, 0x67, 0x5d, 0xfa, 0x2a, 0xe7, 0x9b, 0xcd, 0x03, 0xb1, 0x35, 0x6f,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xec, 0x37, 0x42, 0x45, 0x02, 0x00, 0x00,
}

func (m *ModuleHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModule(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	return i, nil
}

func (m *Modules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Modules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for _, msg := range m.Modules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintModule(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModuleOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *ModuleOpenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModule(dAtA, i, uint64(m.Error.Size()))
		n1, err1 := m.Error.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *ModuleOpenResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleOpenResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModule(dAtA, i, uint64(m.Code))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func encodeVarintModule(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ModuleHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModule(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	return n
}

func (m *Modules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovModule(uint64(l))
		}
	}
	return n
}

func (m *ModuleOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	return n
}

func (m *ModuleOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovModule(uint64(l))
	}
	return n
}

func (m *ModuleOpenResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovModule(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	return n
}

func sovModule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModule(x uint64) (n int) {
	return sovModule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModuleHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ModuleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Modules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Modules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Modules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &ModuleHeader{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleOpenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleOpenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleOpenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleOpenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleOpenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleOpenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &ModuleOpenResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleOpenResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ModuleOpenResponse_Error_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModule
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthModule
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModule
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModule(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthModule
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModule = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModule   = fmt.Errorf("proto: integer overflow")
)
