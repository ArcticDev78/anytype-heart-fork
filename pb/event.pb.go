// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	// Types that are valid to be assigned to Message:
	//	*Event_AccountShow
	//	*Event_BlockShow
	//	*Event_BlockUpdate
	//	*Event_BlockCreate
	//	*Event_UserBlockTextRange
	//	*Event_UserBlockJoin
	//	*Event_UserBlockLeft
	//	*Event_UserBlockSelectRange
	//	*Event_FilesUpload
	Message isEvent_Message `protobuf_oneof:"message"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Message interface {
	isEvent_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_AccountShow struct {
	AccountShow *AccountShow `protobuf:"bytes,1,opt,name=accountShow,proto3,oneof" json:"accountShow,omitempty"`
}
type Event_BlockShow struct {
	BlockShow *BlockShow `protobuf:"bytes,2,opt,name=blockShow,proto3,oneof" json:"blockShow,omitempty"`
}
type Event_BlockUpdate struct {
	BlockUpdate *BlockUpdate `protobuf:"bytes,3,opt,name=blockUpdate,proto3,oneof" json:"blockUpdate,omitempty"`
}
type Event_BlockCreate struct {
	BlockCreate *BlockCreate `protobuf:"bytes,4,opt,name=blockCreate,proto3,oneof" json:"blockCreate,omitempty"`
}
type Event_UserBlockTextRange struct {
	UserBlockTextRange *UserBlockTextRange `protobuf:"bytes,5,opt,name=userBlockTextRange,proto3,oneof" json:"userBlockTextRange,omitempty"`
}
type Event_UserBlockJoin struct {
	UserBlockJoin *UserBlockJoin `protobuf:"bytes,6,opt,name=userBlockJoin,proto3,oneof" json:"userBlockJoin,omitempty"`
}
type Event_UserBlockLeft struct {
	UserBlockLeft *UserBlockLeft `protobuf:"bytes,7,opt,name=userBlockLeft,proto3,oneof" json:"userBlockLeft,omitempty"`
}
type Event_UserBlockSelectRange struct {
	UserBlockSelectRange *UserBlockSelectRange `protobuf:"bytes,8,opt,name=userBlockSelectRange,proto3,oneof" json:"userBlockSelectRange,omitempty"`
}
type Event_FilesUpload struct {
	FilesUpload *FilesUpload `protobuf:"bytes,9,opt,name=filesUpload,proto3,oneof" json:"filesUpload,omitempty"`
}

func (*Event_AccountShow) isEvent_Message()          {}
func (*Event_BlockShow) isEvent_Message()            {}
func (*Event_BlockUpdate) isEvent_Message()          {}
func (*Event_BlockCreate) isEvent_Message()          {}
func (*Event_UserBlockTextRange) isEvent_Message()   {}
func (*Event_UserBlockJoin) isEvent_Message()        {}
func (*Event_UserBlockLeft) isEvent_Message()        {}
func (*Event_UserBlockSelectRange) isEvent_Message() {}
func (*Event_FilesUpload) isEvent_Message()          {}

func (m *Event) GetMessage() isEvent_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Event) GetAccountShow() *AccountShow {
	if x, ok := m.GetMessage().(*Event_AccountShow); ok {
		return x.AccountShow
	}
	return nil
}

func (m *Event) GetBlockShow() *BlockShow {
	if x, ok := m.GetMessage().(*Event_BlockShow); ok {
		return x.BlockShow
	}
	return nil
}

func (m *Event) GetBlockUpdate() *BlockUpdate {
	if x, ok := m.GetMessage().(*Event_BlockUpdate); ok {
		return x.BlockUpdate
	}
	return nil
}

func (m *Event) GetBlockCreate() *BlockCreate {
	if x, ok := m.GetMessage().(*Event_BlockCreate); ok {
		return x.BlockCreate
	}
	return nil
}

func (m *Event) GetUserBlockTextRange() *UserBlockTextRange {
	if x, ok := m.GetMessage().(*Event_UserBlockTextRange); ok {
		return x.UserBlockTextRange
	}
	return nil
}

func (m *Event) GetUserBlockJoin() *UserBlockJoin {
	if x, ok := m.GetMessage().(*Event_UserBlockJoin); ok {
		return x.UserBlockJoin
	}
	return nil
}

func (m *Event) GetUserBlockLeft() *UserBlockLeft {
	if x, ok := m.GetMessage().(*Event_UserBlockLeft); ok {
		return x.UserBlockLeft
	}
	return nil
}

func (m *Event) GetUserBlockSelectRange() *UserBlockSelectRange {
	if x, ok := m.GetMessage().(*Event_UserBlockSelectRange); ok {
		return x.UserBlockSelectRange
	}
	return nil
}

func (m *Event) GetFilesUpload() *FilesUpload {
	if x, ok := m.GetMessage().(*Event_FilesUpload); ok {
		return x.FilesUpload
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_AccountShow)(nil),
		(*Event_BlockShow)(nil),
		(*Event_BlockUpdate)(nil),
		(*Event_BlockCreate)(nil),
		(*Event_UserBlockTextRange)(nil),
		(*Event_UserBlockJoin)(nil),
		(*Event_UserBlockLeft)(nil),
		(*Event_UserBlockSelectRange)(nil),
		(*Event_FilesUpload)(nil),
	}
}

func init() {
	proto.RegisterType((*Event)(nil), "anytype.Event")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor_2d17a9d3f0ddf27e) }

var fileDescriptor_2d17a9d3f0ddf27e = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x3f, 0x4f, 0xc2, 0x40,
	0x18, 0xc6, 0xaf, 0xc8, 0x1f, 0xb9, 0x86, 0xe5, 0x42, 0xcc, 0x05, 0xf5, 0x62, 0x9c, 0x9c, 0x18,
	0x70, 0x71, 0x32, 0xb1, 0x46, 0xd3, 0x18, 0x5d, 0x0e, 0x59, 0xdc, 0x8e, 0xf2, 0x82, 0xc4, 0xda,
	0x6b, 0xe8, 0xa1, 0xf2, 0x2d, 0xfc, 0x58, 0x8e, 0xc4, 0xc9, 0xd1, 0xc0, 0x17, 0x31, 0x77, 0x94,
	0x6b, 0x81, 0x3a, 0xde, 0xfb, 0x3c, 0xbf, 0xdf, 0x9b, 0xbe, 0x29, 0x76, 0xe1, 0x0d, 0x22, 0xd5,
	0x8e, 0x27, 0x52, 0x49, 0x52, 0x13, 0xd1, 0x4c, 0xcd, 0x62, 0x68, 0x35, 0x44, 0x10, 0xc8, 0xe9,
	0x7a, 0xde, 0x72, 0xfb, 0xa1, 0x0c, 0x5e, 0xd2, 0x07, 0x86, 0xc1, 0x38, 0x0d, 0x4e, 0xbf, 0xcb,
	0xb8, 0x72, 0xa3, 0x05, 0xe4, 0x02, 0xbb, 0x29, 0xd3, 0x7d, 0x96, 0xef, 0xd4, 0x39, 0x71, 0xce,
	0xdc, 0x4e, 0xb3, 0x9d, 0x0a, 0xdb, 0x57, 0x59, 0xe6, 0x23, 0x9e, 0xaf, 0x92, 0x0e, 0xae, 0x1b,
	0xbd, 0xe1, 0x4a, 0x86, 0x23, 0x96, 0xf3, 0xd6, 0x89, 0x8f, 0x78, 0x56, 0xd3, 0xdb, 0xcc, 0xa3,
	0x17, 0x0f, 0x84, 0x02, 0xba, 0xb7, 0xb5, 0xcd, 0xcb, 0x32, 0xbd, 0x2d, 0x57, 0xb5, 0xe4, 0xf5,
	0x04, 0x34, 0x59, 0x2e, 0x22, 0x57, 0x99, 0x25, 0x57, 0x4f, 0xf2, 0x80, 0xc9, 0x34, 0x81, 0x89,
	0x69, 0x3c, 0xc2, 0x87, 0xe2, 0x22, 0x1a, 0x01, 0xad, 0x18, 0xc1, 0xa1, 0x15, 0xf4, 0x76, 0x2a,
	0x3e, 0xe2, 0x05, 0x20, 0xb9, 0xc4, 0x0d, 0x3b, 0xbd, 0x93, 0xe3, 0x88, 0x56, 0x8d, 0xe9, 0x60,
	0xd7, 0xa4, 0x53, 0x1f, 0xf1, 0xcd, 0xfa, 0x06, 0x7f, 0x0f, 0x43, 0x45, 0x6b, 0xff, 0xf1, 0x3a,
	0xdd, 0xe0, 0xf5, 0x80, 0x74, 0x71, 0xd3, 0x0e, 0xba, 0x10, 0x42, 0x90, 0x7e, 0xd0, 0xbe, 0xd1,
	0x1c, 0xef, 0x6a, 0x72, 0x25, 0x1f, 0xf1, 0x42, 0x58, 0x5f, 0x77, 0x38, 0x0e, 0x21, 0xe9, 0xc5,
	0xa1, 0x14, 0x03, 0x5a, 0xdf, 0xba, 0xee, 0x6d, 0x96, 0xe9, 0xeb, 0xe6, 0xaa, 0x5e, 0x1d, 0xd7,
	0x5e, 0x21, 0x49, 0xc4, 0x08, 0xbc, 0xa3, 0xaf, 0x05, 0x73, 0xe6, 0x0b, 0xe6, 0xfc, 0x2e, 0x98,
	0xf3, 0xb9, 0x64, 0x68, 0xbe, 0x64, 0xe8, 0x67, 0xc9, 0xd0, 0x53, 0x29, 0xee, 0xf7, 0xab, 0xe6,
	0xcf, 0x3b, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x16, 0xfd, 0x5f, 0xb9, 0x02, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event_AccountShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_AccountShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountShow != nil {
		{
			size, err := m.AccountShow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Event_BlockShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_BlockShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockShow != nil {
		{
			size, err := m.BlockShow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Event_BlockUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_BlockUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockUpdate != nil {
		{
			size, err := m.BlockUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Event_BlockCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_BlockCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockCreate != nil {
		{
			size, err := m.BlockCreate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Event_UserBlockTextRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_UserBlockTextRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserBlockTextRange != nil {
		{
			size, err := m.UserBlockTextRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Event_UserBlockJoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_UserBlockJoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserBlockJoin != nil {
		{
			size, err := m.UserBlockJoin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Event_UserBlockLeft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_UserBlockLeft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserBlockLeft != nil {
		{
			size, err := m.UserBlockLeft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Event_UserBlockSelectRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_UserBlockSelectRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserBlockSelectRange != nil {
		{
			size, err := m.UserBlockSelectRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Event_FilesUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_FilesUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FilesUpload != nil {
		{
			size, err := m.FilesUpload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *Event_AccountShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountShow != nil {
		l = m.AccountShow.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_BlockShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockShow != nil {
		l = m.BlockShow.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_BlockUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockUpdate != nil {
		l = m.BlockUpdate.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_BlockCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockCreate != nil {
		l = m.BlockCreate.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_UserBlockTextRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserBlockTextRange != nil {
		l = m.UserBlockTextRange.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_UserBlockJoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserBlockJoin != nil {
		l = m.UserBlockJoin.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_UserBlockLeft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserBlockLeft != nil {
		l = m.UserBlockLeft.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_UserBlockSelectRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserBlockSelectRange != nil {
		l = m.UserBlockSelectRange.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_FilesUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilesUpload != nil {
		l = m.FilesUpload.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountShow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccountShow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_AccountShow{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockShow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockShow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_BlockShow{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_BlockUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCreate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockCreate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_BlockCreate{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBlockTextRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserBlockTextRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_UserBlockTextRange{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBlockJoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserBlockJoin{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_UserBlockJoin{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBlockLeft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserBlockLeft{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_UserBlockLeft{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBlockSelectRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserBlockSelectRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_UserBlockSelectRange{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilesUpload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FilesUpload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Event_FilesUpload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
