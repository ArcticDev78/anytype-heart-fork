syntax="proto3";
package anytype;
option go_package = "pb";

import "file.proto";

/**
 * Avatar of a user's account. It could be an image or color
*/
message Avatar {
    oneof avatar {
        Image image = 1; // Image of the avatar. Contains hash and size
        string color = 2; // Color of the avatar, if no image
    }
}

/**
 * The Account message contains basic information about a user's account
*/
message Account {
    string id = 1; // User's thread id
    string name = 2; // User name, that associated with this account
    Avatar avatar = 3; // Avatar of a user's account
}

/**
 * Front end to middleware request to create a new wallet
*/
message WalletCreateRequest {
    string rootPath = 1; // 
}

/**
 * Middleware to front end response, that can contain mnemonic of a created account and a NULL error or an empty mnemonic and a non-NULL error
*/
message WalletCreateResponse {
    Error error = 1; // Error on a middleware, that happened while trying to create a wallet
    string mnemonic = 2; // Mnemonic of a new account (sequence of words, divided by spaces)

    message Error {
        Code code = 1;
        string description = 2;

        enum Code {
            NULL = 0; // No error; mnemonic should be non-empty
            UNKNOWN_ERROR = 1; // Any other errors
            BAD_INPUT = 2; // Root path is wrong

            FAILED_TO_CREATE_LOCAL_REPO = 101;
            // ...
        }
    }
}

/**
 * Front end to middleware request to recover a wallet with this mnemonic and a rootPath
*/
message WalletRecoverRequest {
    string rootPath = 1; // TODO: what is that?
    string mnemonic = 2; // Mnemonic of a wallet to recover
}

/**
 * Middleware to front end response, that can contain a NULL error or a non-NULL error
*/
message WalletRecoverResponse {
    Error error = 1; // Error on a middleware, that happened while trying to recover a wallet
    message Error {
        Code code = 1;
        string description = 2;

        enum Code {
            NULL = 0; // No error; wallet successfully recovered
            UNKNOWN_ERROR = 1; // Any other errors
            BAD_INPUT = 2; // Root path or mnemonic is wrong

            FAILED_TO_CREATE_LOCAL_REPO = 101;
        }
    }
}

/**
 * Front end to middleware request to create an account 
*/
message AccountCreateRequest {
    string name = 1; // Name of an account (username)
    oneof avatar {
        string avatarLocalPath = 2; // Path to an image, that will be used as an avatar of this account
        string avatarColor = 3; // You can set a color of an avatar if you don't want to use an image
    }
}

/**
 * Middleware to front end response for an account creation request, that can contain a NULL error and created account or a non-NULL error and an empty account
*/
message AccountCreateResponse {
    Error error = 1; // Error on a middleware, that happened while trying to create an account
    Account account = 2; // Newly created account; If the error is non-NULL, account be a structure with an empty fields

    message Error {
        Code code = 1;
        string description = 2;

        enum Code {
            NULL = 0; // No error; Account should be non-empty
            UNKNOWN_ERROR = 1; // Any other errors
            BAD_INPUT = 2; // Avatar or name is not correct

            ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE = 101;
            ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME = 102;
            ACCOUNT_CREATED_BUT_FAILED_TO_SET_AVATAR = 103;
        }
    }
}

/**
 * Front end to middleware request to start search of an accounts for a recovered mnemonic. 
 * Each of an account that would be found will come with an AccountAdd event
*/
message AccountRecoverRequest {}

/**
 * Middleware to front end response to an account recover request, that can contain a NULL error and created account or a non-NULL error and an empty account
*/
message AccountRecoverResponse {
    Error error = 1; // Error on a middleware, that happened while trying to create a wallet
    message Error {
        Code code = 1;
        string description = 2;

        enum Code {
            NULL = 0; // No error;
            UNKNOWN_ERROR = 1; // Any other errors
            BAD_INPUT = 2;

            NO_ACCOUNTS_FOUND = 101;
            NEED_TO_RECOVER_WALLET_FIRST = 102;
            FAILED_TO_CREATE_LOCAL_REPO = 103;
            LOCAL_REPO_EXISTS_BUT_CORRUPTED = 104; 
            FAILED_TO_RUN_NODE = 105;
            WALLET_RECOVER_NOT_PERFORMED = 106;
        }
    }
}

/**
 * Front end to middleware request to select an account with this id and a root path
 * User can select an account from those, that came with an AccountAdd events
*/
message AccountSelectRequest {
    string id = 1; // id of a selected account
    string rootPath = 2; // rootPath is optional, set if this is a first request
}

/**
 * Middleware to front end response for an account select request, that can contain a NULL error and selected account or a non-NULL error and an empty account
*/
message AccountSelectResponse {
    Error error = 1; // Error on a middleware, that happened while trying to select an account
    Account account = 2; // Selected account

    message Error {
        Code code = 1;
        string description = 2;

        enum Code {
            NULL = 0; // No error;
            UNKNOWN_ERROR = 1; // Any other errors
            BAD_INPUT = 2; // Id or root path is wrong

            FAILED_TO_CREATE_LOCAL_REPO = 101;
            LOCAL_REPO_EXISTS_BUT_CORRUPTED = 102;
            FAILED_TO_RUN_NODE = 103;
            FAILED_TO_FIND_ACCOUNT_INFO = 104;
            LOCAL_REPO_NOT_EXISTS_AND_MNEMONIC_NOT_SET = 105;
        }
    }
}

/**
 * Message, that will be sent to the front on each account found after an AccountRecoverRequest
*/
message AccountShow {
    int64  index  = 1; // Number of an account in an all found accounts list
    Account account = 2; // An Account, that has been found for the mnemonic
}
