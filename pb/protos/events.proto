syntax="proto3";
package anytype;
option go_package = "pb";

import "vendor/github.com/anytypeio/go-anytype-library/pb/model/protos/models.proto";

/*
 * Event â€“ type of message, that could be sent from a middleware to the corresponding front-end.
*/
message Event {
    repeated Msg msg = 1;
    string contextId = 2;

    message Msg {
        oneof msg {
            Account.Show accountShow  = 1;

            Block.Add blockAdd = 2;
            Block.Delete blockDelete = 3;
            Block.FilesUpload filesUpload = 4;
            Block.MarksInfo marksInfo = 5;

            Block.Set.File blockSetFile = 6;
            Block.Set.Image blockSetImage = 7;
            Block.Set.Text blockSetText = 8;
            Block.Set.Video blockSetVideo = 9;
            Block.Set.Icon blockSetIcon = 10;

            Block.Show blockShow = 11;

            User.Block.Join userBlockJoin = 12;
            User.Block.Left userBlockLeft = 13;
            User.Block.SelectRange userBlockSelectRange = 14;
            User.Block.TextRange userBlockTextRange = 15;
        }
    }

    message Account {
        /**
        * Message, that will be sent to the front on each account found after an AccountRecoverRequest
        */
        message Show {
            int64 index  = 1; // Number of an account in an all found accounts list
            anytype.model.Account account = 2; // An Account, that has been found for the mnemonic
        }
    }
    message Block {
        /*
        * Event to show internal blocks on a client.
         * Example Scenarios
         * A. Block Creation
         * 1. Block A have been created on a client C1
         * 2. Client C2 receives Event.Block.Add(Block A), Event.Block.Update(Page.children)
         * B. Partial block load
         * 1. Client C1 opens Page1, that contains, for example, 133 blocks.
         * 2. M -> F: ShowFullScreen(Root, blocks1-50)
         * 3. M -> F: Block.Add(blocks51-100)
         * 3. M -> F: Block.Add(blocks101-133)
        */
        message Add {
            repeated anytype.model.Block blocks = 1; // id -> block
        }

        /*
         * Works with a smart blocks: Page, Dashboard
         * Dashboard opened, click on a page, Rpc.Block.open, Block.ShowFullscreen(PageBlock)
        */
        message Show {
            string rootId = 1; // Root block id
            repeated anytype.model.Block blocks = 2; // dependent blocks (descendants)
        }

        /**
        * Middleware to front end event message, that will be sent on one of this scenarios:
        * Precondition: user A opened a block
        * 1. User A drops a set of files/pictures/videos
        * 2. User A creates a MediaBlock and drops a single media, that corresponds to its type.
        */
        message FilesUpload {
            string blockId = 1; // if empty => create new blocks
            repeated string filePath = 2; // filepaths to the files

        }

        /*
         *
        */
        message Delete {
            string blockId = 1;
        }

        message MarksInfo {
            repeated anytype.model.Block.Content.Text.Mark.Type marksInRange = 1;
        }

        message Set {
            message Text {
                string id = 1;
                Text text = 2;
                Style style = 3;
                Marks marks = 4;
                Toggleable toggleable = 5;
                Marker marker = 6;
                Checkable checkable = 7;
                Check check = 8;

                message Text {
                    string value = 1;
                }

                message Style {
                    anytype.model.Block.Content.Text.Style value = 1;
                }

                message Marks {
                    anytype.model.Block.Content.Text.Marks value = 1;
                }

                message Toggleable {
                    bool value = 1;
                }

                message Marker {
                    anytype.model.Block.Content.Text.Marker value = 1;
                }

                message Checkable {
                    bool value = 1;
                }

                message Check {
                    bool value = 1;
                }
            }

            message File {
                string id = 1;
                Name name = 2;
                State state = 3;
                LocalFilePath localFilePath = 4;
                Icon icon = 5;

                message Name {
                    string value = 1;
                }

                message State {
                    anytype.model.Block.Content.File.State value = 1;
                }

                message LocalFilePath {
                    string value = 1;
                }

                message Icon {
                    string value = 1;
                }
            }

            message Image {
                string id = 1;
                Name name = 2;
                Width width = 3;
                State state = 4;
                LocalFilePath localFilePath = 5;
                PreviewLocalFilePath previewLocalFilePath = 6;

                message Name {
                    string value = 1;
                }

                message Width {
                    int32 value = 1;
                }

                message State {
                    anytype.model.Block.Content.Image.State value = 1;
                }

                message LocalFilePath {
                    string value = 1;
                }

                message PreviewLocalFilePath {
                    string value = 1;
                }
            }

            message Video {
                string id = 1;
                Name name = 2;
                Width width = 3;
                State state = 4;
                LocalFilePath localFilePath = 5;
                PreviewLocalFilePath previewLocalFilePath = 6;

                message Name {
                    string value = 1;
                }

                message Width {
                    int32 value = 1;
                }

                message State {
                    anytype.model.Block.Content.Video.State value = 1;
                }

                message LocalFilePath {
                    string value = 1;
                }

                message PreviewLocalFilePath {
                    string value = 1;
                }
            }

            message Icon {
                string id = 1;
                Name name = 2;

                message Name {
                    string value = 1;
                }
            }
        }
    }

    message User {
        message Block {

            /**
            *  Middleware to front end event message, that will be sent in this scenario:
            * Precondition: user A opened a block
            * 1. User B opens the same block
            * 2. User A receives a message about p.1
            */
            message Join {
                Account account = 1; // Account of the user, that opened a block
            }

            /**
            *  Middleware to front end event message, that will be sent in this scenario:
            * Precondition: user A and user B opened the same block
            * 1. User B closes the block
            * 2. User A receives a message about p.1
            */
            message Left {
                Account account = 1; // Account of the user, that left the block
            }

            /**
            * Middleware to front end event message, that will be sent in this scenario:
            * Precondition: user A and user B opened the same block
            * 1. User B sets cursor or selects a text region into a text block
            * 2. User A receives a message about p.1
            */
            message TextRange {
                Account account = 1; // Account of the user, that selected a text
                string blockId = 2; // Id of the text block, that have a selection
                anytype.model.Range range = 3; // Range of the selection
            }

            /**
            * Middleware to front end event message, that will be sent in this scenario:
            * Precondition: user A and user B opened the same block
            * 1. User B selects some inner blocks
            * 2. User A receives a message about p.1
            */
            message SelectRange {
                Account account = 1; // Account of the user, that selected blocks
                repeated string blockIdsArray = 2; // Ids of selected blocks.
            }
        }
    }
}
