syntax="proto3";
package anytype;
option go_package = "pb";

import "vendor/github.com/anytypeio/go-anytype-library/pb/model/protos/models.proto";

/*
 * Event â€“ type of message, that could be sent from a middleware to the corresponding front-end.
*/
message Event {
    repeated Msg msg = 1;
    string contextId = 2;

    message Msg {
        Account.Show accountShow  = 1;

        Block.Add blockAdd = 2;
        Block.Delete blockDelete = 3;
        Block.FilesUpload filesUpload = 4;
        Block.MarksInfo marksInfo = 5;

        Block.Set.File.Icon blockSetFileIcon = 6;
        Block.Set.File.LocalFilePath blockSetFileLocalFilePath = 7;
        Block.Set.File.Name blockSetFileName = 8;
        Block.Set.File.State blockSetFileState = 9;

        Block.Set.Image.LocalFilePath blockSetImageLocalFilePath = 10;
        Block.Set.Image.Name blockSetImageName = 11;
        Block.Set.Image.PreviewFilePath blockSetImagePreviewFilePath = 12;
        Block.Set.Image.State blockSetImageState = 13;
        Block.Set.Image.Width blockSetImageWidth = 14;

        Block.Set.Text.Check blockSetTextCheck = 15;
        Block.Set.Text.Checkable blockSetTextCheckable = 16;
        Block.Set.Text.Marker blockSetTextMarker = 17;
        Block.Set.Text.Marks blockSetTextMarks = 18;
        Block.Set.Text.Style blockSetTextStyle = 19;
        Block.Set.Text.Text blockSetTextTextInRange = 20;
        Block.Set.Text.Toggleable blockSetTextToggleable = 21;

        Block.Set.Video.LocalFilePath blockSetVideoLocalFilePath = 22;
        Block.Set.Video.Name blockSetVideoName = 23;
        Block.Set.Video.PreviewFilePath blockSetVideoPreviewFilePath = 24;
        Block.Set.Video.State blockSetVideoState = 25;
        Block.Set.Video.Width blockSetVideoWidth = 26;

        Block.Show blockShow = 27;

        User.Block.Join userBlockJoin = 28;
        User.Block.Left userBlockLeft = 29;
        User.Block.SelectRange userBlockSelectRange = 30;
        User.Block.TextRange userBlockTextRange = 31;
    }

    message Account {
        /**
        * Message, that will be sent to the front on each account found after an AccountRecoverRequest
        */
        message Show {
            int64 index  = 1; // Number of an account in an all found accounts list
            anytype.model.Account account = 2; // An Account, that has been found for the mnemonic
        }
    }
    message Block {
        /*
        * Event to show internal blocks on a client.
         * Example Scenarios
         * A. Block Creation
         * 1. Block A have been created on a client C1
         * 2. Client C2 receives Event.Block.Add(Block A), Event.Block.Update(Page.children)
         * B. Partial block load
         * 1. Client C1 opens Page1, that contains, for example, 133 blocks.
         * 2. M -> F: ShowFullScreen(Root, blocks1-50)
         * 3. M -> F: Block.Add(blocks51-100)
         * 3. M -> F: Block.Add(blocks101-133)
        */
        message Add {
            repeated anytype.model.Block blocks = 1; // id -> block
        }

        /*
         * Works with a smart blocks: Page, Dashboard
         * Dashboard opened, click on a page, Rpc.Block.open, Block.ShowFullscreen(PageBlock)
        */
        message Show {
            string rootId = 1; // Root block id
            repeated anytype.model.Block blocks = 2; // dependent blocks (descendants)
        }

        /**
        * Middleware to front end event message, that will be sent on one of this scenarios:
        * Precondition: user A opened a block
        * 1. User A drops a set of files/pictures/videos
        * 2. User A creates a MediaBlock and drops a single media, that corresponds to its type.
        */
        message FilesUpload {
            repeated string filePath = 1; // filepaths to the files
            string blockId = 2; // if empty => create new blocks
        }

        /*
         *
        */
        message Delete {
            string blockId = 1;
        }

        message MarksInfo {
            repeated anytype.model.Block.Content.Text.Mark.Type marksInRange = 1;
        }

        message Set {
            message Text {
                message Text {
                    string blockId = 1;
                    string text = 2;
                }

                message Style {
                    string blockId = 1;
                    anytype.model.Block.Content.Text.Style style = 2;
                }

                message Marks {
                    string blockId = 1;
                    anytype.model.Block.Content.Text.Marks marks = 2;
                }

                message Toggleable {
                    string blockId = 1;
                    bool toggleable = 2;
                }

                message Marker {
                    string blockId = 1;
                    anytype.model.Block.Content.Text.Marker marker = 2;
                }

                message Checkable {
                    string blockId = 1;
                    bool checkable = 2;
                }

                message Check {
                    string blockId = 1;
                    bool check = 2;
                }
            }

            message File {
                message Name {
                    string blockId = 1;
                    string name = 2;
                }

                message State {
                    string blockId = 1;
                    anytype.model.Block.Content.File.State state = 2;
                }

                message LocalFilePath {
                    string blockId = 1;
                    string path = 2;
                }

                message Icon {
                    string blockId = 1;
                    string icon = 2;
                }
            }

            message Image {
                message Name {
                    string blockId = 1;
                    string name = 2;
                }

                message Width {
                    string blockId = 1;
                    int32 width = 2;
                }

                message State {
                    string blockId = 1;
                    anytype.model.Block.Content.Image.State state = 2;
                }

                message LocalFilePath {
                    string blockId = 1;
                    string path = 2;
                }

                message PreviewFilePath {
                    string blockId = 1;
                    string path = 2;
                }
            }

            message Video {
                message Name {
                    string blockId = 1;
                    string name = 2;
                }

                message Width {
                    string blockId = 1;
                    int32 width = 2;
                }

                message State {
                    string blockId = 1;
                    anytype.model.Block.Content.Video.State state = 2;
                }

                message LocalFilePath {
                    string blockId = 1;
                    string path = 2;
                }

                message PreviewFilePath {
                    string blockId = 1;
                    string path = 2;
                }
            }

            message Icon {
                message Name {
                    string blockId = 1;
                    string name = 2;
                }
            }
        }
    }

    message User {
        message Block {

            /**
            *  Middleware to front end event message, that will be sent in this scenario:
            * Precondition: user A opened a block
            * 1. User B opens the same block
            * 2. User A receives a message about p.1
            */
            message Join {
                Account account = 1; // Account of the user, that opened a block
            }

            /**
            *  Middleware to front end event message, that will be sent in this scenario:
            * Precondition: user A and user B opened the same block
            * 1. User B closes the block
            * 2. User A receives a message about p.1
            */
            message Left {
                Account account = 1; // Account of the user, that left the block
            }

            /**
            * Middleware to front end event message, that will be sent in this scenario:
            * Precondition: user A and user B opened the same block
            * 1. User B sets cursor or selects a text region into a text block
            * 2. User A receives a message about p.1
            */
            message TextRange {
                Account account = 1; // Account of the user, that selected a text
                string blockId = 2; // Id of the text block, that have a selection
                anytype.model.Range range = 3; // Range of the selection
            }

            /**
            * Middleware to front end event message, that will be sent in this scenario:
            * Precondition: user A and user B opened the same block
            * 1. User B selects some inner blocks
            * 2. User A receives a message about p.1
            */
            message SelectRange {
                Account account = 1; // Account of the user, that selected blocks
                repeated string blockIdsArray = 2; // Ids of selected blocks.
            }
        }
    }
}
