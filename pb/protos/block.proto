syntax="proto3";
package anytype;
option go_package = "pb";

import "struct.proto";

// call
message BlockShow {
    Block block = 1;
}

message BlockUpdate {
    BlockChanges changes = 1;
}

message BlockCreate {
    Block block = 1;
}

message BlockStructureChange {
    string id = 1;
    BlockChildren children = 2;
}

message BlockContentTextChange {
    oneof change {
        string text = 1;
        BlockContentText.Style style = 2;
        BlockContentText.Marks marks = 3;

        bool toggleable = 4;
        BlockContentText.MarkerType markerType = 5;

        bool checkable = 6;
        bool checked = 7;
    }
}

message BlockContentPageChange {
    oneof change {
        BlockContentPage.Style style = 1;
        BlockStructureChange structureChange = 2;
        Block block = 3;
    }
}

message BlockHeaderChange {
    oneof change {
        string id = 1;
        BlockType type = 2;
        string name = 3;
        string icon = 4;

        BlockPermissions permissions = 5;
    }
}

message BlockContentDashboardChange {
    oneof change {
        BlockContentDashboard.Style style = 1;
        BlockStructureChange structureChange = 2;
        BlockHeader header = 3;
    }
}

message BlockContentMediaChange {
    oneof change {
        string link = 1;
        BlockContentMedia.State state = 2;
    }
}

message BlockAtomicChange {
    string id = 1;
    oneof change {
        BlockContentTextChange text = 2;
        BlockHeaderChange blockHeader = 3;
        BlockContentPageChange page = 4;
        BlockContentDashboardChange dashboard = 5;
        BlockContentMediaChange media = 6;
    }
}

message BlockChanges {
    repeated BlockAtomicChange changes = 1;
}

// models
//

message Block {
    BlockHeader header = 1;

    oneof content {
        BlockContentDashboard dashboard = 11;
        BlockContentPage page = 12;
        BlockContentDataview dataview = 13;

        BlockContentText text = 14;
        BlockContentMedia media = 15;
        BlockContentLayout layout = 16;
    }
}

message BlockHeader {
    string id = 1;
    BlockType type = 2;
    Struct fields = 3;
    BlockPermissions permissions = 4;
}

// row/column type specified in the header
message BlockContentLayout {
    Style style = 1;
    
    enum Style {
        ROW = 0;
        COLUMN = 1;
    }    
}

message BlockPermissions {
    bool read = 1;
    bool edit = 2;
    bool remove = 3;
    bool drag = 4;
    bool dropOn = 5;
}

enum BlockType {
    DASHBOARD = 0;
    PAGE = 1;
    DATAVIEW = 2;

    TEXT = 101;
    FILE = 102;
    PICTURE = 103;
    VIDEO = 104;
    BOOKMARK = 105;

    LAYOUT = 201;
}

message BlockHeadersList {
    repeated BlockHeader headers = 1;
}

message BlocksList {
    repeated Block blocks = 1;
}

message BlockContentPage {
    enum Style {
        EMPTY = 0;
        TASK = 1;
        BOOKMARK = 2;
        SET = 3;
        // ...
    }

    Style style = 1;
    BlockStructure structure = 2;
    BlocksList blocks = 3;
}

message BlockStructure {
    map<string, BlockChildren> blockIdToBlockChildren = 1;
}

message BlockChildren {
    repeated string children = 2;
}

message BlockContentDashboard {
    enum Style {
        MAIN_SCREEN = 0;
        // ...
    }

    Style style = 1;
    BlockStructure structure = 2;
    BlockHeadersList headers = 3;
}

message BlockContentDataview {
    // ...
}

message BlockContentText {
    enum Style {
        p = 0;
        h1 = 1;
        h2 = 2;
        h3 = 3;
        h4 = 4;
        quote = 5;
        code = 6;
    }

    enum MarkerType {
        none = 0;
        number = 1;
        bullet = 2;
    }

    message Marks {
        repeated Mark marks = 1;
    }

    message Mark {

        enum Type {
            STRIKETHROUGH = 0;
            KEYBOARD = 1;
            ITALIC = 2;
            BOLD = 3;
            LINK = 4;
        }

        Range range = 1;
        Type type = 2;
        string param = 3; // link, color, etc
    }

    string text = 1;
    Style style = 2;
    Marks marksList = 3;

    bool toggleable = 4;
    MarkerType markerType = 5;

    bool checkable = 6;
    bool checked = 7;
}

message VideoPreview {
    bytes thumbnail = 1;
    string name = 2;
    int32 width = 3;
}

message ImagePreview {
    bytes thumbnail = 1;
    string name = 2;
    int32 width = 3;
}

message FilePreview {
    string name = 1;
    string icon = 2;
}

message BlockContentMedia {
    bytes content = 1;
    State state = 2;

    oneof preview {
        VideoPreview video = 101;
        ImagePreview image = 102;
        FilePreview file = 103;
    }

    enum State {
        EMPTY = 0;
        UPLOADING = 1;
        PREVIEW = 2;
        DOWNLOADING = 3;
        DONE = 4;
    }
}

message Range {
    int32 from = 1;
    int32 to = 2;
}

/*
message Scheme {
    oneof scheme {
        PageScheme pageScheme = 1;
        DataviewScheme dataviewScheme = 2;
    }
}

message DataviewScheme {
    // ...
}

message PageScheme {
    BlockHeader header = 1;
    BlockChildrenList structure = 2;
    BlockHeadersList headers = 3;
}

message BlockContentPreview {
    oneof preview {
        bool noPreview = 1;
        ImagePreview imagePreview = 2;
        VideoPreview videoPreview = 3;
        FilePreview filePreview = 4;
        TextPreview textPreview = 5;
        EmptyPagePreview emptyPagePreview = 6;
        TaskPagePreview taskPagePreview = 7;
    }
} 

message ImagePreview {
    string name = 1;
    int32 height = 2;
    int32 width = 3;
}

message VideoPreview {
    string name = 1;
    int32 height = 2;
    int32 width = 3;
}

message FilePreview {
    string name = 1;
    string icon = 2;
}

message TextPreview {
    int32 symblos = 1;
    BlockContentText.Style style = 2;
} 

message EmptyPagePreview {
    string name = 1;
    string icon = 2;
}

message TaskPagePreview {
    string header = 1;
    string assignee = 2;
    // ...
}  
*/