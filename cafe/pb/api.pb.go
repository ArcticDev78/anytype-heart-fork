// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cafe/pb/api.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this login flow used to verify that requests initiated by specific user & device address
type WithSignature struct {
	AccountAddress   string `protobuf:"bytes,1,opt,name=accountAddress,proto3" json:"accountAddress,omitempty"`
	DeviceAddress    string `protobuf:"bytes,2,opt,name=deviceAddress,proto3" json:"deviceAddress,omitempty"`
	AccountSignature string `protobuf:"bytes,3,opt,name=accountSignature,proto3" json:"accountSignature,omitempty"`
	DeviceSignature  string `protobuf:"bytes,4,opt,name=deviceSignature,proto3" json:"deviceSignature,omitempty"`
}

func (m *WithSignature) Reset()         { *m = WithSignature{} }
func (m *WithSignature) String() string { return proto.CompactTextString(m) }
func (*WithSignature) ProtoMessage()    {}
func (*WithSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c15031a0ec80478, []int{0}
}
func (m *WithSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithSignature.Merge(m, src)
}
func (m *WithSignature) XXX_Size() int {
	return m.Size()
}
func (m *WithSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_WithSignature.DiscardUnknown(m)
}

var xxx_messageInfo_WithSignature proto.InternalMessageInfo

func (m *WithSignature) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *WithSignature) GetDeviceAddress() string {
	if m != nil {
		return m.DeviceAddress
	}
	return ""
}

func (m *WithSignature) GetAccountSignature() string {
	if m != nil {
		return m.AccountSignature
	}
	return ""
}

func (m *WithSignature) GetDeviceSignature() string {
	if m != nil {
		return m.DeviceSignature
	}
	return ""
}

// 1st step: send an empty authCode and get the authCode in the response
// 2nd step: send the authCode you've got in the 1st step and get the token in the response
type AuthGetTokenRequest struct {
	AuthCode  string         `protobuf:"bytes,1,opt,name=authCode,proto3" json:"authCode,omitempty"`
	Signature *WithSignature `protobuf:"bytes,100,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *AuthGetTokenRequest) Reset()         { *m = AuthGetTokenRequest{} }
func (m *AuthGetTokenRequest) String() string { return proto.CompactTextString(m) }
func (*AuthGetTokenRequest) ProtoMessage()    {}
func (*AuthGetTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c15031a0ec80478, []int{1}
}
func (m *AuthGetTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthGetTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthGetTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthGetTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthGetTokenRequest.Merge(m, src)
}
func (m *AuthGetTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthGetTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthGetTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthGetTokenRequest proto.InternalMessageInfo

func (m *AuthGetTokenRequest) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

func (m *AuthGetTokenRequest) GetSignature() *WithSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AuthGetTokenResponse struct {
	// Types that are valid to be assigned to TwoStepFlow:
	//	*AuthGetTokenResponseTwoStepFlowOfAuthCode
	//	*AuthGetTokenResponseTwoStepFlowOfToken
	TwoStepFlow IsAuthGetTokenResponseTwoStepFlow `protobuf_oneof:"twoStepFlow"`
}

func (m *AuthGetTokenResponse) Reset()         { *m = AuthGetTokenResponse{} }
func (m *AuthGetTokenResponse) String() string { return proto.CompactTextString(m) }
func (*AuthGetTokenResponse) ProtoMessage()    {}
func (*AuthGetTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c15031a0ec80478, []int{2}
}
func (m *AuthGetTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthGetTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthGetTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthGetTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthGetTokenResponse.Merge(m, src)
}
func (m *AuthGetTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthGetTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthGetTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthGetTokenResponse proto.InternalMessageInfo

type IsAuthGetTokenResponseTwoStepFlow interface {
	IsAuthGetTokenResponseTwoStepFlow()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AuthGetTokenResponseTwoStepFlowOfAuthCode struct {
	AuthCode string `protobuf:"bytes,1,opt,name=authCode,proto3,oneof" json:"authCode,omitempty"`
}
type AuthGetTokenResponseTwoStepFlowOfToken struct {
	Token *AuthGetTokenResponseTokenInfo `protobuf:"bytes,2,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*AuthGetTokenResponseTwoStepFlowOfAuthCode) IsAuthGetTokenResponseTwoStepFlow() {}
func (*AuthGetTokenResponseTwoStepFlowOfToken) IsAuthGetTokenResponseTwoStepFlow()    {}

func (m *AuthGetTokenResponse) GetTwoStepFlow() IsAuthGetTokenResponseTwoStepFlow {
	if m != nil {
		return m.TwoStepFlow
	}
	return nil
}

func (m *AuthGetTokenResponse) GetAuthCode() string {
	if x, ok := m.GetTwoStepFlow().(*AuthGetTokenResponseTwoStepFlowOfAuthCode); ok {
		return x.AuthCode
	}
	return ""
}

func (m *AuthGetTokenResponse) GetToken() *AuthGetTokenResponseTokenInfo {
	if x, ok := m.GetTwoStepFlow().(*AuthGetTokenResponseTwoStepFlowOfToken); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AuthGetTokenResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AuthGetTokenResponseTwoStepFlowOfAuthCode)(nil),
		(*AuthGetTokenResponseTwoStepFlowOfToken)(nil),
	}
}

type AuthGetTokenResponseTokenInfo struct {
	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ExpiresAt int64  `protobuf:"varint,2,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
}

func (m *AuthGetTokenResponseTokenInfo) Reset()         { *m = AuthGetTokenResponseTokenInfo{} }
func (m *AuthGetTokenResponseTokenInfo) String() string { return proto.CompactTextString(m) }
func (*AuthGetTokenResponseTokenInfo) ProtoMessage()    {}
func (*AuthGetTokenResponseTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c15031a0ec80478, []int{2, 0}
}
func (m *AuthGetTokenResponseTokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthGetTokenResponseTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthGetTokenResponseTokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthGetTokenResponseTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthGetTokenResponseTokenInfo.Merge(m, src)
}
func (m *AuthGetTokenResponseTokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *AuthGetTokenResponseTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthGetTokenResponseTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AuthGetTokenResponseTokenInfo proto.InternalMessageInfo

func (m *AuthGetTokenResponseTokenInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AuthGetTokenResponseTokenInfo) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

type ThreadLogFollowRequest struct {
	Addr      []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	FollowKey []byte `protobuf:"bytes,2,opt,name=followKey,proto3" json:"followKey,omitempty"`
}

func (m *ThreadLogFollowRequest) Reset()         { *m = ThreadLogFollowRequest{} }
func (m *ThreadLogFollowRequest) String() string { return proto.CompactTextString(m) }
func (*ThreadLogFollowRequest) ProtoMessage()    {}
func (*ThreadLogFollowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c15031a0ec80478, []int{3}
}
func (m *ThreadLogFollowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreadLogFollowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreadLogFollowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreadLogFollowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreadLogFollowRequest.Merge(m, src)
}
func (m *ThreadLogFollowRequest) XXX_Size() int {
	return m.Size()
}
func (m *ThreadLogFollowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreadLogFollowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThreadLogFollowRequest proto.InternalMessageInfo

func (m *ThreadLogFollowRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *ThreadLogFollowRequest) GetFollowKey() []byte {
	if m != nil {
		return m.FollowKey
	}
	return nil
}

type ThreadLogFollowResponse struct {
}

func (m *ThreadLogFollowResponse) Reset()         { *m = ThreadLogFollowResponse{} }
func (m *ThreadLogFollowResponse) String() string { return proto.CompactTextString(m) }
func (*ThreadLogFollowResponse) ProtoMessage()    {}
func (*ThreadLogFollowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c15031a0ec80478, []int{4}
}
func (m *ThreadLogFollowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreadLogFollowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreadLogFollowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreadLogFollowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreadLogFollowResponse.Merge(m, src)
}
func (m *ThreadLogFollowResponse) XXX_Size() int {
	return m.Size()
}
func (m *ThreadLogFollowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreadLogFollowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ThreadLogFollowResponse proto.InternalMessageInfo

type FilePinRequest struct {
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *FilePinRequest) Reset()         { *m = FilePinRequest{} }
func (m *FilePinRequest) String() string { return proto.CompactTextString(m) }
func (*FilePinRequest) ProtoMessage()    {}
func (*FilePinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c15031a0ec80478, []int{5}
}
func (m *FilePinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilePinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilePinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilePinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilePinRequest.Merge(m, src)
}
func (m *FilePinRequest) XXX_Size() int {
	return m.Size()
}
func (m *FilePinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FilePinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FilePinRequest proto.InternalMessageInfo

func (m *FilePinRequest) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type FilePinResponse struct {
}

func (m *FilePinResponse) Reset()         { *m = FilePinResponse{} }
func (m *FilePinResponse) String() string { return proto.CompactTextString(m) }
func (*FilePinResponse) ProtoMessage()    {}
func (*FilePinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c15031a0ec80478, []int{6}
}
func (m *FilePinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilePinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilePinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilePinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilePinResponse.Merge(m, src)
}
func (m *FilePinResponse) XXX_Size() int {
	return m.Size()
}
func (m *FilePinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FilePinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FilePinResponse proto.InternalMessageInfo

type ProfileFindRequest struct {
	AccountAddrs []string `protobuf:"bytes,1,rep,name=accountAddrs,proto3" json:"accountAddrs,omitempty"`
}

func (m *ProfileFindRequest) Reset()         { *m = ProfileFindRequest{} }
func (m *ProfileFindRequest) String() string { return proto.CompactTextString(m) }
func (*ProfileFindRequest) ProtoMessage()    {}
func (*ProfileFindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c15031a0ec80478, []int{7}
}
func (m *ProfileFindRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileFindRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileFindRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileFindRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileFindRequest.Merge(m, src)
}
func (m *ProfileFindRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProfileFindRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileFindRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileFindRequest proto.InternalMessageInfo

func (m *ProfileFindRequest) GetAccountAddrs() []string {
	if m != nil {
		return m.AccountAddrs
	}
	return nil
}

type ProfileFindResponse struct {
	AccountAddr string `protobuf:"bytes,1,opt,name=accountAddr,proto3" json:"accountAddr,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AvatarHash  string `protobuf:"bytes,3,opt,name=avatarHash,proto3" json:"avatarHash,omitempty"`
	AvatarColor string `protobuf:"bytes,4,opt,name=avatarColor,proto3" json:"avatarColor,omitempty"`
}

func (m *ProfileFindResponse) Reset()         { *m = ProfileFindResponse{} }
func (m *ProfileFindResponse) String() string { return proto.CompactTextString(m) }
func (*ProfileFindResponse) ProtoMessage()    {}
func (*ProfileFindResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c15031a0ec80478, []int{8}
}
func (m *ProfileFindResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileFindResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileFindResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileFindResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileFindResponse.Merge(m, src)
}
func (m *ProfileFindResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProfileFindResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileFindResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileFindResponse proto.InternalMessageInfo

func (m *ProfileFindResponse) GetAccountAddr() string {
	if m != nil {
		return m.AccountAddr
	}
	return ""
}

func (m *ProfileFindResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileFindResponse) GetAvatarHash() string {
	if m != nil {
		return m.AvatarHash
	}
	return ""
}

func (m *ProfileFindResponse) GetAvatarColor() string {
	if m != nil {
		return m.AvatarColor
	}
	return ""
}

func init() {
	proto.RegisterType((*WithSignature)(nil), "pb.WithSignature")
	proto.RegisterType((*AuthGetTokenRequest)(nil), "pb.AuthGetTokenRequest")
	proto.RegisterType((*AuthGetTokenResponse)(nil), "pb.AuthGetTokenResponse")
	proto.RegisterType((*AuthGetTokenResponseTokenInfo)(nil), "pb.AuthGetTokenResponse.TokenInfo")
	proto.RegisterType((*ThreadLogFollowRequest)(nil), "pb.ThreadLogFollowRequest")
	proto.RegisterType((*ThreadLogFollowResponse)(nil), "pb.ThreadLogFollowResponse")
	proto.RegisterType((*FilePinRequest)(nil), "pb.FilePinRequest")
	proto.RegisterType((*FilePinResponse)(nil), "pb.FilePinResponse")
	proto.RegisterType((*ProfileFindRequest)(nil), "pb.ProfileFindRequest")
	proto.RegisterType((*ProfileFindResponse)(nil), "pb.ProfileFindResponse")
}

func init() { proto.RegisterFile("cafe/pb/api.proto", fileDescriptor_9c15031a0ec80478) }

var fileDescriptor_9c15031a0ec80478 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0xf5, 0x42, 0xfa, 0xc1, 0x00, 0x21, 0x2c, 0x51, 0xa0, 0x2e, 0xb2, 0xd0, 0xaa, 0xaa, 0x50,
	0x0f, 0x10, 0xd1, 0x1e, 0xaa, 0x5e, 0x2a, 0x88, 0x44, 0x48, 0x9b, 0x03, 0x72, 0x22, 0x55, 0xea,
	0x6d, 0x8d, 0x97, 0x60, 0xd5, 0xf5, 0xba, 0xf6, 0x12, 0xda, 0x1f, 0x51, 0xa9, 0xa7, 0xfe, 0x91,
	0xfe, 0x81, 0x1e, 0x7b, 0xcc, 0xb1, 0xc7, 0x0a, 0xfe, 0x48, 0xe5, 0x65, 0x6d, 0x6c, 0x20, 0xb7,
	0x9d, 0xc7, 0x7b, 0x6f, 0x3c, 0xf3, 0x46, 0x40, 0x75, 0x42, 0xa7, 0xac, 0xeb, 0x5b, 0x5d, 0xea,
	0x3b, 0x1d, 0x3f, 0xe0, 0x82, 0xe3, 0x9c, 0x6f, 0x91, 0x5f, 0x08, 0xca, 0x1f, 0x1c, 0x31, 0xbb,
	0x72, 0x6e, 0x3c, 0x2a, 0xe6, 0x01, 0xc3, 0xcf, 0xe1, 0x90, 0x4e, 0x26, 0x7c, 0xee, 0x89, 0xbe,
	0x6d, 0x07, 0x2c, 0x0c, 0x1b, 0xa8, 0x85, 0xda, 0x05, 0x73, 0x0b, 0xc5, 0xcf, 0xa0, 0x6c, 0xb3,
	0x5b, 0x67, 0xc2, 0x62, 0x5a, 0x4e, 0xd2, 0xb2, 0x20, 0x7e, 0x01, 0x47, 0x4a, 0x97, 0x74, 0x68,
	0xe4, 0x25, 0x71, 0x07, 0xc7, 0x6d, 0xa8, 0xac, 0xc5, 0x1b, 0xea, 0x81, 0xa4, 0x6e, 0xc3, 0xc4,
	0x82, 0x5a, 0x7f, 0x2e, 0x66, 0xe7, 0x4c, 0x5c, 0xf3, 0x4f, 0xcc, 0x33, 0xd9, 0x97, 0x39, 0x0b,
	0x05, 0xd6, 0xe1, 0x31, 0x9d, 0x8b, 0xd9, 0x19, 0xb7, 0x99, 0xfa, 0xe8, 0xa4, 0xc6, 0x5d, 0x28,
	0x84, 0x89, 0xad, 0xdd, 0x42, 0xed, 0x62, 0xaf, 0xda, 0xf1, 0xad, 0x4e, 0x66, 0x78, 0x73, 0xc3,
	0x21, 0xbf, 0x11, 0x1c, 0x67, 0x9b, 0x84, 0x3e, 0xf7, 0x42, 0x86, 0x9b, 0xdb, 0x5d, 0x46, 0x5a,
	0xaa, 0xcf, 0x1b, 0x78, 0x20, 0x22, 0xba, 0x5c, 0x47, 0xb1, 0x47, 0xa2, 0x1e, 0xfb, 0x6c, 0x3a,
	0xb2, 0xba, 0xf0, 0xa6, 0x7c, 0xa4, 0x99, 0x6b, 0x89, 0xfe, 0x16, 0x0a, 0x09, 0x8a, 0x8f, 0x63,
	0xa3, 0xf5, 0x24, 0xeb, 0x02, 0x37, 0xa1, 0xc0, 0xbe, 0xfa, 0x4e, 0xc0, 0xc2, 0xbe, 0x90, 0x2d,
	0xf2, 0xe6, 0x06, 0x18, 0x94, 0xa1, 0x28, 0x16, 0xfc, 0x4a, 0x30, 0x7f, 0xe8, 0xf2, 0x05, 0x79,
	0x07, 0x27, 0xd7, 0xb3, 0x80, 0x51, 0xfb, 0x92, 0xdf, 0x0c, 0xb9, 0xeb, 0xf2, 0x45, 0xbc, 0x29,
	0x0c, 0x07, 0xd4, 0xb6, 0x03, 0xe9, 0x5d, 0x32, 0xe5, 0x3b, 0xb2, 0x9e, 0x4a, 0xd2, 0x7b, 0xf6,
	0x4d, 0x5a, 0x97, 0xcc, 0x0d, 0x40, 0x9e, 0x40, 0x7d, 0xc7, 0x6b, 0x3d, 0x09, 0x21, 0x70, 0x38,
	0x74, 0x5c, 0x36, 0x76, 0x92, 0x20, 0x8e, 0x20, 0x3f, 0x71, 0x6c, 0xf5, 0xe5, 0xd1, 0x93, 0x54,
	0xa1, 0x92, 0x70, 0x94, 0xec, 0x35, 0xe0, 0x71, 0xc0, 0xa7, 0x8e, 0xcb, 0x86, 0x8e, 0x67, 0xc7,
	0x52, 0x02, 0xa5, 0xd4, 0xa1, 0x45, 0xc7, 0x97, 0x6f, 0x17, 0xcc, 0x0c, 0x46, 0xbe, 0x23, 0xa8,
	0x65, 0xa4, 0x2a, 0x99, 0x16, 0x14, 0x53, 0x3c, 0xd5, 0x3e, 0x0d, 0x45, 0x73, 0x7b, 0xf4, 0x33,
	0x53, 0xb7, 0x2a, 0xdf, 0xd8, 0x00, 0xa0, 0xb7, 0x54, 0xd0, 0x60, 0x44, 0xc3, 0x99, 0x3a, 0xce,
	0x14, 0x22, 0x5d, 0x65, 0x75, 0xc6, 0x5d, 0x1e, 0xa8, 0x93, 0x4c, 0x43, 0xbd, 0x9f, 0x39, 0xc8,
	0xf7, 0xc7, 0x17, 0xf8, 0x1c, 0x4a, 0xe9, 0xa8, 0x71, 0x7d, 0x37, 0x7c, 0x39, 0xa4, 0xde, 0xb8,
	0xef, 0x2a, 0x88, 0xd6, 0x46, 0xa7, 0x08, 0x5f, 0x42, 0x65, 0x6b, 0xd9, 0x58, 0x8f, 0x24, 0xfb,
	0xd3, 0xd4, 0x9f, 0xee, 0xfd, 0x2d, 0x76, 0xc4, 0xaf, 0xe0, 0x91, 0xda, 0x3d, 0xc6, 0x11, 0x33,
	0x1b, 0x96, 0x5e, 0xcb, 0x60, 0x89, 0x6a, 0x00, 0xc5, 0xd4, 0x8e, 0xf1, 0x49, 0xc4, 0xda, 0xcd,
	0x4b, 0xaf, 0xef, 0xe0, 0xb1, 0xc3, 0x29, 0x1a, 0x34, 0xff, 0x2c, 0x0d, 0x74, 0xb7, 0x34, 0xd0,
	0xbf, 0xa5, 0x81, 0x7e, 0xac, 0x0c, 0xed, 0x6e, 0x65, 0x68, 0x7f, 0x57, 0x86, 0xf6, 0x31, 0xe7,
	0x5b, 0xd6, 0x43, 0xf9, 0x37, 0xf4, 0xf2, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23, 0x1f, 0x83,
	0x44, 0x9b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	AuthGetToken(ctx context.Context, opts ...grpc.CallOption) (API_AuthGetTokenClient, error)
	ThreadLogFollow(ctx context.Context, in *ThreadLogFollowRequest, opts ...grpc.CallOption) (*ThreadLogFollowResponse, error)
	FilePin(ctx context.Context, in *FilePinRequest, opts ...grpc.CallOption) (*FilePinResponse, error)
	ProfileFind(ctx context.Context, in *ProfileFindRequest, opts ...grpc.CallOption) (API_ProfileFindClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) AuthGetToken(ctx context.Context, opts ...grpc.CallOption) (API_AuthGetTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/pb.API/AuthGetToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIAuthGetTokenClient{stream}
	return x, nil
}

type API_AuthGetTokenClient interface {
	Send(*AuthGetTokenRequest) error
	Recv() (*AuthGetTokenResponse, error)
	grpc.ClientStream
}

type aPIAuthGetTokenClient struct {
	grpc.ClientStream
}

func (x *aPIAuthGetTokenClient) Send(m *AuthGetTokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIAuthGetTokenClient) Recv() (*AuthGetTokenResponse, error) {
	m := new(AuthGetTokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) ThreadLogFollow(ctx context.Context, in *ThreadLogFollowRequest, opts ...grpc.CallOption) (*ThreadLogFollowResponse, error) {
	out := new(ThreadLogFollowResponse)
	err := c.cc.Invoke(ctx, "/pb.API/ThreadLogFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FilePin(ctx context.Context, in *FilePinRequest, opts ...grpc.CallOption) (*FilePinResponse, error) {
	out := new(FilePinResponse)
	err := c.cc.Invoke(ctx, "/pb.API/FilePin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ProfileFind(ctx context.Context, in *ProfileFindRequest, opts ...grpc.CallOption) (API_ProfileFindClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/pb.API/ProfileFind", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIProfileFindClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ProfileFindClient interface {
	Recv() (*ProfileFindResponse, error)
	grpc.ClientStream
}

type aPIProfileFindClient struct {
	grpc.ClientStream
}

func (x *aPIProfileFindClient) Recv() (*ProfileFindResponse, error) {
	m := new(ProfileFindResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	AuthGetToken(API_AuthGetTokenServer) error
	ThreadLogFollow(context.Context, *ThreadLogFollowRequest) (*ThreadLogFollowResponse, error)
	FilePin(context.Context, *FilePinRequest) (*FilePinResponse, error)
	ProfileFind(*ProfileFindRequest, API_ProfileFindServer) error
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) AuthGetToken(srv API_AuthGetTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthGetToken not implemented")
}
func (*UnimplementedAPIServer) ThreadLogFollow(ctx context.Context, req *ThreadLogFollowRequest) (*ThreadLogFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadLogFollow not implemented")
}
func (*UnimplementedAPIServer) FilePin(ctx context.Context, req *FilePinRequest) (*FilePinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilePin not implemented")
}
func (*UnimplementedAPIServer) ProfileFind(req *ProfileFindRequest, srv API_ProfileFindServer) error {
	return status.Errorf(codes.Unimplemented, "method ProfileFind not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_AuthGetToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).AuthGetToken(&aPIAuthGetTokenServer{stream})
}

type API_AuthGetTokenServer interface {
	Send(*AuthGetTokenResponse) error
	Recv() (*AuthGetTokenRequest, error)
	grpc.ServerStream
}

type aPIAuthGetTokenServer struct {
	grpc.ServerStream
}

func (x *aPIAuthGetTokenServer) Send(m *AuthGetTokenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIAuthGetTokenServer) Recv() (*AuthGetTokenRequest, error) {
	m := new(AuthGetTokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_ThreadLogFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadLogFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ThreadLogFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ThreadLogFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ThreadLogFollow(ctx, req.(*ThreadLogFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FilePin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FilePin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/FilePin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FilePin(ctx, req.(*FilePinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ProfileFind_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileFindRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ProfileFind(m, &aPIProfileFindServer{stream})
}

type API_ProfileFindServer interface {
	Send(*ProfileFindResponse) error
	grpc.ServerStream
}

type aPIProfileFindServer struct {
	grpc.ServerStream
}

func (x *aPIProfileFindServer) Send(m *ProfileFindResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ThreadLogFollow",
			Handler:    _API_ThreadLogFollow_Handler,
		},
		{
			MethodName: "FilePin",
			Handler:    _API_FilePin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AuthGetToken",
			Handler:       _API_AuthGetToken_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProfileFind",
			Handler:       _API_ProfileFind_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cafe/pb/api.proto",
}

func (m *WithSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceSignature) > 0 {
		i -= len(m.DeviceSignature)
		copy(dAtA[i:], m.DeviceSignature)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeviceSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AccountSignature) > 0 {
		i -= len(m.AccountSignature)
		copy(dAtA[i:], m.AccountSignature)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceAddress) > 0 {
		i -= len(m.DeviceAddress)
		copy(dAtA[i:], m.DeviceAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeviceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthGetTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthGetTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthGetTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.AuthCode) > 0 {
		i -= len(m.AuthCode)
		copy(dAtA[i:], m.AuthCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuthCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthGetTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthGetTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthGetTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TwoStepFlow != nil {
		{
			size := m.TwoStepFlow.Size()
			i -= size
			if _, err := m.TwoStepFlow.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthGetTokenResponseTwoStepFlowOfAuthCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthGetTokenResponseTwoStepFlowOfAuthCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AuthCode)
	copy(dAtA[i:], m.AuthCode)
	i = encodeVarintApi(dAtA, i, uint64(len(m.AuthCode)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *AuthGetTokenResponseTwoStepFlowOfToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthGetTokenResponseTwoStepFlowOfToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AuthGetTokenResponseTokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthGetTokenResponseTokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthGetTokenResponseTokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreadLogFollowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadLogFollowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreadLogFollowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FollowKey) > 0 {
		i -= len(m.FollowKey)
		copy(dAtA[i:], m.FollowKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FollowKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreadLogFollowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadLogFollowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreadLogFollowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FilePinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilePinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilePinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FilePinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilePinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilePinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ProfileFindRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileFindRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileFindRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountAddrs) > 0 {
		for iNdEx := len(m.AccountAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AccountAddrs[iNdEx])
			copy(dAtA[i:], m.AccountAddrs[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.AccountAddrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProfileFindResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileFindResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileFindResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvatarColor) > 0 {
		i -= len(m.AvatarColor)
		copy(dAtA[i:], m.AvatarColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AvatarColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AvatarHash) > 0 {
		i -= len(m.AvatarHash)
		copy(dAtA[i:], m.AvatarHash)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AvatarHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountAddr) > 0 {
		i -= len(m.AccountAddr)
		copy(dAtA[i:], m.AccountAddr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WithSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DeviceAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AccountSignature)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DeviceSignature)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AuthGetTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AuthGetTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TwoStepFlow != nil {
		n += m.TwoStepFlow.Size()
	}
	return n
}

func (m *AuthGetTokenResponseTwoStepFlowOfAuthCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthCode)
	n += 1 + l + sovApi(uint64(l))
	return n
}
func (m *AuthGetTokenResponseTwoStepFlowOfToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *AuthGetTokenResponseTokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovApi(uint64(m.ExpiresAt))
	}
	return n
}

func (m *ThreadLogFollowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FollowKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ThreadLogFollowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FilePinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *FilePinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ProfileFindRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountAddrs) > 0 {
		for _, s := range m.AccountAddrs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ProfileFindResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountAddr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AvatarHash)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AvatarColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WithSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthGetTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthGetTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthGetTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &WithSignature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthGetTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthGetTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthGetTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwoStepFlow = &AuthGetTokenResponseTwoStepFlowOfAuthCode{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthGetTokenResponseTokenInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TwoStepFlow = &AuthGetTokenResponseTwoStepFlowOfToken{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthGetTokenResponseTokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadLogFollowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadLogFollowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadLogFollowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FollowKey = append(m.FollowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.FollowKey == nil {
				m.FollowKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadLogFollowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadLogFollowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadLogFollowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilePinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilePinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilePinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilePinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilePinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilePinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileFindRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileFindRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileFindRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddrs = append(m.AccountAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileFindResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileFindResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileFindResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
